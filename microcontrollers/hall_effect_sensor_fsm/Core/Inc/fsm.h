/******************************************************************************
Finite State Machine
Project: fsm.dot
Description: G

Generated by gv_fsm ruby gem, see https://rubygems.org/gems/gv_fsm
gv_fsm version 0.5.2
Generation date: 2025-10-19 01:29:02 +0200
Generated from: fsm.dot
The finite state machine has:
  6 states
  11 transition functions

******************************************************************************/


#ifndef FSM_H
#define FSM_H
#ifdef __cplusplus
extern "C" {
#endif

// State data object
// By default set to void; override this typedef or load the proper
// header if you need
typedef void state_data_t;

// NOTHING SHALL BE CHANGED AFTER THIS LINE!

// List of states
typedef enum {
  STATE_INIT = 0,  
  STATE_WAIT_REQUEST,  
  STATE_ERROR,  
  STATE_LISTENING,  
  STATE_WARNING,  
  STATE_PAUSE,  
  NUM_STATES,
  NO_CHANGE
} state_t;

// State function and state transition prototypes
typedef state_t state_func_t(void);

// State functions
// Function to be executed in state INIT
// valid return states: STATE_WAIT_REQUEST, STATE_ERROR
state_t do_INIT(void);
// Function to be executed in state WAIT_REQUEST
// valid return states: STATE_LISTENING, STATE_ERROR
state_t do_WAIT_REQUEST(void);
// Function to be executed in state ERROR
// valid return states: NO_CHANGE
state_t do_ERROR(void);
// Function to be executed in state LISTENING
// valid return states: STATE_WARNING, STATE_ERROR, STATE_PAUSE
state_t do_LISTENING(void);
// Function to be executed in state WARNING
// valid return states: STATE_WAIT_REQUEST, STATE_ERROR
state_t do_WARNING(void);
// Function to be executed in state PAUSE
// valid return states: STATE_LISTENING, STATE_ERROR
state_t do_PAUSE(void);

// List of state functions
extern state_func_t *const state_table[NUM_STATES];

// state manager
state_t run_state(state_t cur_state);

#ifdef __cplusplus
}
#endif
#endif // FSM_H