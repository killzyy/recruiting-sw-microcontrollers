
build/debug/hall_effect_sensor_fsm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ea0  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08001f60  08001f60  00002f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001ff4  08001ff4  0000300c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08001ff4  08001ff4  0000300c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08001ff4  08001ff4  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001ff4  08001ff4  00002ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001ff8  08001ff8  00002ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001ffc  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001dc  2000000c  08002008  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e8  08002008  000031e8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .comment      00000038  00000000  00000000  00003034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fcf4  00000000  00000000  0000306c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002215  00000000  00000000  00012d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00005f83  00000000  00000000  00014f75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000920  00000000  00000000  0001aef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000809  00000000  00000000  0001b818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c06a  00000000  00000000  0001c021  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000334b  00000000  00000000  0002808b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000016a0  00000000  00000000  0002b3d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  0002ca78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <strlen>:
 80000c0:	2300      	movs	r3, #0
 80000c2:	5cc2      	ldrb	r2, [r0, r3]
 80000c4:	3301      	adds	r3, #1
 80000c6:	2a00      	cmp	r2, #0
 80000c8:	d1fb      	bne.n	80000c2 <strlen+0x2>
 80000ca:	1e58      	subs	r0, r3, #1
 80000cc:	4770      	bx	lr
	...

080000d0 <__udivsi3>:
 80000d0:	2200      	movs	r2, #0
 80000d2:	0843      	lsrs	r3, r0, #1
 80000d4:	428b      	cmp	r3, r1
 80000d6:	d374      	bcc.n	80001c2 <__udivsi3+0xf2>
 80000d8:	0903      	lsrs	r3, r0, #4
 80000da:	428b      	cmp	r3, r1
 80000dc:	d35f      	bcc.n	800019e <__udivsi3+0xce>
 80000de:	0a03      	lsrs	r3, r0, #8
 80000e0:	428b      	cmp	r3, r1
 80000e2:	d344      	bcc.n	800016e <__udivsi3+0x9e>
 80000e4:	0b03      	lsrs	r3, r0, #12
 80000e6:	428b      	cmp	r3, r1
 80000e8:	d328      	bcc.n	800013c <__udivsi3+0x6c>
 80000ea:	0c03      	lsrs	r3, r0, #16
 80000ec:	428b      	cmp	r3, r1
 80000ee:	d30d      	bcc.n	800010c <__udivsi3+0x3c>
 80000f0:	22ff      	movs	r2, #255	@ 0xff
 80000f2:	0209      	lsls	r1, r1, #8
 80000f4:	ba12      	rev	r2, r2
 80000f6:	0c03      	lsrs	r3, r0, #16
 80000f8:	428b      	cmp	r3, r1
 80000fa:	d302      	bcc.n	8000102 <__udivsi3+0x32>
 80000fc:	1212      	asrs	r2, r2, #8
 80000fe:	0209      	lsls	r1, r1, #8
 8000100:	d065      	beq.n	80001ce <__udivsi3+0xfe>
 8000102:	0b03      	lsrs	r3, r0, #12
 8000104:	428b      	cmp	r3, r1
 8000106:	d319      	bcc.n	800013c <__udivsi3+0x6c>
 8000108:	e000      	b.n	800010c <__udivsi3+0x3c>
 800010a:	0a09      	lsrs	r1, r1, #8
 800010c:	0bc3      	lsrs	r3, r0, #15
 800010e:	428b      	cmp	r3, r1
 8000110:	d301      	bcc.n	8000116 <__udivsi3+0x46>
 8000112:	03cb      	lsls	r3, r1, #15
 8000114:	1ac0      	subs	r0, r0, r3
 8000116:	4152      	adcs	r2, r2
 8000118:	0b83      	lsrs	r3, r0, #14
 800011a:	428b      	cmp	r3, r1
 800011c:	d301      	bcc.n	8000122 <__udivsi3+0x52>
 800011e:	038b      	lsls	r3, r1, #14
 8000120:	1ac0      	subs	r0, r0, r3
 8000122:	4152      	adcs	r2, r2
 8000124:	0b43      	lsrs	r3, r0, #13
 8000126:	428b      	cmp	r3, r1
 8000128:	d301      	bcc.n	800012e <__udivsi3+0x5e>
 800012a:	034b      	lsls	r3, r1, #13
 800012c:	1ac0      	subs	r0, r0, r3
 800012e:	4152      	adcs	r2, r2
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d301      	bcc.n	800013a <__udivsi3+0x6a>
 8000136:	030b      	lsls	r3, r1, #12
 8000138:	1ac0      	subs	r0, r0, r3
 800013a:	4152      	adcs	r2, r2
 800013c:	0ac3      	lsrs	r3, r0, #11
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x76>
 8000142:	02cb      	lsls	r3, r1, #11
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0a83      	lsrs	r3, r0, #10
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x82>
 800014e:	028b      	lsls	r3, r1, #10
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0a43      	lsrs	r3, r0, #9
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x8e>
 800015a:	024b      	lsls	r3, r1, #9
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0a03      	lsrs	r3, r0, #8
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x9a>
 8000166:	020b      	lsls	r3, r1, #8
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	d2cd      	bcs.n	800010a <__udivsi3+0x3a>
 800016e:	09c3      	lsrs	r3, r0, #7
 8000170:	428b      	cmp	r3, r1
 8000172:	d301      	bcc.n	8000178 <__udivsi3+0xa8>
 8000174:	01cb      	lsls	r3, r1, #7
 8000176:	1ac0      	subs	r0, r0, r3
 8000178:	4152      	adcs	r2, r2
 800017a:	0983      	lsrs	r3, r0, #6
 800017c:	428b      	cmp	r3, r1
 800017e:	d301      	bcc.n	8000184 <__udivsi3+0xb4>
 8000180:	018b      	lsls	r3, r1, #6
 8000182:	1ac0      	subs	r0, r0, r3
 8000184:	4152      	adcs	r2, r2
 8000186:	0943      	lsrs	r3, r0, #5
 8000188:	428b      	cmp	r3, r1
 800018a:	d301      	bcc.n	8000190 <__udivsi3+0xc0>
 800018c:	014b      	lsls	r3, r1, #5
 800018e:	1ac0      	subs	r0, r0, r3
 8000190:	4152      	adcs	r2, r2
 8000192:	0903      	lsrs	r3, r0, #4
 8000194:	428b      	cmp	r3, r1
 8000196:	d301      	bcc.n	800019c <__udivsi3+0xcc>
 8000198:	010b      	lsls	r3, r1, #4
 800019a:	1ac0      	subs	r0, r0, r3
 800019c:	4152      	adcs	r2, r2
 800019e:	08c3      	lsrs	r3, r0, #3
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xd8>
 80001a4:	00cb      	lsls	r3, r1, #3
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0883      	lsrs	r3, r0, #2
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xe4>
 80001b0:	008b      	lsls	r3, r1, #2
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0843      	lsrs	r3, r0, #1
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xf0>
 80001bc:	004b      	lsls	r3, r1, #1
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	1a41      	subs	r1, r0, r1
 80001c4:	d200      	bcs.n	80001c8 <__udivsi3+0xf8>
 80001c6:	4601      	mov	r1, r0
 80001c8:	4152      	adcs	r2, r2
 80001ca:	4610      	mov	r0, r2
 80001cc:	4770      	bx	lr
 80001ce:	e7ff      	b.n	80001d0 <__udivsi3+0x100>
 80001d0:	b501      	push	{r0, lr}
 80001d2:	2000      	movs	r0, #0
 80001d4:	f000 f806 	bl	80001e4 <__aeabi_idiv0>
 80001d8:	bd02      	pop	{r1, pc}
 80001da:	46c0      	nop			@ (mov r8, r8)

080001dc <__aeabi_uidivmod>:
 80001dc:	2900      	cmp	r1, #0
 80001de:	d0f7      	beq.n	80001d0 <__udivsi3+0x100>
 80001e0:	e776      	b.n	80000d0 <__udivsi3>
 80001e2:	4770      	bx	lr

080001e4 <__aeabi_idiv0>:
 80001e4:	4770      	bx	lr
 80001e6:	46c0      	nop			@ (mov r8, r8)

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c06      	ldr	r4, [pc, #24]	@ (8000204 <__do_global_dtors_aux+0x1c>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d107      	bne.n	8000202 <__do_global_dtors_aux+0x1a>
 80001f2:	4b05      	ldr	r3, [pc, #20]	@ (8000208 <__do_global_dtors_aux+0x20>)
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d002      	beq.n	80001fe <__do_global_dtors_aux+0x16>
 80001f8:	4804      	ldr	r0, [pc, #16]	@ (800020c <__do_global_dtors_aux+0x24>)
 80001fa:	e000      	b.n	80001fe <__do_global_dtors_aux+0x16>
 80001fc:	bf00      	nop
 80001fe:	2301      	movs	r3, #1
 8000200:	7023      	strb	r3, [r4, #0]
 8000202:	bd10      	pop	{r4, pc}
 8000204:	2000000c 	.word	0x2000000c
 8000208:	00000000 	.word	0x00000000
 800020c:	08001f48 	.word	0x08001f48

08000210 <frame_dummy>:
 8000210:	4b04      	ldr	r3, [pc, #16]	@ (8000224 <frame_dummy+0x14>)
 8000212:	b510      	push	{r4, lr}
 8000214:	2b00      	cmp	r3, #0
 8000216:	d003      	beq.n	8000220 <frame_dummy+0x10>
 8000218:	4903      	ldr	r1, [pc, #12]	@ (8000228 <frame_dummy+0x18>)
 800021a:	4804      	ldr	r0, [pc, #16]	@ (800022c <frame_dummy+0x1c>)
 800021c:	e000      	b.n	8000220 <frame_dummy+0x10>
 800021e:	bf00      	nop
 8000220:	bd10      	pop	{r4, pc}
 8000222:	46c0      	nop			@ (mov r8, r8)
 8000224:	00000000 	.word	0x00000000
 8000228:	20000010 	.word	0x20000010
 800022c:	08001f48 	.word	0x08001f48

08000230 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000230:	b510      	push	{r4, lr}
 8000232:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000234:	ac03      	add	r4, sp, #12
 8000236:	2214      	movs	r2, #20
 8000238:	2100      	movs	r1, #0
 800023a:	0020      	movs	r0, r4
 800023c:	f001 fe57 	bl	8001eee <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000240:	4b15      	ldr	r3, [pc, #84]	@ (8000298 <MX_GPIO_Init+0x68>)
 8000242:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000244:	2204      	movs	r2, #4
 8000246:	4311      	orrs	r1, r2
 8000248:	6359      	str	r1, [r3, #52]	@ 0x34
 800024a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800024c:	400a      	ands	r2, r1
 800024e:	9200      	str	r2, [sp, #0]
 8000250:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000252:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000254:	2220      	movs	r2, #32
 8000256:	4311      	orrs	r1, r2
 8000258:	6359      	str	r1, [r3, #52]	@ 0x34
 800025a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800025c:	400a      	ands	r2, r1
 800025e:	9201      	str	r2, [sp, #4]
 8000260:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000262:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000264:	2201      	movs	r2, #1
 8000266:	4311      	orrs	r1, r2
 8000268:	6359      	str	r1, [r3, #52]	@ 0x34
 800026a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800026c:	4013      	ands	r3, r2
 800026e:	9302      	str	r3, [sp, #8]
 8000270:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin : HALL_DIGITAL_Pin */
  GPIO_InitStruct.Pin = HALL_DIGITAL_Pin;
 8000272:	9203      	str	r2, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000274:	4b09      	ldr	r3, [pc, #36]	@ (800029c <MX_GPIO_Init+0x6c>)
 8000276:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(HALL_DIGITAL_GPIO_Port, &GPIO_InitStruct);
 8000278:	20a0      	movs	r0, #160	@ 0xa0
 800027a:	0021      	movs	r1, r4
 800027c:	05c0      	lsls	r0, r0, #23
 800027e:	f000 fdf5 	bl	8000e6c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000282:	2200      	movs	r2, #0
 8000284:	2100      	movs	r1, #0
 8000286:	2005      	movs	r0, #5
 8000288:	f000 fc12 	bl	8000ab0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800028c:	2005      	movs	r0, #5
 800028e:	f000 fc13 	bl	8000ab8 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000292:	b008      	add	sp, #32
 8000294:	bd10      	pop	{r4, pc}
 8000296:	46c0      	nop			@ (mov r8, r8)
 8000298:	40021000 	.word	0x40021000
 800029c:	10310000 	.word	0x10310000

080002a0 <MX_DMA_Init>:
{
 80002a0:	b500      	push	{lr}
 80002a2:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002a4:	4a0d      	ldr	r2, [pc, #52]	@ (80002dc <MX_DMA_Init+0x3c>)
 80002a6:	6b91      	ldr	r1, [r2, #56]	@ 0x38
 80002a8:	2301      	movs	r3, #1
 80002aa:	4319      	orrs	r1, r3
 80002ac:	6391      	str	r1, [r2, #56]	@ 0x38
 80002ae:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80002b0:	4013      	ands	r3, r2
 80002b2:	9301      	str	r3, [sp, #4]
 80002b4:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80002b6:	2200      	movs	r2, #0
 80002b8:	2100      	movs	r1, #0
 80002ba:	2009      	movs	r0, #9
 80002bc:	f000 fbf8 	bl	8000ab0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80002c0:	2009      	movs	r0, #9
 80002c2:	f000 fbf9 	bl	8000ab8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80002c6:	2200      	movs	r2, #0
 80002c8:	2100      	movs	r1, #0
 80002ca:	200a      	movs	r0, #10
 80002cc:	f000 fbf0 	bl	8000ab0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80002d0:	200a      	movs	r0, #10
 80002d2:	f000 fbf1 	bl	8000ab8 <HAL_NVIC_EnableIRQ>
}
 80002d6:	b003      	add	sp, #12
 80002d8:	bd00      	pop	{pc}
 80002da:	46c0      	nop			@ (mov r8, r8)
 80002dc:	40021000 	.word	0x40021000

080002e0 <DMATransferComplete>:

/* USER CODE BEGIN 4 */

void DMATransferComplete(DMA_HandleTypeDef* hdma)
{
 80002e0:	b510      	push	{r4, lr}
  huart2.Instance->CR3 &= ~USART_CR3_DMAT;
 80002e2:	4b06      	ldr	r3, [pc, #24]	@ (80002fc <DMATransferComplete+0x1c>)
 80002e4:	681a      	ldr	r2, [r3, #0]
 80002e6:	6893      	ldr	r3, [r2, #8]
 80002e8:	2180      	movs	r1, #128	@ 0x80
 80002ea:	438b      	bics	r3, r1
 80002ec:	6093      	str	r3, [r2, #8]
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80002ee:	20a0      	movs	r0, #160	@ 0xa0
 80002f0:	3960      	subs	r1, #96	@ 0x60
 80002f2:	05c0      	lsls	r0, r0, #23
 80002f4:	f000 fe9e 	bl	8001034 <HAL_GPIO_TogglePin>
}
 80002f8:	bd10      	pop	{r4, pc}
 80002fa:	46c0      	nop			@ (mov r8, r8)
 80002fc:	20000084 	.word	0x20000084

08000300 <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000300:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000302:	e7fe      	b.n	8000302 <Error_Handler+0x2>

08000304 <MX_ADC1_Init>:
{
 8000304:	b500      	push	{lr}
 8000306:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8000308:	220c      	movs	r2, #12
 800030a:	2100      	movs	r1, #0
 800030c:	a801      	add	r0, sp, #4
 800030e:	f001 fdee 	bl	8001eee <memset>
  hadc1.Instance = ADC1;
 8000312:	4818      	ldr	r0, [pc, #96]	@ (8000374 <MX_ADC1_Init+0x70>)
 8000314:	4b18      	ldr	r3, [pc, #96]	@ (8000378 <MX_ADC1_Init+0x74>)
 8000316:	6003      	str	r3, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000318:	2380      	movs	r3, #128	@ 0x80
 800031a:	05db      	lsls	r3, r3, #23
 800031c:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800031e:	2300      	movs	r3, #0
 8000320:	6083      	str	r3, [r0, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000322:	60c3      	str	r3, [r0, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_SEQ_FIXED;
 8000324:	2280      	movs	r2, #128	@ 0x80
 8000326:	0612      	lsls	r2, r2, #24
 8000328:	6102      	str	r2, [r0, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800032a:	2204      	movs	r2, #4
 800032c:	6142      	str	r2, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800032e:	7603      	strb	r3, [r0, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000330:	7643      	strb	r3, [r0, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000332:	3a03      	subs	r2, #3
 8000334:	7682      	strb	r2, [r0, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000336:	61c2      	str	r2, [r0, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000338:	6243      	str	r3, [r0, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800033a:	6283      	str	r3, [r0, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800033c:	212c      	movs	r1, #44	@ 0x2c
 800033e:	5442      	strb	r2, [r0, r1]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000340:	6303      	str	r3, [r0, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000342:	6343      	str	r3, [r0, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000344:	323b      	adds	r2, #59	@ 0x3b
 8000346:	5483      	strb	r3, [r0, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000348:	64c3      	str	r3, [r0, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800034a:	f000 f905 	bl	8000558 <HAL_ADC_Init>
 800034e:	2800      	cmp	r0, #0
 8000350:	d10b      	bne.n	800036a <MX_ADC1_Init+0x66>
  sConfig.Channel = ADC_CHANNEL_1;
 8000352:	a901      	add	r1, sp, #4
 8000354:	4b09      	ldr	r3, [pc, #36]	@ (800037c <MX_ADC1_Init+0x78>)
 8000356:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000358:	2301      	movs	r3, #1
 800035a:	604b      	str	r3, [r1, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800035c:	4805      	ldr	r0, [pc, #20]	@ (8000374 <MX_ADC1_Init+0x70>)
 800035e:	f000 fa1b 	bl	8000798 <HAL_ADC_ConfigChannel>
 8000362:	2800      	cmp	r0, #0
 8000364:	d103      	bne.n	800036e <MX_ADC1_Init+0x6a>
}
 8000366:	b005      	add	sp, #20
 8000368:	bd00      	pop	{pc}
    Error_Handler();
 800036a:	f7ff ffc9 	bl	8000300 <Error_Handler>
    Error_Handler();
 800036e:	f7ff ffc7 	bl	8000300 <Error_Handler>
 8000372:	46c0      	nop			@ (mov r8, r8)
 8000374:	20000174 	.word	0x20000174
 8000378:	40012400 	.word	0x40012400
 800037c:	04000002 	.word	0x04000002

08000380 <MX_USART2_UART_Init>:
{
 8000380:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 8000382:	480c      	ldr	r0, [pc, #48]	@ (80003b4 <MX_USART2_UART_Init+0x34>)
 8000384:	4b0c      	ldr	r3, [pc, #48]	@ (80003b8 <MX_USART2_UART_Init+0x38>)
 8000386:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8000388:	23e1      	movs	r3, #225	@ 0xe1
 800038a:	025b      	lsls	r3, r3, #9
 800038c:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800038e:	2300      	movs	r3, #0
 8000390:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000392:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000394:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000396:	220c      	movs	r2, #12
 8000398:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800039a:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800039c:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800039e:	6203      	str	r3, [r0, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80003a0:	6243      	str	r3, [r0, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003a2:	6283      	str	r3, [r0, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003a4:	f001 fc7c 	bl	8001ca0 <HAL_UART_Init>
 80003a8:	2800      	cmp	r0, #0
 80003aa:	d100      	bne.n	80003ae <MX_USART2_UART_Init+0x2e>
}
 80003ac:	bd10      	pop	{r4, pc}
    Error_Handler();
 80003ae:	f7ff ffa7 	bl	8000300 <Error_Handler>
 80003b2:	46c0      	nop			@ (mov r8, r8)
 80003b4:	20000084 	.word	0x20000084
 80003b8:	40004400 	.word	0x40004400

080003bc <SystemClock_Config>:
{
 80003bc:	b510      	push	{r4, lr}
 80003be:	b08c      	sub	sp, #48	@ 0x30
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003c0:	ac05      	add	r4, sp, #20
 80003c2:	221c      	movs	r2, #28
 80003c4:	2100      	movs	r1, #0
 80003c6:	0020      	movs	r0, r4
 80003c8:	f001 fd91 	bl	8001eee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003cc:	2214      	movs	r2, #20
 80003ce:	2100      	movs	r1, #0
 80003d0:	4668      	mov	r0, sp
 80003d2:	f001 fd8c 	bl	8001eee <memset>
  __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_1);
 80003d6:	4912      	ldr	r1, [pc, #72]	@ (8000420 <SystemClock_Config+0x64>)
 80003d8:	680b      	ldr	r3, [r1, #0]
 80003da:	2207      	movs	r2, #7
 80003dc:	4393      	bics	r3, r2
 80003de:	3a06      	subs	r2, #6
 80003e0:	4313      	orrs	r3, r2
 80003e2:	600b      	str	r3, [r1, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003e4:	9205      	str	r2, [sp, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003e6:	2380      	movs	r3, #128	@ 0x80
 80003e8:	025b      	lsls	r3, r3, #9
 80003ea:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003ec:	0020      	movs	r0, r4
 80003ee:	f000 ff05 	bl	80011fc <HAL_RCC_OscConfig>
 80003f2:	2800      	cmp	r0, #0
 80003f4:	d10f      	bne.n	8000416 <SystemClock_Config+0x5a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003f6:	4668      	mov	r0, sp
 80003f8:	2307      	movs	r3, #7
 80003fa:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80003fc:	3b06      	subs	r3, #6
 80003fe:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000400:	2300      	movs	r3, #0
 8000402:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000404:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000406:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000408:	2101      	movs	r1, #1
 800040a:	f001 f883 	bl	8001514 <HAL_RCC_ClockConfig>
 800040e:	2800      	cmp	r0, #0
 8000410:	d103      	bne.n	800041a <SystemClock_Config+0x5e>
}
 8000412:	b00c      	add	sp, #48	@ 0x30
 8000414:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000416:	f7ff ff73 	bl	8000300 <Error_Handler>
    Error_Handler();
 800041a:	f7ff ff71 	bl	8000300 <Error_Handler>
 800041e:	46c0      	nop			@ (mov r8, r8)
 8000420:	40022000 	.word	0x40022000

08000424 <main>:
{
 8000424:	b570      	push	{r4, r5, r6, lr}
 8000426:	b084      	sub	sp, #16
  char msg[] = "Hello, world!\r\n";
 8000428:	466a      	mov	r2, sp
 800042a:	4b19      	ldr	r3, [pc, #100]	@ (8000490 <main+0x6c>)
 800042c:	cb31      	ldmia	r3!, {r0, r4, r5}
 800042e:	c231      	stmia	r2!, {r0, r4, r5}
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	6013      	str	r3, [r2, #0]
  HAL_Init();
 8000434:	f000 f860 	bl	80004f8 <HAL_Init>
  SystemClock_Config();
 8000438:	f7ff ffc0 	bl	80003bc <SystemClock_Config>
  MX_GPIO_Init();
 800043c:	f7ff fef8 	bl	8000230 <MX_GPIO_Init>
  MX_DMA_Init();
 8000440:	f7ff ff2e 	bl	80002a0 <MX_DMA_Init>
  MX_ADC1_Init();
 8000444:	f7ff ff5e 	bl	8000304 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000448:	f7ff ff9a 	bl	8000380 <MX_USART2_UART_Init>
  HAL_DMA_RegisterCallback(&hdma_usart2_tx, HAL_DMA_XFER_CPLT_CB_ID, &DMATransferComplete);
 800044c:	4a11      	ldr	r2, [pc, #68]	@ (8000494 <main+0x70>)
 800044e:	4812      	ldr	r0, [pc, #72]	@ (8000498 <main+0x74>)
 8000450:	2100      	movs	r1, #0
 8000452:	f000 fca3 	bl	8000d9c <HAL_DMA_RegisterCallback>
  BSP_LED_Init(LED_GREEN);
 8000456:	2000      	movs	r0, #0
 8000458:	f001 fc7c 	bl	8001d54 <BSP_LED_Init>
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 800045c:	2101      	movs	r1, #1
 800045e:	2000      	movs	r0, #0
 8000460:	f001 fcba 	bl	8001dd8 <BSP_PB_Init>
    huart2.Instance->CR3 |= USART_CR3_DMAT;
 8000464:	4b0d      	ldr	r3, [pc, #52]	@ (800049c <main+0x78>)
 8000466:	681c      	ldr	r4, [r3, #0]
 8000468:	68a3      	ldr	r3, [r4, #8]
 800046a:	2180      	movs	r1, #128	@ 0x80
 800046c:	430b      	orrs	r3, r1
 800046e:	60a3      	str	r3, [r4, #8]
    HAL_DMA_Start_IT(&hdma_usart2_tx, (uint32_t)msg, (uint32_t)&huart2.Instance->TDR, strlen(msg));
 8000470:	3428      	adds	r4, #40	@ 0x28
 8000472:	4668      	mov	r0, sp
 8000474:	f7ff fe24 	bl	80000c0 <strlen>
 8000478:	0003      	movs	r3, r0
 800047a:	4d07      	ldr	r5, [pc, #28]	@ (8000498 <main+0x74>)
 800047c:	0022      	movs	r2, r4
 800047e:	4669      	mov	r1, sp
 8000480:	0028      	movs	r0, r5
 8000482:	f000 fbd5 	bl	8000c30 <HAL_DMA_Start_IT>
    HAL_Delay(1000);
 8000486:	20fa      	movs	r0, #250	@ 0xfa
 8000488:	0080      	lsls	r0, r0, #2
 800048a:	f000 f853 	bl	8000534 <HAL_Delay>
  while (1)
 800048e:	e7e9      	b.n	8000464 <main+0x40>
 8000490:	08001f60 	.word	0x08001f60
 8000494:	080002e1 	.word	0x080002e1
 8000498:	20000028 	.word	0x20000028
 800049c:	20000084 	.word	0x20000084

080004a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004a0:	b510      	push	{r4, lr}
 80004a2:	0004      	movs	r4, r0
  HAL_StatusTypeDef  status = HAL_OK;

  if ((uint32_t)uwTickFreq != 0UL)
 80004a4:	4b11      	ldr	r3, [pc, #68]	@ (80004ec <HAL_InitTick+0x4c>)
 80004a6:	7819      	ldrb	r1, [r3, #0]
 80004a8:	2900      	cmp	r1, #0
 80004aa:	d101      	bne.n	80004b0 <HAL_InitTick+0x10>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 80004ac:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80004ae:	bd10      	pop	{r4, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 80004b0:	20fa      	movs	r0, #250	@ 0xfa
 80004b2:	0080      	lsls	r0, r0, #2
 80004b4:	f7ff fe0c 	bl	80000d0 <__udivsi3>
 80004b8:	0001      	movs	r1, r0
 80004ba:	4b0d      	ldr	r3, [pc, #52]	@ (80004f0 <HAL_InitTick+0x50>)
 80004bc:	6818      	ldr	r0, [r3, #0]
 80004be:	f7ff fe07 	bl	80000d0 <__udivsi3>
 80004c2:	f000 fb05 	bl	8000ad0 <HAL_SYSTICK_Config>
 80004c6:	2800      	cmp	r0, #0
 80004c8:	d10d      	bne.n	80004e6 <HAL_InitTick+0x46>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004ca:	2c03      	cmp	r4, #3
 80004cc:	d901      	bls.n	80004d2 <HAL_InitTick+0x32>
        status = HAL_ERROR;
 80004ce:	2001      	movs	r0, #1
 80004d0:	e7ed      	b.n	80004ae <HAL_InitTick+0xe>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004d2:	3001      	adds	r0, #1
 80004d4:	2200      	movs	r2, #0
 80004d6:	0021      	movs	r1, r4
 80004d8:	4240      	negs	r0, r0
 80004da:	f000 fae9 	bl	8000ab0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80004de:	4b05      	ldr	r3, [pc, #20]	@ (80004f4 <HAL_InitTick+0x54>)
 80004e0:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 80004e2:	2000      	movs	r0, #0
 80004e4:	e7e3      	b.n	80004ae <HAL_InitTick+0xe>
      status = HAL_ERROR;
 80004e6:	2001      	movs	r0, #1
 80004e8:	e7e1      	b.n	80004ae <HAL_InitTick+0xe>
 80004ea:	46c0      	nop			@ (mov r8, r8)
 80004ec:	20000000 	.word	0x20000000
 80004f0:	20000008 	.word	0x20000008
 80004f4:	20000004 	.word	0x20000004

080004f8 <HAL_Init>:
{
 80004f8:	b510      	push	{r4, lr}
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80004fa:	2003      	movs	r0, #3
 80004fc:	f7ff ffd0 	bl	80004a0 <HAL_InitTick>
 8000500:	1e04      	subs	r4, r0, #0
 8000502:	d002      	beq.n	800050a <HAL_Init+0x12>
    status = HAL_ERROR;
 8000504:	2401      	movs	r4, #1
}
 8000506:	0020      	movs	r0, r4
 8000508:	bd10      	pop	{r4, pc}
    HAL_MspInit();
 800050a:	f000 fdb5 	bl	8001078 <HAL_MspInit>
 800050e:	e7fa      	b.n	8000506 <HAL_Init+0xe>

08000510 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000510:	4b03      	ldr	r3, [pc, #12]	@ (8000520 <HAL_IncTick+0x10>)
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	4a03      	ldr	r2, [pc, #12]	@ (8000524 <HAL_IncTick+0x14>)
 8000516:	6811      	ldr	r1, [r2, #0]
 8000518:	185b      	adds	r3, r3, r1
 800051a:	6013      	str	r3, [r2, #0]
}
 800051c:	4770      	bx	lr
 800051e:	46c0      	nop			@ (mov r8, r8)
 8000520:	20000000 	.word	0x20000000
 8000524:	200001d8 	.word	0x200001d8

08000528 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000528:	4b01      	ldr	r3, [pc, #4]	@ (8000530 <HAL_GetTick+0x8>)
 800052a:	6818      	ldr	r0, [r3, #0]
}
 800052c:	4770      	bx	lr
 800052e:	46c0      	nop			@ (mov r8, r8)
 8000530:	200001d8 	.word	0x200001d8

08000534 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000534:	b570      	push	{r4, r5, r6, lr}
 8000536:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000538:	f7ff fff6 	bl	8000528 <HAL_GetTick>
 800053c:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800053e:	1c63      	adds	r3, r4, #1
 8000540:	d002      	beq.n	8000548 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000542:	4b04      	ldr	r3, [pc, #16]	@ (8000554 <HAL_Delay+0x20>)
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	18e4      	adds	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000548:	f7ff ffee 	bl	8000528 <HAL_GetTick>
 800054c:	1b40      	subs	r0, r0, r5
 800054e:	42a0      	cmp	r0, r4
 8000550:	d3fa      	bcc.n	8000548 <HAL_Delay+0x14>
  {
  }
}
 8000552:	bd70      	pop	{r4, r5, r6, pc}
 8000554:	20000000 	.word	0x20000000

08000558 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000558:	b530      	push	{r4, r5, lr}
 800055a:	b083      	sub	sp, #12
 800055c:	0004      	movs	r4, r0
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800055e:	2300      	movs	r3, #0
 8000560:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8000562:	2800      	cmp	r0, #0
 8000564:	d100      	bne.n	8000568 <HAL_ADC_Init+0x10>
 8000566:	e105      	b.n	8000774 <HAL_ADC_Init+0x21c>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000568:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 800056a:	2b00      	cmp	r3, #0
 800056c:	d012      	beq.n	8000594 <HAL_ADC_Init+0x3c>

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800056e:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000570:	689a      	ldr	r2, [r3, #8]
 8000572:	00d2      	lsls	r2, r2, #3
 8000574:	d41b      	bmi.n	80005ae <HAL_ADC_Init+0x56>
  MODIFY_REG(ADCx->CR,
 8000576:	6899      	ldr	r1, [r3, #8]
 8000578:	4a7f      	ldr	r2, [pc, #508]	@ (8000778 <HAL_ADC_Init+0x220>)
 800057a:	4011      	ands	r1, r2
 800057c:	2280      	movs	r2, #128	@ 0x80
 800057e:	0552      	lsls	r2, r2, #21
 8000580:	430a      	orrs	r2, r1
 8000582:	609a      	str	r2, [r3, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000584:	4b7d      	ldr	r3, [pc, #500]	@ (800077c <HAL_ADC_Init+0x224>)
 8000586:	6818      	ldr	r0, [r3, #0]
 8000588:	497d      	ldr	r1, [pc, #500]	@ (8000780 <HAL_ADC_Init+0x228>)
 800058a:	f7ff fda1 	bl	80000d0 <__udivsi3>
 800058e:	0040      	lsls	r0, r0, #1
 8000590:	9001      	str	r0, [sp, #4]
    while (wait_loop_index != 0UL)
 8000592:	e009      	b.n	80005a8 <HAL_ADC_Init+0x50>
    HAL_ADC_MspInit(hadc);
 8000594:	f000 fd88 	bl	80010a8 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8000598:	2300      	movs	r3, #0
 800059a:	65e3      	str	r3, [r4, #92]	@ 0x5c
    hadc->Lock = HAL_UNLOCKED;
 800059c:	2254      	movs	r2, #84	@ 0x54
 800059e:	54a3      	strb	r3, [r4, r2]
 80005a0:	e7e5      	b.n	800056e <HAL_ADC_Init+0x16>
    {
      wait_loop_index--;
 80005a2:	9b01      	ldr	r3, [sp, #4]
 80005a4:	3b01      	subs	r3, #1
 80005a6:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80005a8:	9b01      	ldr	r3, [sp, #4]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d1f9      	bne.n	80005a2 <HAL_ADC_Init+0x4a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80005ae:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80005b0:	689a      	ldr	r2, [r3, #8]
 80005b2:	00d2      	lsls	r2, r2, #3
 80005b4:	d500      	bpl.n	80005b8 <HAL_ADC_Init+0x60>
 80005b6:	e09d      	b.n	80006f4 <HAL_ADC_Init+0x19c>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80005b8:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 80005ba:	2110      	movs	r1, #16
 80005bc:	430a      	orrs	r2, r1
 80005be:	65a2      	str	r2, [r4, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80005c0:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80005c2:	390f      	subs	r1, #15
 80005c4:	430a      	orrs	r2, r1
 80005c6:	65e2      	str	r2, [r4, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80005c8:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80005ca:	689a      	ldr	r2, [r3, #8]
 80005cc:	2104      	movs	r1, #4
 80005ce:	000d      	movs	r5, r1
 80005d0:	4015      	ands	r5, r2
 80005d2:	4211      	tst	r1, r2
 80005d4:	d000      	beq.n	80005d8 <HAL_ADC_Init+0x80>
 80005d6:	2501      	movs	r5, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80005d8:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 80005da:	06d2      	lsls	r2, r2, #27
 80005dc:	d500      	bpl.n	80005e0 <HAL_ADC_Init+0x88>
 80005de:	e0c2      	b.n	8000766 <HAL_ADC_Init+0x20e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80005e0:	2d00      	cmp	r5, #0
 80005e2:	d000      	beq.n	80005e6 <HAL_ADC_Init+0x8e>
 80005e4:	e0bf      	b.n	8000766 <HAL_ADC_Init+0x20e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80005e6:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 80005e8:	4966      	ldr	r1, [pc, #408]	@ (8000784 <HAL_ADC_Init+0x22c>)
 80005ea:	400a      	ands	r2, r1
 80005ec:	3106      	adds	r1, #6
 80005ee:	31ff      	adds	r1, #255	@ 0xff
 80005f0:	430a      	orrs	r2, r1
 80005f2:	65a2      	str	r2, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80005f4:	689a      	ldr	r2, [r3, #8]
 80005f6:	07d2      	lsls	r2, r2, #31
 80005f8:	d452      	bmi.n	80006a0 <HAL_ADC_Init+0x148>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths: temperature sensor, Vref             */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80005fa:	68a2      	ldr	r2, [r4, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80005fc:	7e21      	ldrb	r1, [r4, #24]
 80005fe:	0389      	lsls	r1, r1, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000600:	430a      	orrs	r2, r1
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000602:	7e61      	ldrb	r1, [r4, #25]
 8000604:	03c9      	lsls	r1, r1, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000606:	430a      	orrs	r2, r1
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000608:	7ea5      	ldrb	r5, [r4, #26]
 800060a:	0369      	lsls	r1, r5, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800060c:	430a      	orrs	r2, r1
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800060e:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8000610:	2900      	cmp	r1, #0
 8000612:	d001      	beq.n	8000618 <HAL_ADC_Init+0xc0>
 8000614:	2180      	movs	r1, #128	@ 0x80
 8000616:	0149      	lsls	r1, r1, #5
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000618:	430a      	orrs	r2, r1
                   hadc->Init.DataAlign                                           |
 800061a:	68e1      	ldr	r1, [r4, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800061c:	430a      	orrs	r2, r1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800061e:	6921      	ldr	r1, [r4, #16]
 8000620:	2900      	cmp	r1, #0
 8000622:	db69      	blt.n	80006f8 <HAL_ADC_Init+0x1a0>
 8000624:	2180      	movs	r1, #128	@ 0x80
 8000626:	0389      	lsls	r1, r1, #14
                   hadc->Init.DataAlign                                           |
 8000628:	430a      	orrs	r2, r1
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800062a:	212c      	movs	r1, #44	@ 0x2c
 800062c:	5c61      	ldrb	r1, [r4, r1]
 800062e:	0049      	lsls	r1, r1, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000630:	430a      	orrs	r2, r1

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000632:	2120      	movs	r1, #32
 8000634:	5c61      	ldrb	r1, [r4, r1]
 8000636:	2901      	cmp	r1, #1
 8000638:	d061      	beq.n	80006fe <HAL_ADC_Init+0x1a6>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800063a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800063c:	2900      	cmp	r1, #0
 800063e:	d005      	beq.n	800064c <HAL_ADC_Init+0xf4>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000640:	25e0      	movs	r5, #224	@ 0xe0
 8000642:	006d      	lsls	r5, r5, #1
 8000644:	4029      	ands	r1, r5
                     hadc->Init.ExternalTrigConvEdge);
 8000646:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000648:	4329      	orrs	r1, r5
 800064a:	430a      	orrs	r2, r1
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800064c:	68d9      	ldr	r1, [r3, #12]
 800064e:	4d4e      	ldr	r5, [pc, #312]	@ (8000788 <HAL_ADC_Init+0x230>)
 8000650:	4029      	ands	r1, r5
 8000652:	430a      	orrs	r2, r1
 8000654:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000656:	6863      	ldr	r3, [r4, #4]
 8000658:	0f9b      	lsrs	r3, r3, #30
 800065a:	079b      	lsls	r3, r3, #30
                   hadc->Init.TriggerFrequencyMode
 800065c:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800065e:	431a      	orrs	r2, r3
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8000660:	213c      	movs	r1, #60	@ 0x3c
 8000662:	5c61      	ldrb	r1, [r4, r1]
 8000664:	2901      	cmp	r1, #1
 8000666:	d059      	beq.n	800071c <HAL_ADC_Init+0x1c4>
                     hadc->Init.Oversampling.RightBitShift |
                     hadc->Init.Oversampling.TriggeredMode
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8000668:	6821      	ldr	r1, [r4, #0]
 800066a:	690b      	ldr	r3, [r1, #16]
 800066c:	4d47      	ldr	r5, [pc, #284]	@ (800078c <HAL_ADC_Init+0x234>)
 800066e:	402b      	ands	r3, r5
 8000670:	4313      	orrs	r3, r2
 8000672:	610b      	str	r3, [r1, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000674:	6863      	ldr	r3, [r4, #4]
 8000676:	22c0      	movs	r2, #192	@ 0xc0
 8000678:	0612      	lsls	r2, r2, #24
 800067a:	4293      	cmp	r3, r2
 800067c:	d010      	beq.n	80006a0 <HAL_ADC_Init+0x148>
 800067e:	2280      	movs	r2, #128	@ 0x80
 8000680:	05d2      	lsls	r2, r2, #23
 8000682:	4293      	cmp	r3, r2
 8000684:	d00c      	beq.n	80006a0 <HAL_ADC_Init+0x148>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000686:	2280      	movs	r2, #128	@ 0x80
 8000688:	0612      	lsls	r2, r2, #24
 800068a:	4293      	cmp	r3, r2
 800068c:	d008      	beq.n	80006a0 <HAL_ADC_Init+0x148>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 800068e:	4940      	ldr	r1, [pc, #256]	@ (8000790 <HAL_ADC_Init+0x238>)
 8000690:	680a      	ldr	r2, [r1, #0]
 8000692:	4d40      	ldr	r5, [pc, #256]	@ (8000794 <HAL_ADC_Init+0x23c>)
 8000694:	402a      	ands	r2, r5
 8000696:	25f0      	movs	r5, #240	@ 0xf0
 8000698:	03ad      	lsls	r5, r5, #14
 800069a:	402b      	ands	r3, r5
 800069c:	4313      	orrs	r3, r2
 800069e:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80006a0:	6821      	ldr	r1, [r4, #0]
 80006a2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
  MODIFY_REG(ADCx->SMPR,
 80006a4:	694a      	ldr	r2, [r1, #20]
 80006a6:	2507      	movs	r5, #7
 80006a8:	43aa      	bics	r2, r5
 80006aa:	4313      	orrs	r3, r2
 80006ac:	614b      	str	r3, [r1, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80006ae:	6821      	ldr	r1, [r4, #0]
 80006b0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80006b2:	694b      	ldr	r3, [r1, #20]
 80006b4:	3569      	adds	r5, #105	@ 0x69
 80006b6:	43ab      	bics	r3, r5
 80006b8:	0112      	lsls	r2, r2, #4
 80006ba:	4313      	orrs	r3, r2
 80006bc:	614b      	str	r3, [r1, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80006be:	6923      	ldr	r3, [r4, #16]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d135      	bne.n	8000730 <HAL_ADC_Init+0x1d8>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80006c4:	6822      	ldr	r2, [r4, #0]
 80006c6:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80006c8:	3b10      	subs	r3, #16
 80006ca:	430b      	orrs	r3, r1
 80006cc:	6293      	str	r3, [r2, #40]	@ 0x28
    {
      /* Nothing to do */
    }
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80006ce:	6823      	ldr	r3, [r4, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80006d0:	695a      	ldr	r2, [r3, #20]
 80006d2:	2307      	movs	r3, #7
 80006d4:	4013      	ands	r3, r2
        == hadc->Init.SamplingTimeCommon1)
 80006d6:	6b62      	ldr	r2, [r4, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80006d8:	429a      	cmp	r2, r3
 80006da:	d03b      	beq.n	8000754 <HAL_ADC_Init+0x1fc>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80006dc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80006de:	2212      	movs	r2, #18
 80006e0:	4393      	bics	r3, r2
 80006e2:	3a02      	subs	r2, #2
 80006e4:	4313      	orrs	r3, r2
 80006e6:	65a3      	str	r3, [r4, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80006e8:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80006ea:	3a0f      	subs	r2, #15
 80006ec:	4313      	orrs	r3, r2
 80006ee:	65e3      	str	r3, [r4, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 80006f0:	2001      	movs	r0, #1
 80006f2:	e03d      	b.n	8000770 <HAL_ADC_Init+0x218>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80006f4:	2000      	movs	r0, #0
 80006f6:	e768      	b.n	80005ca <HAL_ADC_Init+0x72>
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80006f8:	0049      	lsls	r1, r1, #1
 80006fa:	0849      	lsrs	r1, r1, #1
 80006fc:	e794      	b.n	8000628 <HAL_ADC_Init+0xd0>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80006fe:	2d00      	cmp	r5, #0
 8000700:	d103      	bne.n	800070a <HAL_ADC_Init+0x1b2>
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000702:	2180      	movs	r1, #128	@ 0x80
 8000704:	0249      	lsls	r1, r1, #9
 8000706:	430a      	orrs	r2, r1
 8000708:	e797      	b.n	800063a <HAL_ADC_Init+0xe2>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800070a:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 800070c:	2520      	movs	r5, #32
 800070e:	4329      	orrs	r1, r5
 8000710:	65a1      	str	r1, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000712:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8000714:	3d1f      	subs	r5, #31
 8000716:	4329      	orrs	r1, r5
 8000718:	65e1      	str	r1, [r4, #92]	@ 0x5c
 800071a:	e78e      	b.n	800063a <HAL_ADC_Init+0xe2>
                     hadc->Init.Oversampling.Ratio         |
 800071c:	6c21      	ldr	r1, [r4, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800071e:	430b      	orrs	r3, r1
                     hadc->Init.Oversampling.RightBitShift |
 8000720:	6c61      	ldr	r1, [r4, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 8000722:	430b      	orrs	r3, r1
                     hadc->Init.Oversampling.TriggeredMode
 8000724:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8000726:	430b      	orrs	r3, r1
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8000728:	4313      	orrs	r3, r2
 800072a:	2201      	movs	r2, #1
 800072c:	431a      	orrs	r2, r3
 800072e:	e79b      	b.n	8000668 <HAL_ADC_Init+0x110>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000730:	2280      	movs	r2, #128	@ 0x80
 8000732:	0392      	lsls	r2, r2, #14
 8000734:	4293      	cmp	r3, r2
 8000736:	d1ca      	bne.n	80006ce <HAL_ADC_Init+0x176>
      MODIFY_REG(hadc->Instance->CHSELR,
 8000738:	6821      	ldr	r1, [r4, #0]
 800073a:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 800073c:	69e3      	ldr	r3, [r4, #28]
 800073e:	3b01      	subs	r3, #1
 8000740:	009b      	lsls	r3, r3, #2
 8000742:	221c      	movs	r2, #28
 8000744:	401a      	ands	r2, r3
 8000746:	2310      	movs	r3, #16
 8000748:	425b      	negs	r3, r3
 800074a:	4093      	lsls	r3, r2
 800074c:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800074e:	4313      	orrs	r3, r2
 8000750:	628b      	str	r3, [r1, #40]	@ 0x28
 8000752:	e7bc      	b.n	80006ce <HAL_ADC_Init+0x176>
      ADC_CLEAR_ERRORCODE(hadc);
 8000754:	2300      	movs	r3, #0
 8000756:	65e3      	str	r3, [r4, #92]	@ 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 8000758:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800075a:	2203      	movs	r2, #3
 800075c:	4393      	bics	r3, r2
 800075e:	3a02      	subs	r2, #2
 8000760:	4313      	orrs	r3, r2
 8000762:	65a3      	str	r3, [r4, #88]	@ 0x58
 8000764:	e004      	b.n	8000770 <HAL_ADC_Init+0x218>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000766:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8000768:	2210      	movs	r2, #16
 800076a:	4313      	orrs	r3, r2
 800076c:	65a3      	str	r3, [r4, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800076e:	2001      	movs	r0, #1
  }

  /* Return function status */
  return tmp_hal_status;
}
 8000770:	b003      	add	sp, #12
 8000772:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8000774:	2001      	movs	r0, #1
 8000776:	e7fb      	b.n	8000770 <HAL_ADC_Init+0x218>
 8000778:	6fffffe8 	.word	0x6fffffe8
 800077c:	20000008 	.word	0x20000008
 8000780:	00030d40 	.word	0x00030d40
 8000784:	fffffefd 	.word	0xfffffefd
 8000788:	ffde0201 	.word	0xffde0201
 800078c:	1ffffc02 	.word	0x1ffffc02
 8000790:	40012708 	.word	0x40012708
 8000794:	ffc3ffff 	.word	0xffc3ffff

08000798 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 8000798:	b5f0      	push	{r4, r5, r6, r7, lr}
 800079a:	b083      	sub	sp, #12
 800079c:	0004      	movs	r4, r0
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800079e:	2300      	movs	r3, #0
 80007a0:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(sConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80007a2:	6905      	ldr	r5, [r0, #16]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80007a4:	3354      	adds	r3, #84	@ 0x54
 80007a6:	5cc3      	ldrb	r3, [r0, r3]
 80007a8:	2b01      	cmp	r3, #1
 80007aa:	d100      	bne.n	80007ae <HAL_ADC_ConfigChannel+0x16>
 80007ac:	e121      	b.n	80009f2 <HAL_ADC_ConfigChannel+0x25a>
 80007ae:	2354      	movs	r3, #84	@ 0x54
 80007b0:	2201      	movs	r2, #1
 80007b2:	54c2      	strb	r2, [r0, r3]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor       */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80007b4:	6800      	ldr	r0, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80007b6:	6883      	ldr	r3, [r0, #8]
 80007b8:	3203      	adds	r2, #3
 80007ba:	0016      	movs	r6, r2
 80007bc:	401e      	ands	r6, r3
 80007be:	421a      	tst	r2, r3
 80007c0:	d009      	beq.n	80007d6 <HAL_ADC_ConfigChannel+0x3e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80007c2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80007c4:	321c      	adds	r2, #28
 80007c6:	4313      	orrs	r3, r2
 80007c8:	65a3      	str	r3, [r4, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80007ca:	2001      	movs	r0, #1
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80007cc:	2354      	movs	r3, #84	@ 0x54
 80007ce:	2200      	movs	r2, #0
 80007d0:	54e2      	strb	r2, [r4, r3]

  /* Return function status */
  return tmp_hal_status;
}
 80007d2:	b003      	add	sp, #12
 80007d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (sConfig->Rank != ADC_RANK_NONE)
 80007d6:	684b      	ldr	r3, [r1, #4]
 80007d8:	2b02      	cmp	r3, #2
 80007da:	d100      	bne.n	80007de <HAL_ADC_ConfigChannel+0x46>
 80007dc:	e0d5      	b.n	800098a <HAL_ADC_ConfigChannel+0x1f2>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80007de:	2280      	movs	r2, #128	@ 0x80
 80007e0:	0612      	lsls	r2, r2, #24
 80007e2:	4295      	cmp	r5, r2
 80007e4:	d025      	beq.n	8000832 <HAL_ADC_ConfigChannel+0x9a>
 80007e6:	4a84      	ldr	r2, [pc, #528]	@ (80009f8 <HAL_ADC_ConfigChannel+0x260>)
 80007e8:	4295      	cmp	r5, r2
 80007ea:	d022      	beq.n	8000832 <HAL_ADC_ConfigChannel+0x9a>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80007ec:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 80007ee:	271f      	movs	r7, #31
 80007f0:	401f      	ands	r7, r3
 80007f2:	250f      	movs	r5, #15
 80007f4:	40bd      	lsls	r5, r7
 80007f6:	43aa      	bics	r2, r5
 80007f8:	680b      	ldr	r3, [r1, #0]
 80007fa:	025d      	lsls	r5, r3, #9
 80007fc:	d12f      	bne.n	800085e <HAL_ADC_ConfigChannel+0xc6>
 80007fe:	0e9b      	lsrs	r3, r3, #26
 8000800:	261f      	movs	r6, #31
 8000802:	401e      	ands	r6, r3
 8000804:	40be      	lsls	r6, r7
 8000806:	4332      	orrs	r2, r6
 8000808:	6622      	str	r2, [r4, #96]	@ 0x60
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800080a:	684d      	ldr	r5, [r1, #4]
 800080c:	08ab      	lsrs	r3, r5, #2
 800080e:	3301      	adds	r3, #1
 8000810:	69e2      	ldr	r2, [r4, #28]
 8000812:	4293      	cmp	r3, r2
 8000814:	d813      	bhi.n	800083e <HAL_ADC_ConfigChannel+0xa6>
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8000816:	680e      	ldr	r6, [r1, #0]
  MODIFY_REG(ADCx->CHSELR,
 8000818:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800081a:	231f      	movs	r3, #31
 800081c:	401d      	ands	r5, r3
 800081e:	3b10      	subs	r3, #16
 8000820:	001f      	movs	r7, r3
 8000822:	40af      	lsls	r7, r5
 8000824:	43ba      	bics	r2, r7
 8000826:	0eb6      	lsrs	r6, r6, #26
 8000828:	4033      	ands	r3, r6
 800082a:	40ab      	lsls	r3, r5
 800082c:	4313      	orrs	r3, r2
 800082e:	6283      	str	r3, [r0, #40]	@ 0x28
}
 8000830:	e005      	b.n	800083e <HAL_ADC_ConfigChannel+0xa6>
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8000832:	680b      	ldr	r3, [r1, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000834:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8000836:	025b      	lsls	r3, r3, #9
 8000838:	0a5b      	lsrs	r3, r3, #9
 800083a:	4313      	orrs	r3, r2
 800083c:	6283      	str	r3, [r0, #40]	@ 0x28
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800083e:	6820      	ldr	r0, [r4, #0]
 8000840:	680b      	ldr	r3, [r1, #0]
 8000842:	688d      	ldr	r5, [r1, #8]
  MODIFY_REG(ADCx->SMPR,
 8000844:	6942      	ldr	r2, [r0, #20]
 8000846:	021b      	lsls	r3, r3, #8
 8000848:	439a      	bics	r2, r3
 800084a:	402b      	ands	r3, r5
 800084c:	4d6b      	ldr	r5, [pc, #428]	@ (80009fc <HAL_ADC_ConfigChannel+0x264>)
 800084e:	402b      	ands	r3, r5
 8000850:	4313      	orrs	r3, r2
 8000852:	6143      	str	r3, [r0, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000854:	680b      	ldr	r3, [r1, #0]
 8000856:	2b00      	cmp	r3, #0
 8000858:	db5f      	blt.n	800091a <HAL_ADC_ConfigChannel+0x182>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800085a:	2000      	movs	r0, #0
 800085c:	e7b6      	b.n	80007cc <HAL_ADC_ConfigChannel+0x34>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800085e:	07dd      	lsls	r5, r3, #31
 8000860:	d4d0      	bmi.n	8000804 <HAL_ADC_ConfigChannel+0x6c>
 8000862:	079d      	lsls	r5, r3, #30
 8000864:	d42f      	bmi.n	80008c6 <HAL_ADC_ConfigChannel+0x12e>
 8000866:	075d      	lsls	r5, r3, #29
 8000868:	d42f      	bmi.n	80008ca <HAL_ADC_ConfigChannel+0x132>
 800086a:	071d      	lsls	r5, r3, #28
 800086c:	d42f      	bmi.n	80008ce <HAL_ADC_ConfigChannel+0x136>
 800086e:	06dd      	lsls	r5, r3, #27
 8000870:	d42f      	bmi.n	80008d2 <HAL_ADC_ConfigChannel+0x13a>
 8000872:	069d      	lsls	r5, r3, #26
 8000874:	d42f      	bmi.n	80008d6 <HAL_ADC_ConfigChannel+0x13e>
 8000876:	065d      	lsls	r5, r3, #25
 8000878:	d42f      	bmi.n	80008da <HAL_ADC_ConfigChannel+0x142>
 800087a:	061d      	lsls	r5, r3, #24
 800087c:	d42f      	bmi.n	80008de <HAL_ADC_ConfigChannel+0x146>
 800087e:	05dd      	lsls	r5, r3, #23
 8000880:	d42f      	bmi.n	80008e2 <HAL_ADC_ConfigChannel+0x14a>
 8000882:	059d      	lsls	r5, r3, #22
 8000884:	d42f      	bmi.n	80008e6 <HAL_ADC_ConfigChannel+0x14e>
 8000886:	055d      	lsls	r5, r3, #21
 8000888:	d42f      	bmi.n	80008ea <HAL_ADC_ConfigChannel+0x152>
 800088a:	051d      	lsls	r5, r3, #20
 800088c:	d42f      	bmi.n	80008ee <HAL_ADC_ConfigChannel+0x156>
 800088e:	04dd      	lsls	r5, r3, #19
 8000890:	d42f      	bmi.n	80008f2 <HAL_ADC_ConfigChannel+0x15a>
 8000892:	049d      	lsls	r5, r3, #18
 8000894:	d42f      	bmi.n	80008f6 <HAL_ADC_ConfigChannel+0x15e>
 8000896:	045d      	lsls	r5, r3, #17
 8000898:	d42f      	bmi.n	80008fa <HAL_ADC_ConfigChannel+0x162>
 800089a:	041d      	lsls	r5, r3, #16
 800089c:	d42f      	bmi.n	80008fe <HAL_ADC_ConfigChannel+0x166>
 800089e:	03dd      	lsls	r5, r3, #15
 80008a0:	d42f      	bmi.n	8000902 <HAL_ADC_ConfigChannel+0x16a>
 80008a2:	039d      	lsls	r5, r3, #14
 80008a4:	d42f      	bmi.n	8000906 <HAL_ADC_ConfigChannel+0x16e>
 80008a6:	035d      	lsls	r5, r3, #13
 80008a8:	d42f      	bmi.n	800090a <HAL_ADC_ConfigChannel+0x172>
 80008aa:	031d      	lsls	r5, r3, #12
 80008ac:	d42f      	bmi.n	800090e <HAL_ADC_ConfigChannel+0x176>
 80008ae:	02dd      	lsls	r5, r3, #11
 80008b0:	d42f      	bmi.n	8000912 <HAL_ADC_ConfigChannel+0x17a>
 80008b2:	029d      	lsls	r5, r3, #10
 80008b4:	d42f      	bmi.n	8000916 <HAL_ADC_ConfigChannel+0x17e>
 80008b6:	2580      	movs	r5, #128	@ 0x80
 80008b8:	03ed      	lsls	r5, r5, #15
 80008ba:	001e      	movs	r6, r3
 80008bc:	402e      	ands	r6, r5
 80008be:	422b      	tst	r3, r5
 80008c0:	d0a0      	beq.n	8000804 <HAL_ADC_ConfigChannel+0x6c>
 80008c2:	2616      	movs	r6, #22
 80008c4:	e79e      	b.n	8000804 <HAL_ADC_ConfigChannel+0x6c>
 80008c6:	2601      	movs	r6, #1
 80008c8:	e79c      	b.n	8000804 <HAL_ADC_ConfigChannel+0x6c>
 80008ca:	2602      	movs	r6, #2
 80008cc:	e79a      	b.n	8000804 <HAL_ADC_ConfigChannel+0x6c>
 80008ce:	2603      	movs	r6, #3
 80008d0:	e798      	b.n	8000804 <HAL_ADC_ConfigChannel+0x6c>
 80008d2:	2604      	movs	r6, #4
 80008d4:	e796      	b.n	8000804 <HAL_ADC_ConfigChannel+0x6c>
 80008d6:	2605      	movs	r6, #5
 80008d8:	e794      	b.n	8000804 <HAL_ADC_ConfigChannel+0x6c>
 80008da:	2606      	movs	r6, #6
 80008dc:	e792      	b.n	8000804 <HAL_ADC_ConfigChannel+0x6c>
 80008de:	2607      	movs	r6, #7
 80008e0:	e790      	b.n	8000804 <HAL_ADC_ConfigChannel+0x6c>
 80008e2:	2608      	movs	r6, #8
 80008e4:	e78e      	b.n	8000804 <HAL_ADC_ConfigChannel+0x6c>
 80008e6:	2609      	movs	r6, #9
 80008e8:	e78c      	b.n	8000804 <HAL_ADC_ConfigChannel+0x6c>
 80008ea:	260a      	movs	r6, #10
 80008ec:	e78a      	b.n	8000804 <HAL_ADC_ConfigChannel+0x6c>
 80008ee:	260b      	movs	r6, #11
 80008f0:	e788      	b.n	8000804 <HAL_ADC_ConfigChannel+0x6c>
 80008f2:	260c      	movs	r6, #12
 80008f4:	e786      	b.n	8000804 <HAL_ADC_ConfigChannel+0x6c>
 80008f6:	260d      	movs	r6, #13
 80008f8:	e784      	b.n	8000804 <HAL_ADC_ConfigChannel+0x6c>
 80008fa:	260e      	movs	r6, #14
 80008fc:	e782      	b.n	8000804 <HAL_ADC_ConfigChannel+0x6c>
 80008fe:	260f      	movs	r6, #15
 8000900:	e780      	b.n	8000804 <HAL_ADC_ConfigChannel+0x6c>
 8000902:	2610      	movs	r6, #16
 8000904:	e77e      	b.n	8000804 <HAL_ADC_ConfigChannel+0x6c>
 8000906:	2611      	movs	r6, #17
 8000908:	e77c      	b.n	8000804 <HAL_ADC_ConfigChannel+0x6c>
 800090a:	2612      	movs	r6, #18
 800090c:	e77a      	b.n	8000804 <HAL_ADC_ConfigChannel+0x6c>
 800090e:	2613      	movs	r6, #19
 8000910:	e778      	b.n	8000804 <HAL_ADC_ConfigChannel+0x6c>
 8000912:	2614      	movs	r6, #20
 8000914:	e776      	b.n	8000804 <HAL_ADC_ConfigChannel+0x6c>
 8000916:	2615      	movs	r6, #21
 8000918:	e774      	b.n	8000804 <HAL_ADC_ConfigChannel+0x6c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 800091a:	4a39      	ldr	r2, [pc, #228]	@ (8000a00 <HAL_ADC_ConfigChannel+0x268>)
 800091c:	6811      	ldr	r1, [r2, #0]
 800091e:	22c0      	movs	r2, #192	@ 0xc0
 8000920:	0412      	lsls	r2, r2, #16
 8000922:	400a      	ands	r2, r1
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8000924:	4837      	ldr	r0, [pc, #220]	@ (8000a04 <HAL_ADC_ConfigChannel+0x26c>)
 8000926:	4283      	cmp	r3, r0
 8000928:	d004      	beq.n	8000934 <HAL_ADC_ConfigChannel+0x19c>
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800092a:	4837      	ldr	r0, [pc, #220]	@ (8000a08 <HAL_ADC_ConfigChannel+0x270>)
 800092c:	4283      	cmp	r3, r0
 800092e:	d01f      	beq.n	8000970 <HAL_ADC_ConfigChannel+0x1d8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000930:	2000      	movs	r0, #0
 8000932:	e74b      	b.n	80007cc <HAL_ADC_ConfigChannel+0x34>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8000934:	0208      	lsls	r0, r1, #8
 8000936:	d4f8      	bmi.n	800092a <HAL_ADC_ConfigChannel+0x192>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8000938:	2380      	movs	r3, #128	@ 0x80
 800093a:	041b      	lsls	r3, r3, #16
 800093c:	4313      	orrs	r3, r2
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 800093e:	4930      	ldr	r1, [pc, #192]	@ (8000a00 <HAL_ADC_ConfigChannel+0x268>)
 8000940:	680a      	ldr	r2, [r1, #0]
 8000942:	4832      	ldr	r0, [pc, #200]	@ (8000a0c <HAL_ADC_ConfigChannel+0x274>)
 8000944:	4002      	ands	r2, r0
 8000946:	4313      	orrs	r3, r2
 8000948:	600b      	str	r3, [r1, #0]
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 800094a:	4b31      	ldr	r3, [pc, #196]	@ (8000a10 <HAL_ADC_ConfigChannel+0x278>)
 800094c:	6818      	ldr	r0, [r3, #0]
 800094e:	4931      	ldr	r1, [pc, #196]	@ (8000a14 <HAL_ADC_ConfigChannel+0x27c>)
 8000950:	f7ff fbbe 	bl	80000d0 <__udivsi3>
 8000954:	0043      	lsls	r3, r0, #1
 8000956:	181b      	adds	r3, r3, r0
 8000958:	009b      	lsls	r3, r3, #2
 800095a:	3301      	adds	r3, #1
 800095c:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 800095e:	e002      	b.n	8000966 <HAL_ADC_ConfigChannel+0x1ce>
            wait_loop_index--;
 8000960:	9b01      	ldr	r3, [sp, #4]
 8000962:	3b01      	subs	r3, #1
 8000964:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 8000966:	9b01      	ldr	r3, [sp, #4]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d1f9      	bne.n	8000960 <HAL_ADC_ConfigChannel+0x1c8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800096c:	2000      	movs	r0, #0
 800096e:	e72d      	b.n	80007cc <HAL_ADC_ConfigChannel+0x34>
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8000970:	0249      	lsls	r1, r1, #9
 8000972:	d43c      	bmi.n	80009ee <HAL_ADC_ConfigChannel+0x256>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8000974:	2380      	movs	r3, #128	@ 0x80
 8000976:	03db      	lsls	r3, r3, #15
 8000978:	4313      	orrs	r3, r2
 800097a:	4921      	ldr	r1, [pc, #132]	@ (8000a00 <HAL_ADC_ConfigChannel+0x268>)
 800097c:	680a      	ldr	r2, [r1, #0]
 800097e:	4823      	ldr	r0, [pc, #140]	@ (8000a0c <HAL_ADC_ConfigChannel+0x274>)
 8000980:	4002      	ands	r2, r0
 8000982:	4313      	orrs	r3, r2
 8000984:	600b      	str	r3, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000986:	2000      	movs	r0, #0
}
 8000988:	e720      	b.n	80007cc <HAL_ADC_ConfigChannel+0x34>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800098a:	2380      	movs	r3, #128	@ 0x80
 800098c:	061b      	lsls	r3, r3, #24
 800098e:	429d      	cmp	r5, r3
 8000990:	d002      	beq.n	8000998 <HAL_ADC_ConfigChannel+0x200>
 8000992:	4b19      	ldr	r3, [pc, #100]	@ (80009f8 <HAL_ADC_ConfigChannel+0x260>)
 8000994:	429d      	cmp	r5, r3
 8000996:	d105      	bne.n	80009a4 <HAL_ADC_ConfigChannel+0x20c>
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 8000998:	680b      	ldr	r3, [r1, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800099a:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800099c:	025b      	lsls	r3, r3, #9
 800099e:	0a5b      	lsrs	r3, r3, #9
 80009a0:	439a      	bics	r2, r3
 80009a2:	6282      	str	r2, [r0, #40]	@ 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80009a4:	680b      	ldr	r3, [r1, #0]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	db01      	blt.n	80009ae <HAL_ADC_ConfigChannel+0x216>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009aa:	2000      	movs	r0, #0
 80009ac:	e70e      	b.n	80007cc <HAL_ADC_ConfigChannel+0x34>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 80009ae:	4a14      	ldr	r2, [pc, #80]	@ (8000a00 <HAL_ADC_ConfigChannel+0x268>)
 80009b0:	6812      	ldr	r2, [r2, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80009b2:	4914      	ldr	r1, [pc, #80]	@ (8000a04 <HAL_ADC_ConfigChannel+0x26c>)
 80009b4:	428b      	cmp	r3, r1
 80009b6:	d004      	beq.n	80009c2 <HAL_ADC_ConfigChannel+0x22a>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80009b8:	4913      	ldr	r1, [pc, #76]	@ (8000a08 <HAL_ADC_ConfigChannel+0x270>)
 80009ba:	428b      	cmp	r3, r1
 80009bc:	d00c      	beq.n	80009d8 <HAL_ADC_ConfigChannel+0x240>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009be:	2000      	movs	r0, #0
 80009c0:	e704      	b.n	80007cc <HAL_ADC_ConfigChannel+0x34>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80009c2:	2380      	movs	r3, #128	@ 0x80
 80009c4:	03db      	lsls	r3, r3, #15
 80009c6:	401a      	ands	r2, r3
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 80009c8:	490d      	ldr	r1, [pc, #52]	@ (8000a00 <HAL_ADC_ConfigChannel+0x268>)
 80009ca:	680b      	ldr	r3, [r1, #0]
 80009cc:	480f      	ldr	r0, [pc, #60]	@ (8000a0c <HAL_ADC_ConfigChannel+0x274>)
 80009ce:	4003      	ands	r3, r0
 80009d0:	431a      	orrs	r2, r3
 80009d2:	600a      	str	r2, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009d4:	2000      	movs	r0, #0
}
 80009d6:	e6f9      	b.n	80007cc <HAL_ADC_ConfigChannel+0x34>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80009d8:	2380      	movs	r3, #128	@ 0x80
 80009da:	041b      	lsls	r3, r3, #16
 80009dc:	401a      	ands	r2, r3
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 80009de:	4908      	ldr	r1, [pc, #32]	@ (8000a00 <HAL_ADC_ConfigChannel+0x268>)
 80009e0:	680b      	ldr	r3, [r1, #0]
 80009e2:	480a      	ldr	r0, [pc, #40]	@ (8000a0c <HAL_ADC_ConfigChannel+0x274>)
 80009e4:	4003      	ands	r3, r0
 80009e6:	431a      	orrs	r2, r3
 80009e8:	600a      	str	r2, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009ea:	2000      	movs	r0, #0
}
 80009ec:	e6ee      	b.n	80007cc <HAL_ADC_ConfigChannel+0x34>
 80009ee:	2000      	movs	r0, #0
 80009f0:	e6ec      	b.n	80007cc <HAL_ADC_ConfigChannel+0x34>
  __HAL_LOCK(hadc);
 80009f2:	2002      	movs	r0, #2
 80009f4:	e6ed      	b.n	80007d2 <HAL_ADC_ConfigChannel+0x3a>
 80009f6:	46c0      	nop			@ (mov r8, r8)
 80009f8:	80000004 	.word	0x80000004
 80009fc:	7fffff00 	.word	0x7fffff00
 8000a00:	40012708 	.word	0x40012708
 8000a04:	a4000200 	.word	0xa4000200
 8000a08:	a8000400 	.word	0xa8000400
 8000a0c:	ff3fffff 	.word	0xff3fffff
 8000a10:	20000008 	.word	0x20000008
 8000a14:	00030d40 	.word	0x00030d40

08000a18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a18:	b570      	push	{r4, r5, r6, lr}
  if ((int32_t)(IRQn) >= 0)
 8000a1a:	2800      	cmp	r0, #0
 8000a1c:	db11      	blt.n	8000a42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a1e:	0883      	lsrs	r3, r0, #2
 8000a20:	4d13      	ldr	r5, [pc, #76]	@ (8000a70 <__NVIC_SetPriority+0x58>)
 8000a22:	33c0      	adds	r3, #192	@ 0xc0
 8000a24:	009b      	lsls	r3, r3, #2
 8000a26:	595c      	ldr	r4, [r3, r5]
 8000a28:	2203      	movs	r2, #3
 8000a2a:	4010      	ands	r0, r2
 8000a2c:	00c0      	lsls	r0, r0, #3
 8000a2e:	32fc      	adds	r2, #252	@ 0xfc
 8000a30:	0016      	movs	r6, r2
 8000a32:	4086      	lsls	r6, r0
 8000a34:	43b4      	bics	r4, r6
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a36:	0189      	lsls	r1, r1, #6
 8000a38:	400a      	ands	r2, r1
 8000a3a:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a3c:	4322      	orrs	r2, r4
 8000a3e:	515a      	str	r2, [r3, r5]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000a40:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a42:	230f      	movs	r3, #15
 8000a44:	4003      	ands	r3, r0
 8000a46:	3b08      	subs	r3, #8
 8000a48:	089b      	lsrs	r3, r3, #2
 8000a4a:	3306      	adds	r3, #6
 8000a4c:	009b      	lsls	r3, r3, #2
 8000a4e:	4a09      	ldr	r2, [pc, #36]	@ (8000a74 <__NVIC_SetPriority+0x5c>)
 8000a50:	4694      	mov	ip, r2
 8000a52:	4463      	add	r3, ip
 8000a54:	685c      	ldr	r4, [r3, #4]
 8000a56:	2203      	movs	r2, #3
 8000a58:	4010      	ands	r0, r2
 8000a5a:	00c0      	lsls	r0, r0, #3
 8000a5c:	32fc      	adds	r2, #252	@ 0xfc
 8000a5e:	0015      	movs	r5, r2
 8000a60:	4085      	lsls	r5, r0
 8000a62:	43ac      	bics	r4, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a64:	0189      	lsls	r1, r1, #6
 8000a66:	400a      	ands	r2, r1
 8000a68:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a6a:	4322      	orrs	r2, r4
 8000a6c:	605a      	str	r2, [r3, #4]
}
 8000a6e:	e7e7      	b.n	8000a40 <__NVIC_SetPriority+0x28>
 8000a70:	e000e100 	.word	0xe000e100
 8000a74:	e000ed00 	.word	0xe000ed00

08000a78 <SysTick_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a78:	3801      	subs	r0, #1
 8000a7a:	2380      	movs	r3, #128	@ 0x80
 8000a7c:	045b      	lsls	r3, r3, #17
 8000a7e:	4298      	cmp	r0, r3
 8000a80:	d20f      	bcs.n	8000aa2 <SysTick_Config+0x2a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a82:	4a09      	ldr	r2, [pc, #36]	@ (8000aa8 <SysTick_Config+0x30>)
 8000a84:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a86:	4809      	ldr	r0, [pc, #36]	@ (8000aac <SysTick_Config+0x34>)
 8000a88:	6a03      	ldr	r3, [r0, #32]
 8000a8a:	021b      	lsls	r3, r3, #8
 8000a8c:	0a1b      	lsrs	r3, r3, #8
 8000a8e:	21c0      	movs	r1, #192	@ 0xc0
 8000a90:	0609      	lsls	r1, r1, #24
 8000a92:	430b      	orrs	r3, r1
 8000a94:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a96:	2300      	movs	r3, #0
 8000a98:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a9a:	3307      	adds	r3, #7
 8000a9c:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a9e:	2000      	movs	r0, #0
}
 8000aa0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000aa2:	2001      	movs	r0, #1
 8000aa4:	e7fc      	b.n	8000aa0 <SysTick_Config+0x28>
 8000aa6:	46c0      	nop			@ (mov r8, r8)
 8000aa8:	e000e010 	.word	0xe000e010
 8000aac:	e000ed00 	.word	0xe000ed00

08000ab0 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ab0:	b510      	push	{r4, lr}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000ab2:	f7ff ffb1 	bl	8000a18 <__NVIC_SetPriority>
}
 8000ab6:	bd10      	pop	{r4, pc}

08000ab8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000ab8:	2800      	cmp	r0, #0
 8000aba:	db05      	blt.n	8000ac8 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000abc:	221f      	movs	r2, #31
 8000abe:	4002      	ands	r2, r0
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	4093      	lsls	r3, r2
 8000ac4:	4a01      	ldr	r2, [pc, #4]	@ (8000acc <HAL_NVIC_EnableIRQ+0x14>)
 8000ac6:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000ac8:	4770      	bx	lr
 8000aca:	46c0      	nop			@ (mov r8, r8)
 8000acc:	e000e100 	.word	0xe000e100

08000ad0 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ad0:	b510      	push	{r4, lr}
  return SysTick_Config(TicksNumb);
 8000ad2:	f7ff ffd1 	bl	8000a78 <SysTick_Config>
}
 8000ad6:	bd10      	pop	{r4, pc}

08000ad8 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000ada:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 8000adc:	6cc5      	ldr	r5, [r0, #76]	@ 0x4c
 8000ade:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8000ae0:	6d04      	ldr	r4, [r0, #80]	@ 0x50
 8000ae2:	2c00      	cmp	r4, #0
 8000ae4:	d002      	beq.n	8000aec <DMA_SetConfig+0x14>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000ae6:	6d44      	ldr	r4, [r0, #84]	@ 0x54
 8000ae8:	6d85      	ldr	r5, [r0, #88]	@ 0x58
 8000aea:	6065      	str	r5, [r4, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8000aec:	4f0b      	ldr	r7, [pc, #44]	@ (8000b1c <DMA_SetConfig+0x44>)
 8000aee:	687c      	ldr	r4, [r7, #4]
 8000af0:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 8000af2:	261c      	movs	r6, #28
 8000af4:	402e      	ands	r6, r5
 8000af6:	2501      	movs	r5, #1
 8000af8:	40b5      	lsls	r5, r6
 8000afa:	432c      	orrs	r4, r5
 8000afc:	607c      	str	r4, [r7, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000afe:	6804      	ldr	r4, [r0, #0]
 8000b00:	6063      	str	r3, [r4, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000b02:	6883      	ldr	r3, [r0, #8]
 8000b04:	2b10      	cmp	r3, #16
 8000b06:	d004      	beq.n	8000b12 <DMA_SetConfig+0x3a>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8000b08:	6803      	ldr	r3, [r0, #0]
 8000b0a:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8000b0c:	6803      	ldr	r3, [r0, #0]
 8000b0e:	60da      	str	r2, [r3, #12]
  }
}
 8000b10:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = DstAddress;
 8000b12:	6803      	ldr	r3, [r0, #0]
 8000b14:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8000b16:	6803      	ldr	r3, [r0, #0]
 8000b18:	60d9      	str	r1, [r3, #12]
 8000b1a:	e7f9      	b.n	8000b10 <DMA_SetConfig+0x38>
 8000b1c:	40020000 	.word	0x40020000

08000b20 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8000b20:	b510      	push	{r4, lr}
 8000b22:	0004      	movs	r4, r0
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8000b24:	6803      	ldr	r3, [r0, #0]
 8000b26:	20ff      	movs	r0, #255	@ 0xff
 8000b28:	4018      	ands	r0, r3
 8000b2a:	3808      	subs	r0, #8
 8000b2c:	2114      	movs	r1, #20
 8000b2e:	f7ff facf 	bl	80000d0 <__udivsi3>
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
                                                             ((hdma->ChannelIndex >> 2U) * \
 8000b32:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000b34:	089b      	lsrs	r3, r3, #2
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 8000b36:	4a06      	ldr	r2, [pc, #24]	@ (8000b50 <DMA_CalcDMAMUXChannelBaseAndMask+0x30>)
 8000b38:	4694      	mov	ip, r2
 8000b3a:	4463      	add	r3, ip
 8000b3c:	009b      	lsls	r3, r3, #2
 8000b3e:	6463      	str	r3, [r4, #68]	@ 0x44
                                                              ((uint32_t)DMAMUX1_Channel1 - \
                                                               (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8000b40:	4b04      	ldr	r3, [pc, #16]	@ (8000b54 <DMA_CalcDMAMUXChannelBaseAndMask+0x34>)
 8000b42:	64a3      	str	r3, [r4, #72]	@ 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8000b44:	231c      	movs	r3, #28
 8000b46:	4018      	ands	r0, r3
 8000b48:	3b1b      	subs	r3, #27
 8000b4a:	4083      	lsls	r3, r0
 8000b4c:	64e3      	str	r3, [r4, #76]	@ 0x4c
}
 8000b4e:	bd10      	pop	{r4, pc}
 8000b50:	10008200 	.word	0x10008200
 8000b54:	40020880 	.word	0x40020880

08000b58 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8000b58:	6842      	ldr	r2, [r0, #4]
 8000b5a:	23ff      	movs	r3, #255	@ 0xff
 8000b5c:	4013      	ands	r3, r2

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 8000b5e:	4a06      	ldr	r2, [pc, #24]	@ (8000b78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x20>)
 8000b60:	189a      	adds	r2, r3, r2
 8000b62:	0092      	lsls	r2, r2, #2
 8000b64:	6502      	str	r2, [r0, #80]	@ 0x50
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8000b66:	4a05      	ldr	r2, [pc, #20]	@ (8000b7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 8000b68:	6542      	str	r2, [r0, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8000b6a:	3b01      	subs	r3, #1
 8000b6c:	2203      	movs	r2, #3
 8000b6e:	401a      	ands	r2, r3
 8000b70:	2301      	movs	r3, #1
 8000b72:	4093      	lsls	r3, r2
 8000b74:	6583      	str	r3, [r0, #88]	@ 0x58
}
 8000b76:	4770      	bx	lr
 8000b78:	1000823f 	.word	0x1000823f
 8000b7c:	40020940 	.word	0x40020940

08000b80 <HAL_DMA_Init>:
{
 8000b80:	b570      	push	{r4, r5, r6, lr}
 8000b82:	1e04      	subs	r4, r0, #0
  if (hdma == NULL)
 8000b84:	d04d      	beq.n	8000c22 <HAL_DMA_Init+0xa2>
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8000b86:	6805      	ldr	r5, [r0, #0]
 8000b88:	4b27      	ldr	r3, [pc, #156]	@ (8000c28 <HAL_DMA_Init+0xa8>)
 8000b8a:	18e8      	adds	r0, r5, r3
 8000b8c:	2114      	movs	r1, #20
 8000b8e:	f7ff fa9f 	bl	80000d0 <__udivsi3>
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 8000b92:	0080      	lsls	r0, r0, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8000b94:	6420      	str	r0, [r4, #64]	@ 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8000b96:	2325      	movs	r3, #37	@ 0x25
 8000b98:	2202      	movs	r2, #2
 8000b9a:	54e2      	strb	r2, [r4, r3]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000b9c:	682b      	ldr	r3, [r5, #0]
 8000b9e:	4a23      	ldr	r2, [pc, #140]	@ (8000c2c <HAL_DMA_Init+0xac>)
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	602b      	str	r3, [r5, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8000ba4:	6821      	ldr	r1, [r4, #0]
 8000ba6:	680a      	ldr	r2, [r1, #0]
 8000ba8:	68a3      	ldr	r3, [r4, #8]
 8000baa:	68e0      	ldr	r0, [r4, #12]
 8000bac:	4303      	orrs	r3, r0
 8000bae:	6920      	ldr	r0, [r4, #16]
 8000bb0:	4303      	orrs	r3, r0
 8000bb2:	6960      	ldr	r0, [r4, #20]
 8000bb4:	4303      	orrs	r3, r0
 8000bb6:	69a0      	ldr	r0, [r4, #24]
 8000bb8:	4303      	orrs	r3, r0
 8000bba:	69e0      	ldr	r0, [r4, #28]
 8000bbc:	4303      	orrs	r3, r0
 8000bbe:	6a20      	ldr	r0, [r4, #32]
 8000bc0:	4303      	orrs	r3, r0
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000bc6:	0020      	movs	r0, r4
 8000bc8:	f7ff ffaa 	bl	8000b20 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000bcc:	68a2      	ldr	r2, [r4, #8]
 8000bce:	2380      	movs	r3, #128	@ 0x80
 8000bd0:	01db      	lsls	r3, r3, #7
 8000bd2:	429a      	cmp	r2, r3
 8000bd4:	d018      	beq.n	8000c08 <HAL_DMA_Init+0x88>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000bd6:	6861      	ldr	r1, [r4, #4]
 8000bd8:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8000bda:	23ff      	movs	r3, #255	@ 0xff
 8000bdc:	400b      	ands	r3, r1
 8000bde:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000be0:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8000be2:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 8000be4:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request > 0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000be6:	6863      	ldr	r3, [r4, #4]
 8000be8:	3b01      	subs	r3, #1
 8000bea:	2b03      	cmp	r3, #3
 8000bec:	d90f      	bls.n	8000c0e <HAL_DMA_Init+0x8e>
    hdma->DMAmuxRequestGen = 0U;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	6523      	str	r3, [r4, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8000bf2:	6563      	str	r3, [r4, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8000bf4:	65a3      	str	r3, [r4, #88]	@ 0x58
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	63e3      	str	r3, [r4, #60]	@ 0x3c
  hdma->State  = HAL_DMA_STATE_READY;
 8000bfa:	2225      	movs	r2, #37	@ 0x25
 8000bfc:	2101      	movs	r1, #1
 8000bfe:	54a1      	strb	r1, [r4, r2]
  __HAL_UNLOCK(hdma);
 8000c00:	3a01      	subs	r2, #1
 8000c02:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8000c04:	2000      	movs	r0, #0
}
 8000c06:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	6063      	str	r3, [r4, #4]
 8000c0c:	e7e3      	b.n	8000bd6 <HAL_DMA_Init+0x56>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000c0e:	0020      	movs	r0, r4
 8000c10:	f7ff ffa2 	bl	8000b58 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8000c14:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8000c16:	2200      	movs	r2, #0
 8000c18:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000c1a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8000c1c:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8000c1e:	605a      	str	r2, [r3, #4]
 8000c20:	e7e9      	b.n	8000bf6 <HAL_DMA_Init+0x76>
    return HAL_ERROR;
 8000c22:	2001      	movs	r0, #1
 8000c24:	e7ef      	b.n	8000c06 <HAL_DMA_Init+0x86>
 8000c26:	46c0      	nop			@ (mov r8, r8)
 8000c28:	bffdfff8 	.word	0xbffdfff8
 8000c2c:	ffff800f 	.word	0xffff800f

08000c30 <HAL_DMA_Start_IT>:
{
 8000c30:	b570      	push	{r4, r5, r6, lr}
 8000c32:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 8000c34:	2024      	movs	r0, #36	@ 0x24
 8000c36:	5c20      	ldrb	r0, [r4, r0]
 8000c38:	2801      	cmp	r0, #1
 8000c3a:	d046      	beq.n	8000cca <HAL_DMA_Start_IT+0x9a>
 8000c3c:	2024      	movs	r0, #36	@ 0x24
 8000c3e:	2501      	movs	r5, #1
 8000c40:	5425      	strb	r5, [r4, r0]
  if (HAL_DMA_STATE_READY == hdma->State)
 8000c42:	3001      	adds	r0, #1
 8000c44:	5c20      	ldrb	r0, [r4, r0]
 8000c46:	2801      	cmp	r0, #1
 8000c48:	d007      	beq.n	8000c5a <HAL_DMA_Start_IT+0x2a>
    __HAL_UNLOCK(hdma);
 8000c4a:	2324      	movs	r3, #36	@ 0x24
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	54e2      	strb	r2, [r4, r3]
    status = HAL_BUSY;
 8000c50:	2002      	movs	r0, #2
  __HAL_UNLOCK(hdma);
 8000c52:	2324      	movs	r3, #36	@ 0x24
 8000c54:	2200      	movs	r2, #0
 8000c56:	54e2      	strb	r2, [r4, r3]
}
 8000c58:	bd70      	pop	{r4, r5, r6, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8000c5a:	3024      	adds	r0, #36	@ 0x24
 8000c5c:	3501      	adds	r5, #1
 8000c5e:	5425      	strb	r5, [r4, r0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c60:	2000      	movs	r0, #0
 8000c62:	63e0      	str	r0, [r4, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 8000c64:	6825      	ldr	r5, [r4, #0]
 8000c66:	6828      	ldr	r0, [r5, #0]
 8000c68:	2601      	movs	r6, #1
 8000c6a:	43b0      	bics	r0, r6
 8000c6c:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000c6e:	0020      	movs	r0, r4
 8000c70:	f7ff ff32 	bl	8000ad8 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8000c74:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d01c      	beq.n	8000cb4 <HAL_DMA_Start_IT+0x84>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c7a:	6822      	ldr	r2, [r4, #0]
 8000c7c:	6813      	ldr	r3, [r2, #0]
 8000c7e:	210e      	movs	r1, #14
 8000c80:	430b      	orrs	r3, r1
 8000c82:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8000c84:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8000c86:	6813      	ldr	r3, [r2, #0]
 8000c88:	03db      	lsls	r3, r3, #15
 8000c8a:	d504      	bpl.n	8000c96 <HAL_DMA_Start_IT+0x66>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8000c8c:	6811      	ldr	r1, [r2, #0]
 8000c8e:	2380      	movs	r3, #128	@ 0x80
 8000c90:	005b      	lsls	r3, r3, #1
 8000c92:	430b      	orrs	r3, r1
 8000c94:	6013      	str	r3, [r2, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8000c96:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d004      	beq.n	8000ca6 <HAL_DMA_Start_IT+0x76>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8000c9c:	6819      	ldr	r1, [r3, #0]
 8000c9e:	2280      	movs	r2, #128	@ 0x80
 8000ca0:	0052      	lsls	r2, r2, #1
 8000ca2:	430a      	orrs	r2, r1
 8000ca4:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8000ca6:	6822      	ldr	r2, [r4, #0]
 8000ca8:	6813      	ldr	r3, [r2, #0]
 8000caa:	2101      	movs	r1, #1
 8000cac:	430b      	orrs	r3, r1
 8000cae:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000cb0:	2000      	movs	r0, #0
 8000cb2:	e7ce      	b.n	8000c52 <HAL_DMA_Start_IT+0x22>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000cb4:	6822      	ldr	r2, [r4, #0]
 8000cb6:	6813      	ldr	r3, [r2, #0]
 8000cb8:	2104      	movs	r1, #4
 8000cba:	438b      	bics	r3, r1
 8000cbc:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000cbe:	6822      	ldr	r2, [r4, #0]
 8000cc0:	6813      	ldr	r3, [r2, #0]
 8000cc2:	3106      	adds	r1, #6
 8000cc4:	430b      	orrs	r3, r1
 8000cc6:	6013      	str	r3, [r2, #0]
 8000cc8:	e7dc      	b.n	8000c84 <HAL_DMA_Start_IT+0x54>
  __HAL_LOCK(hdma);
 8000cca:	2002      	movs	r0, #2
 8000ccc:	e7c4      	b.n	8000c58 <HAL_DMA_Start_IT+0x28>
	...

08000cd0 <HAL_DMA_IRQHandler>:
{
 8000cd0:	b570      	push	{r4, r5, r6, lr}
  uint32_t flag_it = DMA1->ISR;
 8000cd2:	4b31      	ldr	r3, [pc, #196]	@ (8000d98 <HAL_DMA_IRQHandler+0xc8>)
 8000cd4:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000cd6:	6804      	ldr	r4, [r0, #0]
 8000cd8:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000cda:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8000cdc:	231c      	movs	r3, #28
 8000cde:	4013      	ands	r3, r2
 8000ce0:	2204      	movs	r2, #4
 8000ce2:	409a      	lsls	r2, r3
 8000ce4:	4211      	tst	r1, r2
 8000ce6:	d016      	beq.n	8000d16 <HAL_DMA_IRQHandler+0x46>
 8000ce8:	076a      	lsls	r2, r5, #29
 8000cea:	d514      	bpl.n	8000d16 <HAL_DMA_IRQHandler+0x46>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000cec:	6823      	ldr	r3, [r4, #0]
 8000cee:	069b      	lsls	r3, r3, #26
 8000cf0:	d403      	bmi.n	8000cfa <HAL_DMA_IRQHandler+0x2a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000cf2:	6823      	ldr	r3, [r4, #0]
 8000cf4:	2204      	movs	r2, #4
 8000cf6:	4393      	bics	r3, r2
 8000cf8:	6023      	str	r3, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 8000cfa:	4c27      	ldr	r4, [pc, #156]	@ (8000d98 <HAL_DMA_IRQHandler+0xc8>)
 8000cfc:	6863      	ldr	r3, [r4, #4]
 8000cfe:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8000d00:	211c      	movs	r1, #28
 8000d02:	4011      	ands	r1, r2
 8000d04:	2204      	movs	r2, #4
 8000d06:	408a      	lsls	r2, r1
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	6063      	str	r3, [r4, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 8000d0c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d000      	beq.n	8000d14 <HAL_DMA_IRQHandler+0x44>
      hdma->XferHalfCpltCallback(hdma);
 8000d12:	4798      	blx	r3
}
 8000d14:	bd70      	pop	{r4, r5, r6, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8000d16:	2202      	movs	r2, #2
 8000d18:	409a      	lsls	r2, r3
 8000d1a:	4211      	tst	r1, r2
 8000d1c:	d01c      	beq.n	8000d58 <HAL_DMA_IRQHandler+0x88>
 8000d1e:	07aa      	lsls	r2, r5, #30
 8000d20:	d51a      	bpl.n	8000d58 <HAL_DMA_IRQHandler+0x88>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d22:	6823      	ldr	r3, [r4, #0]
 8000d24:	069b      	lsls	r3, r3, #26
 8000d26:	d406      	bmi.n	8000d36 <HAL_DMA_IRQHandler+0x66>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000d28:	6823      	ldr	r3, [r4, #0]
 8000d2a:	220a      	movs	r2, #10
 8000d2c:	4393      	bics	r3, r2
 8000d2e:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8000d30:	2325      	movs	r3, #37	@ 0x25
 8000d32:	3a09      	subs	r2, #9
 8000d34:	54c2      	strb	r2, [r0, r3]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 8000d36:	4c18      	ldr	r4, [pc, #96]	@ (8000d98 <HAL_DMA_IRQHandler+0xc8>)
 8000d38:	6863      	ldr	r3, [r4, #4]
 8000d3a:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8000d3c:	211c      	movs	r1, #28
 8000d3e:	4011      	ands	r1, r2
 8000d40:	2202      	movs	r2, #2
 8000d42:	408a      	lsls	r2, r1
 8000d44:	4313      	orrs	r3, r2
 8000d46:	6063      	str	r3, [r4, #4]
    __HAL_UNLOCK(hdma);
 8000d48:	2324      	movs	r3, #36	@ 0x24
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferCpltCallback != NULL)
 8000d4e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d0df      	beq.n	8000d14 <HAL_DMA_IRQHandler+0x44>
      hdma->XferCpltCallback(hdma);
 8000d54:	4798      	blx	r3
 8000d56:	e7dd      	b.n	8000d14 <HAL_DMA_IRQHandler+0x44>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8000d58:	2208      	movs	r2, #8
 8000d5a:	409a      	lsls	r2, r3
 8000d5c:	4211      	tst	r1, r2
 8000d5e:	d0d9      	beq.n	8000d14 <HAL_DMA_IRQHandler+0x44>
 8000d60:	072d      	lsls	r5, r5, #28
 8000d62:	d5d7      	bpl.n	8000d14 <HAL_DMA_IRQHandler+0x44>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d64:	6823      	ldr	r3, [r4, #0]
 8000d66:	220e      	movs	r2, #14
 8000d68:	4393      	bics	r3, r2
 8000d6a:	6023      	str	r3, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8000d6c:	4c0a      	ldr	r4, [pc, #40]	@ (8000d98 <HAL_DMA_IRQHandler+0xc8>)
 8000d6e:	6862      	ldr	r2, [r4, #4]
 8000d70:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8000d72:	211c      	movs	r1, #28
 8000d74:	4019      	ands	r1, r3
 8000d76:	2301      	movs	r3, #1
 8000d78:	001d      	movs	r5, r3
 8000d7a:	408d      	lsls	r5, r1
 8000d7c:	432a      	orrs	r2, r5
 8000d7e:	6062      	str	r2, [r4, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000d80:	63c3      	str	r3, [r0, #60]	@ 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8000d82:	2225      	movs	r2, #37	@ 0x25
 8000d84:	5483      	strb	r3, [r0, r2]
    __HAL_UNLOCK(hdma);
 8000d86:	3323      	adds	r3, #35	@ 0x23
 8000d88:	2200      	movs	r2, #0
 8000d8a:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferErrorCallback != NULL)
 8000d8c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d0c0      	beq.n	8000d14 <HAL_DMA_IRQHandler+0x44>
      hdma->XferErrorCallback(hdma);
 8000d92:	4798      	blx	r3
  return;
 8000d94:	e7be      	b.n	8000d14 <HAL_DMA_IRQHandler+0x44>
 8000d96:	46c0      	nop			@ (mov r8, r8)
 8000d98:	40020000 	.word	0x40020000

08000d9c <HAL_DMA_RegisterCallback>:
{
 8000d9c:	b510      	push	{r4, lr}
 8000d9e:	0003      	movs	r3, r0
  __HAL_LOCK(hdma);
 8000da0:	2024      	movs	r0, #36	@ 0x24
 8000da2:	5c18      	ldrb	r0, [r3, r0]
 8000da4:	2801      	cmp	r0, #1
 8000da6:	d021      	beq.n	8000dec <HAL_DMA_RegisterCallback+0x50>
 8000da8:	2024      	movs	r0, #36	@ 0x24
 8000daa:	2401      	movs	r4, #1
 8000dac:	541c      	strb	r4, [r3, r0]
  if (HAL_DMA_STATE_READY == hdma->State)
 8000dae:	3001      	adds	r0, #1
 8000db0:	5c1c      	ldrb	r4, [r3, r0]
 8000db2:	b2e0      	uxtb	r0, r4
 8000db4:	2c01      	cmp	r4, #1
 8000db6:	d004      	beq.n	8000dc2 <HAL_DMA_RegisterCallback+0x26>
    status = HAL_ERROR;
 8000db8:	2001      	movs	r0, #1
  __HAL_UNLOCK(hdma);
 8000dba:	2224      	movs	r2, #36	@ 0x24
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	5499      	strb	r1, [r3, r2]
}
 8000dc0:	bd10      	pop	{r4, pc}
    switch (CallbackID)
 8000dc2:	2902      	cmp	r1, #2
 8000dc4:	d00f      	beq.n	8000de6 <HAL_DMA_RegisterCallback+0x4a>
 8000dc6:	d806      	bhi.n	8000dd6 <HAL_DMA_RegisterCallback+0x3a>
 8000dc8:	2900      	cmp	r1, #0
 8000dca:	d009      	beq.n	8000de0 <HAL_DMA_RegisterCallback+0x44>
 8000dcc:	2901      	cmp	r1, #1
 8000dce:	d1f4      	bne.n	8000dba <HAL_DMA_RegisterCallback+0x1e>
        hdma->XferHalfCpltCallback = pCallback;
 8000dd0:	631a      	str	r2, [r3, #48]	@ 0x30
  HAL_StatusTypeDef status = HAL_OK;
 8000dd2:	2000      	movs	r0, #0
        break;
 8000dd4:	e7f1      	b.n	8000dba <HAL_DMA_RegisterCallback+0x1e>
    switch (CallbackID)
 8000dd6:	2903      	cmp	r1, #3
 8000dd8:	d1ef      	bne.n	8000dba <HAL_DMA_RegisterCallback+0x1e>
        hdma->XferAbortCallback = pCallback;
 8000dda:	639a      	str	r2, [r3, #56]	@ 0x38
  HAL_StatusTypeDef status = HAL_OK;
 8000ddc:	2000      	movs	r0, #0
        break;
 8000dde:	e7ec      	b.n	8000dba <HAL_DMA_RegisterCallback+0x1e>
        hdma->XferCpltCallback = pCallback;
 8000de0:	62da      	str	r2, [r3, #44]	@ 0x2c
  HAL_StatusTypeDef status = HAL_OK;
 8000de2:	0008      	movs	r0, r1
        break;
 8000de4:	e7e9      	b.n	8000dba <HAL_DMA_RegisterCallback+0x1e>
        hdma->XferErrorCallback = pCallback;
 8000de6:	635a      	str	r2, [r3, #52]	@ 0x34
  HAL_StatusTypeDef status = HAL_OK;
 8000de8:	2000      	movs	r0, #0
        break;
 8000dea:	e7e6      	b.n	8000dba <HAL_DMA_RegisterCallback+0x1e>
  __HAL_LOCK(hdma);
 8000dec:	2002      	movs	r0, #2
 8000dee:	e7e7      	b.n	8000dc0 <HAL_DMA_RegisterCallback+0x24>

08000df0 <HAL_EXTI_RegisterCallback>:
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
  HAL_StatusTypeDef status = HAL_OK;

  switch (CallbackID)
 8000df0:	2901      	cmp	r1, #1
 8000df2:	d007      	beq.n	8000e04 <HAL_EXTI_RegisterCallback+0x14>
 8000df4:	2902      	cmp	r1, #2
 8000df6:	d008      	beq.n	8000e0a <HAL_EXTI_RegisterCallback+0x1a>
 8000df8:	2900      	cmp	r1, #0
 8000dfa:	d109      	bne.n	8000e10 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8000dfc:	6042      	str	r2, [r0, #4]
      hexti->FallingCallback = pPendingCbfn;
 8000dfe:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8000e00:	0008      	movs	r0, r1
      status = HAL_ERROR;
      break;
  }

  return status;
}
 8000e02:	4770      	bx	lr
      hexti->RisingCallback = pPendingCbfn;
 8000e04:	6042      	str	r2, [r0, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e06:	2000      	movs	r0, #0
      break;
 8000e08:	e7fb      	b.n	8000e02 <HAL_EXTI_RegisterCallback+0x12>
      hexti->FallingCallback = pPendingCbfn;
 8000e0a:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8000e0c:	2000      	movs	r0, #0
      break;
 8000e0e:	e7f8      	b.n	8000e02 <HAL_EXTI_RegisterCallback+0x12>
  switch (CallbackID)
 8000e10:	2001      	movs	r0, #1
 8000e12:	e7f6      	b.n	8000e02 <HAL_EXTI_RegisterCallback+0x12>

08000e14 <HAL_EXTI_GetHandle>:
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8000e14:	2800      	cmp	r0, #0
 8000e16:	d002      	beq.n	8000e1e <HAL_EXTI_GetHandle+0xa>
    return HAL_ERROR;
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8000e18:	6001      	str	r1, [r0, #0]

    return HAL_OK;
 8000e1a:	2000      	movs	r0, #0
  }
}
 8000e1c:	4770      	bx	lr
    return HAL_ERROR;
 8000e1e:	2001      	movs	r0, #1
 8000e20:	e7fc      	b.n	8000e1c <HAL_EXTI_GetHandle+0x8>
	...

08000e24 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8000e24:	b570      	push	{r4, r5, r6, lr}
 8000e26:	0006      	movs	r6, r0
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8000e28:	6802      	ldr	r2, [r0, #0]
 8000e2a:	0c14      	lsrs	r4, r2, #16
 8000e2c:	2501      	movs	r5, #1
 8000e2e:	402c      	ands	r4, r5
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8000e30:	231f      	movs	r3, #31
 8000e32:	4013      	ands	r3, r2
 8000e34:	409d      	lsls	r5, r3

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8000e36:	0164      	lsls	r4, r4, #5
 8000e38:	4b0a      	ldr	r3, [pc, #40]	@ (8000e64 <HAL_EXTI_IRQHandler+0x40>)
 8000e3a:	18e3      	adds	r3, r4, r3
  regval = (*regaddr & maskline);
 8000e3c:	681a      	ldr	r2, [r3, #0]

  if (regval != 0U)
 8000e3e:	4215      	tst	r5, r2
 8000e40:	d004      	beq.n	8000e4c <HAL_EXTI_IRQHandler+0x28>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8000e42:	601d      	str	r5, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 8000e44:	6843      	ldr	r3, [r0, #4]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d000      	beq.n	8000e4c <HAL_EXTI_IRQHandler+0x28>
    {
      hexti->RisingCallback();
 8000e4a:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 8000e4c:	4b06      	ldr	r3, [pc, #24]	@ (8000e68 <HAL_EXTI_IRQHandler+0x44>)
 8000e4e:	469c      	mov	ip, r3
 8000e50:	4464      	add	r4, ip
  regval = (*regaddr & maskline);
 8000e52:	6823      	ldr	r3, [r4, #0]

  if (regval != 0U)
 8000e54:	421d      	tst	r5, r3
 8000e56:	d004      	beq.n	8000e62 <HAL_EXTI_IRQHandler+0x3e>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8000e58:	6025      	str	r5, [r4, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 8000e5a:	68b3      	ldr	r3, [r6, #8]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d000      	beq.n	8000e62 <HAL_EXTI_IRQHandler+0x3e>
    {
      hexti->FallingCallback();
 8000e60:	4798      	blx	r3
    }
  }
}
 8000e62:	bd70      	pop	{r4, r5, r6, pc}
 8000e64:	4002180c 	.word	0x4002180c
 8000e68:	40021810 	.word	0x40021810

08000e6c <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e6e:	46d6      	mov	lr, sl
 8000e70:	464f      	mov	r7, r9
 8000e72:	4646      	mov	r6, r8
 8000e74:	b5c0      	push	{r6, r7, lr}
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8000e76:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000e78:	e03b      	b.n	8000ef2 <HAL_GPIO_Init+0x86>
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        tmp = EXTI->EXTICR[position >> 2U];
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8000e7a:	2505      	movs	r5, #5
 8000e7c:	e000      	b.n	8000e80 <HAL_GPIO_Init+0x14>
 8000e7e:	2500      	movs	r5, #0
 8000e80:	40a5      	lsls	r5, r4
 8000e82:	002c      	movs	r4, r5
 8000e84:	433c      	orrs	r4, r7
        EXTI->EXTICR[position >> 2U] = tmp;
 8000e86:	4d63      	ldr	r5, [pc, #396]	@ (8001014 <HAL_GPIO_Init+0x1a8>)
 8000e88:	3218      	adds	r2, #24
 8000e8a:	0092      	lsls	r2, r2, #2
 8000e8c:	5154      	str	r4, [r2, r5]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8000e8e:	2280      	movs	r2, #128	@ 0x80
 8000e90:	58af      	ldr	r7, [r5, r2]
        tmp &= ~((uint32_t)iocurrent);
 8000e92:	464a      	mov	r2, r9
 8000e94:	43d2      	mvns	r2, r2
 8000e96:	003d      	movs	r5, r7
 8000e98:	464c      	mov	r4, r9
 8000e9a:	43a5      	bics	r5, r4
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e9c:	684c      	ldr	r4, [r1, #4]
 8000e9e:	03e4      	lsls	r4, r4, #15
 8000ea0:	d502      	bpl.n	8000ea8 <HAL_GPIO_Init+0x3c>
        {
          tmp |= iocurrent;
 8000ea2:	003d      	movs	r5, r7
 8000ea4:	464c      	mov	r4, r9
 8000ea6:	4325      	orrs	r5, r4
        }
        EXTI->IMR1 = tmp;
 8000ea8:	4c5a      	ldr	r4, [pc, #360]	@ (8001014 <HAL_GPIO_Init+0x1a8>)
 8000eaa:	2780      	movs	r7, #128	@ 0x80
 8000eac:	51e5      	str	r5, [r4, r7]

        tmp = EXTI->EMR1;
 8000eae:	2584      	movs	r5, #132	@ 0x84
 8000eb0:	5967      	ldr	r7, [r4, r5]
        tmp &= ~((uint32_t)iocurrent);
 8000eb2:	003d      	movs	r5, r7
 8000eb4:	4015      	ands	r5, r2
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000eb6:	684c      	ldr	r4, [r1, #4]
 8000eb8:	03a4      	lsls	r4, r4, #14
 8000eba:	d502      	bpl.n	8000ec2 <HAL_GPIO_Init+0x56>
        {
          tmp |= iocurrent;
 8000ebc:	003d      	movs	r5, r7
 8000ebe:	464c      	mov	r4, r9
 8000ec0:	4325      	orrs	r5, r4
        }
        EXTI->EMR1 = tmp;
 8000ec2:	4c54      	ldr	r4, [pc, #336]	@ (8001014 <HAL_GPIO_Init+0x1a8>)
 8000ec4:	2784      	movs	r7, #132	@ 0x84
 8000ec6:	51e5      	str	r5, [r4, r7]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8000ec8:	6827      	ldr	r7, [r4, #0]
        tmp &= ~((uint32_t)iocurrent);
 8000eca:	003d      	movs	r5, r7
 8000ecc:	4015      	ands	r5, r2
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ece:	684c      	ldr	r4, [r1, #4]
 8000ed0:	02e4      	lsls	r4, r4, #11
 8000ed2:	d502      	bpl.n	8000eda <HAL_GPIO_Init+0x6e>
        {
          tmp |= iocurrent;
 8000ed4:	003d      	movs	r5, r7
 8000ed6:	464c      	mov	r4, r9
 8000ed8:	4325      	orrs	r5, r4
        }
        EXTI->RTSR1 = tmp;
 8000eda:	4c4e      	ldr	r4, [pc, #312]	@ (8001014 <HAL_GPIO_Init+0x1a8>)
 8000edc:	6025      	str	r5, [r4, #0]

        tmp = EXTI->FTSR1;
 8000ede:	6865      	ldr	r5, [r4, #4]
        tmp &= ~((uint32_t)iocurrent);
 8000ee0:	402a      	ands	r2, r5
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ee2:	684c      	ldr	r4, [r1, #4]
 8000ee4:	02a4      	lsls	r4, r4, #10
 8000ee6:	d501      	bpl.n	8000eec <HAL_GPIO_Init+0x80>
        {
          tmp |= iocurrent;
 8000ee8:	464a      	mov	r2, r9
 8000eea:	432a      	orrs	r2, r5
        }
        EXTI->FTSR1 = tmp;
 8000eec:	4c49      	ldr	r4, [pc, #292]	@ (8001014 <HAL_GPIO_Init+0x1a8>)
 8000eee:	6062      	str	r2, [r4, #4]
      }
    }

    position++;
 8000ef0:	3301      	adds	r3, #1
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000ef2:	680c      	ldr	r4, [r1, #0]
 8000ef4:	0022      	movs	r2, r4
 8000ef6:	40da      	lsrs	r2, r3
 8000ef8:	d100      	bne.n	8000efc <HAL_GPIO_Init+0x90>
 8000efa:	e086      	b.n	800100a <HAL_GPIO_Init+0x19e>
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000efc:	2201      	movs	r2, #1
 8000efe:	409a      	lsls	r2, r3
 8000f00:	0026      	movs	r6, r4
 8000f02:	4016      	ands	r6, r2
 8000f04:	46b1      	mov	r9, r6
    if (iocurrent != 0U)
 8000f06:	4214      	tst	r4, r2
 8000f08:	d0f2      	beq.n	8000ef0 <HAL_GPIO_Init+0x84>
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f0a:	684c      	ldr	r4, [r1, #4]
 8000f0c:	2c02      	cmp	r4, #2
 8000f0e:	d001      	beq.n	8000f14 <HAL_GPIO_Init+0xa8>
 8000f10:	2c12      	cmp	r4, #18
 8000f12:	d118      	bne.n	8000f46 <HAL_GPIO_Init+0xda>
        tmp = GPIOx->AFR[position >> 3U];
 8000f14:	08dd      	lsrs	r5, r3, #3
 8000f16:	3508      	adds	r5, #8
 8000f18:	00ad      	lsls	r5, r5, #2
 8000f1a:	582c      	ldr	r4, [r5, r0]
 8000f1c:	46a4      	mov	ip, r4
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 8000f1e:	2707      	movs	r7, #7
 8000f20:	401f      	ands	r7, r3
 8000f22:	00bf      	lsls	r7, r7, #2
 8000f24:	240f      	movs	r4, #15
 8000f26:	46a2      	mov	sl, r4
 8000f28:	0026      	movs	r6, r4
 8000f2a:	40be      	lsls	r6, r7
 8000f2c:	46b0      	mov	r8, r6
 8000f2e:	4666      	mov	r6, ip
 8000f30:	4644      	mov	r4, r8
 8000f32:	43a6      	bics	r6, r4
 8000f34:	46b4      	mov	ip, r6
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8000f36:	690c      	ldr	r4, [r1, #16]
 8000f38:	4656      	mov	r6, sl
 8000f3a:	4026      	ands	r6, r4
 8000f3c:	0034      	movs	r4, r6
 8000f3e:	40bc      	lsls	r4, r7
 8000f40:	4666      	mov	r6, ip
 8000f42:	4334      	orrs	r4, r6
        GPIOx->AFR[position >> 3U] = tmp;
 8000f44:	502c      	str	r4, [r5, r0]
      tmp = GPIOx->MODER;
 8000f46:	6804      	ldr	r4, [r0, #0]
 8000f48:	46a4      	mov	ip, r4
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8000f4a:	005d      	lsls	r5, r3, #1
 8000f4c:	2403      	movs	r4, #3
 8000f4e:	46a2      	mov	sl, r4
 8000f50:	0027      	movs	r7, r4
 8000f52:	40af      	lsls	r7, r5
 8000f54:	46b8      	mov	r8, r7
 8000f56:	43ff      	mvns	r7, r7
 8000f58:	4666      	mov	r6, ip
 8000f5a:	4644      	mov	r4, r8
 8000f5c:	43a6      	bics	r6, r4
 8000f5e:	46b4      	mov	ip, r6
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8000f60:	684c      	ldr	r4, [r1, #4]
 8000f62:	4656      	mov	r6, sl
 8000f64:	4026      	ands	r6, r4
 8000f66:	0034      	movs	r4, r6
 8000f68:	40ac      	lsls	r4, r5
 8000f6a:	4666      	mov	r6, ip
 8000f6c:	4334      	orrs	r4, r6
      GPIOx->MODER = tmp;
 8000f6e:	6004      	str	r4, [r0, #0]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f70:	684c      	ldr	r4, [r1, #4]
 8000f72:	1e66      	subs	r6, r4, #1
 8000f74:	2e01      	cmp	r6, #1
 8000f76:	d903      	bls.n	8000f80 <HAL_GPIO_Init+0x114>
 8000f78:	2c11      	cmp	r4, #17
 8000f7a:	d001      	beq.n	8000f80 <HAL_GPIO_Init+0x114>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f7c:	2c12      	cmp	r4, #18
 8000f7e:	d112      	bne.n	8000fa6 <HAL_GPIO_Init+0x13a>
        tmp = GPIOx->OSPEEDR;
 8000f80:	6884      	ldr	r4, [r0, #8]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8000f82:	403c      	ands	r4, r7
 8000f84:	46a4      	mov	ip, r4
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8000f86:	68cc      	ldr	r4, [r1, #12]
 8000f88:	40ac      	lsls	r4, r5
 8000f8a:	4666      	mov	r6, ip
 8000f8c:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = tmp;
 8000f8e:	6084      	str	r4, [r0, #8]
        tmp = GPIOx->OTYPER;
 8000f90:	6844      	ldr	r4, [r0, #4]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f92:	4394      	bics	r4, r2
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f94:	684a      	ldr	r2, [r1, #4]
 8000f96:	0912      	lsrs	r2, r2, #4
 8000f98:	4694      	mov	ip, r2
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	4666      	mov	r6, ip
 8000f9e:	4032      	ands	r2, r6
 8000fa0:	409a      	lsls	r2, r3
 8000fa2:	4322      	orrs	r2, r4
        GPIOx->OTYPER = tmp;
 8000fa4:	6042      	str	r2, [r0, #4]
      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8000fa6:	684a      	ldr	r2, [r1, #4]
 8000fa8:	2a03      	cmp	r2, #3
 8000faa:	d005      	beq.n	8000fb8 <HAL_GPIO_Init+0x14c>
        tmp = GPIOx->PUPDR;
 8000fac:	68c4      	ldr	r4, [r0, #12]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8000fae:	403c      	ands	r4, r7
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8000fb0:	688a      	ldr	r2, [r1, #8]
 8000fb2:	40aa      	lsls	r2, r5
 8000fb4:	4322      	orrs	r2, r4
        GPIOx->PUPDR = tmp;
 8000fb6:	60c2      	str	r2, [r0, #12]
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fb8:	684a      	ldr	r2, [r1, #4]
 8000fba:	00d2      	lsls	r2, r2, #3
 8000fbc:	d598      	bpl.n	8000ef0 <HAL_GPIO_Init+0x84>
        tmp = EXTI->EXTICR[position >> 2U];
 8000fbe:	089a      	lsrs	r2, r3, #2
 8000fc0:	0014      	movs	r4, r2
 8000fc2:	3418      	adds	r4, #24
 8000fc4:	00a4      	lsls	r4, r4, #2
 8000fc6:	4d13      	ldr	r5, [pc, #76]	@ (8001014 <HAL_GPIO_Init+0x1a8>)
 8000fc8:	5967      	ldr	r7, [r4, r5]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8000fca:	2403      	movs	r4, #3
 8000fcc:	401c      	ands	r4, r3
 8000fce:	00e4      	lsls	r4, r4, #3
 8000fd0:	250f      	movs	r5, #15
 8000fd2:	40a5      	lsls	r5, r4
 8000fd4:	43af      	bics	r7, r5
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8000fd6:	25a0      	movs	r5, #160	@ 0xa0
 8000fd8:	05ed      	lsls	r5, r5, #23
 8000fda:	42a8      	cmp	r0, r5
 8000fdc:	d100      	bne.n	8000fe0 <HAL_GPIO_Init+0x174>
 8000fde:	e74e      	b.n	8000e7e <HAL_GPIO_Init+0x12>
 8000fe0:	4d0d      	ldr	r5, [pc, #52]	@ (8001018 <HAL_GPIO_Init+0x1ac>)
 8000fe2:	42a8      	cmp	r0, r5
 8000fe4:	d00b      	beq.n	8000ffe <HAL_GPIO_Init+0x192>
 8000fe6:	4d0d      	ldr	r5, [pc, #52]	@ (800101c <HAL_GPIO_Init+0x1b0>)
 8000fe8:	42a8      	cmp	r0, r5
 8000fea:	d00a      	beq.n	8001002 <HAL_GPIO_Init+0x196>
 8000fec:	4d0c      	ldr	r5, [pc, #48]	@ (8001020 <HAL_GPIO_Init+0x1b4>)
 8000fee:	42a8      	cmp	r0, r5
 8000ff0:	d009      	beq.n	8001006 <HAL_GPIO_Init+0x19a>
 8000ff2:	4d0c      	ldr	r5, [pc, #48]	@ (8001024 <HAL_GPIO_Init+0x1b8>)
 8000ff4:	42a8      	cmp	r0, r5
 8000ff6:	d100      	bne.n	8000ffa <HAL_GPIO_Init+0x18e>
 8000ff8:	e73f      	b.n	8000e7a <HAL_GPIO_Init+0xe>
 8000ffa:	2506      	movs	r5, #6
 8000ffc:	e740      	b.n	8000e80 <HAL_GPIO_Init+0x14>
 8000ffe:	2501      	movs	r5, #1
 8001000:	e73e      	b.n	8000e80 <HAL_GPIO_Init+0x14>
 8001002:	2502      	movs	r5, #2
 8001004:	e73c      	b.n	8000e80 <HAL_GPIO_Init+0x14>
 8001006:	2503      	movs	r5, #3
 8001008:	e73a      	b.n	8000e80 <HAL_GPIO_Init+0x14>
  }
}
 800100a:	bce0      	pop	{r5, r6, r7}
 800100c:	46ba      	mov	sl, r7
 800100e:	46b1      	mov	r9, r6
 8001010:	46a8      	mov	r8, r5
 8001012:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001014:	40021800 	.word	0x40021800
 8001018:	50000400 	.word	0x50000400
 800101c:	50000800 	.word	0x50000800
 8001020:	50000c00 	.word	0x50000c00
 8001024:	50001400 	.word	0x50001400

08001028 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001028:	2a00      	cmp	r2, #0
 800102a:	d001      	beq.n	8001030 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800102c:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800102e:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001030:	6281      	str	r1, [r0, #40]	@ 0x28
}
 8001032:	e7fc      	b.n	800102e <HAL_GPIO_WritePin+0x6>

08001034 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001034:	6942      	ldr	r2, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001036:	0013      	movs	r3, r2
 8001038:	400b      	ands	r3, r1
 800103a:	041b      	lsls	r3, r3, #16
 800103c:	4391      	bics	r1, r2
 800103e:	430b      	orrs	r3, r1
 8001040:	6183      	str	r3, [r0, #24]
}
 8001042:	4770      	bx	lr

08001044 <HAL_GPIO_EXTI_Rising_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8001044:	4770      	bx	lr

08001046 <HAL_GPIO_EXTI_Falling_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8001046:	4770      	bx	lr

08001048 <HAL_GPIO_EXTI_IRQHandler>:
{
 8001048:	b510      	push	{r4, lr}
 800104a:	0004      	movs	r4, r0
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 800104c:	4b09      	ldr	r3, [pc, #36]	@ (8001074 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	4218      	tst	r0, r3
 8001052:	d104      	bne.n	800105e <HAL_GPIO_EXTI_IRQHandler+0x16>
  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8001054:	4b07      	ldr	r3, [pc, #28]	@ (8001074 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001056:	691b      	ldr	r3, [r3, #16]
 8001058:	4223      	tst	r3, r4
 800105a:	d105      	bne.n	8001068 <HAL_GPIO_EXTI_IRQHandler+0x20>
}
 800105c:	bd10      	pop	{r4, pc}
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800105e:	4b05      	ldr	r3, [pc, #20]	@ (8001074 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001060:	60d8      	str	r0, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8001062:	f7ff ffef 	bl	8001044 <HAL_GPIO_EXTI_Rising_Callback>
 8001066:	e7f5      	b.n	8001054 <HAL_GPIO_EXTI_IRQHandler+0xc>
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8001068:	4b02      	ldr	r3, [pc, #8]	@ (8001074 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800106a:	611c      	str	r4, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800106c:	0020      	movs	r0, r4
 800106e:	f7ff ffea 	bl	8001046 <HAL_GPIO_EXTI_Falling_Callback>
}
 8001072:	e7f3      	b.n	800105c <HAL_GPIO_EXTI_IRQHandler+0x14>
 8001074:	40021800 	.word	0x40021800

08001078 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001078:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800107a:	4b0a      	ldr	r3, [pc, #40]	@ (80010a4 <HAL_MspInit+0x2c>)
 800107c:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800107e:	2201      	movs	r2, #1
 8001080:	4311      	orrs	r1, r2
 8001082:	6419      	str	r1, [r3, #64]	@ 0x40
 8001084:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8001086:	400a      	ands	r2, r1
 8001088:	9200      	str	r2, [sp, #0]
 800108a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800108c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800108e:	2180      	movs	r1, #128	@ 0x80
 8001090:	0549      	lsls	r1, r1, #21
 8001092:	430a      	orrs	r2, r1
 8001094:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001096:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001098:	400b      	ands	r3, r1
 800109a:	9301      	str	r3, [sp, #4]
 800109c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800109e:	b002      	add	sp, #8
 80010a0:	4770      	bx	lr
 80010a2:	46c0      	nop			@ (mov r8, r8)
 80010a4:	40021000 	.word	0x40021000

080010a8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010a8:	b530      	push	{r4, r5, lr}
 80010aa:	b08f      	sub	sp, #60	@ 0x3c
 80010ac:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ae:	2214      	movs	r2, #20
 80010b0:	2100      	movs	r1, #0
 80010b2:	a809      	add	r0, sp, #36	@ 0x24
 80010b4:	f000 ff1b 	bl	8001eee <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010b8:	221c      	movs	r2, #28
 80010ba:	2100      	movs	r1, #0
 80010bc:	a802      	add	r0, sp, #8
 80010be:	f000 ff16 	bl	8001eee <memset>
  if(hadc->Instance==ADC1)
 80010c2:	6822      	ldr	r2, [r4, #0]
 80010c4:	4b23      	ldr	r3, [pc, #140]	@ (8001154 <HAL_ADC_MspInit+0xac>)
 80010c6:	429a      	cmp	r2, r3
 80010c8:	d001      	beq.n	80010ce <HAL_ADC_MspInit+0x26>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80010ca:	b00f      	add	sp, #60	@ 0x3c
 80010cc:	bd30      	pop	{r4, r5, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80010ce:	2320      	movs	r3, #32
 80010d0:	9302      	str	r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010d2:	a802      	add	r0, sp, #8
 80010d4:	f000 fb0c 	bl	80016f0 <HAL_RCCEx_PeriphCLKConfig>
 80010d8:	2800      	cmp	r0, #0
 80010da:	d135      	bne.n	8001148 <HAL_ADC_MspInit+0xa0>
    __HAL_RCC_ADC_CLK_ENABLE();
 80010dc:	4b1e      	ldr	r3, [pc, #120]	@ (8001158 <HAL_ADC_MspInit+0xb0>)
 80010de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80010e0:	2180      	movs	r1, #128	@ 0x80
 80010e2:	0349      	lsls	r1, r1, #13
 80010e4:	430a      	orrs	r2, r1
 80010e6:	641a      	str	r2, [r3, #64]	@ 0x40
 80010e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80010ea:	400a      	ands	r2, r1
 80010ec:	9200      	str	r2, [sp, #0]
 80010ee:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80010f2:	2201      	movs	r2, #1
 80010f4:	4311      	orrs	r1, r2
 80010f6:	6359      	str	r1, [r3, #52]	@ 0x34
 80010f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010fa:	401a      	ands	r2, r3
 80010fc:	9201      	str	r2, [sp, #4]
 80010fe:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = HALL_ANALOG_Pin;
 8001100:	a909      	add	r1, sp, #36	@ 0x24
 8001102:	2302      	movs	r3, #2
 8001104:	9309      	str	r3, [sp, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001106:	3301      	adds	r3, #1
 8001108:	604b      	str	r3, [r1, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	2500      	movs	r5, #0
 800110c:	608d      	str	r5, [r1, #8]
    HAL_GPIO_Init(HALL_ANALOG_GPIO_Port, &GPIO_InitStruct);
 800110e:	20a0      	movs	r0, #160	@ 0xa0
 8001110:	05c0      	lsls	r0, r0, #23
 8001112:	f7ff feab 	bl	8000e6c <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 8001116:	4811      	ldr	r0, [pc, #68]	@ (800115c <HAL_ADC_MspInit+0xb4>)
 8001118:	4b11      	ldr	r3, [pc, #68]	@ (8001160 <HAL_ADC_MspInit+0xb8>)
 800111a:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800111c:	2305      	movs	r3, #5
 800111e:	6043      	str	r3, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001120:	6085      	str	r5, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001122:	60c5      	str	r5, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001124:	337b      	adds	r3, #123	@ 0x7b
 8001126:	6103      	str	r3, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001128:	3380      	adds	r3, #128	@ 0x80
 800112a:	6143      	str	r3, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800112c:	2380      	movs	r3, #128	@ 0x80
 800112e:	00db      	lsls	r3, r3, #3
 8001130:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001132:	2320      	movs	r3, #32
 8001134:	61c3      	str	r3, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001136:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001138:	f7ff fd22 	bl	8000b80 <HAL_DMA_Init>
 800113c:	2800      	cmp	r0, #0
 800113e:	d106      	bne.n	800114e <HAL_ADC_MspInit+0xa6>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001140:	4b06      	ldr	r3, [pc, #24]	@ (800115c <HAL_ADC_MspInit+0xb4>)
 8001142:	6523      	str	r3, [r4, #80]	@ 0x50
 8001144:	629c      	str	r4, [r3, #40]	@ 0x28
}
 8001146:	e7c0      	b.n	80010ca <HAL_ADC_MspInit+0x22>
      Error_Handler();
 8001148:	f7ff f8da 	bl	8000300 <Error_Handler>
 800114c:	e7c6      	b.n	80010dc <HAL_ADC_MspInit+0x34>
      Error_Handler();
 800114e:	f7ff f8d7 	bl	8000300 <Error_Handler>
 8001152:	e7f5      	b.n	8001140 <HAL_ADC_MspInit+0x98>
 8001154:	40012400 	.word	0x40012400
 8001158:	40021000 	.word	0x40021000
 800115c:	20000118 	.word	0x20000118
 8001160:	40020008 	.word	0x40020008

08001164 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001164:	b510      	push	{r4, lr}
 8001166:	b088      	sub	sp, #32
 8001168:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116a:	2214      	movs	r2, #20
 800116c:	2100      	movs	r1, #0
 800116e:	a803      	add	r0, sp, #12
 8001170:	f000 febd 	bl	8001eee <memset>
  if(huart->Instance==USART2)
 8001174:	6822      	ldr	r2, [r4, #0]
 8001176:	4b1d      	ldr	r3, [pc, #116]	@ (80011ec <HAL_UART_MspInit+0x88>)
 8001178:	429a      	cmp	r2, r3
 800117a:	d001      	beq.n	8001180 <HAL_UART_MspInit+0x1c>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800117c:	b008      	add	sp, #32
 800117e:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8001180:	4b1b      	ldr	r3, [pc, #108]	@ (80011f0 <HAL_UART_MspInit+0x8c>)
 8001182:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001184:	2180      	movs	r1, #128	@ 0x80
 8001186:	0289      	lsls	r1, r1, #10
 8001188:	430a      	orrs	r2, r1
 800118a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800118c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800118e:	400a      	ands	r2, r1
 8001190:	9201      	str	r2, [sp, #4]
 8001192:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001194:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001196:	2201      	movs	r2, #1
 8001198:	4311      	orrs	r1, r2
 800119a:	6359      	str	r1, [r3, #52]	@ 0x34
 800119c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800119e:	4013      	ands	r3, r2
 80011a0:	9302      	str	r3, [sp, #8]
 80011a2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80011a4:	a903      	add	r1, sp, #12
 80011a6:	230c      	movs	r3, #12
 80011a8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011aa:	3b0a      	subs	r3, #10
 80011ac:	604b      	str	r3, [r1, #4]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80011ae:	610a      	str	r2, [r1, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b0:	20a0      	movs	r0, #160	@ 0xa0
 80011b2:	05c0      	lsls	r0, r0, #23
 80011b4:	f7ff fe5a 	bl	8000e6c <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel2;
 80011b8:	480e      	ldr	r0, [pc, #56]	@ (80011f4 <HAL_UART_MspInit+0x90>)
 80011ba:	4b0f      	ldr	r3, [pc, #60]	@ (80011f8 <HAL_UART_MspInit+0x94>)
 80011bc:	6003      	str	r3, [r0, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80011be:	2335      	movs	r3, #53	@ 0x35
 80011c0:	6043      	str	r3, [r0, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011c2:	3b25      	subs	r3, #37	@ 0x25
 80011c4:	6083      	str	r3, [r0, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011c6:	2300      	movs	r3, #0
 80011c8:	60c3      	str	r3, [r0, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80011ca:	2280      	movs	r2, #128	@ 0x80
 80011cc:	6102      	str	r2, [r0, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011ce:	6143      	str	r3, [r0, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011d0:	6183      	str	r3, [r0, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80011d2:	61c3      	str	r3, [r0, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80011d4:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80011d6:	f7ff fcd3 	bl	8000b80 <HAL_DMA_Init>
 80011da:	2800      	cmp	r0, #0
 80011dc:	d103      	bne.n	80011e6 <HAL_UART_MspInit+0x82>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80011de:	4b05      	ldr	r3, [pc, #20]	@ (80011f4 <HAL_UART_MspInit+0x90>)
 80011e0:	67e3      	str	r3, [r4, #124]	@ 0x7c
 80011e2:	629c      	str	r4, [r3, #40]	@ 0x28
}
 80011e4:	e7ca      	b.n	800117c <HAL_UART_MspInit+0x18>
      Error_Handler();
 80011e6:	f7ff f88b 	bl	8000300 <Error_Handler>
 80011ea:	e7f8      	b.n	80011de <HAL_UART_MspInit+0x7a>
 80011ec:	40004400 	.word	0x40004400
 80011f0:	40021000 	.word	0x40021000
 80011f4:	20000028 	.word	0x20000028
 80011f8:	4002001c 	.word	0x4002001c

080011fc <HAL_RCC_OscConfig>:
            must adjust the number of CPU wait states in their application (SystemClock_Config() API)
            before calling the HAL_RCC_OscConfig() API to update the HSI48 clock division factor.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011fc:	b570      	push	{r4, r5, r6, lr}
 80011fe:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001200:	d100      	bne.n	8001204 <HAL_RCC_OscConfig+0x8>
 8001202:	e139      	b.n	8001478 <HAL_RCC_OscConfig+0x27c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001204:	6803      	ldr	r3, [r0, #0]
 8001206:	07db      	lsls	r3, r3, #31
 8001208:	d52c      	bpl.n	8001264 <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800120a:	4ba1      	ldr	r3, [pc, #644]	@ (8001490 <HAL_RCC_OscConfig+0x294>)
 800120c:	689a      	ldr	r2, [r3, #8]
 800120e:	2338      	movs	r3, #56	@ 0x38
 8001210:	4013      	ands	r3, r2

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8001212:	2b08      	cmp	r3, #8
 8001214:	d022      	beq.n	800125c <HAL_RCC_OscConfig+0x60>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001216:	6843      	ldr	r3, [r0, #4]
 8001218:	2280      	movs	r2, #128	@ 0x80
 800121a:	0252      	lsls	r2, r2, #9
 800121c:	4293      	cmp	r3, r2
 800121e:	d02e      	beq.n	800127e <HAL_RCC_OscConfig+0x82>
 8001220:	22a0      	movs	r2, #160	@ 0xa0
 8001222:	02d2      	lsls	r2, r2, #11
 8001224:	4293      	cmp	r3, r2
 8001226:	d031      	beq.n	800128c <HAL_RCC_OscConfig+0x90>
 8001228:	4b99      	ldr	r3, [pc, #612]	@ (8001490 <HAL_RCC_OscConfig+0x294>)
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	4999      	ldr	r1, [pc, #612]	@ (8001494 <HAL_RCC_OscConfig+0x298>)
 800122e:	400a      	ands	r2, r1
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	4998      	ldr	r1, [pc, #608]	@ (8001498 <HAL_RCC_OscConfig+0x29c>)
 8001236:	400a      	ands	r2, r1
 8001238:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800123a:	6863      	ldr	r3, [r4, #4]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d031      	beq.n	80012a4 <HAL_RCC_OscConfig+0xa8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001240:	f7ff f972 	bl	8000528 <HAL_GetTick>
 8001244:	0005      	movs	r5, r0

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001246:	4b92      	ldr	r3, [pc, #584]	@ (8001490 <HAL_RCC_OscConfig+0x294>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	039b      	lsls	r3, r3, #14
 800124c:	d40a      	bmi.n	8001264 <HAL_RCC_OscConfig+0x68>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800124e:	f7ff f96b 	bl	8000528 <HAL_GetTick>
 8001252:	1b40      	subs	r0, r0, r5
 8001254:	2864      	cmp	r0, #100	@ 0x64
 8001256:	d9f6      	bls.n	8001246 <HAL_RCC_OscConfig+0x4a>
          {
            return HAL_TIMEOUT;
 8001258:	2003      	movs	r0, #3
 800125a:	e10e      	b.n	800147a <HAL_RCC_OscConfig+0x27e>
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800125c:	6843      	ldr	r3, [r0, #4]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d100      	bne.n	8001264 <HAL_RCC_OscConfig+0x68>
 8001262:	e10b      	b.n	800147c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001264:	6823      	ldr	r3, [r4, #0]
 8001266:	079b      	lsls	r3, r3, #30
 8001268:	d547      	bpl.n	80012fa <HAL_RCC_OscConfig+0xfe>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800126a:	4b89      	ldr	r3, [pc, #548]	@ (8001490 <HAL_RCC_OscConfig+0x294>)
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	2238      	movs	r2, #56	@ 0x38

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001270:	421a      	tst	r2, r3
 8001272:	d161      	bne.n	8001338 <HAL_RCC_OscConfig+0x13c>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001274:	68e3      	ldr	r3, [r4, #12]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d122      	bne.n	80012c0 <HAL_RCC_OscConfig+0xc4>
      {
        return HAL_ERROR;
 800127a:	2001      	movs	r0, #1
 800127c:	e0fd      	b.n	800147a <HAL_RCC_OscConfig+0x27e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800127e:	4a84      	ldr	r2, [pc, #528]	@ (8001490 <HAL_RCC_OscConfig+0x294>)
 8001280:	6811      	ldr	r1, [r2, #0]
 8001282:	2380      	movs	r3, #128	@ 0x80
 8001284:	025b      	lsls	r3, r3, #9
 8001286:	430b      	orrs	r3, r1
 8001288:	6013      	str	r3, [r2, #0]
 800128a:	e7d6      	b.n	800123a <HAL_RCC_OscConfig+0x3e>
 800128c:	4b80      	ldr	r3, [pc, #512]	@ (8001490 <HAL_RCC_OscConfig+0x294>)
 800128e:	6819      	ldr	r1, [r3, #0]
 8001290:	2280      	movs	r2, #128	@ 0x80
 8001292:	02d2      	lsls	r2, r2, #11
 8001294:	430a      	orrs	r2, r1
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	6819      	ldr	r1, [r3, #0]
 800129a:	2280      	movs	r2, #128	@ 0x80
 800129c:	0252      	lsls	r2, r2, #9
 800129e:	430a      	orrs	r2, r1
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	e7ca      	b.n	800123a <HAL_RCC_OscConfig+0x3e>
        tickstart = HAL_GetTick();
 80012a4:	f7ff f940 	bl	8000528 <HAL_GetTick>
 80012a8:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012aa:	4b79      	ldr	r3, [pc, #484]	@ (8001490 <HAL_RCC_OscConfig+0x294>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	039b      	lsls	r3, r3, #14
 80012b0:	d5d8      	bpl.n	8001264 <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80012b2:	f7ff f939 	bl	8000528 <HAL_GetTick>
 80012b6:	1b40      	subs	r0, r0, r5
 80012b8:	2864      	cmp	r0, #100	@ 0x64
 80012ba:	d9f6      	bls.n	80012aa <HAL_RCC_OscConfig+0xae>
            return HAL_TIMEOUT;
 80012bc:	2003      	movs	r0, #3
 80012be:	e0dc      	b.n	800147a <HAL_RCC_OscConfig+0x27e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012c0:	4b73      	ldr	r3, [pc, #460]	@ (8001490 <HAL_RCC_OscConfig+0x294>)
 80012c2:	685a      	ldr	r2, [r3, #4]
 80012c4:	4975      	ldr	r1, [pc, #468]	@ (800149c <HAL_RCC_OscConfig+0x2a0>)
 80012c6:	400a      	ands	r2, r1
 80012c8:	6961      	ldr	r1, [r4, #20]
 80012ca:	0209      	lsls	r1, r1, #8
 80012cc:	430a      	orrs	r2, r1
 80012ce:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	4973      	ldr	r1, [pc, #460]	@ (80014a0 <HAL_RCC_OscConfig+0x2a4>)
 80012d4:	400a      	ands	r2, r1
 80012d6:	6921      	ldr	r1, [r4, #16]
 80012d8:	430a      	orrs	r2, r1
 80012da:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	0adb      	lsrs	r3, r3, #11
 80012e0:	2207      	movs	r2, #7
 80012e2:	401a      	ands	r2, r3
 80012e4:	4b6f      	ldr	r3, [pc, #444]	@ (80014a4 <HAL_RCC_OscConfig+0x2a8>)
 80012e6:	40d3      	lsrs	r3, r2
 80012e8:	4a6f      	ldr	r2, [pc, #444]	@ (80014a8 <HAL_RCC_OscConfig+0x2ac>)
 80012ea:	6013      	str	r3, [r2, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80012ec:	4b6f      	ldr	r3, [pc, #444]	@ (80014ac <HAL_RCC_OscConfig+0x2b0>)
 80012ee:	6818      	ldr	r0, [r3, #0]
 80012f0:	f7ff f8d6 	bl	80004a0 <HAL_InitTick>
 80012f4:	2800      	cmp	r0, #0
 80012f6:	d000      	beq.n	80012fa <HAL_RCC_OscConfig+0xfe>
 80012f8:	e0c2      	b.n	8001480 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012fa:	6823      	ldr	r3, [r4, #0]
 80012fc:	071b      	lsls	r3, r3, #28
 80012fe:	d557      	bpl.n	80013b0 <HAL_RCC_OscConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001300:	4b63      	ldr	r3, [pc, #396]	@ (8001490 <HAL_RCC_OscConfig+0x294>)
 8001302:	689a      	ldr	r2, [r3, #8]
 8001304:	2338      	movs	r3, #56	@ 0x38
 8001306:	4013      	ands	r3, r2
 8001308:	2b18      	cmp	r3, #24
 800130a:	d04e      	beq.n	80013aa <HAL_RCC_OscConfig+0x1ae>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800130c:	69a3      	ldr	r3, [r4, #24]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d077      	beq.n	8001402 <HAL_RCC_OscConfig+0x206>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001312:	4a5f      	ldr	r2, [pc, #380]	@ (8001490 <HAL_RCC_OscConfig+0x294>)
 8001314:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 8001316:	2101      	movs	r1, #1
 8001318:	430b      	orrs	r3, r1
 800131a:	6613      	str	r3, [r2, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800131c:	f7ff f904 	bl	8000528 <HAL_GetTick>
 8001320:	0005      	movs	r5, r0

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001322:	4b5b      	ldr	r3, [pc, #364]	@ (8001490 <HAL_RCC_OscConfig+0x294>)
 8001324:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001326:	079b      	lsls	r3, r3, #30
 8001328:	d442      	bmi.n	80013b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800132a:	f7ff f8fd 	bl	8000528 <HAL_GetTick>
 800132e:	1b40      	subs	r0, r0, r5
 8001330:	2802      	cmp	r0, #2
 8001332:	d9f6      	bls.n	8001322 <HAL_RCC_OscConfig+0x126>
          {
            return HAL_TIMEOUT;
 8001334:	2003      	movs	r0, #3
 8001336:	e0a0      	b.n	800147a <HAL_RCC_OscConfig+0x27e>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001338:	68e3      	ldr	r3, [r4, #12]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d022      	beq.n	8001384 <HAL_RCC_OscConfig+0x188>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800133e:	4a54      	ldr	r2, [pc, #336]	@ (8001490 <HAL_RCC_OscConfig+0x294>)
 8001340:	6813      	ldr	r3, [r2, #0]
 8001342:	4957      	ldr	r1, [pc, #348]	@ (80014a0 <HAL_RCC_OscConfig+0x2a4>)
 8001344:	400b      	ands	r3, r1
 8001346:	6921      	ldr	r1, [r4, #16]
 8001348:	430b      	orrs	r3, r1
 800134a:	6013      	str	r3, [r2, #0]
        __HAL_RCC_HSI_ENABLE();
 800134c:	6811      	ldr	r1, [r2, #0]
 800134e:	2380      	movs	r3, #128	@ 0x80
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	430b      	orrs	r3, r1
 8001354:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001356:	f7ff f8e7 	bl	8000528 <HAL_GetTick>
 800135a:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800135c:	4b4c      	ldr	r3, [pc, #304]	@ (8001490 <HAL_RCC_OscConfig+0x294>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	055b      	lsls	r3, r3, #21
 8001362:	d406      	bmi.n	8001372 <HAL_RCC_OscConfig+0x176>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001364:	f7ff f8e0 	bl	8000528 <HAL_GetTick>
 8001368:	1b40      	subs	r0, r0, r5
 800136a:	2802      	cmp	r0, #2
 800136c:	d9f6      	bls.n	800135c <HAL_RCC_OscConfig+0x160>
            return HAL_TIMEOUT;
 800136e:	2003      	movs	r0, #3
 8001370:	e083      	b.n	800147a <HAL_RCC_OscConfig+0x27e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001372:	4947      	ldr	r1, [pc, #284]	@ (8001490 <HAL_RCC_OscConfig+0x294>)
 8001374:	684b      	ldr	r3, [r1, #4]
 8001376:	4a49      	ldr	r2, [pc, #292]	@ (800149c <HAL_RCC_OscConfig+0x2a0>)
 8001378:	4013      	ands	r3, r2
 800137a:	6962      	ldr	r2, [r4, #20]
 800137c:	0212      	lsls	r2, r2, #8
 800137e:	4313      	orrs	r3, r2
 8001380:	604b      	str	r3, [r1, #4]
 8001382:	e7ba      	b.n	80012fa <HAL_RCC_OscConfig+0xfe>
        __HAL_RCC_HSI_DISABLE();
 8001384:	4a42      	ldr	r2, [pc, #264]	@ (8001490 <HAL_RCC_OscConfig+0x294>)
 8001386:	6813      	ldr	r3, [r2, #0]
 8001388:	4949      	ldr	r1, [pc, #292]	@ (80014b0 <HAL_RCC_OscConfig+0x2b4>)
 800138a:	400b      	ands	r3, r1
 800138c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800138e:	f7ff f8cb 	bl	8000528 <HAL_GetTick>
 8001392:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001394:	4b3e      	ldr	r3, [pc, #248]	@ (8001490 <HAL_RCC_OscConfig+0x294>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	055b      	lsls	r3, r3, #21
 800139a:	d5ae      	bpl.n	80012fa <HAL_RCC_OscConfig+0xfe>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800139c:	f7ff f8c4 	bl	8000528 <HAL_GetTick>
 80013a0:	1b40      	subs	r0, r0, r5
 80013a2:	2802      	cmp	r0, #2
 80013a4:	d9f6      	bls.n	8001394 <HAL_RCC_OscConfig+0x198>
            return HAL_TIMEOUT;
 80013a6:	2003      	movs	r0, #3
 80013a8:	e067      	b.n	800147a <HAL_RCC_OscConfig+0x27e>
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 80013aa:	69a3      	ldr	r3, [r4, #24]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d069      	beq.n	8001484 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013b0:	6823      	ldr	r3, [r4, #0]
 80013b2:	075b      	lsls	r3, r3, #29
 80013b4:	d568      	bpl.n	8001488 <HAL_RCC_OscConfig+0x28c>

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80013b6:	4b36      	ldr	r3, [pc, #216]	@ (8001490 <HAL_RCC_OscConfig+0x294>)
 80013b8:	689a      	ldr	r2, [r3, #8]
 80013ba:	2338      	movs	r3, #56	@ 0x38
 80013bc:	4013      	ands	r3, r2
 80013be:	2b20      	cmp	r3, #32
 80013c0:	d032      	beq.n	8001428 <HAL_RCC_OscConfig+0x22c>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013c2:	68a3      	ldr	r3, [r4, #8]
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d034      	beq.n	8001432 <HAL_RCC_OscConfig+0x236>
 80013c8:	2b05      	cmp	r3, #5
 80013ca:	d038      	beq.n	800143e <HAL_RCC_OscConfig+0x242>
 80013cc:	4b30      	ldr	r3, [pc, #192]	@ (8001490 <HAL_RCC_OscConfig+0x294>)
 80013ce:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80013d0:	2101      	movs	r1, #1
 80013d2:	438a      	bics	r2, r1
 80013d4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80013d6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80013d8:	3103      	adds	r1, #3
 80013da:	438a      	bics	r2, r1
 80013dc:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013de:	68a3      	ldr	r3, [r4, #8]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d038      	beq.n	8001456 <HAL_RCC_OscConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e4:	f7ff f8a0 	bl	8000528 <HAL_GetTick>
 80013e8:	0004      	movs	r4, r0

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80013ea:	4b29      	ldr	r3, [pc, #164]	@ (8001490 <HAL_RCC_OscConfig+0x294>)
 80013ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013ee:	079b      	lsls	r3, r3, #30
 80013f0:	d42f      	bmi.n	8001452 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013f2:	f7ff f899 	bl	8000528 <HAL_GetTick>
 80013f6:	1b00      	subs	r0, r0, r4
 80013f8:	4b2e      	ldr	r3, [pc, #184]	@ (80014b4 <HAL_RCC_OscConfig+0x2b8>)
 80013fa:	4298      	cmp	r0, r3
 80013fc:	d9f5      	bls.n	80013ea <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80013fe:	2003      	movs	r0, #3
 8001400:	e03b      	b.n	800147a <HAL_RCC_OscConfig+0x27e>
        __HAL_RCC_LSI_DISABLE();
 8001402:	4a23      	ldr	r2, [pc, #140]	@ (8001490 <HAL_RCC_OscConfig+0x294>)
 8001404:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 8001406:	2101      	movs	r1, #1
 8001408:	438b      	bics	r3, r1
 800140a:	6613      	str	r3, [r2, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800140c:	f7ff f88c 	bl	8000528 <HAL_GetTick>
 8001410:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001412:	4b1f      	ldr	r3, [pc, #124]	@ (8001490 <HAL_RCC_OscConfig+0x294>)
 8001414:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001416:	079b      	lsls	r3, r3, #30
 8001418:	d5ca      	bpl.n	80013b0 <HAL_RCC_OscConfig+0x1b4>
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800141a:	f7ff f885 	bl	8000528 <HAL_GetTick>
 800141e:	1b40      	subs	r0, r0, r5
 8001420:	2802      	cmp	r0, #2
 8001422:	d9f6      	bls.n	8001412 <HAL_RCC_OscConfig+0x216>
            return HAL_TIMEOUT;
 8001424:	2003      	movs	r0, #3
 8001426:	e028      	b.n	800147a <HAL_RCC_OscConfig+0x27e>
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8001428:	68a3      	ldr	r3, [r4, #8]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d02e      	beq.n	800148c <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 800142e:	2000      	movs	r0, #0
 8001430:	e023      	b.n	800147a <HAL_RCC_OscConfig+0x27e>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001432:	4a17      	ldr	r2, [pc, #92]	@ (8001490 <HAL_RCC_OscConfig+0x294>)
 8001434:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 8001436:	2101      	movs	r1, #1
 8001438:	430b      	orrs	r3, r1
 800143a:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800143c:	e7cf      	b.n	80013de <HAL_RCC_OscConfig+0x1e2>
 800143e:	4b14      	ldr	r3, [pc, #80]	@ (8001490 <HAL_RCC_OscConfig+0x294>)
 8001440:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001442:	2104      	movs	r1, #4
 8001444:	430a      	orrs	r2, r1
 8001446:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001448:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800144a:	3903      	subs	r1, #3
 800144c:	430a      	orrs	r2, r1
 800144e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001450:	e7c5      	b.n	80013de <HAL_RCC_OscConfig+0x1e2>
  return HAL_OK;
 8001452:	2000      	movs	r0, #0
 8001454:	e011      	b.n	800147a <HAL_RCC_OscConfig+0x27e>
        tickstart = HAL_GetTick();
 8001456:	f7ff f867 	bl	8000528 <HAL_GetTick>
 800145a:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 800145c:	4b0c      	ldr	r3, [pc, #48]	@ (8001490 <HAL_RCC_OscConfig+0x294>)
 800145e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001460:	079b      	lsls	r3, r3, #30
 8001462:	d507      	bpl.n	8001474 <HAL_RCC_OscConfig+0x278>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001464:	f7ff f860 	bl	8000528 <HAL_GetTick>
 8001468:	1b00      	subs	r0, r0, r4
 800146a:	4b12      	ldr	r3, [pc, #72]	@ (80014b4 <HAL_RCC_OscConfig+0x2b8>)
 800146c:	4298      	cmp	r0, r3
 800146e:	d9f5      	bls.n	800145c <HAL_RCC_OscConfig+0x260>
            return HAL_TIMEOUT;
 8001470:	2003      	movs	r0, #3
 8001472:	e002      	b.n	800147a <HAL_RCC_OscConfig+0x27e>
  return HAL_OK;
 8001474:	2000      	movs	r0, #0
 8001476:	e000      	b.n	800147a <HAL_RCC_OscConfig+0x27e>
    return HAL_ERROR;
 8001478:	2001      	movs	r0, #1
}
 800147a:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 800147c:	2001      	movs	r0, #1
 800147e:	e7fc      	b.n	800147a <HAL_RCC_OscConfig+0x27e>
          return HAL_ERROR;
 8001480:	2001      	movs	r0, #1
 8001482:	e7fa      	b.n	800147a <HAL_RCC_OscConfig+0x27e>
        return HAL_ERROR;
 8001484:	2001      	movs	r0, #1
 8001486:	e7f8      	b.n	800147a <HAL_RCC_OscConfig+0x27e>
  return HAL_OK;
 8001488:	2000      	movs	r0, #0
 800148a:	e7f6      	b.n	800147a <HAL_RCC_OscConfig+0x27e>
        return HAL_ERROR;
 800148c:	2001      	movs	r0, #1
 800148e:	e7f4      	b.n	800147a <HAL_RCC_OscConfig+0x27e>
 8001490:	40021000 	.word	0x40021000
 8001494:	fffeffff 	.word	0xfffeffff
 8001498:	fffbffff 	.word	0xfffbffff
 800149c:	ffff80ff 	.word	0xffff80ff
 80014a0:	ffffc7ff 	.word	0xffffc7ff
 80014a4:	02dc6c00 	.word	0x02dc6c00
 80014a8:	20000008 	.word	0x20000008
 80014ac:	20000004 	.word	0x20000004
 80014b0:	fffffeff 	.word	0xfffffeff
 80014b4:	00001388 	.word	0x00001388

080014b8 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80014b8:	4b14      	ldr	r3, [pc, #80]	@ (800150c <HAL_RCC_GetSysClockFreq+0x54>)
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	2238      	movs	r2, #56	@ 0x38
 80014be:	421a      	tst	r2, r3
 80014c0:	d107      	bne.n	80014d2 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80014c2:	4b12      	ldr	r3, [pc, #72]	@ (800150c <HAL_RCC_GetSysClockFreq+0x54>)
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	0ad2      	lsrs	r2, r2, #11
 80014c8:	2307      	movs	r3, #7
 80014ca:	4013      	ands	r3, r2

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80014cc:	4810      	ldr	r0, [pc, #64]	@ (8001510 <HAL_RCC_GetSysClockFreq+0x58>)
 80014ce:	40d8      	lsrs	r0, r3
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
}
 80014d0:	4770      	bx	lr
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80014d2:	4b0e      	ldr	r3, [pc, #56]	@ (800150c <HAL_RCC_GetSysClockFreq+0x54>)
 80014d4:	689a      	ldr	r2, [r3, #8]
 80014d6:	2338      	movs	r3, #56	@ 0x38
 80014d8:	4013      	ands	r3, r2
 80014da:	2b08      	cmp	r3, #8
 80014dc:	d010      	beq.n	8001500 <HAL_RCC_GetSysClockFreq+0x48>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80014de:	4b0b      	ldr	r3, [pc, #44]	@ (800150c <HAL_RCC_GetSysClockFreq+0x54>)
 80014e0:	689a      	ldr	r2, [r3, #8]
 80014e2:	2338      	movs	r3, #56	@ 0x38
 80014e4:	4013      	ands	r3, r2
 80014e6:	2b20      	cmp	r3, #32
 80014e8:	d00c      	beq.n	8001504 <HAL_RCC_GetSysClockFreq+0x4c>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80014ea:	4b08      	ldr	r3, [pc, #32]	@ (800150c <HAL_RCC_GetSysClockFreq+0x54>)
 80014ec:	689a      	ldr	r2, [r3, #8]
 80014ee:	2338      	movs	r3, #56	@ 0x38
 80014f0:	4013      	ands	r3, r2
 80014f2:	2b18      	cmp	r3, #24
 80014f4:	d001      	beq.n	80014fa <HAL_RCC_GetSysClockFreq+0x42>
    sysclockfreq = 0U;
 80014f6:	2000      	movs	r0, #0
  return sysclockfreq;
 80014f8:	e7ea      	b.n	80014d0 <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = LSI_VALUE;
 80014fa:	20fa      	movs	r0, #250	@ 0xfa
 80014fc:	01c0      	lsls	r0, r0, #7
 80014fe:	e7e7      	b.n	80014d0 <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = HSE_VALUE;
 8001500:	4803      	ldr	r0, [pc, #12]	@ (8001510 <HAL_RCC_GetSysClockFreq+0x58>)
 8001502:	e7e5      	b.n	80014d0 <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = LSE_VALUE;
 8001504:	2080      	movs	r0, #128	@ 0x80
 8001506:	0200      	lsls	r0, r0, #8
 8001508:	e7e2      	b.n	80014d0 <HAL_RCC_GetSysClockFreq+0x18>
 800150a:	46c0      	nop			@ (mov r8, r8)
 800150c:	40021000 	.word	0x40021000
 8001510:	02dc6c00 	.word	0x02dc6c00

08001514 <HAL_RCC_ClockConfig>:
{
 8001514:	b570      	push	{r4, r5, r6, lr}
 8001516:	0004      	movs	r4, r0
 8001518:	000d      	movs	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800151a:	2800      	cmp	r0, #0
 800151c:	d100      	bne.n	8001520 <HAL_RCC_ClockConfig+0xc>
 800151e:	e0a4      	b.n	800166a <HAL_RCC_ClockConfig+0x156>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001520:	4b54      	ldr	r3, [pc, #336]	@ (8001674 <HAL_RCC_ClockConfig+0x160>)
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	2307      	movs	r3, #7
 8001526:	4013      	ands	r3, r2
 8001528:	428b      	cmp	r3, r1
 800152a:	d321      	bcc.n	8001570 <HAL_RCC_ClockConfig+0x5c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800152c:	6823      	ldr	r3, [r4, #0]
 800152e:	079a      	lsls	r2, r3, #30
 8001530:	d510      	bpl.n	8001554 <HAL_RCC_ClockConfig+0x40>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001532:	075b      	lsls	r3, r3, #29
 8001534:	d507      	bpl.n	8001546 <HAL_RCC_ClockConfig+0x32>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001536:	4950      	ldr	r1, [pc, #320]	@ (8001678 <HAL_RCC_ClockConfig+0x164>)
 8001538:	688a      	ldr	r2, [r1, #8]
 800153a:	4b50      	ldr	r3, [pc, #320]	@ (800167c <HAL_RCC_ClockConfig+0x168>)
 800153c:	401a      	ands	r2, r3
 800153e:	23b0      	movs	r3, #176	@ 0xb0
 8001540:	011b      	lsls	r3, r3, #4
 8001542:	4313      	orrs	r3, r2
 8001544:	608b      	str	r3, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001546:	4a4c      	ldr	r2, [pc, #304]	@ (8001678 <HAL_RCC_ClockConfig+0x164>)
 8001548:	6893      	ldr	r3, [r2, #8]
 800154a:	494d      	ldr	r1, [pc, #308]	@ (8001680 <HAL_RCC_ClockConfig+0x16c>)
 800154c:	400b      	ands	r3, r1
 800154e:	68e1      	ldr	r1, [r4, #12]
 8001550:	430b      	orrs	r3, r1
 8001552:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001554:	6823      	ldr	r3, [r4, #0]
 8001556:	07db      	lsls	r3, r3, #31
 8001558:	d54c      	bpl.n	80015f4 <HAL_RCC_ClockConfig+0xe0>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800155a:	6863      	ldr	r3, [r4, #4]
 800155c:	2b01      	cmp	r3, #1
 800155e:	d01e      	beq.n	800159e <HAL_RCC_ClockConfig+0x8a>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001560:	2b00      	cmp	r3, #0
 8001562:	d139      	bne.n	80015d8 <HAL_RCC_ClockConfig+0xc4>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001564:	4a44      	ldr	r2, [pc, #272]	@ (8001678 <HAL_RCC_ClockConfig+0x164>)
 8001566:	6812      	ldr	r2, [r2, #0]
 8001568:	0552      	lsls	r2, r2, #21
 800156a:	d41c      	bmi.n	80015a6 <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 800156c:	2001      	movs	r0, #1
 800156e:	e064      	b.n	800163a <HAL_RCC_ClockConfig+0x126>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001570:	4a40      	ldr	r2, [pc, #256]	@ (8001674 <HAL_RCC_ClockConfig+0x160>)
 8001572:	6813      	ldr	r3, [r2, #0]
 8001574:	2107      	movs	r1, #7
 8001576:	438b      	bics	r3, r1
 8001578:	432b      	orrs	r3, r5
 800157a:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800157c:	f7fe ffd4 	bl	8000528 <HAL_GetTick>
 8001580:	0006      	movs	r6, r0
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001582:	4b3c      	ldr	r3, [pc, #240]	@ (8001674 <HAL_RCC_ClockConfig+0x160>)
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	2307      	movs	r3, #7
 8001588:	4013      	ands	r3, r2
 800158a:	42ab      	cmp	r3, r5
 800158c:	d0ce      	beq.n	800152c <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800158e:	f7fe ffcb 	bl	8000528 <HAL_GetTick>
 8001592:	1b80      	subs	r0, r0, r6
 8001594:	4a3b      	ldr	r2, [pc, #236]	@ (8001684 <HAL_RCC_ClockConfig+0x170>)
 8001596:	4290      	cmp	r0, r2
 8001598:	d9f3      	bls.n	8001582 <HAL_RCC_ClockConfig+0x6e>
        return HAL_TIMEOUT;
 800159a:	2003      	movs	r0, #3
 800159c:	e04d      	b.n	800163a <HAL_RCC_ClockConfig+0x126>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800159e:	4a36      	ldr	r2, [pc, #216]	@ (8001678 <HAL_RCC_ClockConfig+0x164>)
 80015a0:	6812      	ldr	r2, [r2, #0]
 80015a2:	0392      	lsls	r2, r2, #14
 80015a4:	d563      	bpl.n	800166e <HAL_RCC_ClockConfig+0x15a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80015a6:	4934      	ldr	r1, [pc, #208]	@ (8001678 <HAL_RCC_ClockConfig+0x164>)
 80015a8:	688a      	ldr	r2, [r1, #8]
 80015aa:	2007      	movs	r0, #7
 80015ac:	4382      	bics	r2, r0
 80015ae:	4313      	orrs	r3, r2
 80015b0:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80015b2:	f7fe ffb9 	bl	8000528 <HAL_GetTick>
 80015b6:	0006      	movs	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015b8:	4b2f      	ldr	r3, [pc, #188]	@ (8001678 <HAL_RCC_ClockConfig+0x164>)
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	2238      	movs	r2, #56	@ 0x38
 80015be:	401a      	ands	r2, r3
 80015c0:	6863      	ldr	r3, [r4, #4]
 80015c2:	00db      	lsls	r3, r3, #3
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d015      	beq.n	80015f4 <HAL_RCC_ClockConfig+0xe0>
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80015c8:	f7fe ffae 	bl	8000528 <HAL_GetTick>
 80015cc:	1b80      	subs	r0, r0, r6
 80015ce:	4b2d      	ldr	r3, [pc, #180]	@ (8001684 <HAL_RCC_ClockConfig+0x170>)
 80015d0:	4298      	cmp	r0, r3
 80015d2:	d9f1      	bls.n	80015b8 <HAL_RCC_ClockConfig+0xa4>
        return HAL_TIMEOUT;
 80015d4:	2003      	movs	r0, #3
 80015d6:	e030      	b.n	800163a <HAL_RCC_ClockConfig+0x126>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80015d8:	2b03      	cmp	r3, #3
 80015da:	d005      	beq.n	80015e8 <HAL_RCC_ClockConfig+0xd4>
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80015dc:	4a26      	ldr	r2, [pc, #152]	@ (8001678 <HAL_RCC_ClockConfig+0x164>)
 80015de:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80015e0:	0792      	lsls	r2, r2, #30
 80015e2:	d4e0      	bmi.n	80015a6 <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 80015e4:	2001      	movs	r0, #1
 80015e6:	e028      	b.n	800163a <HAL_RCC_ClockConfig+0x126>
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80015e8:	4a23      	ldr	r2, [pc, #140]	@ (8001678 <HAL_RCC_ClockConfig+0x164>)
 80015ea:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 80015ec:	0792      	lsls	r2, r2, #30
 80015ee:	d4da      	bmi.n	80015a6 <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 80015f0:	2001      	movs	r0, #1
 80015f2:	e022      	b.n	800163a <HAL_RCC_ClockConfig+0x126>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80015f4:	4b1f      	ldr	r3, [pc, #124]	@ (8001674 <HAL_RCC_ClockConfig+0x160>)
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	2307      	movs	r3, #7
 80015fa:	4013      	ands	r3, r2
 80015fc:	42ab      	cmp	r3, r5
 80015fe:	d81d      	bhi.n	800163c <HAL_RCC_ClockConfig+0x128>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001600:	6823      	ldr	r3, [r4, #0]
 8001602:	075b      	lsls	r3, r3, #29
 8001604:	d506      	bpl.n	8001614 <HAL_RCC_ClockConfig+0x100>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001606:	4a1c      	ldr	r2, [pc, #112]	@ (8001678 <HAL_RCC_ClockConfig+0x164>)
 8001608:	6893      	ldr	r3, [r2, #8]
 800160a:	491f      	ldr	r1, [pc, #124]	@ (8001688 <HAL_RCC_ClockConfig+0x174>)
 800160c:	400b      	ands	r3, r1
 800160e:	6921      	ldr	r1, [r4, #16]
 8001610:	430b      	orrs	r3, r1
 8001612:	6093      	str	r3, [r2, #8]
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001614:	f7ff ff50 	bl	80014b8 <HAL_RCC_GetSysClockFreq>
 8001618:	4b17      	ldr	r3, [pc, #92]	@ (8001678 <HAL_RCC_ClockConfig+0x164>)
 800161a:	689a      	ldr	r2, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800161c:	0a12      	lsrs	r2, r2, #8
 800161e:	230f      	movs	r3, #15
 8001620:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001622:	4a1a      	ldr	r2, [pc, #104]	@ (800168c <HAL_RCC_ClockConfig+0x178>)
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	589a      	ldr	r2, [r3, r2]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001628:	231f      	movs	r3, #31
 800162a:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800162c:	40d8      	lsrs	r0, r3
 800162e:	4b18      	ldr	r3, [pc, #96]	@ (8001690 <HAL_RCC_ClockConfig+0x17c>)
 8001630:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8001632:	4b18      	ldr	r3, [pc, #96]	@ (8001694 <HAL_RCC_ClockConfig+0x180>)
 8001634:	6818      	ldr	r0, [r3, #0]
 8001636:	f7fe ff33 	bl	80004a0 <HAL_InitTick>
}
 800163a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800163c:	4a0d      	ldr	r2, [pc, #52]	@ (8001674 <HAL_RCC_ClockConfig+0x160>)
 800163e:	6813      	ldr	r3, [r2, #0]
 8001640:	2107      	movs	r1, #7
 8001642:	438b      	bics	r3, r1
 8001644:	432b      	orrs	r3, r5
 8001646:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001648:	f7fe ff6e 	bl	8000528 <HAL_GetTick>
 800164c:	0006      	movs	r6, r0
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800164e:	4b09      	ldr	r3, [pc, #36]	@ (8001674 <HAL_RCC_ClockConfig+0x160>)
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	2307      	movs	r3, #7
 8001654:	4013      	ands	r3, r2
 8001656:	42ab      	cmp	r3, r5
 8001658:	d0d2      	beq.n	8001600 <HAL_RCC_ClockConfig+0xec>
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800165a:	f7fe ff65 	bl	8000528 <HAL_GetTick>
 800165e:	1b80      	subs	r0, r0, r6
 8001660:	4b08      	ldr	r3, [pc, #32]	@ (8001684 <HAL_RCC_ClockConfig+0x170>)
 8001662:	4298      	cmp	r0, r3
 8001664:	d9f3      	bls.n	800164e <HAL_RCC_ClockConfig+0x13a>
        return HAL_TIMEOUT;
 8001666:	2003      	movs	r0, #3
 8001668:	e7e7      	b.n	800163a <HAL_RCC_ClockConfig+0x126>
    return HAL_ERROR;
 800166a:	2001      	movs	r0, #1
 800166c:	e7e5      	b.n	800163a <HAL_RCC_ClockConfig+0x126>
        return HAL_ERROR;
 800166e:	2001      	movs	r0, #1
 8001670:	e7e3      	b.n	800163a <HAL_RCC_ClockConfig+0x126>
 8001672:	46c0      	nop			@ (mov r8, r8)
 8001674:	40022000 	.word	0x40022000
 8001678:	40021000 	.word	0x40021000
 800167c:	ffff84ff 	.word	0xffff84ff
 8001680:	fffff0ff 	.word	0xfffff0ff
 8001684:	00001388 	.word	0x00001388
 8001688:	ffff8fff 	.word	0xffff8fff
 800168c:	08001fb4 	.word	0x08001fb4
 8001690:	20000008 	.word	0x20000008
 8001694:	20000004 	.word	0x20000004

08001698 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001698:	b510      	push	{r4, lr}
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800169a:	f7ff ff0d 	bl	80014b8 <HAL_RCC_GetSysClockFreq>
 800169e:	4b07      	ldr	r3, [pc, #28]	@ (80016bc <HAL_RCC_GetHCLKFreq+0x24>)
 80016a0:	689a      	ldr	r2, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80016a2:	0a12      	lsrs	r2, r2, #8
 80016a4:	230f      	movs	r3, #15
 80016a6:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80016a8:	4a05      	ldr	r2, [pc, #20]	@ (80016c0 <HAL_RCC_GetHCLKFreq+0x28>)
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	589a      	ldr	r2, [r3, r2]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80016ae:	231f      	movs	r3, #31
 80016b0:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80016b2:	40d8      	lsrs	r0, r3
 80016b4:	4b03      	ldr	r3, [pc, #12]	@ (80016c4 <HAL_RCC_GetHCLKFreq+0x2c>)
 80016b6:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 80016b8:	bd10      	pop	{r4, pc}
 80016ba:	46c0      	nop			@ (mov r8, r8)
 80016bc:	40021000 	.word	0x40021000
 80016c0:	08001fb4 	.word	0x08001fb4
 80016c4:	20000008 	.word	0x20000008

080016c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016c8:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 80016ca:	f7ff ffe5 	bl	8001698 <HAL_RCC_GetHCLKFreq>
 80016ce:	4b06      	ldr	r3, [pc, #24]	@ (80016e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80016d0:	689a      	ldr	r2, [r3, #8]
 80016d2:	0b12      	lsrs	r2, r2, #12
 80016d4:	2307      	movs	r3, #7
 80016d6:	4013      	ands	r3, r2
 80016d8:	4a04      	ldr	r2, [pc, #16]	@ (80016ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	589a      	ldr	r2, [r3, r2]
 80016de:	231f      	movs	r3, #31
 80016e0:	4013      	ands	r3, r2
 80016e2:	40d8      	lsrs	r0, r3
}
 80016e4:	bd10      	pop	{r4, pc}
 80016e6:	46c0      	nop			@ (mov r8, r8)
 80016e8:	40021000 	.word	0x40021000
 80016ec:	08001f94 	.word	0x08001f94

080016f0 <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80016f0:	b570      	push	{r4, r5, r6, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80016f6:	6803      	ldr	r3, [r0, #0]
 80016f8:	065b      	lsls	r3, r3, #25
 80016fa:	d550      	bpl.n	800179e <HAL_RCCEx_PeriphCLKConfig+0xae>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016fc:	4b42      	ldr	r3, [pc, #264]	@ (8001808 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 80016fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001700:	00db      	lsls	r3, r3, #3
 8001702:	d435      	bmi.n	8001770 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001704:	4b40      	ldr	r3, [pc, #256]	@ (8001808 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8001706:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001708:	2180      	movs	r1, #128	@ 0x80
 800170a:	0549      	lsls	r1, r1, #21
 800170c:	430a      	orrs	r2, r1
 800170e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001710:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001712:	400b      	ands	r3, r1
 8001714:	9301      	str	r3, [sp, #4]
 8001716:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001718:	2501      	movs	r5, #1
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 800171a:	4b3b      	ldr	r3, [pc, #236]	@ (8001808 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 800171c:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800171e:	22c0      	movs	r2, #192	@ 0xc0
 8001720:	0092      	lsls	r2, r2, #2
 8001722:	000b      	movs	r3, r1
 8001724:	4013      	ands	r3, r2

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001726:	4211      	tst	r1, r2
 8001728:	d035      	beq.n	8001796 <HAL_RCCEx_PeriphCLKConfig+0xa6>
 800172a:	69a2      	ldr	r2, [r4, #24]
 800172c:	429a      	cmp	r2, r3
 800172e:	d00d      	beq.n	800174c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8001730:	4a35      	ldr	r2, [pc, #212]	@ (8001808 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8001732:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 8001734:	4935      	ldr	r1, [pc, #212]	@ (800180c <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 8001736:	400b      	ands	r3, r1
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001738:	6dd0      	ldr	r0, [r2, #92]	@ 0x5c
 800173a:	2180      	movs	r1, #128	@ 0x80
 800173c:	0249      	lsls	r1, r1, #9
 800173e:	4301      	orrs	r1, r0
 8001740:	65d1      	str	r1, [r2, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001742:	6dd1      	ldr	r1, [r2, #92]	@ 0x5c
 8001744:	4832      	ldr	r0, [pc, #200]	@ (8001810 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8001746:	4001      	ands	r1, r0
 8001748:	65d1      	str	r1, [r2, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 800174a:	65d3      	str	r3, [r2, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 800174c:	07db      	lsls	r3, r3, #31
 800174e:	d411      	bmi.n	8001774 <HAL_RCCEx_PeriphCLKConfig+0x84>
    }

    if (ret == HAL_OK)
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001750:	4a2d      	ldr	r2, [pc, #180]	@ (8001808 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8001752:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 8001754:	492d      	ldr	r1, [pc, #180]	@ (800180c <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 8001756:	400b      	ands	r3, r1
 8001758:	69a1      	ldr	r1, [r4, #24]
 800175a:	430b      	orrs	r3, r1
 800175c:	65d3      	str	r3, [r2, #92]	@ 0x5c
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800175e:	2000      	movs	r0, #0
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001760:	2d01      	cmp	r5, #1
 8001762:	d11d      	bne.n	80017a0 <HAL_RCCEx_PeriphCLKConfig+0xb0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001764:	4a28      	ldr	r2, [pc, #160]	@ (8001808 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8001766:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8001768:	492a      	ldr	r1, [pc, #168]	@ (8001814 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 800176a:	400b      	ands	r3, r1
 800176c:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800176e:	e017      	b.n	80017a0 <HAL_RCCEx_PeriphCLKConfig+0xb0>
    FlagStatus       pwrclkchanged = RESET;
 8001770:	2500      	movs	r5, #0
 8001772:	e7d2      	b.n	800171a <HAL_RCCEx_PeriphCLKConfig+0x2a>
      tickstart = HAL_GetTick();
 8001774:	f7fe fed8 	bl	8000528 <HAL_GetTick>
 8001778:	0006      	movs	r6, r0
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800177a:	4b23      	ldr	r3, [pc, #140]	@ (8001808 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 800177c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800177e:	079b      	lsls	r3, r3, #30
 8001780:	d407      	bmi.n	8001792 <HAL_RCCEx_PeriphCLKConfig+0xa2>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001782:	f7fe fed1 	bl	8000528 <HAL_GetTick>
 8001786:	1b80      	subs	r0, r0, r6
 8001788:	4b23      	ldr	r3, [pc, #140]	@ (8001818 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 800178a:	4298      	cmp	r0, r3
 800178c:	d9f5      	bls.n	800177a <HAL_RCCEx_PeriphCLKConfig+0x8a>
          ret = HAL_TIMEOUT;
 800178e:	2003      	movs	r0, #3
 8001790:	e002      	b.n	8001798 <HAL_RCCEx_PeriphCLKConfig+0xa8>
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001792:	2000      	movs	r0, #0
 8001794:	e000      	b.n	8001798 <HAL_RCCEx_PeriphCLKConfig+0xa8>
 8001796:	2000      	movs	r0, #0
    if (ret == HAL_OK)
 8001798:	2800      	cmp	r0, #0
 800179a:	d1e1      	bne.n	8001760 <HAL_RCCEx_PeriphCLKConfig+0x70>
 800179c:	e7d8      	b.n	8001750 <HAL_RCCEx_PeriphCLKConfig+0x60>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800179e:	2000      	movs	r0, #0
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80017a0:	6823      	ldr	r3, [r4, #0]
 80017a2:	07db      	lsls	r3, r3, #31
 80017a4:	d506      	bpl.n	80017b4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80017a6:	4a18      	ldr	r2, [pc, #96]	@ (8001808 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 80017a8:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 80017aa:	2103      	movs	r1, #3
 80017ac:	438b      	bics	r3, r1
 80017ae:	68a1      	ldr	r1, [r4, #8]
 80017b0:	430b      	orrs	r3, r1
 80017b2:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80017b4:	6823      	ldr	r3, [r4, #0]
 80017b6:	079b      	lsls	r3, r3, #30
 80017b8:	d506      	bpl.n	80017c8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80017ba:	4a13      	ldr	r2, [pc, #76]	@ (8001808 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 80017bc:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 80017be:	4917      	ldr	r1, [pc, #92]	@ (800181c <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 80017c0:	400b      	ands	r3, r1
 80017c2:	68e1      	ldr	r1, [r4, #12]
 80017c4:	430b      	orrs	r3, r1
 80017c6:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80017c8:	6823      	ldr	r3, [r4, #0]
 80017ca:	069b      	lsls	r3, r3, #26
 80017cc:	d506      	bpl.n	80017dc <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80017ce:	4a0e      	ldr	r2, [pc, #56]	@ (8001808 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 80017d0:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	089b      	lsrs	r3, r3, #2
 80017d6:	6961      	ldr	r1, [r4, #20]
 80017d8:	430b      	orrs	r3, r1
 80017da:	6553      	str	r3, [r2, #84]	@ 0x54
    __HAL_RCC_FDCAN1_CONFIG(PeriphClkInit->Fdcan1ClockSelection);

  }
#endif /* FDCAN1 */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80017dc:	6823      	ldr	r3, [r4, #0]
 80017de:	075b      	lsls	r3, r3, #29
 80017e0:	d506      	bpl.n	80017f0 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80017e2:	4a09      	ldr	r2, [pc, #36]	@ (8001808 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 80017e4:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 80017e6:	490e      	ldr	r1, [pc, #56]	@ (8001820 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80017e8:	400b      	ands	r3, r1
 80017ea:	6921      	ldr	r1, [r4, #16]
 80017ec:	430b      	orrs	r3, r1
 80017ee:	6553      	str	r3, [r2, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 80017f0:	6823      	ldr	r3, [r4, #0]
 80017f2:	061b      	lsls	r3, r3, #24
 80017f4:	d506      	bpl.n	8001804 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 80017f6:	4a04      	ldr	r2, [pc, #16]	@ (8001808 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 80017f8:	6813      	ldr	r3, [r2, #0]
 80017fa:	21e0      	movs	r1, #224	@ 0xe0
 80017fc:	438b      	bics	r3, r1
 80017fe:	6861      	ldr	r1, [r4, #4]
 8001800:	430b      	orrs	r3, r1
 8001802:	6013      	str	r3, [r2, #0]
  }
  return status;
}
 8001804:	b002      	add	sp, #8
 8001806:	bd70      	pop	{r4, r5, r6, pc}
 8001808:	40021000 	.word	0x40021000
 800180c:	fffffcff 	.word	0xfffffcff
 8001810:	fffeffff 	.word	0xfffeffff
 8001814:	efffffff 	.word	0xefffffff
 8001818:	00001388 	.word	0x00001388
 800181c:	ffffcfff 	.word	0xffffcfff
 8001820:	ffff3fff 	.word	0xffff3fff

08001824 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001824:	b530      	push	{r4, r5, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001826:	f3ef 8410 	mrs	r4, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800182a:	2201      	movs	r2, #1
 800182c:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8001830:	6801      	ldr	r1, [r0, #0]
 8001832:	680b      	ldr	r3, [r1, #0]
 8001834:	4d12      	ldr	r5, [pc, #72]	@ (8001880 <UART_EndRxTransfer+0x5c>)
 8001836:	402b      	ands	r3, r5
 8001838:	600b      	str	r3, [r1, #0]
 800183a:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800183e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001842:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8001846:	6802      	ldr	r2, [r0, #0]
 8001848:	6893      	ldr	r3, [r2, #8]
 800184a:	4c0e      	ldr	r4, [pc, #56]	@ (8001884 <UART_EndRxTransfer+0x60>)
 800184c:	4023      	ands	r3, r4
 800184e:	6093      	str	r3, [r2, #8]
 8001850:	f381 8810 	msr	PRIMASK, r1

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001854:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8001856:	2b01      	cmp	r3, #1
 8001858:	d006      	beq.n	8001868 <UART_EndRxTransfer+0x44>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800185a:	238c      	movs	r3, #140	@ 0x8c
 800185c:	2220      	movs	r2, #32
 800185e:	50c2      	str	r2, [r0, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001860:	2300      	movs	r3, #0
 8001862:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8001864:	6743      	str	r3, [r0, #116]	@ 0x74
}
 8001866:	bd30      	pop	{r4, r5, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001868:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800186c:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001870:	6802      	ldr	r2, [r0, #0]
 8001872:	6813      	ldr	r3, [r2, #0]
 8001874:	2410      	movs	r4, #16
 8001876:	43a3      	bics	r3, r4
 8001878:	6013      	str	r3, [r2, #0]
 800187a:	f381 8810 	msr	PRIMASK, r1
}
 800187e:	e7ec      	b.n	800185a <UART_EndRxTransfer+0x36>
 8001880:	fffffedf 	.word	0xfffffedf
 8001884:	effffffe 	.word	0xeffffffe

08001888 <UART_SetConfig>:
{
 8001888:	b510      	push	{r4, lr}
 800188a:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800188c:	6883      	ldr	r3, [r0, #8]
 800188e:	6902      	ldr	r2, [r0, #16]
 8001890:	4313      	orrs	r3, r2
 8001892:	6942      	ldr	r2, [r0, #20]
 8001894:	4313      	orrs	r3, r2
 8001896:	69c2      	ldr	r2, [r0, #28]
 8001898:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800189a:	6801      	ldr	r1, [r0, #0]
 800189c:	680a      	ldr	r2, [r1, #0]
 800189e:	4862      	ldr	r0, [pc, #392]	@ (8001a28 <UART_SetConfig+0x1a0>)
 80018a0:	4002      	ands	r2, r0
 80018a2:	4313      	orrs	r3, r2
 80018a4:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80018a6:	6822      	ldr	r2, [r4, #0]
 80018a8:	6853      	ldr	r3, [r2, #4]
 80018aa:	4960      	ldr	r1, [pc, #384]	@ (8001a2c <UART_SetConfig+0x1a4>)
 80018ac:	400b      	ands	r3, r1
 80018ae:	68e1      	ldr	r1, [r4, #12]
 80018b0:	430b      	orrs	r3, r1
 80018b2:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80018b4:	69a3      	ldr	r3, [r4, #24]
  tmpreg |= huart->Init.OneBitSampling;
 80018b6:	6a22      	ldr	r2, [r4, #32]
 80018b8:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80018ba:	6821      	ldr	r1, [r4, #0]
 80018bc:	688b      	ldr	r3, [r1, #8]
 80018be:	485c      	ldr	r0, [pc, #368]	@ (8001a30 <UART_SetConfig+0x1a8>)
 80018c0:	4003      	ands	r3, r0
 80018c2:	4313      	orrs	r3, r2
 80018c4:	608b      	str	r3, [r1, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80018c6:	6822      	ldr	r2, [r4, #0]
 80018c8:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80018ca:	210f      	movs	r1, #15
 80018cc:	438b      	bics	r3, r1
 80018ce:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80018d0:	430b      	orrs	r3, r1
 80018d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80018d4:	6823      	ldr	r3, [r4, #0]
 80018d6:	4a57      	ldr	r2, [pc, #348]	@ (8001a34 <UART_SetConfig+0x1ac>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d030      	beq.n	800193e <UART_SetConfig+0xb6>
 80018dc:	4a56      	ldr	r2, [pc, #344]	@ (8001a38 <UART_SetConfig+0x1b0>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d03e      	beq.n	8001960 <UART_SetConfig+0xd8>
 80018e2:	2310      	movs	r3, #16
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80018e4:	69e0      	ldr	r0, [r4, #28]
 80018e6:	2280      	movs	r2, #128	@ 0x80
 80018e8:	0212      	lsls	r2, r2, #8
 80018ea:	4290      	cmp	r0, r2
 80018ec:	d042      	beq.n	8001974 <UART_SetConfig+0xec>
    switch (clocksource)
 80018ee:	2b04      	cmp	r3, #4
 80018f0:	d100      	bne.n	80018f4 <UART_SetConfig+0x6c>
 80018f2:	e089      	b.n	8001a08 <UART_SetConfig+0x180>
 80018f4:	d87b      	bhi.n	80019ee <UART_SetConfig+0x166>
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d100      	bne.n	80018fc <UART_SetConfig+0x74>
 80018fa:	e07f      	b.n	80019fc <UART_SetConfig+0x174>
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d174      	bne.n	80019ea <UART_SetConfig+0x162>
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8001900:	4b4e      	ldr	r3, [pc, #312]	@ (8001a3c <UART_SetConfig+0x1b4>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	095b      	lsrs	r3, r3, #5
 8001906:	2107      	movs	r1, #7
 8001908:	4019      	ands	r1, r3
 800190a:	3101      	adds	r1, #1
 800190c:	484c      	ldr	r0, [pc, #304]	@ (8001a40 <UART_SetConfig+0x1b8>)
 800190e:	f7fe fbdf 	bl	80000d0 <__udivsi3>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001912:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8001914:	4b4b      	ldr	r3, [pc, #300]	@ (8001a44 <UART_SetConfig+0x1bc>)
 8001916:	0052      	lsls	r2, r2, #1
 8001918:	5ad1      	ldrh	r1, [r2, r3]
 800191a:	f7fe fbd9 	bl	80000d0 <__udivsi3>
 800191e:	6861      	ldr	r1, [r4, #4]
 8001920:	084b      	lsrs	r3, r1, #1
 8001922:	18c0      	adds	r0, r0, r3
 8001924:	f7fe fbd4 	bl	80000d0 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001928:	0002      	movs	r2, r0
 800192a:	3a10      	subs	r2, #16
 800192c:	4b46      	ldr	r3, [pc, #280]	@ (8001a48 <UART_SetConfig+0x1c0>)
 800192e:	429a      	cmp	r2, r3
 8001930:	d86f      	bhi.n	8001a12 <UART_SetConfig+0x18a>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8001932:	6823      	ldr	r3, [r4, #0]
 8001934:	0400      	lsls	r0, r0, #16
 8001936:	0c00      	lsrs	r0, r0, #16
 8001938:	60d8      	str	r0, [r3, #12]
 800193a:	2000      	movs	r0, #0
 800193c:	e06a      	b.n	8001a14 <UART_SetConfig+0x18c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800193e:	4b3f      	ldr	r3, [pc, #252]	@ (8001a3c <UART_SetConfig+0x1b4>)
 8001940:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001942:	2303      	movs	r3, #3
 8001944:	4013      	ands	r3, r2
 8001946:	2b02      	cmp	r3, #2
 8001948:	d00c      	beq.n	8001964 <UART_SetConfig+0xdc>
 800194a:	d805      	bhi.n	8001958 <UART_SetConfig+0xd0>
 800194c:	2b00      	cmp	r3, #0
 800194e:	d00b      	beq.n	8001968 <UART_SetConfig+0xe0>
 8001950:	2b01      	cmp	r3, #1
 8001952:	d10b      	bne.n	800196c <UART_SetConfig+0xe4>
 8001954:	3303      	adds	r3, #3
 8001956:	e7c5      	b.n	80018e4 <UART_SetConfig+0x5c>
 8001958:	2b03      	cmp	r3, #3
 800195a:	d109      	bne.n	8001970 <UART_SetConfig+0xe8>
 800195c:	3305      	adds	r3, #5
 800195e:	e7c1      	b.n	80018e4 <UART_SetConfig+0x5c>
 8001960:	2300      	movs	r3, #0
 8001962:	e7bf      	b.n	80018e4 <UART_SetConfig+0x5c>
 8001964:	2302      	movs	r3, #2
 8001966:	e7bd      	b.n	80018e4 <UART_SetConfig+0x5c>
 8001968:	2300      	movs	r3, #0
 800196a:	e7bb      	b.n	80018e4 <UART_SetConfig+0x5c>
 800196c:	2310      	movs	r3, #16
 800196e:	e7b9      	b.n	80018e4 <UART_SetConfig+0x5c>
 8001970:	2310      	movs	r3, #16
 8001972:	e7b7      	b.n	80018e4 <UART_SetConfig+0x5c>
    switch (clocksource)
 8001974:	2b04      	cmp	r3, #4
 8001976:	d035      	beq.n	80019e4 <UART_SetConfig+0x15c>
 8001978:	d82a      	bhi.n	80019d0 <UART_SetConfig+0x148>
 800197a:	2b00      	cmp	r3, #0
 800197c:	d02c      	beq.n	80019d8 <UART_SetConfig+0x150>
 800197e:	2b02      	cmp	r3, #2
 8001980:	d124      	bne.n	80019cc <UART_SetConfig+0x144>
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8001982:	4b2e      	ldr	r3, [pc, #184]	@ (8001a3c <UART_SetConfig+0x1b4>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	095b      	lsrs	r3, r3, #5
 8001988:	2107      	movs	r1, #7
 800198a:	4019      	ands	r1, r3
 800198c:	3101      	adds	r1, #1
 800198e:	482c      	ldr	r0, [pc, #176]	@ (8001a40 <UART_SetConfig+0x1b8>)
 8001990:	f7fe fb9e 	bl	80000d0 <__udivsi3>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001994:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8001996:	4b2b      	ldr	r3, [pc, #172]	@ (8001a44 <UART_SetConfig+0x1bc>)
 8001998:	0052      	lsls	r2, r2, #1
 800199a:	5ad1      	ldrh	r1, [r2, r3]
 800199c:	f7fe fb98 	bl	80000d0 <__udivsi3>
 80019a0:	0040      	lsls	r0, r0, #1
 80019a2:	6861      	ldr	r1, [r4, #4]
 80019a4:	084b      	lsrs	r3, r1, #1
 80019a6:	18c0      	adds	r0, r0, r3
 80019a8:	f7fe fb92 	bl	80000d0 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80019ac:	0002      	movs	r2, r0
 80019ae:	3a10      	subs	r2, #16
 80019b0:	4b25      	ldr	r3, [pc, #148]	@ (8001a48 <UART_SetConfig+0x1c0>)
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d82b      	bhi.n	8001a0e <UART_SetConfig+0x186>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80019b6:	b282      	uxth	r2, r0
 80019b8:	230f      	movs	r3, #15
 80019ba:	439a      	bics	r2, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80019bc:	0840      	lsrs	r0, r0, #1
 80019be:	3b08      	subs	r3, #8
 80019c0:	4003      	ands	r3, r0
 80019c2:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 80019c4:	6822      	ldr	r2, [r4, #0]
 80019c6:	60d3      	str	r3, [r2, #12]
 80019c8:	2000      	movs	r0, #0
 80019ca:	e023      	b.n	8001a14 <UART_SetConfig+0x18c>
    switch (clocksource)
 80019cc:	2001      	movs	r0, #1
 80019ce:	e021      	b.n	8001a14 <UART_SetConfig+0x18c>
 80019d0:	2b08      	cmp	r3, #8
 80019d2:	d0df      	beq.n	8001994 <UART_SetConfig+0x10c>
 80019d4:	2001      	movs	r0, #1
 80019d6:	e01d      	b.n	8001a14 <UART_SetConfig+0x18c>
        pclk = HAL_RCC_GetPCLK1Freq();
 80019d8:	f7ff fe76 	bl	80016c8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80019dc:	2800      	cmp	r0, #0
 80019de:	d1d9      	bne.n	8001994 <UART_SetConfig+0x10c>
 80019e0:	2000      	movs	r0, #0
 80019e2:	e017      	b.n	8001a14 <UART_SetConfig+0x18c>
        pclk = HAL_RCC_GetSysClockFreq();
 80019e4:	f7ff fd68 	bl	80014b8 <HAL_RCC_GetSysClockFreq>
        break;
 80019e8:	e7f8      	b.n	80019dc <UART_SetConfig+0x154>
    switch (clocksource)
 80019ea:	2001      	movs	r0, #1
 80019ec:	e012      	b.n	8001a14 <UART_SetConfig+0x18c>
 80019ee:	2b08      	cmp	r3, #8
 80019f0:	d102      	bne.n	80019f8 <UART_SetConfig+0x170>
 80019f2:	2080      	movs	r0, #128	@ 0x80
 80019f4:	0200      	lsls	r0, r0, #8
 80019f6:	e78c      	b.n	8001912 <UART_SetConfig+0x8a>
 80019f8:	2001      	movs	r0, #1
 80019fa:	e00b      	b.n	8001a14 <UART_SetConfig+0x18c>
        pclk = HAL_RCC_GetPCLK1Freq();
 80019fc:	f7ff fe64 	bl	80016c8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8001a00:	2800      	cmp	r0, #0
 8001a02:	d186      	bne.n	8001912 <UART_SetConfig+0x8a>
 8001a04:	2000      	movs	r0, #0
 8001a06:	e005      	b.n	8001a14 <UART_SetConfig+0x18c>
        pclk = HAL_RCC_GetSysClockFreq();
 8001a08:	f7ff fd56 	bl	80014b8 <HAL_RCC_GetSysClockFreq>
        break;
 8001a0c:	e7f8      	b.n	8001a00 <UART_SetConfig+0x178>
        ret = HAL_ERROR;
 8001a0e:	2001      	movs	r0, #1
 8001a10:	e000      	b.n	8001a14 <UART_SetConfig+0x18c>
        ret = HAL_ERROR;
 8001a12:	2001      	movs	r0, #1
  huart->NbTxDataToProcess = 1;
 8001a14:	2301      	movs	r3, #1
 8001a16:	226a      	movs	r2, #106	@ 0x6a
 8001a18:	52a3      	strh	r3, [r4, r2]
  huart->NbRxDataToProcess = 1;
 8001a1a:	3a02      	subs	r2, #2
 8001a1c:	52a3      	strh	r3, [r4, r2]
  huart->RxISR = NULL;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->TxISR = NULL;
 8001a22:	67a3      	str	r3, [r4, #120]	@ 0x78
}
 8001a24:	bd10      	pop	{r4, pc}
 8001a26:	46c0      	nop			@ (mov r8, r8)
 8001a28:	cfff69f3 	.word	0xcfff69f3
 8001a2c:	ffffcfff 	.word	0xffffcfff
 8001a30:	11fff4ff 	.word	0x11fff4ff
 8001a34:	40013800 	.word	0x40013800
 8001a38:	40004400 	.word	0x40004400
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	02dc6c00 	.word	0x02dc6c00
 8001a44:	08001f70 	.word	0x08001f70
 8001a48:	0000ffef 	.word	0x0000ffef

08001a4c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001a4c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8001a4e:	071b      	lsls	r3, r3, #28
 8001a50:	d506      	bpl.n	8001a60 <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001a52:	6802      	ldr	r2, [r0, #0]
 8001a54:	6853      	ldr	r3, [r2, #4]
 8001a56:	492c      	ldr	r1, [pc, #176]	@ (8001b08 <UART_AdvFeatureConfig+0xbc>)
 8001a58:	400b      	ands	r3, r1
 8001a5a:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8001a5c:	430b      	orrs	r3, r1
 8001a5e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001a60:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8001a62:	07db      	lsls	r3, r3, #31
 8001a64:	d506      	bpl.n	8001a74 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001a66:	6802      	ldr	r2, [r0, #0]
 8001a68:	6853      	ldr	r3, [r2, #4]
 8001a6a:	4928      	ldr	r1, [pc, #160]	@ (8001b0c <UART_AdvFeatureConfig+0xc0>)
 8001a6c:	400b      	ands	r3, r1
 8001a6e:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8001a70:	430b      	orrs	r3, r1
 8001a72:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001a74:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8001a76:	079b      	lsls	r3, r3, #30
 8001a78:	d506      	bpl.n	8001a88 <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001a7a:	6802      	ldr	r2, [r0, #0]
 8001a7c:	6853      	ldr	r3, [r2, #4]
 8001a7e:	4924      	ldr	r1, [pc, #144]	@ (8001b10 <UART_AdvFeatureConfig+0xc4>)
 8001a80:	400b      	ands	r3, r1
 8001a82:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8001a84:	430b      	orrs	r3, r1
 8001a86:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001a88:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8001a8a:	075b      	lsls	r3, r3, #29
 8001a8c:	d506      	bpl.n	8001a9c <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001a8e:	6802      	ldr	r2, [r0, #0]
 8001a90:	6853      	ldr	r3, [r2, #4]
 8001a92:	4920      	ldr	r1, [pc, #128]	@ (8001b14 <UART_AdvFeatureConfig+0xc8>)
 8001a94:	400b      	ands	r3, r1
 8001a96:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 8001a98:	430b      	orrs	r3, r1
 8001a9a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001a9c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8001a9e:	06db      	lsls	r3, r3, #27
 8001aa0:	d506      	bpl.n	8001ab0 <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001aa2:	6802      	ldr	r2, [r0, #0]
 8001aa4:	6893      	ldr	r3, [r2, #8]
 8001aa6:	491c      	ldr	r1, [pc, #112]	@ (8001b18 <UART_AdvFeatureConfig+0xcc>)
 8001aa8:	400b      	ands	r3, r1
 8001aaa:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 8001aac:	430b      	orrs	r3, r1
 8001aae:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001ab0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8001ab2:	069b      	lsls	r3, r3, #26
 8001ab4:	d506      	bpl.n	8001ac4 <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001ab6:	6802      	ldr	r2, [r0, #0]
 8001ab8:	6893      	ldr	r3, [r2, #8]
 8001aba:	4918      	ldr	r1, [pc, #96]	@ (8001b1c <UART_AdvFeatureConfig+0xd0>)
 8001abc:	400b      	ands	r3, r1
 8001abe:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8001ac0:	430b      	orrs	r3, r1
 8001ac2:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001ac4:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8001ac6:	065b      	lsls	r3, r3, #25
 8001ac8:	d50b      	bpl.n	8001ae2 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001aca:	6802      	ldr	r2, [r0, #0]
 8001acc:	6853      	ldr	r3, [r2, #4]
 8001ace:	4914      	ldr	r1, [pc, #80]	@ (8001b20 <UART_AdvFeatureConfig+0xd4>)
 8001ad0:	400b      	ands	r3, r1
 8001ad2:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 8001ad4:	430b      	orrs	r3, r1
 8001ad6:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001ad8:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8001ada:	2380      	movs	r3, #128	@ 0x80
 8001adc:	035b      	lsls	r3, r3, #13
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d00a      	beq.n	8001af8 <UART_AdvFeatureConfig+0xac>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001ae2:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8001ae4:	061b      	lsls	r3, r3, #24
 8001ae6:	d506      	bpl.n	8001af6 <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001ae8:	6802      	ldr	r2, [r0, #0]
 8001aea:	6853      	ldr	r3, [r2, #4]
 8001aec:	490d      	ldr	r1, [pc, #52]	@ (8001b24 <UART_AdvFeatureConfig+0xd8>)
 8001aee:	400b      	ands	r3, r1
 8001af0:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8001af2:	430b      	orrs	r3, r1
 8001af4:	6053      	str	r3, [r2, #4]
}
 8001af6:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001af8:	6802      	ldr	r2, [r0, #0]
 8001afa:	6853      	ldr	r3, [r2, #4]
 8001afc:	490a      	ldr	r1, [pc, #40]	@ (8001b28 <UART_AdvFeatureConfig+0xdc>)
 8001afe:	400b      	ands	r3, r1
 8001b00:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8001b02:	430b      	orrs	r3, r1
 8001b04:	6053      	str	r3, [r2, #4]
 8001b06:	e7ec      	b.n	8001ae2 <UART_AdvFeatureConfig+0x96>
 8001b08:	ffff7fff 	.word	0xffff7fff
 8001b0c:	fffdffff 	.word	0xfffdffff
 8001b10:	fffeffff 	.word	0xfffeffff
 8001b14:	fffbffff 	.word	0xfffbffff
 8001b18:	ffffefff 	.word	0xffffefff
 8001b1c:	ffffdfff 	.word	0xffffdfff
 8001b20:	ffefffff 	.word	0xffefffff
 8001b24:	fff7ffff 	.word	0xfff7ffff
 8001b28:	ff9fffff 	.word	0xff9fffff

08001b2c <UART_WaitOnFlagUntilTimeout>:
{
 8001b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b2e:	46ce      	mov	lr, r9
 8001b30:	4647      	mov	r7, r8
 8001b32:	b580      	push	{r7, lr}
 8001b34:	0006      	movs	r6, r0
 8001b36:	000d      	movs	r5, r1
 8001b38:	0017      	movs	r7, r2
 8001b3a:	4699      	mov	r9, r3
 8001b3c:	9b08      	ldr	r3, [sp, #32]
 8001b3e:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b40:	6833      	ldr	r3, [r6, #0]
 8001b42:	69dc      	ldr	r4, [r3, #28]
 8001b44:	402c      	ands	r4, r5
 8001b46:	1b64      	subs	r4, r4, r5
 8001b48:	4263      	negs	r3, r4
 8001b4a:	415c      	adcs	r4, r3
 8001b4c:	42bc      	cmp	r4, r7
 8001b4e:	d133      	bne.n	8001bb8 <UART_WaitOnFlagUntilTimeout+0x8c>
    if (Timeout != HAL_MAX_DELAY)
 8001b50:	4643      	mov	r3, r8
 8001b52:	3301      	adds	r3, #1
 8001b54:	d0f4      	beq.n	8001b40 <UART_WaitOnFlagUntilTimeout+0x14>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b56:	f7fe fce7 	bl	8000528 <HAL_GetTick>
 8001b5a:	464b      	mov	r3, r9
 8001b5c:	1ac0      	subs	r0, r0, r3
 8001b5e:	4540      	cmp	r0, r8
 8001b60:	d82f      	bhi.n	8001bc2 <UART_WaitOnFlagUntilTimeout+0x96>
 8001b62:	4643      	mov	r3, r8
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d02e      	beq.n	8001bc6 <UART_WaitOnFlagUntilTimeout+0x9a>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001b68:	6832      	ldr	r2, [r6, #0]
 8001b6a:	6813      	ldr	r3, [r2, #0]
 8001b6c:	075b      	lsls	r3, r3, #29
 8001b6e:	d5e7      	bpl.n	8001b40 <UART_WaitOnFlagUntilTimeout+0x14>
 8001b70:	2d80      	cmp	r5, #128	@ 0x80
 8001b72:	d0e5      	beq.n	8001b40 <UART_WaitOnFlagUntilTimeout+0x14>
 8001b74:	2d40      	cmp	r5, #64	@ 0x40
 8001b76:	d0e3      	beq.n	8001b40 <UART_WaitOnFlagUntilTimeout+0x14>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001b78:	69d3      	ldr	r3, [r2, #28]
 8001b7a:	071b      	lsls	r3, r3, #28
 8001b7c:	d410      	bmi.n	8001ba0 <UART_WaitOnFlagUntilTimeout+0x74>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001b7e:	69d3      	ldr	r3, [r2, #28]
 8001b80:	051b      	lsls	r3, r3, #20
 8001b82:	d5dd      	bpl.n	8001b40 <UART_WaitOnFlagUntilTimeout+0x14>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001b84:	2380      	movs	r3, #128	@ 0x80
 8001b86:	011b      	lsls	r3, r3, #4
 8001b88:	6213      	str	r3, [r2, #32]
          UART_EndRxTransfer(huart);
 8001b8a:	0030      	movs	r0, r6
 8001b8c:	f7ff fe4a 	bl	8001824 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001b90:	2390      	movs	r3, #144	@ 0x90
 8001b92:	2220      	movs	r2, #32
 8001b94:	50f2      	str	r2, [r6, r3]
          __HAL_UNLOCK(huart);
 8001b96:	3b0c      	subs	r3, #12
 8001b98:	2200      	movs	r2, #0
 8001b9a:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 8001b9c:	2003      	movs	r0, #3
 8001b9e:	e00c      	b.n	8001bba <UART_WaitOnFlagUntilTimeout+0x8e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001ba0:	2408      	movs	r4, #8
 8001ba2:	6214      	str	r4, [r2, #32]
          UART_EndRxTransfer(huart);
 8001ba4:	0030      	movs	r0, r6
 8001ba6:	f7ff fe3d 	bl	8001824 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001baa:	2390      	movs	r3, #144	@ 0x90
 8001bac:	50f4      	str	r4, [r6, r3]
          __HAL_UNLOCK(huart);
 8001bae:	3b0c      	subs	r3, #12
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	54f2      	strb	r2, [r6, r3]
          return HAL_ERROR;
 8001bb4:	2001      	movs	r0, #1
 8001bb6:	e000      	b.n	8001bba <UART_WaitOnFlagUntilTimeout+0x8e>
  return HAL_OK;
 8001bb8:	2000      	movs	r0, #0
}
 8001bba:	bcc0      	pop	{r6, r7}
 8001bbc:	46b9      	mov	r9, r7
 8001bbe:	46b0      	mov	r8, r6
 8001bc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8001bc2:	2003      	movs	r0, #3
 8001bc4:	e7f9      	b.n	8001bba <UART_WaitOnFlagUntilTimeout+0x8e>
 8001bc6:	2003      	movs	r0, #3
 8001bc8:	e7f7      	b.n	8001bba <UART_WaitOnFlagUntilTimeout+0x8e>
	...

08001bcc <UART_CheckIdleState>:
{
 8001bcc:	b530      	push	{r4, r5, lr}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bd2:	2390      	movs	r3, #144	@ 0x90
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	50c2      	str	r2, [r0, r3]
  tickstart = HAL_GetTick();
 8001bd8:	f7fe fca6 	bl	8000528 <HAL_GetTick>
 8001bdc:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001bde:	6823      	ldr	r3, [r4, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	071b      	lsls	r3, r3, #28
 8001be4:	d410      	bmi.n	8001c08 <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001be6:	6823      	ldr	r3, [r4, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	075b      	lsls	r3, r3, #29
 8001bec:	d42b      	bmi.n	8001c46 <UART_CheckIdleState+0x7a>
  huart->gState = HAL_UART_STATE_READY;
 8001bee:	2320      	movs	r3, #32
 8001bf0:	2288      	movs	r2, #136	@ 0x88
 8001bf2:	50a3      	str	r3, [r4, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8001bf4:	3204      	adds	r2, #4
 8001bf6:	50a3      	str	r3, [r4, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001bfc:	6723      	str	r3, [r4, #112]	@ 0x70
  __HAL_UNLOCK(huart);
 8001bfe:	3a08      	subs	r2, #8
 8001c00:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8001c02:	2000      	movs	r0, #0
}
 8001c04:	b003      	add	sp, #12
 8001c06:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001c08:	2180      	movs	r1, #128	@ 0x80
 8001c0a:	4b23      	ldr	r3, [pc, #140]	@ (8001c98 <UART_CheckIdleState+0xcc>)
 8001c0c:	9300      	str	r3, [sp, #0]
 8001c0e:	0003      	movs	r3, r0
 8001c10:	2200      	movs	r2, #0
 8001c12:	0389      	lsls	r1, r1, #14
 8001c14:	0020      	movs	r0, r4
 8001c16:	f7ff ff89 	bl	8001b2c <UART_WaitOnFlagUntilTimeout>
 8001c1a:	2800      	cmp	r0, #0
 8001c1c:	d0e3      	beq.n	8001be6 <UART_CheckIdleState+0x1a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001c1e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c22:	2301      	movs	r3, #1
 8001c24:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8001c28:	6822      	ldr	r2, [r4, #0]
 8001c2a:	6813      	ldr	r3, [r2, #0]
 8001c2c:	2080      	movs	r0, #128	@ 0x80
 8001c2e:	4383      	bics	r3, r0
 8001c30:	6013      	str	r3, [r2, #0]
 8001c32:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 8001c36:	2388      	movs	r3, #136	@ 0x88
 8001c38:	2220      	movs	r2, #32
 8001c3a:	50e2      	str	r2, [r4, r3]
      __HAL_UNLOCK(huart);
 8001c3c:	3b04      	subs	r3, #4
 8001c3e:	2200      	movs	r2, #0
 8001c40:	54e2      	strb	r2, [r4, r3]
      return HAL_TIMEOUT;
 8001c42:	387d      	subs	r0, #125	@ 0x7d
 8001c44:	e7de      	b.n	8001c04 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001c46:	2180      	movs	r1, #128	@ 0x80
 8001c48:	4b13      	ldr	r3, [pc, #76]	@ (8001c98 <UART_CheckIdleState+0xcc>)
 8001c4a:	9300      	str	r3, [sp, #0]
 8001c4c:	002b      	movs	r3, r5
 8001c4e:	2200      	movs	r2, #0
 8001c50:	03c9      	lsls	r1, r1, #15
 8001c52:	0020      	movs	r0, r4
 8001c54:	f7ff ff6a 	bl	8001b2c <UART_WaitOnFlagUntilTimeout>
 8001c58:	2800      	cmp	r0, #0
 8001c5a:	d0c8      	beq.n	8001bee <UART_CheckIdleState+0x22>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001c5c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c60:	2201      	movs	r2, #1
 8001c62:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8001c66:	6821      	ldr	r1, [r4, #0]
 8001c68:	680b      	ldr	r3, [r1, #0]
 8001c6a:	4d0c      	ldr	r5, [pc, #48]	@ (8001c9c <UART_CheckIdleState+0xd0>)
 8001c6c:	402b      	ands	r3, r5
 8001c6e:	600b      	str	r3, [r1, #0]
 8001c70:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001c74:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c78:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c7c:	6821      	ldr	r1, [r4, #0]
 8001c7e:	688b      	ldr	r3, [r1, #8]
 8001c80:	4393      	bics	r3, r2
 8001c82:	608b      	str	r3, [r1, #8]
 8001c84:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 8001c88:	238c      	movs	r3, #140	@ 0x8c
 8001c8a:	321f      	adds	r2, #31
 8001c8c:	50e2      	str	r2, [r4, r3]
      __HAL_UNLOCK(huart);
 8001c8e:	3b08      	subs	r3, #8
 8001c90:	2200      	movs	r2, #0
 8001c92:	54e2      	strb	r2, [r4, r3]
      return HAL_TIMEOUT;
 8001c94:	2003      	movs	r0, #3
 8001c96:	e7b5      	b.n	8001c04 <UART_CheckIdleState+0x38>
 8001c98:	01ffffff 	.word	0x01ffffff
 8001c9c:	fffffedf 	.word	0xfffffedf

08001ca0 <HAL_UART_Init>:
{
 8001ca0:	b510      	push	{r4, lr}
 8001ca2:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8001ca4:	d030      	beq.n	8001d08 <HAL_UART_Init+0x68>
  if (huart->gState == HAL_UART_STATE_RESET)
 8001ca6:	2388      	movs	r3, #136	@ 0x88
 8001ca8:	58c3      	ldr	r3, [r0, r3]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d022      	beq.n	8001cf4 <HAL_UART_Init+0x54>
  huart->gState = HAL_UART_STATE_BUSY;
 8001cae:	2388      	movs	r3, #136	@ 0x88
 8001cb0:	2224      	movs	r2, #36	@ 0x24
 8001cb2:	50e2      	str	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 8001cb4:	6822      	ldr	r2, [r4, #0]
 8001cb6:	6813      	ldr	r3, [r2, #0]
 8001cb8:	2101      	movs	r1, #1
 8001cba:	438b      	bics	r3, r1
 8001cbc:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001cbe:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d11d      	bne.n	8001d00 <HAL_UART_Init+0x60>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001cc4:	0020      	movs	r0, r4
 8001cc6:	f7ff fddf 	bl	8001888 <UART_SetConfig>
 8001cca:	2801      	cmp	r0, #1
 8001ccc:	d011      	beq.n	8001cf2 <HAL_UART_Init+0x52>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001cce:	6822      	ldr	r2, [r4, #0]
 8001cd0:	6853      	ldr	r3, [r2, #4]
 8001cd2:	490e      	ldr	r1, [pc, #56]	@ (8001d0c <HAL_UART_Init+0x6c>)
 8001cd4:	400b      	ands	r3, r1
 8001cd6:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001cd8:	6822      	ldr	r2, [r4, #0]
 8001cda:	6893      	ldr	r3, [r2, #8]
 8001cdc:	212a      	movs	r1, #42	@ 0x2a
 8001cde:	438b      	bics	r3, r1
 8001ce0:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8001ce2:	6822      	ldr	r2, [r4, #0]
 8001ce4:	6813      	ldr	r3, [r2, #0]
 8001ce6:	3929      	subs	r1, #41	@ 0x29
 8001ce8:	430b      	orrs	r3, r1
 8001cea:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8001cec:	0020      	movs	r0, r4
 8001cee:	f7ff ff6d 	bl	8001bcc <UART_CheckIdleState>
}
 8001cf2:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8001cf4:	3384      	adds	r3, #132	@ 0x84
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 8001cfa:	f7ff fa33 	bl	8001164 <HAL_UART_MspInit>
 8001cfe:	e7d6      	b.n	8001cae <HAL_UART_Init+0xe>
    UART_AdvFeatureConfig(huart);
 8001d00:	0020      	movs	r0, r4
 8001d02:	f7ff fea3 	bl	8001a4c <UART_AdvFeatureConfig>
 8001d06:	e7dd      	b.n	8001cc4 <HAL_UART_Init+0x24>
    return HAL_ERROR;
 8001d08:	2001      	movs	r0, #1
 8001d0a:	e7f2      	b.n	8001cf2 <HAL_UART_Init+0x52>
 8001d0c:	ffffb7ff 	.word	0xffffb7ff

08001d10 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d10:	e7fe      	b.n	8001d10 <NMI_Handler>

08001d12 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d12:	e7fe      	b.n	8001d12 <HardFault_Handler>

08001d14 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001d14:	4770      	bx	lr

08001d16 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d16:	4770      	bx	lr

08001d18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d18:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d1a:	f7fe fbf9 	bl	8000510 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d1e:	bd10      	pop	{r4, pc}

08001d20 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8001d20:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HALL_DIGITAL_Pin);
 8001d22:	2001      	movs	r0, #1
 8001d24:	f7ff f990 	bl	8001048 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8001d28:	bd10      	pop	{r4, pc}

08001d2a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001d2a:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8001d2c:	2000      	movs	r0, #0
 8001d2e:	f000 f89b 	bl	8001e68 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001d32:	bd10      	pop	{r4, pc}

08001d34 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001d34:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001d36:	4802      	ldr	r0, [pc, #8]	@ (8001d40 <DMA1_Channel1_IRQHandler+0xc>)
 8001d38:	f7fe ffca 	bl	8000cd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001d3c:	bd10      	pop	{r4, pc}
 8001d3e:	46c0      	nop			@ (mov r8, r8)
 8001d40:	20000118 	.word	0x20000118

08001d44 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8001d44:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001d46:	4802      	ldr	r0, [pc, #8]	@ (8001d50 <DMA1_Channel2_3_IRQHandler+0xc>)
 8001d48:	f7fe ffc2 	bl	8000cd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8001d4c:	bd10      	pop	{r4, pc}
 8001d4e:	46c0      	nop			@ (mov r8, r8)
 8001d50:	20000028 	.word	0x20000028

08001d54 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED4
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001d54:	b570      	push	{r4, r5, r6, lr}
 8001d56:	b088      	sub	sp, #32
 8001d58:	0004      	movs	r4, r0
  int32_t ret = BSP_ERROR_NONE;
  GPIO_InitTypeDef  gpio_init_structure;

#if defined (USE_NUCLEO_64)
  if ((Led != LED1)
 8001d5a:	2801      	cmp	r0, #1
 8001d5c:	d832      	bhi.n	8001dc4 <BSP_LED_Init+0x70>
  }
  else
  {
    /* Enable the GPIO LED Clock */
#if defined (USE_NUCLEO_64)
    if (Led == LED1)
 8001d5e:	2800      	cmp	r0, #0
 8001d60:	d11d      	bne.n	8001d9e <BSP_LED_Init+0x4a>
    {
      LED1_GPIO_CLK_ENABLE();
 8001d62:	4a1a      	ldr	r2, [pc, #104]	@ (8001dcc <BSP_LED_Init+0x78>)
 8001d64:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 8001d66:	2301      	movs	r3, #1
 8001d68:	4319      	orrs	r1, r3
 8001d6a:	6351      	str	r1, [r2, #52]	@ 0x34
 8001d6c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001d6e:	4013      	ands	r3, r2
 8001d70:	9301      	str	r3, [sp, #4]
 8001d72:	9b01      	ldr	r3, [sp, #4]
      LED4_GPIO_CLK_ENABLE();
    }
#endif /* defined (USE_NUCLEO_64) */

    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8001d74:	4b16      	ldr	r3, [pc, #88]	@ (8001dd0 <BSP_LED_Init+0x7c>)
 8001d76:	0062      	lsls	r2, r4, #1
 8001d78:	5ad6      	ldrh	r6, [r2, r3]
 8001d7a:	a903      	add	r1, sp, #12
 8001d7c:	9603      	str	r6, [sp, #12]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	604b      	str	r3, [r1, #4]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8001d82:	2300      	movs	r3, #0
 8001d84:	608b      	str	r3, [r1, #8]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d86:	3303      	adds	r3, #3
 8001d88:	60cb      	str	r3, [r1, #12]

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001d8a:	4b12      	ldr	r3, [pc, #72]	@ (8001dd4 <BSP_LED_Init+0x80>)
 8001d8c:	00a2      	lsls	r2, r4, #2
 8001d8e:	58d0      	ldr	r0, [r2, r3]
 8001d90:	f7ff f86c 	bl	8000e6c <HAL_GPIO_Init>
#if defined (USE_NUCLEO_64)
    if (Led == LED2)
 8001d94:	2c01      	cmp	r4, #1
 8001d96:	d00c      	beq.n	8001db2 <BSP_LED_Init+0x5e>
  int32_t ret = BSP_ERROR_NONE;
 8001d98:	2000      	movs	r0, #0
     HAL_GPIO_WritePin(LED_PORT [Led], (uint16_t)LED_PIN[Led], GPIO_PIN_SET);
    }
#endif
  }
  return ret;
}
 8001d9a:	b008      	add	sp, #32
 8001d9c:	bd70      	pop	{r4, r5, r6, pc}
      LED2_GPIO_CLK_ENABLE();
 8001d9e:	4a0b      	ldr	r2, [pc, #44]	@ (8001dcc <BSP_LED_Init+0x78>)
 8001da0:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 8001da2:	2304      	movs	r3, #4
 8001da4:	4319      	orrs	r1, r3
 8001da6:	6351      	str	r1, [r2, #52]	@ 0x34
 8001da8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001daa:	4013      	ands	r3, r2
 8001dac:	9302      	str	r3, [sp, #8]
 8001dae:	9b02      	ldr	r3, [sp, #8]
 8001db0:	e7e0      	b.n	8001d74 <BSP_LED_Init+0x20>
     HAL_GPIO_WritePin(LED_PORT [Led], (uint16_t)LED_PIN[Led], GPIO_PIN_SET);
 8001db2:	4b08      	ldr	r3, [pc, #32]	@ (8001dd4 <BSP_LED_Init+0x80>)
 8001db4:	00a4      	lsls	r4, r4, #2
 8001db6:	58e0      	ldr	r0, [r4, r3]
 8001db8:	2201      	movs	r2, #1
 8001dba:	0031      	movs	r1, r6
 8001dbc:	f7ff f934 	bl	8001028 <HAL_GPIO_WritePin>
  int32_t ret = BSP_ERROR_NONE;
 8001dc0:	2000      	movs	r0, #0
 8001dc2:	e7ea      	b.n	8001d9a <BSP_LED_Init+0x46>
    ret = BSP_ERROR_WRONG_PARAM;
 8001dc4:	2002      	movs	r0, #2
 8001dc6:	4240      	negs	r0, r0
 8001dc8:	e7e7      	b.n	8001d9a <BSP_LED_Init+0x46>
 8001dca:	46c0      	nop			@ (mov r8, r8)
 8001dcc:	40021000 	.word	0x40021000
 8001dd0:	08001f88 	.word	0x08001f88
 8001dd4:	08001f8c 	.word	0x08001f8c

08001dd8 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001dd8:	b530      	push	{r4, r5, lr}
 8001dda:	b087      	sub	sp, #28
 8001ddc:	0005      	movs	r5, r0
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001dde:	4a1c      	ldr	r2, [pc, #112]	@ (8001e50 <BSP_PB_Init+0x78>)
 8001de0:	6b50      	ldr	r0, [r2, #52]	@ 0x34
 8001de2:	2304      	movs	r3, #4
 8001de4:	4318      	orrs	r0, r3
 8001de6:	6350      	str	r0, [r2, #52]	@ 0x34
 8001de8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001dea:	4013      	ands	r3, r2
 8001dec:	9300      	str	r3, [sp, #0]
 8001dee:	9b00      	ldr	r3, [sp, #0]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8001df0:	ab01      	add	r3, sp, #4
 8001df2:	2280      	movs	r2, #128	@ 0x80
 8001df4:	0192      	lsls	r2, r2, #6
 8001df6:	9201      	str	r2, [sp, #4]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001df8:	2201      	movs	r2, #1
 8001dfa:	9203      	str	r2, [sp, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dfc:	3201      	adds	r2, #1
 8001dfe:	9204      	str	r2, [sp, #16]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8001e00:	2900      	cmp	r1, #0
 8001e02:	d108      	bne.n	8001e16 <BSP_PB_Init+0x3e>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001e04:	0019      	movs	r1, r3
 8001e06:	2300      	movs	r3, #0
 8001e08:	604b      	str	r3, [r1, #4]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8001e0a:	4812      	ldr	r0, [pc, #72]	@ (8001e54 <BSP_PB_Init+0x7c>)
 8001e0c:	f7ff f82e 	bl	8000e6c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
  }

  return BSP_ERROR_NONE;
}
 8001e10:	2000      	movs	r0, #0
 8001e12:	b007      	add	sp, #28
 8001e14:	bd30      	pop	{r4, r5, pc}
    gpio_init_structure.Mode = GPIO_MODE_IT_FALLING;
 8001e16:	a901      	add	r1, sp, #4
 8001e18:	4b0f      	ldr	r3, [pc, #60]	@ (8001e58 <BSP_PB_Init+0x80>)
 8001e1a:	604b      	str	r3, [r1, #4]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001e1c:	480d      	ldr	r0, [pc, #52]	@ (8001e54 <BSP_PB_Init+0x7c>)
 8001e1e:	f7ff f825 	bl	8000e6c <HAL_GPIO_Init>
    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8001e22:	006c      	lsls	r4, r5, #1
 8001e24:	1964      	adds	r4, r4, r5
 8001e26:	00a4      	lsls	r4, r4, #2
 8001e28:	4b0c      	ldr	r3, [pc, #48]	@ (8001e5c <BSP_PB_Init+0x84>)
 8001e2a:	18e4      	adds	r4, r4, r3
 8001e2c:	490c      	ldr	r1, [pc, #48]	@ (8001e60 <BSP_PB_Init+0x88>)
 8001e2e:	0020      	movs	r0, r4
 8001e30:	f7fe fff0 	bl	8000e14 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8001e34:	4a0b      	ldr	r2, [pc, #44]	@ (8001e64 <BSP_PB_Init+0x8c>)
 8001e36:	2100      	movs	r1, #0
 8001e38:	0020      	movs	r0, r4
 8001e3a:	f7fe ffd9 	bl	8000df0 <HAL_EXTI_RegisterCallback>
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001e3e:	2200      	movs	r2, #0
 8001e40:	210f      	movs	r1, #15
 8001e42:	2007      	movs	r0, #7
 8001e44:	f7fe fe34 	bl	8000ab0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001e48:	2007      	movs	r0, #7
 8001e4a:	f7fe fe35 	bl	8000ab8 <HAL_NVIC_EnableIRQ>
 8001e4e:	e7df      	b.n	8001e10 <BSP_PB_Init+0x38>
 8001e50:	40021000 	.word	0x40021000
 8001e54:	50000800 	.word	0x50000800
 8001e58:	10210000 	.word	0x10210000
 8001e5c:	200001dc 	.word	0x200001dc
 8001e60:	0600000d 	.word	0x0600000d
 8001e64:	08001e83 	.word	0x08001e83

08001e68 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001e68:	b510      	push	{r4, lr}
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8001e6a:	0043      	lsls	r3, r0, #1
 8001e6c:	1818      	adds	r0, r3, r0
 8001e6e:	0080      	lsls	r0, r0, #2
 8001e70:	4b02      	ldr	r3, [pc, #8]	@ (8001e7c <BSP_PB_IRQHandler+0x14>)
 8001e72:	18c0      	adds	r0, r0, r3
 8001e74:	f7fe ffd6 	bl	8000e24 <HAL_EXTI_IRQHandler>
}
 8001e78:	bd10      	pop	{r4, pc}
 8001e7a:	46c0      	nop			@ (mov r8, r8)
 8001e7c:	200001dc 	.word	0x200001dc

08001e80 <BSP_PB_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8001e80:	4770      	bx	lr

08001e82 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001e82:	b510      	push	{r4, lr}
  BSP_PB_Callback(BUTTON_USER);
 8001e84:	2000      	movs	r0, #0
 8001e86:	f7ff fffb 	bl	8001e80 <BSP_PB_Callback>
}
 8001e8a:	bd10      	pop	{r4, pc}

08001e8c <SystemInit>:
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001e8c:	4b02      	ldr	r3, [pc, #8]	@ (8001e98 <SystemInit+0xc>)
 8001e8e:	2280      	movs	r2, #128	@ 0x80
 8001e90:	0512      	lsls	r2, r2, #20
 8001e92:	609a      	str	r2, [r3, #8]
#endif
}
 8001e94:	4770      	bx	lr
 8001e96:	46c0      	nop			@ (mov r8, r8)
 8001e98:	e000ed00 	.word	0xe000ed00

08001e9c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e9c:	480d      	ldr	r0, [pc, #52]	@ (8001ed4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e9e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ea0:	f7ff fff4 	bl	8001e8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001ea4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001ea6:	e003      	b.n	8001eb0 <LoopCopyDataInit>

08001ea8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001ea8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ed8 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8001eaa:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001eac:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001eae:	3104      	adds	r1, #4

08001eb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001eb0:	480a      	ldr	r0, [pc, #40]	@ (8001edc <LoopForever+0xa>)
  ldr r3, =_edata
 8001eb2:	4b0b      	ldr	r3, [pc, #44]	@ (8001ee0 <LoopForever+0xe>)
  adds r2, r0, r1
 8001eb4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001eb6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001eb8:	d3f6      	bcc.n	8001ea8 <CopyDataInit>
  ldr r2, =_sbss
 8001eba:	4a0a      	ldr	r2, [pc, #40]	@ (8001ee4 <LoopForever+0x12>)
  b LoopFillZerobss
 8001ebc:	e002      	b.n	8001ec4 <LoopFillZerobss>

08001ebe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001ebe:	2300      	movs	r3, #0
  str  r3, [r2]
 8001ec0:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ec2:	3204      	adds	r2, #4

08001ec4 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8001ec4:	4b08      	ldr	r3, [pc, #32]	@ (8001ee8 <LoopForever+0x16>)
  cmp r2, r3
 8001ec6:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001ec8:	d3f9      	bcc.n	8001ebe <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8001eca:	f000 f819 	bl	8001f00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ece:	f7fe faa9 	bl	8000424 <main>

08001ed2 <LoopForever>:

LoopForever:
    b LoopForever
 8001ed2:	e7fe      	b.n	8001ed2 <LoopForever>
  ldr   r0, =_estack
 8001ed4:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 8001ed8:	08001ffc 	.word	0x08001ffc
  ldr r0, =_sdata
 8001edc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001ee0:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8001ee4:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8001ee8:	200001e8 	.word	0x200001e8

08001eec <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001eec:	e7fe      	b.n	8001eec <ADC1_IRQHandler>

08001eee <memset>:
 8001eee:	0003      	movs	r3, r0
 8001ef0:	1882      	adds	r2, r0, r2
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d100      	bne.n	8001ef8 <memset+0xa>
 8001ef6:	4770      	bx	lr
 8001ef8:	7019      	strb	r1, [r3, #0]
 8001efa:	3301      	adds	r3, #1
 8001efc:	e7f9      	b.n	8001ef2 <memset+0x4>
	...

08001f00 <__libc_init_array>:
 8001f00:	b570      	push	{r4, r5, r6, lr}
 8001f02:	2600      	movs	r6, #0
 8001f04:	4c0c      	ldr	r4, [pc, #48]	@ (8001f38 <__libc_init_array+0x38>)
 8001f06:	4d0d      	ldr	r5, [pc, #52]	@ (8001f3c <__libc_init_array+0x3c>)
 8001f08:	1b64      	subs	r4, r4, r5
 8001f0a:	10a4      	asrs	r4, r4, #2
 8001f0c:	42a6      	cmp	r6, r4
 8001f0e:	d109      	bne.n	8001f24 <__libc_init_array+0x24>
 8001f10:	2600      	movs	r6, #0
 8001f12:	f000 f819 	bl	8001f48 <_init>
 8001f16:	4c0a      	ldr	r4, [pc, #40]	@ (8001f40 <__libc_init_array+0x40>)
 8001f18:	4d0a      	ldr	r5, [pc, #40]	@ (8001f44 <__libc_init_array+0x44>)
 8001f1a:	1b64      	subs	r4, r4, r5
 8001f1c:	10a4      	asrs	r4, r4, #2
 8001f1e:	42a6      	cmp	r6, r4
 8001f20:	d105      	bne.n	8001f2e <__libc_init_array+0x2e>
 8001f22:	bd70      	pop	{r4, r5, r6, pc}
 8001f24:	00b3      	lsls	r3, r6, #2
 8001f26:	58eb      	ldr	r3, [r5, r3]
 8001f28:	4798      	blx	r3
 8001f2a:	3601      	adds	r6, #1
 8001f2c:	e7ee      	b.n	8001f0c <__libc_init_array+0xc>
 8001f2e:	00b3      	lsls	r3, r6, #2
 8001f30:	58eb      	ldr	r3, [r5, r3]
 8001f32:	4798      	blx	r3
 8001f34:	3601      	adds	r6, #1
 8001f36:	e7f2      	b.n	8001f1e <__libc_init_array+0x1e>
 8001f38:	08001ff4 	.word	0x08001ff4
 8001f3c:	08001ff4 	.word	0x08001ff4
 8001f40:	08001ff8 	.word	0x08001ff8
 8001f44:	08001ff4 	.word	0x08001ff4

08001f48 <_init>:
 8001f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f4a:	46c0      	nop			@ (mov r8, r8)
 8001f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f4e:	bc08      	pop	{r3}
 8001f50:	469e      	mov	lr, r3
 8001f52:	4770      	bx	lr

08001f54 <_fini>:
 8001f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f56:	46c0      	nop			@ (mov r8, r8)
 8001f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f5a:	bc08      	pop	{r3}
 8001f5c:	469e      	mov	lr, r3
 8001f5e:	4770      	bx	lr
