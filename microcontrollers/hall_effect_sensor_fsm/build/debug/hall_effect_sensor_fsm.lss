
build/debug/hall_effect_sensor_fsm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005da0  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000298  08005e60  08005e60  00006e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060f8  080060f8  00008068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080060f8  080060f8  00008068  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080060f8  080060f8  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060f8  080060f8  000070f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080060fc  080060fc  000070fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08006100  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a0  20000068  08006168  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000508  08006168  00008508  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .comment      00000038  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019cbb  00000000  00000000  000080c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000325b  00000000  00000000  00021d83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0000cc63  00000000  00000000  00024fde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000010d8  00000000  00000000  00031c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000e36  00000000  00000000  00032d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014bcc  00000000  00000000  00033b56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00005532  00000000  00000000  00048722  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002c28  00000000  00000000  0004dc54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  0005087c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <strcmp>:
 80000c0:	7802      	ldrb	r2, [r0, #0]
 80000c2:	780b      	ldrb	r3, [r1, #0]
 80000c4:	2a00      	cmp	r2, #0
 80000c6:	d003      	beq.n	80000d0 <strcmp+0x10>
 80000c8:	3001      	adds	r0, #1
 80000ca:	3101      	adds	r1, #1
 80000cc:	429a      	cmp	r2, r3
 80000ce:	d0f7      	beq.n	80000c0 <strcmp>
 80000d0:	1ad0      	subs	r0, r2, r3
 80000d2:	4770      	bx	lr

080000d4 <strlen>:
 80000d4:	2300      	movs	r3, #0
 80000d6:	5cc2      	ldrb	r2, [r0, r3]
 80000d8:	3301      	adds	r3, #1
 80000da:	2a00      	cmp	r2, #0
 80000dc:	d1fb      	bne.n	80000d6 <strlen+0x2>
 80000de:	1e58      	subs	r0, r3, #1
 80000e0:	4770      	bx	lr
	...

080000e4 <__gnu_thumb1_case_shi>:
 80000e4:	b403      	push	{r0, r1}
 80000e6:	4671      	mov	r1, lr
 80000e8:	0849      	lsrs	r1, r1, #1
 80000ea:	0040      	lsls	r0, r0, #1
 80000ec:	0049      	lsls	r1, r1, #1
 80000ee:	5e09      	ldrsh	r1, [r1, r0]
 80000f0:	0049      	lsls	r1, r1, #1
 80000f2:	448e      	add	lr, r1
 80000f4:	bc03      	pop	{r0, r1}
 80000f6:	4770      	bx	lr

080000f8 <__udivsi3>:
 80000f8:	2200      	movs	r2, #0
 80000fa:	0843      	lsrs	r3, r0, #1
 80000fc:	428b      	cmp	r3, r1
 80000fe:	d374      	bcc.n	80001ea <__udivsi3+0xf2>
 8000100:	0903      	lsrs	r3, r0, #4
 8000102:	428b      	cmp	r3, r1
 8000104:	d35f      	bcc.n	80001c6 <__udivsi3+0xce>
 8000106:	0a03      	lsrs	r3, r0, #8
 8000108:	428b      	cmp	r3, r1
 800010a:	d344      	bcc.n	8000196 <__udivsi3+0x9e>
 800010c:	0b03      	lsrs	r3, r0, #12
 800010e:	428b      	cmp	r3, r1
 8000110:	d328      	bcc.n	8000164 <__udivsi3+0x6c>
 8000112:	0c03      	lsrs	r3, r0, #16
 8000114:	428b      	cmp	r3, r1
 8000116:	d30d      	bcc.n	8000134 <__udivsi3+0x3c>
 8000118:	22ff      	movs	r2, #255	@ 0xff
 800011a:	0209      	lsls	r1, r1, #8
 800011c:	ba12      	rev	r2, r2
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d302      	bcc.n	800012a <__udivsi3+0x32>
 8000124:	1212      	asrs	r2, r2, #8
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	d065      	beq.n	80001f6 <__udivsi3+0xfe>
 800012a:	0b03      	lsrs	r3, r0, #12
 800012c:	428b      	cmp	r3, r1
 800012e:	d319      	bcc.n	8000164 <__udivsi3+0x6c>
 8000130:	e000      	b.n	8000134 <__udivsi3+0x3c>
 8000132:	0a09      	lsrs	r1, r1, #8
 8000134:	0bc3      	lsrs	r3, r0, #15
 8000136:	428b      	cmp	r3, r1
 8000138:	d301      	bcc.n	800013e <__udivsi3+0x46>
 800013a:	03cb      	lsls	r3, r1, #15
 800013c:	1ac0      	subs	r0, r0, r3
 800013e:	4152      	adcs	r2, r2
 8000140:	0b83      	lsrs	r3, r0, #14
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x52>
 8000146:	038b      	lsls	r3, r1, #14
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b43      	lsrs	r3, r0, #13
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x5e>
 8000152:	034b      	lsls	r3, r1, #13
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b03      	lsrs	r3, r0, #12
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x6a>
 800015e:	030b      	lsls	r3, r1, #12
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0ac3      	lsrs	r3, r0, #11
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x76>
 800016a:	02cb      	lsls	r3, r1, #11
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0a83      	lsrs	r3, r0, #10
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x82>
 8000176:	028b      	lsls	r3, r1, #10
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a43      	lsrs	r3, r0, #9
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x8e>
 8000182:	024b      	lsls	r3, r1, #9
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a03      	lsrs	r3, r0, #8
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x9a>
 800018e:	020b      	lsls	r3, r1, #8
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	d2cd      	bcs.n	8000132 <__udivsi3+0x3a>
 8000196:	09c3      	lsrs	r3, r0, #7
 8000198:	428b      	cmp	r3, r1
 800019a:	d301      	bcc.n	80001a0 <__udivsi3+0xa8>
 800019c:	01cb      	lsls	r3, r1, #7
 800019e:	1ac0      	subs	r0, r0, r3
 80001a0:	4152      	adcs	r2, r2
 80001a2:	0983      	lsrs	r3, r0, #6
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xb4>
 80001a8:	018b      	lsls	r3, r1, #6
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0943      	lsrs	r3, r0, #5
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xc0>
 80001b4:	014b      	lsls	r3, r1, #5
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0903      	lsrs	r3, r0, #4
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xcc>
 80001c0:	010b      	lsls	r3, r1, #4
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	08c3      	lsrs	r3, r0, #3
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xd8>
 80001cc:	00cb      	lsls	r3, r1, #3
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0883      	lsrs	r3, r0, #2
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xe4>
 80001d8:	008b      	lsls	r3, r1, #2
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0843      	lsrs	r3, r0, #1
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xf0>
 80001e4:	004b      	lsls	r3, r1, #1
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	1a41      	subs	r1, r0, r1
 80001ec:	d200      	bcs.n	80001f0 <__udivsi3+0xf8>
 80001ee:	4601      	mov	r1, r0
 80001f0:	4152      	adcs	r2, r2
 80001f2:	4610      	mov	r0, r2
 80001f4:	4770      	bx	lr
 80001f6:	e7ff      	b.n	80001f8 <__udivsi3+0x100>
 80001f8:	b501      	push	{r0, lr}
 80001fa:	2000      	movs	r0, #0
 80001fc:	f000 f8f0 	bl	80003e0 <__aeabi_idiv0>
 8000200:	bd02      	pop	{r1, pc}
 8000202:	46c0      	nop			@ (mov r8, r8)

08000204 <__aeabi_uidivmod>:
 8000204:	2900      	cmp	r1, #0
 8000206:	d0f7      	beq.n	80001f8 <__udivsi3+0x100>
 8000208:	e776      	b.n	80000f8 <__udivsi3>
 800020a:	4770      	bx	lr

0800020c <__divsi3>:
 800020c:	4603      	mov	r3, r0
 800020e:	430b      	orrs	r3, r1
 8000210:	d47f      	bmi.n	8000312 <__divsi3+0x106>
 8000212:	2200      	movs	r2, #0
 8000214:	0843      	lsrs	r3, r0, #1
 8000216:	428b      	cmp	r3, r1
 8000218:	d374      	bcc.n	8000304 <__divsi3+0xf8>
 800021a:	0903      	lsrs	r3, r0, #4
 800021c:	428b      	cmp	r3, r1
 800021e:	d35f      	bcc.n	80002e0 <__divsi3+0xd4>
 8000220:	0a03      	lsrs	r3, r0, #8
 8000222:	428b      	cmp	r3, r1
 8000224:	d344      	bcc.n	80002b0 <__divsi3+0xa4>
 8000226:	0b03      	lsrs	r3, r0, #12
 8000228:	428b      	cmp	r3, r1
 800022a:	d328      	bcc.n	800027e <__divsi3+0x72>
 800022c:	0c03      	lsrs	r3, r0, #16
 800022e:	428b      	cmp	r3, r1
 8000230:	d30d      	bcc.n	800024e <__divsi3+0x42>
 8000232:	22ff      	movs	r2, #255	@ 0xff
 8000234:	0209      	lsls	r1, r1, #8
 8000236:	ba12      	rev	r2, r2
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d302      	bcc.n	8000244 <__divsi3+0x38>
 800023e:	1212      	asrs	r2, r2, #8
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	d065      	beq.n	8000310 <__divsi3+0x104>
 8000244:	0b03      	lsrs	r3, r0, #12
 8000246:	428b      	cmp	r3, r1
 8000248:	d319      	bcc.n	800027e <__divsi3+0x72>
 800024a:	e000      	b.n	800024e <__divsi3+0x42>
 800024c:	0a09      	lsrs	r1, r1, #8
 800024e:	0bc3      	lsrs	r3, r0, #15
 8000250:	428b      	cmp	r3, r1
 8000252:	d301      	bcc.n	8000258 <__divsi3+0x4c>
 8000254:	03cb      	lsls	r3, r1, #15
 8000256:	1ac0      	subs	r0, r0, r3
 8000258:	4152      	adcs	r2, r2
 800025a:	0b83      	lsrs	r3, r0, #14
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x58>
 8000260:	038b      	lsls	r3, r1, #14
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b43      	lsrs	r3, r0, #13
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x64>
 800026c:	034b      	lsls	r3, r1, #13
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b03      	lsrs	r3, r0, #12
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x70>
 8000278:	030b      	lsls	r3, r1, #12
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0ac3      	lsrs	r3, r0, #11
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x7c>
 8000284:	02cb      	lsls	r3, r1, #11
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0a83      	lsrs	r3, r0, #10
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x88>
 8000290:	028b      	lsls	r3, r1, #10
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a43      	lsrs	r3, r0, #9
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x94>
 800029c:	024b      	lsls	r3, r1, #9
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a03      	lsrs	r3, r0, #8
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0xa0>
 80002a8:	020b      	lsls	r3, r1, #8
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	d2cd      	bcs.n	800024c <__divsi3+0x40>
 80002b0:	09c3      	lsrs	r3, r0, #7
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d301      	bcc.n	80002ba <__divsi3+0xae>
 80002b6:	01cb      	lsls	r3, r1, #7
 80002b8:	1ac0      	subs	r0, r0, r3
 80002ba:	4152      	adcs	r2, r2
 80002bc:	0983      	lsrs	r3, r0, #6
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xba>
 80002c2:	018b      	lsls	r3, r1, #6
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0943      	lsrs	r3, r0, #5
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xc6>
 80002ce:	014b      	lsls	r3, r1, #5
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0903      	lsrs	r3, r0, #4
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xd2>
 80002da:	010b      	lsls	r3, r1, #4
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	08c3      	lsrs	r3, r0, #3
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xde>
 80002e6:	00cb      	lsls	r3, r1, #3
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0883      	lsrs	r3, r0, #2
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xea>
 80002f2:	008b      	lsls	r3, r1, #2
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0843      	lsrs	r3, r0, #1
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xf6>
 80002fe:	004b      	lsls	r3, r1, #1
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	1a41      	subs	r1, r0, r1
 8000306:	d200      	bcs.n	800030a <__divsi3+0xfe>
 8000308:	4601      	mov	r1, r0
 800030a:	4152      	adcs	r2, r2
 800030c:	4610      	mov	r0, r2
 800030e:	4770      	bx	lr
 8000310:	e05d      	b.n	80003ce <__divsi3+0x1c2>
 8000312:	0fca      	lsrs	r2, r1, #31
 8000314:	d000      	beq.n	8000318 <__divsi3+0x10c>
 8000316:	4249      	negs	r1, r1
 8000318:	1003      	asrs	r3, r0, #32
 800031a:	d300      	bcc.n	800031e <__divsi3+0x112>
 800031c:	4240      	negs	r0, r0
 800031e:	4053      	eors	r3, r2
 8000320:	2200      	movs	r2, #0
 8000322:	469c      	mov	ip, r3
 8000324:	0903      	lsrs	r3, r0, #4
 8000326:	428b      	cmp	r3, r1
 8000328:	d32d      	bcc.n	8000386 <__divsi3+0x17a>
 800032a:	0a03      	lsrs	r3, r0, #8
 800032c:	428b      	cmp	r3, r1
 800032e:	d312      	bcc.n	8000356 <__divsi3+0x14a>
 8000330:	22fc      	movs	r2, #252	@ 0xfc
 8000332:	0189      	lsls	r1, r1, #6
 8000334:	ba12      	rev	r2, r2
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d30c      	bcc.n	8000356 <__divsi3+0x14a>
 800033c:	0189      	lsls	r1, r1, #6
 800033e:	1192      	asrs	r2, r2, #6
 8000340:	428b      	cmp	r3, r1
 8000342:	d308      	bcc.n	8000356 <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d304      	bcc.n	8000356 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	d03a      	beq.n	80003c6 <__divsi3+0x1ba>
 8000350:	1192      	asrs	r2, r2, #6
 8000352:	e000      	b.n	8000356 <__divsi3+0x14a>
 8000354:	0989      	lsrs	r1, r1, #6
 8000356:	09c3      	lsrs	r3, r0, #7
 8000358:	428b      	cmp	r3, r1
 800035a:	d301      	bcc.n	8000360 <__divsi3+0x154>
 800035c:	01cb      	lsls	r3, r1, #7
 800035e:	1ac0      	subs	r0, r0, r3
 8000360:	4152      	adcs	r2, r2
 8000362:	0983      	lsrs	r3, r0, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x160>
 8000368:	018b      	lsls	r3, r1, #6
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0943      	lsrs	r3, r0, #5
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x16c>
 8000374:	014b      	lsls	r3, r1, #5
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0903      	lsrs	r3, r0, #4
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x178>
 8000380:	010b      	lsls	r3, r1, #4
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	08c3      	lsrs	r3, r0, #3
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x184>
 800038c:	00cb      	lsls	r3, r1, #3
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0883      	lsrs	r3, r0, #2
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x190>
 8000398:	008b      	lsls	r3, r1, #2
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	d2d9      	bcs.n	8000354 <__divsi3+0x148>
 80003a0:	0843      	lsrs	r3, r0, #1
 80003a2:	428b      	cmp	r3, r1
 80003a4:	d301      	bcc.n	80003aa <__divsi3+0x19e>
 80003a6:	004b      	lsls	r3, r1, #1
 80003a8:	1ac0      	subs	r0, r0, r3
 80003aa:	4152      	adcs	r2, r2
 80003ac:	1a41      	subs	r1, r0, r1
 80003ae:	d200      	bcs.n	80003b2 <__divsi3+0x1a6>
 80003b0:	4601      	mov	r1, r0
 80003b2:	4663      	mov	r3, ip
 80003b4:	4152      	adcs	r2, r2
 80003b6:	105b      	asrs	r3, r3, #1
 80003b8:	4610      	mov	r0, r2
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x1b4>
 80003bc:	4240      	negs	r0, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d500      	bpl.n	80003c4 <__divsi3+0x1b8>
 80003c2:	4249      	negs	r1, r1
 80003c4:	4770      	bx	lr
 80003c6:	4663      	mov	r3, ip
 80003c8:	105b      	asrs	r3, r3, #1
 80003ca:	d300      	bcc.n	80003ce <__divsi3+0x1c2>
 80003cc:	4240      	negs	r0, r0
 80003ce:	b501      	push	{r0, lr}
 80003d0:	2000      	movs	r0, #0
 80003d2:	f000 f805 	bl	80003e0 <__aeabi_idiv0>
 80003d6:	bd02      	pop	{r1, pc}

080003d8 <__aeabi_idivmod>:
 80003d8:	2900      	cmp	r1, #0
 80003da:	d0f8      	beq.n	80003ce <__divsi3+0x1c2>
 80003dc:	e716      	b.n	800020c <__divsi3>
 80003de:	4770      	bx	lr

080003e0 <__aeabi_idiv0>:
 80003e0:	4770      	bx	lr
 80003e2:	46c0      	nop			@ (mov r8, r8)

080003e4 <__aeabi_cfrcmple>:
 80003e4:	4684      	mov	ip, r0
 80003e6:	0008      	movs	r0, r1
 80003e8:	4661      	mov	r1, ip
 80003ea:	e7ff      	b.n	80003ec <__aeabi_cfcmpeq>

080003ec <__aeabi_cfcmpeq>:
 80003ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80003ee:	f005 fce3 	bl	8005db8 <__lesf2>
 80003f2:	2800      	cmp	r0, #0
 80003f4:	d401      	bmi.n	80003fa <__aeabi_cfcmpeq+0xe>
 80003f6:	2100      	movs	r1, #0
 80003f8:	42c8      	cmn	r0, r1
 80003fa:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080003fc <__aeabi_fcmpeq>:
 80003fc:	b510      	push	{r4, lr}
 80003fe:	f005 fc6b 	bl	8005cd8 <__eqsf2>
 8000402:	4240      	negs	r0, r0
 8000404:	3001      	adds	r0, #1
 8000406:	bd10      	pop	{r4, pc}

08000408 <__aeabi_fcmplt>:
 8000408:	b510      	push	{r4, lr}
 800040a:	f005 fcd5 	bl	8005db8 <__lesf2>
 800040e:	2800      	cmp	r0, #0
 8000410:	db01      	blt.n	8000416 <__aeabi_fcmplt+0xe>
 8000412:	2000      	movs	r0, #0
 8000414:	bd10      	pop	{r4, pc}
 8000416:	2001      	movs	r0, #1
 8000418:	bd10      	pop	{r4, pc}
 800041a:	46c0      	nop			@ (mov r8, r8)

0800041c <__aeabi_fcmple>:
 800041c:	b510      	push	{r4, lr}
 800041e:	f005 fccb 	bl	8005db8 <__lesf2>
 8000422:	2800      	cmp	r0, #0
 8000424:	dd01      	ble.n	800042a <__aeabi_fcmple+0xe>
 8000426:	2000      	movs	r0, #0
 8000428:	bd10      	pop	{r4, pc}
 800042a:	2001      	movs	r0, #1
 800042c:	bd10      	pop	{r4, pc}
 800042e:	46c0      	nop			@ (mov r8, r8)

08000430 <__aeabi_fcmpgt>:
 8000430:	b510      	push	{r4, lr}
 8000432:	f005 fc79 	bl	8005d28 <__gesf2>
 8000436:	2800      	cmp	r0, #0
 8000438:	dc01      	bgt.n	800043e <__aeabi_fcmpgt+0xe>
 800043a:	2000      	movs	r0, #0
 800043c:	bd10      	pop	{r4, pc}
 800043e:	2001      	movs	r0, #1
 8000440:	bd10      	pop	{r4, pc}
 8000442:	46c0      	nop			@ (mov r8, r8)

08000444 <__aeabi_fcmpge>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f005 fc6f 	bl	8005d28 <__gesf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	da01      	bge.n	8000452 <__aeabi_fcmpge+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			@ (mov r8, r8)

08000458 <__clzsi2>:
 8000458:	211c      	movs	r1, #28
 800045a:	2301      	movs	r3, #1
 800045c:	041b      	lsls	r3, r3, #16
 800045e:	4298      	cmp	r0, r3
 8000460:	d301      	bcc.n	8000466 <__clzsi2+0xe>
 8000462:	0c00      	lsrs	r0, r0, #16
 8000464:	3910      	subs	r1, #16
 8000466:	0a1b      	lsrs	r3, r3, #8
 8000468:	4298      	cmp	r0, r3
 800046a:	d301      	bcc.n	8000470 <__clzsi2+0x18>
 800046c:	0a00      	lsrs	r0, r0, #8
 800046e:	3908      	subs	r1, #8
 8000470:	091b      	lsrs	r3, r3, #4
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0x22>
 8000476:	0900      	lsrs	r0, r0, #4
 8000478:	3904      	subs	r1, #4
 800047a:	a202      	add	r2, pc, #8	@ (adr r2, 8000484 <__clzsi2+0x2c>)
 800047c:	5c10      	ldrb	r0, [r2, r0]
 800047e:	1840      	adds	r0, r0, r1
 8000480:	4770      	bx	lr
 8000482:	46c0      	nop			@ (mov r8, r8)
 8000484:	02020304 	.word	0x02020304
 8000488:	01010101 	.word	0x01010101
	...

08000494 <__do_global_dtors_aux>:
 8000494:	b510      	push	{r4, lr}
 8000496:	4c06      	ldr	r4, [pc, #24]	@ (80004b0 <__do_global_dtors_aux+0x1c>)
 8000498:	7823      	ldrb	r3, [r4, #0]
 800049a:	2b00      	cmp	r3, #0
 800049c:	d107      	bne.n	80004ae <__do_global_dtors_aux+0x1a>
 800049e:	4b05      	ldr	r3, [pc, #20]	@ (80004b4 <__do_global_dtors_aux+0x20>)
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d002      	beq.n	80004aa <__do_global_dtors_aux+0x16>
 80004a4:	4804      	ldr	r0, [pc, #16]	@ (80004b8 <__do_global_dtors_aux+0x24>)
 80004a6:	e000      	b.n	80004aa <__do_global_dtors_aux+0x16>
 80004a8:	bf00      	nop
 80004aa:	2301      	movs	r3, #1
 80004ac:	7023      	strb	r3, [r4, #0]
 80004ae:	bd10      	pop	{r4, pc}
 80004b0:	20000068 	.word	0x20000068
 80004b4:	00000000 	.word	0x00000000
 80004b8:	08005e48 	.word	0x08005e48

080004bc <frame_dummy>:
 80004bc:	4b04      	ldr	r3, [pc, #16]	@ (80004d0 <frame_dummy+0x14>)
 80004be:	b510      	push	{r4, lr}
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d003      	beq.n	80004cc <frame_dummy+0x10>
 80004c4:	4903      	ldr	r1, [pc, #12]	@ (80004d4 <frame_dummy+0x18>)
 80004c6:	4804      	ldr	r0, [pc, #16]	@ (80004d8 <frame_dummy+0x1c>)
 80004c8:	e000      	b.n	80004cc <frame_dummy+0x10>
 80004ca:	bf00      	nop
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			@ (mov r8, r8)
 80004d0:	00000000 	.word	0x00000000
 80004d4:	2000006c 	.word	0x2000006c
 80004d8:	08005e48 	.word	0x08005e48

080004dc <__NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80004dc:	f3bf 8f4f 	dsb	sy
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80004e0:	4b03      	ldr	r3, [pc, #12]	@ (80004f0 <__NVIC_SystemReset+0x14>)
 80004e2:	4a04      	ldr	r2, [pc, #16]	@ (80004f4 <__NVIC_SystemReset+0x18>)
 80004e4:	60da      	str	r2, [r3, #12]
 80004e6:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80004ea:	46c0      	nop			@ (mov r8, r8)
  for(;;)                                                           /* wait until reset */
 80004ec:	e7fd      	b.n	80004ea <__NVIC_SystemReset+0xe>
 80004ee:	46c0      	nop			@ (mov r8, r8)
 80004f0:	e000ed00 	.word	0xe000ed00
 80004f4:	05fa0004 	.word	0x05fa0004

080004f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004f8:	b510      	push	{r4, lr}
 80004fa:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004fc:	ac03      	add	r4, sp, #12
 80004fe:	2214      	movs	r2, #20
 8000500:	2100      	movs	r1, #0
 8000502:	0020      	movs	r0, r4
 8000504:	f003 fc90 	bl	8003e28 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000508:	4b10      	ldr	r3, [pc, #64]	@ (800054c <MX_GPIO_Init+0x54>)
 800050a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800050c:	2204      	movs	r2, #4
 800050e:	4311      	orrs	r1, r2
 8000510:	6359      	str	r1, [r3, #52]	@ 0x34
 8000512:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000514:	400a      	ands	r2, r1
 8000516:	9200      	str	r2, [sp, #0]
 8000518:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800051a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800051c:	2220      	movs	r2, #32
 800051e:	4311      	orrs	r1, r2
 8000520:	6359      	str	r1, [r3, #52]	@ 0x34
 8000522:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000524:	400a      	ands	r2, r1
 8000526:	9201      	str	r2, [sp, #4]
 8000528:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800052a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800052c:	2201      	movs	r2, #1
 800052e:	4311      	orrs	r1, r2
 8000530:	6359      	str	r1, [r3, #52]	@ 0x34
 8000532:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000534:	4013      	ands	r3, r2
 8000536:	9302      	str	r3, [sp, #8]
 8000538:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin : HALL_DIGITAL_Pin */
  GPIO_InitStruct.Pin = HALL_DIGITAL_Pin;
 800053a:	9203      	str	r2, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800053c:	9205      	str	r2, [sp, #20]
  HAL_GPIO_Init(HALL_DIGITAL_GPIO_Port, &GPIO_InitStruct);
 800053e:	20a0      	movs	r0, #160	@ 0xa0
 8000540:	0021      	movs	r1, r4
 8000542:	05c0      	lsls	r0, r0, #23
 8000544:	f001 fa10 	bl	8001968 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000548:	b008      	add	sp, #32
 800054a:	bd10      	pop	{r4, pc}
 800054c:	40021000 	.word	0x40021000

08000550 <MX_DMA_Init>:
{
 8000550:	b500      	push	{lr}
 8000552:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000554:	4a09      	ldr	r2, [pc, #36]	@ (800057c <MX_DMA_Init+0x2c>)
 8000556:	6b91      	ldr	r1, [r2, #56]	@ 0x38
 8000558:	2301      	movs	r3, #1
 800055a:	4319      	orrs	r1, r3
 800055c:	6391      	str	r1, [r2, #56]	@ 0x38
 800055e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8000560:	4013      	ands	r3, r2
 8000562:	9301      	str	r3, [sp, #4]
 8000564:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000566:	2200      	movs	r2, #0
 8000568:	2100      	movs	r1, #0
 800056a:	2009      	movs	r0, #9
 800056c:	f001 f838 	bl	80015e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000570:	2009      	movs	r0, #9
 8000572:	f001 f839 	bl	80015e8 <HAL_NVIC_EnableIRQ>
}
 8000576:	b003      	add	sp, #12
 8000578:	bd00      	pop	{pc}
 800057a:	46c0      	nop			@ (mov r8, r8)
 800057c:	40021000 	.word	0x40021000

08000580 <do_INIT>:

/* USER CODE BEGIN 4 */

state_t do_INIT(void) 
{
 8000580:	b530      	push	{r4, r5, lr}
 8000582:	b091      	sub	sp, #68	@ 0x44
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  if (HAL_Init() != HAL_OK) { next_state = STATE_ERROR; };
 8000584:	f000 fb06 	bl	8000b94 <HAL_Init>
 8000588:	2800      	cmp	r0, #0
 800058a:	d000      	beq.n	800058e <do_INIT+0xe>
 800058c:	e09a      	b.n	80006c4 <do_INIT+0x144>
  state_t next_state = STATE_WAIT_REQUEST;
 800058e:	2401      	movs	r4, #1
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000590:	ad09      	add	r5, sp, #36	@ 0x24
 8000592:	221c      	movs	r2, #28
 8000594:	2100      	movs	r1, #0
 8000596:	0028      	movs	r0, r5
 8000598:	f003 fc46 	bl	8003e28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800059c:	2214      	movs	r2, #20
 800059e:	2100      	movs	r1, #0
 80005a0:	a804      	add	r0, sp, #16
 80005a2:	f003 fc41 	bl	8003e28 <memset>

  __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_1);
 80005a6:	4949      	ldr	r1, [pc, #292]	@ (80006cc <do_INIT+0x14c>)
 80005a8:	680b      	ldr	r3, [r1, #0]
 80005aa:	2207      	movs	r2, #7
 80005ac:	4393      	bics	r3, r2
 80005ae:	3a06      	subs	r2, #6
 80005b0:	4313      	orrs	r3, r2
 80005b2:	600b      	str	r3, [r1, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005b4:	9209      	str	r2, [sp, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005b6:	2380      	movs	r3, #128	@ 0x80
 80005b8:	025b      	lsls	r3, r3, #9
 80005ba:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005bc:	0028      	movs	r0, r5
 80005be:	f001 fb95 	bl	8001cec <HAL_RCC_OscConfig>
 80005c2:	2800      	cmp	r0, #0
 80005c4:	d000      	beq.n	80005c8 <do_INIT+0x48>
  {
    next_state = STATE_ERROR;
 80005c6:	2402      	movs	r4, #2
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c8:	a804      	add	r0, sp, #16
 80005ca:	2307      	movs	r3, #7
 80005cc:	9304      	str	r3, [sp, #16]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80005ce:	3b06      	subs	r3, #6
 80005d0:	6043      	str	r3, [r0, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80005d2:	2300      	movs	r3, #0
 80005d4:	6083      	str	r3, [r0, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80005d6:	60c3      	str	r3, [r0, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80005d8:	6103      	str	r3, [r0, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005da:	2101      	movs	r1, #1
 80005dc:	f001 fd12 	bl	8002004 <HAL_RCC_ClockConfig>
 80005e0:	2800      	cmp	r0, #0
 80005e2:	d000      	beq.n	80005e6 <do_INIT+0x66>
  {
    next_state = STATE_ERROR;
 80005e4:	2402      	movs	r4, #2
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e6:	f7ff ff87 	bl	80004f8 <MX_GPIO_Init>
  MX_DMA_Init();
 80005ea:	f7ff ffb1 	bl	8000550 <MX_DMA_Init>

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005ee:	220c      	movs	r2, #12
 80005f0:	2100      	movs	r1, #0
 80005f2:	a801      	add	r0, sp, #4
 80005f4:	f003 fc18 	bl	8003e28 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005f8:	4835      	ldr	r0, [pc, #212]	@ (80006d0 <do_INIT+0x150>)
 80005fa:	4b36      	ldr	r3, [pc, #216]	@ (80006d4 <do_INIT+0x154>)
 80005fc:	6003      	str	r3, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80005fe:	2380      	movs	r3, #128	@ 0x80
 8000600:	05db      	lsls	r3, r3, #23
 8000602:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000604:	2300      	movs	r3, #0
 8000606:	6083      	str	r3, [r0, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000608:	60c3      	str	r3, [r0, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_SEQ_FIXED;
 800060a:	2280      	movs	r2, #128	@ 0x80
 800060c:	0612      	lsls	r2, r2, #24
 800060e:	6102      	str	r2, [r0, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000610:	2204      	movs	r2, #4
 8000612:	6142      	str	r2, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000614:	7603      	strb	r3, [r0, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000616:	7643      	strb	r3, [r0, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000618:	3a03      	subs	r2, #3
 800061a:	7682      	strb	r2, [r0, #26]
  hadc1.Init.NbrOfConversion = 1;
 800061c:	61c2      	str	r2, [r0, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800061e:	6243      	str	r3, [r0, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000620:	6283      	str	r3, [r0, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000622:	212c      	movs	r1, #44	@ 0x2c
 8000624:	5442      	strb	r2, [r0, r1]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000626:	6303      	str	r3, [r0, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000628:	6343      	str	r3, [r0, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800062a:	323b      	adds	r2, #59	@ 0x3b
 800062c:	5483      	strb	r3, [r0, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800062e:	64c3      	str	r3, [r0, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000630:	f000 fae0 	bl	8000bf4 <HAL_ADC_Init>
 8000634:	2800      	cmp	r0, #0
 8000636:	d000      	beq.n	800063a <do_INIT+0xba>
  {
    next_state = STATE_ERROR;
 8000638:	2402      	movs	r4, #2
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800063a:	a901      	add	r1, sp, #4
 800063c:	4b26      	ldr	r3, [pc, #152]	@ (80006d8 <do_INIT+0x158>)
 800063e:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000640:	2301      	movs	r3, #1
 8000642:	604b      	str	r3, [r1, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000644:	4822      	ldr	r0, [pc, #136]	@ (80006d0 <do_INIT+0x150>)
 8000646:	f000 fc55 	bl	8000ef4 <HAL_ADC_ConfigChannel>
 800064a:	2800      	cmp	r0, #0
 800064c:	d000      	beq.n	8000650 <do_INIT+0xd0>
  {
    next_state = STATE_ERROR;
 800064e:	2402      	movs	r4, #2
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000650:	4822      	ldr	r0, [pc, #136]	@ (80006dc <do_INIT+0x15c>)
 8000652:	4b23      	ldr	r3, [pc, #140]	@ (80006e0 <do_INIT+0x160>)
 8000654:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 9600;
 8000656:	2396      	movs	r3, #150	@ 0x96
 8000658:	019b      	lsls	r3, r3, #6
 800065a:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800065c:	2300      	movs	r3, #0
 800065e:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000660:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000662:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000664:	220c      	movs	r2, #12
 8000666:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000668:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800066a:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800066c:	6203      	str	r3, [r0, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800066e:	6243      	str	r3, [r0, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000670:	6283      	str	r3, [r0, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000672:	f002 ffa5 	bl	80035c0 <HAL_UART_Init>
 8000676:	2800      	cmp	r0, #0
 8000678:	d000      	beq.n	800067c <do_INIT+0xfc>
  {
    next_state = STATE_ERROR;
 800067a:	2402      	movs	r4, #2
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800067c:	4819      	ldr	r0, [pc, #100]	@ (80006e4 <do_INIT+0x164>)
 800067e:	4b1a      	ldr	r3, [pc, #104]	@ (80006e8 <do_INIT+0x168>)
 8000680:	6003      	str	r3, [r0, #0]
  htim14.Init.Prescaler = 47999;
 8000682:	4b1a      	ldr	r3, [pc, #104]	@ (80006ec <do_INIT+0x16c>)
 8000684:	6043      	str	r3, [r0, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000686:	2300      	movs	r3, #0
 8000688:	6083      	str	r3, [r0, #8]
  htim14.Init.Period = 999;
 800068a:	4a19      	ldr	r2, [pc, #100]	@ (80006f0 <do_INIT+0x170>)
 800068c:	60c2      	str	r2, [r0, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800068e:	6103      	str	r3, [r0, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000690:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000692:	f001 ff89 	bl	80025a8 <HAL_TIM_Base_Init>
 8000696:	2800      	cmp	r0, #0
 8000698:	d000      	beq.n	800069c <do_INIT+0x11c>
  {
    next_state = STATE_ERROR;
 800069a:	2402      	movs	r4, #2
  /* USER CODE END TIM14_Init 2 */


  /* USER CODE BEGIN 2 */

  srand(time(NULL));
 800069c:	2000      	movs	r0, #0
 800069e:	f003 fbf5 	bl	8003e8c <time>
 80006a2:	f003 fa91 	bl	8003bc8 <srand>
  if (HAL_ADCEx_Calibration_Start(&hadc1) != HAL_OK) { next_state = STATE_ERROR; }
 80006a6:	480a      	ldr	r0, [pc, #40]	@ (80006d0 <do_INIT+0x150>)
 80006a8:	f000 fe90 	bl	80013cc <HAL_ADCEx_Calibration_Start>
 80006ac:	2800      	cmp	r0, #0
 80006ae:	d10b      	bne.n	80006c8 <do_INIT+0x148>

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 80006b0:	2000      	movs	r0, #0
 80006b2:	f003 f8c9 	bl	8003848 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80006b6:	2101      	movs	r1, #1
 80006b8:	2000      	movs	r0, #0
 80006ba:	f003 f95f 	bl	800397c <BSP_PB_Init>

  return next_state;
}
 80006be:	0020      	movs	r0, r4
 80006c0:	b011      	add	sp, #68	@ 0x44
 80006c2:	bd30      	pop	{r4, r5, pc}
  if (HAL_Init() != HAL_OK) { next_state = STATE_ERROR; };
 80006c4:	2402      	movs	r4, #2
 80006c6:	e763      	b.n	8000590 <do_INIT+0x10>
  if (HAL_ADCEx_Calibration_Start(&hadc1) != HAL_OK) { next_state = STATE_ERROR; }
 80006c8:	2402      	movs	r4, #2
 80006ca:	e7f1      	b.n	80006b0 <do_INIT+0x130>
 80006cc:	40022000 	.word	0x40022000
 80006d0:	20000344 	.word	0x20000344
 80006d4:	40012400 	.word	0x40012400
 80006d8:	04000002 	.word	0x04000002
 80006dc:	20000208 	.word	0x20000208
 80006e0:	40004400 	.word	0x40004400
 80006e4:	2000029c 	.word	0x2000029c
 80006e8:	40002000 	.word	0x40002000
 80006ec:	0000bb7f 	.word	0x0000bb7f
 80006f0:	000003e7 	.word	0x000003e7

080006f4 <do_WAIT_REQUEST>:

// Function to be executed in state WAIT_REQUEST
// valid return states: STATE_LISTENING, STATE_ERROR
state_t do_WAIT_REQUEST(void) 
{
 80006f4:	b510      	push	{r4, lr}
  state_t next_state = NO_CHANGE;
  
  HAL_UART_Receive_IT(&huart2, &rx_byte, 1);
 80006f6:	4908      	ldr	r1, [pc, #32]	@ (8000718 <do_WAIT_REQUEST+0x24>)
 80006f8:	4808      	ldr	r0, [pc, #32]	@ (800071c <do_WAIT_REQUEST+0x28>)
 80006fa:	2201      	movs	r2, #1
 80006fc:	f003 f84a 	bl	8003794 <HAL_UART_Receive_IT>

  if (BSP_PB_GetState(BUTTON_USER) == GPIO_PIN_RESET) 
 8000700:	2000      	movs	r0, #0
 8000702:	f003 f983 	bl	8003a0c <BSP_PB_GetState>
 8000706:	2800      	cmp	r0, #0
 8000708:	d001      	beq.n	800070e <do_WAIT_REQUEST+0x1a>
  state_t next_state = NO_CHANGE;
 800070a:	2007      	movs	r0, #7
    next_state = STATE_LISTENING;
    HAL_Delay(200);
  }

  return next_state;
}
 800070c:	bd10      	pop	{r4, pc}
    HAL_Delay(200);
 800070e:	30c8      	adds	r0, #200	@ 0xc8
 8000710:	f000 fa5e 	bl	8000bd0 <HAL_Delay>
    next_state = STATE_LISTENING;
 8000714:	2003      	movs	r0, #3
 8000716:	e7f9      	b.n	800070c <do_WAIT_REQUEST+0x18>
 8000718:	20000204 	.word	0x20000204
 800071c:	20000208 	.word	0x20000208

08000720 <print>:
{
 8000720:	b510      	push	{r4, lr}
 8000722:	0004      	movs	r4, r0
  HAL_UART_Transmit_IT(&huart2, (uint8_t*)msg, strlen(msg));
 8000724:	f7ff fcd6 	bl	80000d4 <strlen>
 8000728:	b282      	uxth	r2, r0
 800072a:	4802      	ldr	r0, [pc, #8]	@ (8000734 <print+0x14>)
 800072c:	0021      	movs	r1, r4
 800072e:	f002 f87b 	bl	8002828 <HAL_UART_Transmit_IT>
}
 8000732:	bd10      	pop	{r4, pc}
 8000734:	20000208 	.word	0x20000208

08000738 <toMilliVolt>:
{
 8000738:	b510      	push	{r4, lr}
  return (val * 5000) / 4095;
 800073a:	4b03      	ldr	r3, [pc, #12]	@ (8000748 <toMilliVolt+0x10>)
 800073c:	4358      	muls	r0, r3
 800073e:	4903      	ldr	r1, [pc, #12]	@ (800074c <toMilliVolt+0x14>)
 8000740:	f7ff fd64 	bl	800020c <__divsi3>
 8000744:	b280      	uxth	r0, r0
}
 8000746:	bd10      	pop	{r4, pc}
 8000748:	00001388 	.word	0x00001388
 800074c:	00000fff 	.word	0x00000fff

08000750 <gaussian_noise_clt>:
{
 8000750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000752:	1c06      	adds	r6, r0, #0
 8000754:	1c0f      	adds	r7, r1, #0
  for (int i = 0; i < 6; i++)
 8000756:	2500      	movs	r5, #0
  float sum = .0f;
 8000758:	2400      	movs	r4, #0
  for (int i = 0; i < 6; i++)
 800075a:	e00d      	b.n	8000778 <gaussian_noise_clt+0x28>
    sum += ((float)rand() / RAND_MAX);
 800075c:	f003 fa62 	bl	8003c24 <rand>
 8000760:	f005 fa6a 	bl	8005c38 <__aeabi_i2f>
 8000764:	21c0      	movs	r1, #192	@ 0xc0
 8000766:	0589      	lsls	r1, r1, #22
 8000768:	f004 feb2 	bl	80054d0 <__aeabi_fmul>
 800076c:	1c01      	adds	r1, r0, #0
 800076e:	1c20      	adds	r0, r4, #0
 8000770:	f004 fca0 	bl	80050b4 <__aeabi_fadd>
 8000774:	1c04      	adds	r4, r0, #0
  for (int i = 0; i < 6; i++)
 8000776:	3501      	adds	r5, #1
 8000778:	2d05      	cmp	r5, #5
 800077a:	ddef      	ble.n	800075c <gaussian_noise_clt+0xc>
  sum -= 3.0f;
 800077c:	4905      	ldr	r1, [pc, #20]	@ (8000794 <gaussian_noise_clt+0x44>)
 800077e:	1c20      	adds	r0, r4, #0
 8000780:	f004 fff8 	bl	8005774 <__aeabi_fsub>
  return mean + stddev * sum;
 8000784:	1c39      	adds	r1, r7, #0
 8000786:	f004 fea3 	bl	80054d0 <__aeabi_fmul>
 800078a:	1c31      	adds	r1, r6, #0
 800078c:	f004 fc92 	bl	80050b4 <__aeabi_fadd>
}
 8000790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000792:	46c0      	nop			@ (mov r8, r8)
 8000794:	40400000 	.word	0x40400000

08000798 <do_LISTENING>:

// Function to be executed in state LISTENING
// valid return states: STATE_WARNING, STATE_ERROR, STATE_PAUSE
state_t do_LISTENING(void) 
{
 8000798:	b5f0      	push	{r4, r5, r6, r7, lr}
 800079a:	46de      	mov	lr, fp
 800079c:	4657      	mov	r7, sl
 800079e:	464e      	mov	r6, r9
 80007a0:	4645      	mov	r5, r8
 80007a2:	b5e0      	push	{r5, r6, r7, lr}
 80007a4:	b095      	sub	sp, #84	@ 0x54
  state_t next_state = NO_CHANGE;

  BSP_LED_On(LED_GREEN);
 80007a6:	2000      	movs	r0, #0
 80007a8:	f003 f890 	bl	80038cc <BSP_LED_On>
  char msg[64];
  uint16_t analog_val;
  uint16_t analog_mv;
  GPIO_PinState digital_val;
  filter_out = 0;
 80007ac:	4b4f      	ldr	r3, [pc, #316]	@ (80008ec <do_LISTENING+0x154>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	801a      	strh	r2, [r3, #0]

  HAL_ADC_Start(&hadc1);
 80007b2:	4c4f      	ldr	r4, [pc, #316]	@ (80008f0 <do_LISTENING+0x158>)
 80007b4:	0020      	movs	r0, r4
 80007b6:	f000 fd6d 	bl	8001294 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, 10);
 80007ba:	210a      	movs	r1, #10
 80007bc:	0020      	movs	r0, r4
 80007be:	f000 fb39 	bl	8000e34 <HAL_ADC_PollForConversion>
  analog_val = HAL_ADC_GetValue(&hadc1);
 80007c2:	0020      	movs	r0, r4
 80007c4:	f000 fb92 	bl	8000eec <HAL_ADC_GetValue>
 80007c8:	b280      	uxth	r0, r0

  analog_mv = toMilliVolt(analog_val);
 80007ca:	f7ff ffb5 	bl	8000738 <toMilliVolt>
 80007ce:	0004      	movs	r4, r0
 80007d0:	4680      	mov	r8, r0
  digital_val = HAL_GPIO_ReadPin(HALL_DIGITAL_GPIO_Port, HALL_DIGITAL_Pin);
 80007d2:	20a0      	movs	r0, #160	@ 0xa0
 80007d4:	2101      	movs	r1, #1
 80007d6:	05c0      	lsls	r0, r0, #23
 80007d8:	f001 f9a4 	bl	8001b24 <HAL_GPIO_ReadPin>
 80007dc:	0005      	movs	r5, r0
 80007de:	9003      	str	r0, [sp, #12]

  if (selected_cmd & CMD_MOVING_AVG)
 80007e0:	4b44      	ldr	r3, [pc, #272]	@ (80008f4 <do_LISTENING+0x15c>)
 80007e2:	781e      	ldrb	r6, [r3, #0]
 80007e4:	07f3      	lsls	r3, r6, #31
 80007e6:	d51a      	bpl.n	800081e <do_LISTENING+0x86>
  {
    sum += analog_mv - filter_buf[counter];
 80007e8:	4b43      	ldr	r3, [pc, #268]	@ (80008f8 <do_LISTENING+0x160>)
 80007ea:	469a      	mov	sl, r3
 80007ec:	881f      	ldrh	r7, [r3, #0]
 80007ee:	4b43      	ldr	r3, [pc, #268]	@ (80008fc <do_LISTENING+0x164>)
 80007f0:	007a      	lsls	r2, r7, #1
 80007f2:	4693      	mov	fp, r2
 80007f4:	4699      	mov	r9, r3
 80007f6:	5ad0      	ldrh	r0, [r2, r3]
 80007f8:	1a20      	subs	r0, r4, r0
 80007fa:	4b41      	ldr	r3, [pc, #260]	@ (8000900 <do_LISTENING+0x168>)
 80007fc:	681a      	ldr	r2, [r3, #0]
 80007fe:	1880      	adds	r0, r0, r2
 8000800:	6018      	str	r0, [r3, #0]
    filter_out = sum / FILTER_LEN;
 8000802:	2196      	movs	r1, #150	@ 0x96
 8000804:	f7ff fc78 	bl	80000f8 <__udivsi3>
 8000808:	4b38      	ldr	r3, [pc, #224]	@ (80008ec <do_LISTENING+0x154>)
 800080a:	8018      	strh	r0, [r3, #0]
    filter_buf[counter] = analog_mv;
 800080c:	464b      	mov	r3, r9
 800080e:	465a      	mov	r2, fp
 8000810:	52d4      	strh	r4, [r2, r3]
    counter++;
 8000812:	3701      	adds	r7, #1
 8000814:	b2bf      	uxth	r7, r7
 8000816:	4653      	mov	r3, sl
 8000818:	801f      	strh	r7, [r3, #0]
    if (counter == FILTER_LEN) { counter = 0; }
 800081a:	2f96      	cmp	r7, #150	@ 0x96
 800081c:	d02a      	beq.n	8000874 <do_LISTENING+0xdc>
  }

  if (selected_cmd & CMD_RAND_NOISE)
 800081e:	07b6      	lsls	r6, r6, #30
 8000820:	d42b      	bmi.n	800087a <do_LISTENING+0xe2>
  {
    analog_mv = (analog_mv + gaussian_noise_clt(0.0, 100));
  }

  if (selected_cmd == CMD_RAW)
 8000822:	4b34      	ldr	r3, [pc, #208]	@ (80008f4 <do_LISTENING+0x15c>)
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d102      	bne.n	8000830 <do_LISTENING+0x98>
  {
    filter_out = 0;
 800082a:	4b30      	ldr	r3, [pc, #192]	@ (80008ec <do_LISTENING+0x154>)
 800082c:	2200      	movs	r2, #0
 800082e:	801a      	strh	r2, [r3, #0]
  }

  snprintf(msg, sizeof(msg), "%u,%u,%u\r\n", analog_mv, filter_out, digital_val);
 8000830:	4a34      	ldr	r2, [pc, #208]	@ (8000904 <do_LISTENING+0x16c>)
 8000832:	ac04      	add	r4, sp, #16
 8000834:	9501      	str	r5, [sp, #4]
 8000836:	4b2d      	ldr	r3, [pc, #180]	@ (80008ec <do_LISTENING+0x154>)
 8000838:	881b      	ldrh	r3, [r3, #0]
 800083a:	9300      	str	r3, [sp, #0]
 800083c:	4643      	mov	r3, r8
 800083e:	2140      	movs	r1, #64	@ 0x40
 8000840:	0020      	movs	r0, r4
 8000842:	f003 f98d 	bl	8003b60 <sniprintf>
  print(msg);
 8000846:	0020      	movs	r0, r4
 8000848:	f7ff ff6a 	bl	8000720 <print>

  if (digital_val == GPIO_PIN_SET)
 800084c:	9b03      	ldr	r3, [sp, #12]
 800084e:	2b01      	cmp	r3, #1
 8000850:	d024      	beq.n	800089c <do_LISTENING+0x104>
      HAL_ADC_Stop(&hadc1);
      next_state = STATE_WARNING;
      hall_high_time = 0;
    }
  }
  else { hall_high_time = 0; }
 8000852:	4b2d      	ldr	r3, [pc, #180]	@ (8000908 <do_LISTENING+0x170>)
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
  state_t next_state = NO_CHANGE;
 8000858:	2407      	movs	r4, #7

  if (BSP_PB_GetState(BUTTON_USER) == GPIO_PIN_RESET) 
 800085a:	2000      	movs	r0, #0
 800085c:	f003 f8d6 	bl	8003a0c <BSP_PB_GetState>
 8000860:	2800      	cmp	r0, #0
 8000862:	d037      	beq.n	80008d4 <do_LISTENING+0x13c>
    next_state = STATE_PAUSE;
    HAL_Delay(200);
  }
 
  return next_state;
}
 8000864:	0020      	movs	r0, r4
 8000866:	b015      	add	sp, #84	@ 0x54
 8000868:	bcf0      	pop	{r4, r5, r6, r7}
 800086a:	46bb      	mov	fp, r7
 800086c:	46b2      	mov	sl, r6
 800086e:	46a9      	mov	r9, r5
 8000870:	46a0      	mov	r8, r4
 8000872:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (counter == FILTER_LEN) { counter = 0; }
 8000874:	2200      	movs	r2, #0
 8000876:	801a      	strh	r2, [r3, #0]
 8000878:	e7d1      	b.n	800081e <do_LISTENING+0x86>
    analog_mv = (analog_mv + gaussian_noise_clt(0.0, 100));
 800087a:	0020      	movs	r0, r4
 800087c:	f005 f9dc 	bl	8005c38 <__aeabi_i2f>
 8000880:	1c04      	adds	r4, r0, #0
 8000882:	4922      	ldr	r1, [pc, #136]	@ (800090c <do_LISTENING+0x174>)
 8000884:	2000      	movs	r0, #0
 8000886:	f7ff ff63 	bl	8000750 <gaussian_noise_clt>
 800088a:	1c01      	adds	r1, r0, #0
 800088c:	1c20      	adds	r0, r4, #0
 800088e:	f004 fc11 	bl	80050b4 <__aeabi_fadd>
 8000892:	f004 fbf7 	bl	8005084 <__aeabi_f2uiz>
 8000896:	b283      	uxth	r3, r0
 8000898:	4698      	mov	r8, r3
 800089a:	e7c2      	b.n	8000822 <do_LISTENING+0x8a>
    if (hall_high_time == 0)
 800089c:	4b1a      	ldr	r3, [pc, #104]	@ (8000908 <do_LISTENING+0x170>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d105      	bne.n	80008b0 <do_LISTENING+0x118>
      hall_high_time = HAL_GetTick();
 80008a4:	f000 f98e 	bl	8000bc4 <HAL_GetTick>
 80008a8:	4b17      	ldr	r3, [pc, #92]	@ (8000908 <do_LISTENING+0x170>)
 80008aa:	6018      	str	r0, [r3, #0]
  state_t next_state = NO_CHANGE;
 80008ac:	2407      	movs	r4, #7
 80008ae:	e7d4      	b.n	800085a <do_LISTENING+0xc2>
    else if (HAL_GetTick() - hall_high_time >= 5000)
 80008b0:	f000 f988 	bl	8000bc4 <HAL_GetTick>
 80008b4:	4b14      	ldr	r3, [pc, #80]	@ (8000908 <do_LISTENING+0x170>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	1ac0      	subs	r0, r0, r3
 80008ba:	4b15      	ldr	r3, [pc, #84]	@ (8000910 <do_LISTENING+0x178>)
 80008bc:	4298      	cmp	r0, r3
 80008be:	d801      	bhi.n	80008c4 <do_LISTENING+0x12c>
  state_t next_state = NO_CHANGE;
 80008c0:	2407      	movs	r4, #7
 80008c2:	e7ca      	b.n	800085a <do_LISTENING+0xc2>
      HAL_ADC_Stop(&hadc1);
 80008c4:	480a      	ldr	r0, [pc, #40]	@ (80008f0 <do_LISTENING+0x158>)
 80008c6:	f000 fd5f 	bl	8001388 <HAL_ADC_Stop>
      hall_high_time = 0;
 80008ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000908 <do_LISTENING+0x170>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
      next_state = STATE_WARNING;
 80008d0:	2404      	movs	r4, #4
 80008d2:	e7c2      	b.n	800085a <do_LISTENING+0xc2>
    HAL_ADC_Stop(&hadc1);
 80008d4:	4806      	ldr	r0, [pc, #24]	@ (80008f0 <do_LISTENING+0x158>)
 80008d6:	f000 fd57 	bl	8001388 <HAL_ADC_Stop>
    BSP_LED_Off(LED_GREEN);
 80008da:	2000      	movs	r0, #0
 80008dc:	f003 f818 	bl	8003910 <BSP_LED_Off>
    HAL_Delay(200);
 80008e0:	20c8      	movs	r0, #200	@ 0xc8
 80008e2:	f000 f975 	bl	8000bd0 <HAL_Delay>
    next_state = STATE_PAUSE;
 80008e6:	2405      	movs	r4, #5
 80008e8:	e7bc      	b.n	8000864 <do_LISTENING+0xcc>
 80008ea:	46c0      	nop			@ (mov r8, r8)
 80008ec:	200001c0 	.word	0x200001c0
 80008f0:	20000344 	.word	0x20000344
 80008f4:	20000085 	.word	0x20000085
 80008f8:	20000090 	.word	0x20000090
 80008fc:	20000094 	.word	0x20000094
 8000900:	2000008c 	.word	0x2000008c
 8000904:	08005e60 	.word	0x08005e60
 8000908:	20000088 	.word	0x20000088
 800090c:	42c80000 	.word	0x42c80000
 8000910:	00001387 	.word	0x00001387

08000914 <start_timer>:
{
 8000914:	b510      	push	{r4, lr}
  uint32_t period = ms - 1;
 8000916:	1e43      	subs	r3, r0, #1
  __HAL_TIM_SET_AUTORELOAD(&htim14, period);
 8000918:	4803      	ldr	r0, [pc, #12]	@ (8000928 <start_timer+0x14>)
 800091a:	6802      	ldr	r2, [r0, #0]
 800091c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800091e:	60c3      	str	r3, [r0, #12]
  HAL_TIM_Base_Start_IT(&htim14);
 8000920:	f001 fcf8 	bl	8002314 <HAL_TIM_Base_Start_IT>
}
 8000924:	bd10      	pop	{r4, pc}
 8000926:	46c0      	nop			@ (mov r8, r8)
 8000928:	2000029c 	.word	0x2000029c

0800092c <do_ERROR>:
}

// Function to be executed in state ERROR
// valid return states: NO_CHANGE
state_t do_ERROR(void) 
{
 800092c:	b510      	push	{r4, lr}
  state_t next_state = NO_CHANGE;

  start_timer(200);
 800092e:	20c8      	movs	r0, #200	@ 0xc8
 8000930:	f7ff fff0 	bl	8000914 <start_timer>
  print("ERROR\r\n");
 8000934:	4807      	ldr	r0, [pc, #28]	@ (8000954 <do_ERROR+0x28>)
 8000936:	f7ff fef3 	bl	8000720 <print>
  
  if (BSP_PB_GetState(BUTTON_USER) == GPIO_PIN_RESET) 
 800093a:	2000      	movs	r0, #0
 800093c:	f003 f866 	bl	8003a0c <BSP_PB_GetState>
 8000940:	2800      	cmp	r0, #0
 8000942:	d001      	beq.n	8000948 <do_ERROR+0x1c>
    HAL_Delay(200);
    NVIC_SystemReset();
  }

  return next_state;
}
 8000944:	2007      	movs	r0, #7
 8000946:	bd10      	pop	{r4, pc}
    HAL_Delay(200);
 8000948:	30c8      	adds	r0, #200	@ 0xc8
 800094a:	f000 f941 	bl	8000bd0 <HAL_Delay>
    NVIC_SystemReset();
 800094e:	f7ff fdc5 	bl	80004dc <__NVIC_SystemReset>
 8000952:	46c0      	nop			@ (mov r8, r8)
 8000954:	08005e6c 	.word	0x08005e6c

08000958 <stop_timer>:
{
 8000958:	b510      	push	{r4, lr}
  HAL_TIM_Base_Stop_IT(&htim14);
 800095a:	4802      	ldr	r0, [pc, #8]	@ (8000964 <stop_timer+0xc>)
 800095c:	f001 fd0e 	bl	800237c <HAL_TIM_Base_Stop_IT>
}
 8000960:	bd10      	pop	{r4, pc}
 8000962:	46c0      	nop			@ (mov r8, r8)
 8000964:	2000029c 	.word	0x2000029c

08000968 <do_PAUSE>:
{
 8000968:	b510      	push	{r4, lr}
  hall_high_time = 0;
 800096a:	4b0d      	ldr	r3, [pc, #52]	@ (80009a0 <do_PAUSE+0x38>)
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
  start_timer(1000);
 8000970:	20fa      	movs	r0, #250	@ 0xfa
 8000972:	0080      	lsls	r0, r0, #2
 8000974:	f7ff ffce 	bl	8000914 <start_timer>
  HAL_UART_Receive_IT(&huart2, &rx_byte, 1);
 8000978:	490a      	ldr	r1, [pc, #40]	@ (80009a4 <do_PAUSE+0x3c>)
 800097a:	480b      	ldr	r0, [pc, #44]	@ (80009a8 <do_PAUSE+0x40>)
 800097c:	2201      	movs	r2, #1
 800097e:	f002 ff09 	bl	8003794 <HAL_UART_Receive_IT>
  if (BSP_PB_GetState(BUTTON_USER) == GPIO_PIN_RESET)
 8000982:	2000      	movs	r0, #0
 8000984:	f003 f842 	bl	8003a0c <BSP_PB_GetState>
 8000988:	2800      	cmp	r0, #0
 800098a:	d001      	beq.n	8000990 <do_PAUSE+0x28>
  state_t next_state = NO_CHANGE;
 800098c:	2007      	movs	r0, #7
}
 800098e:	bd10      	pop	{r4, pc}
    stop_timer();
 8000990:	f7ff ffe2 	bl	8000958 <stop_timer>
    HAL_Delay(200);
 8000994:	20c8      	movs	r0, #200	@ 0xc8
 8000996:	f000 f91b 	bl	8000bd0 <HAL_Delay>
    next_state = STATE_LISTENING;
 800099a:	2003      	movs	r0, #3
 800099c:	e7f7      	b.n	800098e <do_PAUSE+0x26>
 800099e:	46c0      	nop			@ (mov r8, r8)
 80009a0:	20000088 	.word	0x20000088
 80009a4:	20000204 	.word	0x20000204
 80009a8:	20000208 	.word	0x20000208

080009ac <do_WARNING>:
{
 80009ac:	b510      	push	{r4, lr}
  stop_timer();
 80009ae:	f7ff ffd3 	bl	8000958 <stop_timer>
  BSP_LED_Off(LED_GREEN);
 80009b2:	2000      	movs	r0, #0
 80009b4:	f002 ffac 	bl	8003910 <BSP_LED_Off>
  print("WARNING\r\n");
 80009b8:	4807      	ldr	r0, [pc, #28]	@ (80009d8 <do_WARNING+0x2c>)
 80009ba:	f7ff feb1 	bl	8000720 <print>
  if (BSP_PB_GetState(BUTTON_USER) == GPIO_PIN_RESET) 
 80009be:	2000      	movs	r0, #0
 80009c0:	f003 f824 	bl	8003a0c <BSP_PB_GetState>
 80009c4:	2800      	cmp	r0, #0
 80009c6:	d001      	beq.n	80009cc <do_WARNING+0x20>
  state_t next_state = NO_CHANGE;
 80009c8:	2007      	movs	r0, #7
}
 80009ca:	bd10      	pop	{r4, pc}
    HAL_Delay(200);
 80009cc:	30c8      	adds	r0, #200	@ 0xc8
 80009ce:	f000 f8ff 	bl	8000bd0 <HAL_Delay>
    next_state = STATE_WAIT_REQUEST;
 80009d2:	2001      	movs	r0, #1
 80009d4:	e7f9      	b.n	80009ca <do_WARNING+0x1e>
 80009d6:	46c0      	nop			@ (mov r8, r8)
 80009d8:	08005e74 	.word	0x08005e74

080009dc <cli_process_cmd>:
{
 80009dc:	b530      	push	{r4, r5, lr}
 80009de:	b091      	sub	sp, #68	@ 0x44
 80009e0:	0004      	movs	r4, r0
  if (strcmp(cmd, "raw") == 0) 
 80009e2:	4921      	ldr	r1, [pc, #132]	@ (8000a68 <cli_process_cmd+0x8c>)
 80009e4:	f7ff fb6c 	bl	80000c0 <strcmp>
 80009e8:	2800      	cmp	r0, #0
 80009ea:	d011      	beq.n	8000a10 <cli_process_cmd+0x34>
  else if (strcmp(cmd, "moving average") == 0) 
 80009ec:	491f      	ldr	r1, [pc, #124]	@ (8000a6c <cli_process_cmd+0x90>)
 80009ee:	0020      	movs	r0, r4
 80009f0:	f7ff fb66 	bl	80000c0 <strcmp>
 80009f4:	2800      	cmp	r0, #0
 80009f6:	d117      	bne.n	8000a28 <cli_process_cmd+0x4c>
    selected_cmd ^= CMD_MOVING_AVG;
 80009f8:	4a1d      	ldr	r2, [pc, #116]	@ (8000a70 <cli_process_cmd+0x94>)
 80009fa:	7813      	ldrb	r3, [r2, #0]
 80009fc:	2101      	movs	r1, #1
 80009fe:	404b      	eors	r3, r1
 8000a00:	b2db      	uxtb	r3, r3
 8000a02:	7013      	strb	r3, [r2, #0]
    if (selected_cmd & CMD_MOVING_AVG)
 8000a04:	07db      	lsls	r3, r3, #31
 8000a06:	d50b      	bpl.n	8000a20 <cli_process_cmd+0x44>
      print("moving average on\r\n");
 8000a08:	481a      	ldr	r0, [pc, #104]	@ (8000a74 <cli_process_cmd+0x98>)
 8000a0a:	f7ff fe89 	bl	8000720 <print>
 8000a0e:	e005      	b.n	8000a1c <cli_process_cmd+0x40>
    print("removed all filters\r\n");
 8000a10:	4819      	ldr	r0, [pc, #100]	@ (8000a78 <cli_process_cmd+0x9c>)
 8000a12:	f7ff fe85 	bl	8000720 <print>
    selected_cmd = CMD_RAW;
 8000a16:	4b16      	ldr	r3, [pc, #88]	@ (8000a70 <cli_process_cmd+0x94>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	701a      	strb	r2, [r3, #0]
}
 8000a1c:	b011      	add	sp, #68	@ 0x44
 8000a1e:	bd30      	pop	{r4, r5, pc}
      print("moving average off\r\n");
 8000a20:	4816      	ldr	r0, [pc, #88]	@ (8000a7c <cli_process_cmd+0xa0>)
 8000a22:	f7ff fe7d 	bl	8000720 <print>
 8000a26:	e7f9      	b.n	8000a1c <cli_process_cmd+0x40>
  else if (strcmp(cmd, "random noise") == 0) 
 8000a28:	4915      	ldr	r1, [pc, #84]	@ (8000a80 <cli_process_cmd+0xa4>)
 8000a2a:	0020      	movs	r0, r4
 8000a2c:	f7ff fb48 	bl	80000c0 <strcmp>
 8000a30:	2800      	cmp	r0, #0
 8000a32:	d10f      	bne.n	8000a54 <cli_process_cmd+0x78>
    selected_cmd ^= CMD_RAND_NOISE;
 8000a34:	4a0e      	ldr	r2, [pc, #56]	@ (8000a70 <cli_process_cmd+0x94>)
 8000a36:	7813      	ldrb	r3, [r2, #0]
 8000a38:	2102      	movs	r1, #2
 8000a3a:	404b      	eors	r3, r1
 8000a3c:	b2db      	uxtb	r3, r3
 8000a3e:	7013      	strb	r3, [r2, #0]
    if (selected_cmd & CMD_RAND_NOISE)
 8000a40:	079b      	lsls	r3, r3, #30
 8000a42:	d503      	bpl.n	8000a4c <cli_process_cmd+0x70>
      print("random noise on\r\n");
 8000a44:	480f      	ldr	r0, [pc, #60]	@ (8000a84 <cli_process_cmd+0xa8>)
 8000a46:	f7ff fe6b 	bl	8000720 <print>
 8000a4a:	e7e7      	b.n	8000a1c <cli_process_cmd+0x40>
      print("random noise off\r\n");
 8000a4c:	480e      	ldr	r0, [pc, #56]	@ (8000a88 <cli_process_cmd+0xac>)
 8000a4e:	f7ff fe67 	bl	8000720 <print>
 8000a52:	e7e3      	b.n	8000a1c <cli_process_cmd+0x40>
    snprintf(msg, sizeof(msg), "wrong command: %s\r\n", cmd);
 8000a54:	4a0d      	ldr	r2, [pc, #52]	@ (8000a8c <cli_process_cmd+0xb0>)
 8000a56:	0023      	movs	r3, r4
 8000a58:	2140      	movs	r1, #64	@ 0x40
 8000a5a:	4668      	mov	r0, sp
 8000a5c:	f003 f880 	bl	8003b60 <sniprintf>
    print(msg);
 8000a60:	4668      	mov	r0, sp
 8000a62:	f7ff fe5d 	bl	8000720 <print>
}
 8000a66:	e7d9      	b.n	8000a1c <cli_process_cmd+0x40>
 8000a68:	08005e80 	.word	0x08005e80
 8000a6c:	08005e9c 	.word	0x08005e9c
 8000a70:	20000085 	.word	0x20000085
 8000a74:	08005eac 	.word	0x08005eac
 8000a78:	08005e84 	.word	0x08005e84
 8000a7c:	08005ec0 	.word	0x08005ec0
 8000a80:	08005ed8 	.word	0x08005ed8
 8000a84:	08005ee8 	.word	0x08005ee8
 8000a88:	08005efc 	.word	0x08005efc
 8000a8c:	08005f10 	.word	0x08005f10

08000a90 <run_state>:

state_t run_state(state_t cur_state) 
{
 8000a90:	b510      	push	{r4, lr}
 8000a92:	0004      	movs	r4, r0
  state_t new_state = state_table[cur_state]();
 8000a94:	4b04      	ldr	r3, [pc, #16]	@ (8000aa8 <run_state+0x18>)
 8000a96:	0082      	lsls	r2, r0, #2
 8000a98:	58d3      	ldr	r3, [r2, r3]
 8000a9a:	4798      	blx	r3
  if (new_state == NO_CHANGE) { new_state = cur_state; }
 8000a9c:	2807      	cmp	r0, #7
 8000a9e:	d000      	beq.n	8000aa2 <run_state+0x12>

  return new_state;
};
 8000aa0:	bd10      	pop	{r4, pc}
  if (new_state == NO_CHANGE) { new_state = cur_state; }
 8000aa2:	0020      	movs	r0, r4
 8000aa4:	e7fc      	b.n	8000aa0 <run_state+0x10>
 8000aa6:	46c0      	nop			@ (mov r8, r8)
 8000aa8:	08005f24 	.word	0x08005f24

08000aac <main>:
{
 8000aac:	b510      	push	{r4, lr}
    current_state = run_state(current_state);
 8000aae:	4c03      	ldr	r4, [pc, #12]	@ (8000abc <main+0x10>)
 8000ab0:	7820      	ldrb	r0, [r4, #0]
 8000ab2:	f7ff ffed 	bl	8000a90 <run_state>
 8000ab6:	7020      	strb	r0, [r4, #0]
  while (1)
 8000ab8:	e7f9      	b.n	8000aae <main+0x2>
 8000aba:	46c0      	nop			@ (mov r8, r8)
 8000abc:	20000084 	.word	0x20000084

08000ac0 <HAL_TIM_PeriodElapsedCallback>:
  }
}
*/

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000ac0:	b510      	push	{r4, lr}
  if (htim->Instance == TIM14)
 8000ac2:	6802      	ldr	r2, [r0, #0]
 8000ac4:	4b03      	ldr	r3, [pc, #12]	@ (8000ad4 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8000ac6:	429a      	cmp	r2, r3
 8000ac8:	d000      	beq.n	8000acc <HAL_TIM_PeriodElapsedCallback+0xc>
  {
    BSP_LED_Toggle(LED_GREEN);
  }
}
 8000aca:	bd10      	pop	{r4, pc}
    BSP_LED_Toggle(LED_GREEN);
 8000acc:	2000      	movs	r0, #0
 8000ace:	f002 ff41 	bl	8003954 <BSP_LED_Toggle>
}
 8000ad2:	e7fa      	b.n	8000aca <HAL_TIM_PeriodElapsedCallback+0xa>
 8000ad4:	40002000 	.word	0x40002000

08000ad8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef* huart)
{
  if (huart->Instance == USART2) {}
}
 8000ad8:	4770      	bx	lr
	...

08000adc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
 8000adc:	b570      	push	{r4, r5, r6, lr}
    if (huart->Instance == USART2)
 8000ade:	6802      	ldr	r2, [r0, #0]
 8000ae0:	4b10      	ldr	r3, [pc, #64]	@ (8000b24 <HAL_UART_RxCpltCallback+0x48>)
 8000ae2:	429a      	cmp	r2, r3
 8000ae4:	d000      	beq.n	8000ae8 <HAL_UART_RxCpltCallback+0xc>
        }
      }

      HAL_UART_Receive_IT(&huart2, &rx_byte, 1);
    }
}
 8000ae6:	bd70      	pop	{r4, r5, r6, pc}
      if (rx_byte == '\r' || rx_byte == '\n')
 8000ae8:	4b0f      	ldr	r3, [pc, #60]	@ (8000b28 <HAL_UART_RxCpltCallback+0x4c>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	2b0d      	cmp	r3, #13
 8000aee:	d00b      	beq.n	8000b08 <HAL_UART_RxCpltCallback+0x2c>
 8000af0:	2b0a      	cmp	r3, #10
 8000af2:	d009      	beq.n	8000b08 <HAL_UART_RxCpltCallback+0x2c>
        if (rx_idx < RX_BUF_LEN - 1)
 8000af4:	4a0d      	ldr	r2, [pc, #52]	@ (8000b2c <HAL_UART_RxCpltCallback+0x50>)
 8000af6:	8812      	ldrh	r2, [r2, #0]
 8000af8:	2a3e      	cmp	r2, #62	@ 0x3e
 8000afa:	d80d      	bhi.n	8000b18 <HAL_UART_RxCpltCallback+0x3c>
          rx_buf[rx_idx++] = rx_byte;
 8000afc:	490b      	ldr	r1, [pc, #44]	@ (8000b2c <HAL_UART_RxCpltCallback+0x50>)
 8000afe:	1c50      	adds	r0, r2, #1
 8000b00:	8008      	strh	r0, [r1, #0]
 8000b02:	490b      	ldr	r1, [pc, #44]	@ (8000b30 <HAL_UART_RxCpltCallback+0x54>)
 8000b04:	548b      	strb	r3, [r1, r2]
 8000b06:	e007      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x3c>
        rx_buf[rx_idx] = '\0';
 8000b08:	4c08      	ldr	r4, [pc, #32]	@ (8000b2c <HAL_UART_RxCpltCallback+0x50>)
 8000b0a:	8823      	ldrh	r3, [r4, #0]
 8000b0c:	4808      	ldr	r0, [pc, #32]	@ (8000b30 <HAL_UART_RxCpltCallback+0x54>)
 8000b0e:	2500      	movs	r5, #0
 8000b10:	54c5      	strb	r5, [r0, r3]
        cli_process_cmd((char*)rx_buf);
 8000b12:	f7ff ff63 	bl	80009dc <cli_process_cmd>
        rx_idx = 0;
 8000b16:	8025      	strh	r5, [r4, #0]
      HAL_UART_Receive_IT(&huart2, &rx_byte, 1);
 8000b18:	4903      	ldr	r1, [pc, #12]	@ (8000b28 <HAL_UART_RxCpltCallback+0x4c>)
 8000b1a:	4806      	ldr	r0, [pc, #24]	@ (8000b34 <HAL_UART_RxCpltCallback+0x58>)
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	f002 fe39 	bl	8003794 <HAL_UART_Receive_IT>
}
 8000b22:	e7e0      	b.n	8000ae6 <HAL_UART_RxCpltCallback+0xa>
 8000b24:	40004400 	.word	0x40004400
 8000b28:	20000204 	.word	0x20000204
 8000b2c:	200001c2 	.word	0x200001c2
 8000b30:	200001c4 	.word	0x200001c4
 8000b34:	20000208 	.word	0x20000208

08000b38 <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b38:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b3a:	e7fe      	b.n	8000b3a <Error_Handler+0x2>

08000b3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b3c:	b510      	push	{r4, lr}
 8000b3e:	0004      	movs	r4, r0
  HAL_StatusTypeDef  status = HAL_OK;

  if ((uint32_t)uwTickFreq != 0UL)
 8000b40:	4b11      	ldr	r3, [pc, #68]	@ (8000b88 <HAL_InitTick+0x4c>)
 8000b42:	7819      	ldrb	r1, [r3, #0]
 8000b44:	2900      	cmp	r1, #0
 8000b46:	d101      	bne.n	8000b4c <HAL_InitTick+0x10>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b48:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8000b4a:	bd10      	pop	{r4, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8000b4c:	20fa      	movs	r0, #250	@ 0xfa
 8000b4e:	0080      	lsls	r0, r0, #2
 8000b50:	f7ff fad2 	bl	80000f8 <__udivsi3>
 8000b54:	0001      	movs	r1, r0
 8000b56:	4b0d      	ldr	r3, [pc, #52]	@ (8000b8c <HAL_InitTick+0x50>)
 8000b58:	6818      	ldr	r0, [r3, #0]
 8000b5a:	f7ff facd 	bl	80000f8 <__udivsi3>
 8000b5e:	f000 fd4f 	bl	8001600 <HAL_SYSTICK_Config>
 8000b62:	2800      	cmp	r0, #0
 8000b64:	d10d      	bne.n	8000b82 <HAL_InitTick+0x46>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b66:	2c03      	cmp	r4, #3
 8000b68:	d901      	bls.n	8000b6e <HAL_InitTick+0x32>
        status = HAL_ERROR;
 8000b6a:	2001      	movs	r0, #1
 8000b6c:	e7ed      	b.n	8000b4a <HAL_InitTick+0xe>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b6e:	3001      	adds	r0, #1
 8000b70:	2200      	movs	r2, #0
 8000b72:	0021      	movs	r1, r4
 8000b74:	4240      	negs	r0, r0
 8000b76:	f000 fd33 	bl	80015e0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b7a:	4b05      	ldr	r3, [pc, #20]	@ (8000b90 <HAL_InitTick+0x54>)
 8000b7c:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b7e:	2000      	movs	r0, #0
 8000b80:	e7e3      	b.n	8000b4a <HAL_InitTick+0xe>
      status = HAL_ERROR;
 8000b82:	2001      	movs	r0, #1
 8000b84:	e7e1      	b.n	8000b4a <HAL_InitTick+0xe>
 8000b86:	46c0      	nop			@ (mov r8, r8)
 8000b88:	20000000 	.word	0x20000000
 8000b8c:	20000008 	.word	0x20000008
 8000b90:	20000004 	.word	0x20000004

08000b94 <HAL_Init>:
{
 8000b94:	b510      	push	{r4, lr}
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b96:	2003      	movs	r0, #3
 8000b98:	f7ff ffd0 	bl	8000b3c <HAL_InitTick>
 8000b9c:	1e04      	subs	r4, r0, #0
 8000b9e:	d002      	beq.n	8000ba6 <HAL_Init+0x12>
    status = HAL_ERROR;
 8000ba0:	2401      	movs	r4, #1
}
 8000ba2:	0020      	movs	r0, r4
 8000ba4:	bd10      	pop	{r4, pc}
    HAL_MspInit();
 8000ba6:	f000 ffd3 	bl	8001b50 <HAL_MspInit>
 8000baa:	e7fa      	b.n	8000ba2 <HAL_Init+0xe>

08000bac <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000bac:	4b03      	ldr	r3, [pc, #12]	@ (8000bbc <HAL_IncTick+0x10>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	4a03      	ldr	r2, [pc, #12]	@ (8000bc0 <HAL_IncTick+0x14>)
 8000bb2:	6811      	ldr	r1, [r2, #0]
 8000bb4:	185b      	adds	r3, r3, r1
 8000bb6:	6013      	str	r3, [r2, #0]
}
 8000bb8:	4770      	bx	lr
 8000bba:	46c0      	nop			@ (mov r8, r8)
 8000bbc:	20000000 	.word	0x20000000
 8000bc0:	200003a8 	.word	0x200003a8

08000bc4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000bc4:	4b01      	ldr	r3, [pc, #4]	@ (8000bcc <HAL_GetTick+0x8>)
 8000bc6:	6818      	ldr	r0, [r3, #0]
}
 8000bc8:	4770      	bx	lr
 8000bca:	46c0      	nop			@ (mov r8, r8)
 8000bcc:	200003a8 	.word	0x200003a8

08000bd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bd0:	b570      	push	{r4, r5, r6, lr}
 8000bd2:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000bd4:	f7ff fff6 	bl	8000bc4 <HAL_GetTick>
 8000bd8:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bda:	1c63      	adds	r3, r4, #1
 8000bdc:	d002      	beq.n	8000be4 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bde:	4b04      	ldr	r3, [pc, #16]	@ (8000bf0 <HAL_Delay+0x20>)
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	18e4      	adds	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000be4:	f7ff ffee 	bl	8000bc4 <HAL_GetTick>
 8000be8:	1b40      	subs	r0, r0, r5
 8000bea:	42a0      	cmp	r0, r4
 8000bec:	d3fa      	bcc.n	8000be4 <HAL_Delay+0x14>
  {
  }
}
 8000bee:	bd70      	pop	{r4, r5, r6, pc}
 8000bf0:	20000000 	.word	0x20000000

08000bf4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000bf4:	b530      	push	{r4, r5, lr}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	0004      	movs	r4, r0
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8000bfe:	2800      	cmp	r0, #0
 8000c00:	d100      	bne.n	8000c04 <HAL_ADC_Init+0x10>
 8000c02:	e105      	b.n	8000e10 <HAL_ADC_Init+0x21c>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000c04:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d012      	beq.n	8000c30 <HAL_ADC_Init+0x3c>

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000c0a:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000c0c:	689a      	ldr	r2, [r3, #8]
 8000c0e:	00d2      	lsls	r2, r2, #3
 8000c10:	d41b      	bmi.n	8000c4a <HAL_ADC_Init+0x56>
  MODIFY_REG(ADCx->CR,
 8000c12:	6899      	ldr	r1, [r3, #8]
 8000c14:	4a7f      	ldr	r2, [pc, #508]	@ (8000e14 <HAL_ADC_Init+0x220>)
 8000c16:	4011      	ands	r1, r2
 8000c18:	2280      	movs	r2, #128	@ 0x80
 8000c1a:	0552      	lsls	r2, r2, #21
 8000c1c:	430a      	orrs	r2, r1
 8000c1e:	609a      	str	r2, [r3, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000c20:	4b7d      	ldr	r3, [pc, #500]	@ (8000e18 <HAL_ADC_Init+0x224>)
 8000c22:	6818      	ldr	r0, [r3, #0]
 8000c24:	497d      	ldr	r1, [pc, #500]	@ (8000e1c <HAL_ADC_Init+0x228>)
 8000c26:	f7ff fa67 	bl	80000f8 <__udivsi3>
 8000c2a:	0040      	lsls	r0, r0, #1
 8000c2c:	9001      	str	r0, [sp, #4]
    while (wait_loop_index != 0UL)
 8000c2e:	e009      	b.n	8000c44 <HAL_ADC_Init+0x50>
    HAL_ADC_MspInit(hadc);
 8000c30:	f000 ffa6 	bl	8001b80 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8000c34:	2300      	movs	r3, #0
 8000c36:	65e3      	str	r3, [r4, #92]	@ 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8000c38:	2254      	movs	r2, #84	@ 0x54
 8000c3a:	54a3      	strb	r3, [r4, r2]
 8000c3c:	e7e5      	b.n	8000c0a <HAL_ADC_Init+0x16>
    {
      wait_loop_index--;
 8000c3e:	9b01      	ldr	r3, [sp, #4]
 8000c40:	3b01      	subs	r3, #1
 8000c42:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8000c44:	9b01      	ldr	r3, [sp, #4]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d1f9      	bne.n	8000c3e <HAL_ADC_Init+0x4a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000c4a:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000c4c:	689a      	ldr	r2, [r3, #8]
 8000c4e:	00d2      	lsls	r2, r2, #3
 8000c50:	d500      	bpl.n	8000c54 <HAL_ADC_Init+0x60>
 8000c52:	e09d      	b.n	8000d90 <HAL_ADC_Init+0x19c>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c54:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8000c56:	2110      	movs	r1, #16
 8000c58:	430a      	orrs	r2, r1
 8000c5a:	65a2      	str	r2, [r4, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c5c:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8000c5e:	390f      	subs	r1, #15
 8000c60:	430a      	orrs	r2, r1
 8000c62:	65e2      	str	r2, [r4, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8000c64:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000c66:	689a      	ldr	r2, [r3, #8]
 8000c68:	2104      	movs	r1, #4
 8000c6a:	000d      	movs	r5, r1
 8000c6c:	4015      	ands	r5, r2
 8000c6e:	4211      	tst	r1, r2
 8000c70:	d000      	beq.n	8000c74 <HAL_ADC_Init+0x80>
 8000c72:	2501      	movs	r5, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000c74:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8000c76:	06d2      	lsls	r2, r2, #27
 8000c78:	d500      	bpl.n	8000c7c <HAL_ADC_Init+0x88>
 8000c7a:	e0c2      	b.n	8000e02 <HAL_ADC_Init+0x20e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000c7c:	2d00      	cmp	r5, #0
 8000c7e:	d000      	beq.n	8000c82 <HAL_ADC_Init+0x8e>
 8000c80:	e0bf      	b.n	8000e02 <HAL_ADC_Init+0x20e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c82:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8000c84:	4966      	ldr	r1, [pc, #408]	@ (8000e20 <HAL_ADC_Init+0x22c>)
 8000c86:	400a      	ands	r2, r1
 8000c88:	3106      	adds	r1, #6
 8000c8a:	31ff      	adds	r1, #255	@ 0xff
 8000c8c:	430a      	orrs	r2, r1
 8000c8e:	65a2      	str	r2, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000c90:	689a      	ldr	r2, [r3, #8]
 8000c92:	07d2      	lsls	r2, r2, #31
 8000c94:	d452      	bmi.n	8000d3c <HAL_ADC_Init+0x148>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths: temperature sensor, Vref             */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000c96:	68a2      	ldr	r2, [r4, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000c98:	7e21      	ldrb	r1, [r4, #24]
 8000c9a:	0389      	lsls	r1, r1, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000c9c:	430a      	orrs	r2, r1
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000c9e:	7e61      	ldrb	r1, [r4, #25]
 8000ca0:	03c9      	lsls	r1, r1, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000ca2:	430a      	orrs	r2, r1
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000ca4:	7ea5      	ldrb	r5, [r4, #26]
 8000ca6:	0369      	lsls	r1, r5, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000ca8:	430a      	orrs	r2, r1
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000caa:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8000cac:	2900      	cmp	r1, #0
 8000cae:	d001      	beq.n	8000cb4 <HAL_ADC_Init+0xc0>
 8000cb0:	2180      	movs	r1, #128	@ 0x80
 8000cb2:	0149      	lsls	r1, r1, #5
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000cb4:	430a      	orrs	r2, r1
                   hadc->Init.DataAlign                                           |
 8000cb6:	68e1      	ldr	r1, [r4, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000cb8:	430a      	orrs	r2, r1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000cba:	6921      	ldr	r1, [r4, #16]
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	db69      	blt.n	8000d94 <HAL_ADC_Init+0x1a0>
 8000cc0:	2180      	movs	r1, #128	@ 0x80
 8000cc2:	0389      	lsls	r1, r1, #14
                   hadc->Init.DataAlign                                           |
 8000cc4:	430a      	orrs	r2, r1
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000cc6:	212c      	movs	r1, #44	@ 0x2c
 8000cc8:	5c61      	ldrb	r1, [r4, r1]
 8000cca:	0049      	lsls	r1, r1, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000ccc:	430a      	orrs	r2, r1

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000cce:	2120      	movs	r1, #32
 8000cd0:	5c61      	ldrb	r1, [r4, r1]
 8000cd2:	2901      	cmp	r1, #1
 8000cd4:	d061      	beq.n	8000d9a <HAL_ADC_Init+0x1a6>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000cd6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8000cd8:	2900      	cmp	r1, #0
 8000cda:	d005      	beq.n	8000ce8 <HAL_ADC_Init+0xf4>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000cdc:	25e0      	movs	r5, #224	@ 0xe0
 8000cde:	006d      	lsls	r5, r5, #1
 8000ce0:	4029      	ands	r1, r5
                     hadc->Init.ExternalTrigConvEdge);
 8000ce2:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000ce4:	4329      	orrs	r1, r5
 8000ce6:	430a      	orrs	r2, r1
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000ce8:	68d9      	ldr	r1, [r3, #12]
 8000cea:	4d4e      	ldr	r5, [pc, #312]	@ (8000e24 <HAL_ADC_Init+0x230>)
 8000cec:	4029      	ands	r1, r5
 8000cee:	430a      	orrs	r2, r1
 8000cf0:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000cf2:	6863      	ldr	r3, [r4, #4]
 8000cf4:	0f9b      	lsrs	r3, r3, #30
 8000cf6:	079b      	lsls	r3, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8000cf8:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000cfa:	431a      	orrs	r2, r3
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8000cfc:	213c      	movs	r1, #60	@ 0x3c
 8000cfe:	5c61      	ldrb	r1, [r4, r1]
 8000d00:	2901      	cmp	r1, #1
 8000d02:	d059      	beq.n	8000db8 <HAL_ADC_Init+0x1c4>
                     hadc->Init.Oversampling.RightBitShift |
                     hadc->Init.Oversampling.TriggeredMode
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8000d04:	6821      	ldr	r1, [r4, #0]
 8000d06:	690b      	ldr	r3, [r1, #16]
 8000d08:	4d47      	ldr	r5, [pc, #284]	@ (8000e28 <HAL_ADC_Init+0x234>)
 8000d0a:	402b      	ands	r3, r5
 8000d0c:	4313      	orrs	r3, r2
 8000d0e:	610b      	str	r3, [r1, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000d10:	6863      	ldr	r3, [r4, #4]
 8000d12:	22c0      	movs	r2, #192	@ 0xc0
 8000d14:	0612      	lsls	r2, r2, #24
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d010      	beq.n	8000d3c <HAL_ADC_Init+0x148>
 8000d1a:	2280      	movs	r2, #128	@ 0x80
 8000d1c:	05d2      	lsls	r2, r2, #23
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d00c      	beq.n	8000d3c <HAL_ADC_Init+0x148>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000d22:	2280      	movs	r2, #128	@ 0x80
 8000d24:	0612      	lsls	r2, r2, #24
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d008      	beq.n	8000d3c <HAL_ADC_Init+0x148>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8000d2a:	4940      	ldr	r1, [pc, #256]	@ (8000e2c <HAL_ADC_Init+0x238>)
 8000d2c:	680a      	ldr	r2, [r1, #0]
 8000d2e:	4d40      	ldr	r5, [pc, #256]	@ (8000e30 <HAL_ADC_Init+0x23c>)
 8000d30:	402a      	ands	r2, r5
 8000d32:	25f0      	movs	r5, #240	@ 0xf0
 8000d34:	03ad      	lsls	r5, r5, #14
 8000d36:	402b      	ands	r3, r5
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8000d3c:	6821      	ldr	r1, [r4, #0]
 8000d3e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
  MODIFY_REG(ADCx->SMPR,
 8000d40:	694a      	ldr	r2, [r1, #20]
 8000d42:	2507      	movs	r5, #7
 8000d44:	43aa      	bics	r2, r5
 8000d46:	4313      	orrs	r3, r2
 8000d48:	614b      	str	r3, [r1, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8000d4a:	6821      	ldr	r1, [r4, #0]
 8000d4c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8000d4e:	694b      	ldr	r3, [r1, #20]
 8000d50:	3569      	adds	r5, #105	@ 0x69
 8000d52:	43ab      	bics	r3, r5
 8000d54:	0112      	lsls	r2, r2, #4
 8000d56:	4313      	orrs	r3, r2
 8000d58:	614b      	str	r3, [r1, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8000d5a:	6923      	ldr	r3, [r4, #16]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d135      	bne.n	8000dcc <HAL_ADC_Init+0x1d8>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8000d60:	6822      	ldr	r2, [r4, #0]
 8000d62:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8000d64:	3b10      	subs	r3, #16
 8000d66:	430b      	orrs	r3, r1
 8000d68:	6293      	str	r3, [r2, #40]	@ 0x28
    {
      /* Nothing to do */
    }
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000d6a:	6823      	ldr	r3, [r4, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000d6c:	695a      	ldr	r2, [r3, #20]
 8000d6e:	2307      	movs	r3, #7
 8000d70:	4013      	ands	r3, r2
        == hadc->Init.SamplingTimeCommon1)
 8000d72:	6b62      	ldr	r2, [r4, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000d74:	429a      	cmp	r2, r3
 8000d76:	d03b      	beq.n	8000df0 <HAL_ADC_Init+0x1fc>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000d78:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8000d7a:	2212      	movs	r2, #18
 8000d7c:	4393      	bics	r3, r2
 8000d7e:	3a02      	subs	r2, #2
 8000d80:	4313      	orrs	r3, r2
 8000d82:	65a3      	str	r3, [r4, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d84:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8000d86:	3a0f      	subs	r2, #15
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	65e3      	str	r3, [r4, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	e03d      	b.n	8000e0c <HAL_ADC_Init+0x218>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d90:	2000      	movs	r0, #0
 8000d92:	e768      	b.n	8000c66 <HAL_ADC_Init+0x72>
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000d94:	0049      	lsls	r1, r1, #1
 8000d96:	0849      	lsrs	r1, r1, #1
 8000d98:	e794      	b.n	8000cc4 <HAL_ADC_Init+0xd0>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8000d9a:	2d00      	cmp	r5, #0
 8000d9c:	d103      	bne.n	8000da6 <HAL_ADC_Init+0x1b2>
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000d9e:	2180      	movs	r1, #128	@ 0x80
 8000da0:	0249      	lsls	r1, r1, #9
 8000da2:	430a      	orrs	r2, r1
 8000da4:	e797      	b.n	8000cd6 <HAL_ADC_Init+0xe2>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000da6:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8000da8:	2520      	movs	r5, #32
 8000daa:	4329      	orrs	r1, r5
 8000dac:	65a1      	str	r1, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dae:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8000db0:	3d1f      	subs	r5, #31
 8000db2:	4329      	orrs	r1, r5
 8000db4:	65e1      	str	r1, [r4, #92]	@ 0x5c
 8000db6:	e78e      	b.n	8000cd6 <HAL_ADC_Init+0xe2>
                     hadc->Init.Oversampling.Ratio         |
 8000db8:	6c21      	ldr	r1, [r4, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000dba:	430b      	orrs	r3, r1
                     hadc->Init.Oversampling.RightBitShift |
 8000dbc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 8000dbe:	430b      	orrs	r3, r1
                     hadc->Init.Oversampling.TriggeredMode
 8000dc0:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8000dc2:	430b      	orrs	r3, r1
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	431a      	orrs	r2, r3
 8000dca:	e79b      	b.n	8000d04 <HAL_ADC_Init+0x110>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000dcc:	2280      	movs	r2, #128	@ 0x80
 8000dce:	0392      	lsls	r2, r2, #14
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d1ca      	bne.n	8000d6a <HAL_ADC_Init+0x176>
      MODIFY_REG(hadc->Instance->CHSELR,
 8000dd4:	6821      	ldr	r1, [r4, #0]
 8000dd6:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8000dd8:	69e3      	ldr	r3, [r4, #28]
 8000dda:	3b01      	subs	r3, #1
 8000ddc:	009b      	lsls	r3, r3, #2
 8000dde:	221c      	movs	r2, #28
 8000de0:	401a      	ands	r2, r3
 8000de2:	2310      	movs	r3, #16
 8000de4:	425b      	negs	r3, r3
 8000de6:	4093      	lsls	r3, r2
 8000de8:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8000dea:	4313      	orrs	r3, r2
 8000dec:	628b      	str	r3, [r1, #40]	@ 0x28
 8000dee:	e7bc      	b.n	8000d6a <HAL_ADC_Init+0x176>
      ADC_CLEAR_ERRORCODE(hadc);
 8000df0:	2300      	movs	r3, #0
 8000df2:	65e3      	str	r3, [r4, #92]	@ 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 8000df4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8000df6:	2203      	movs	r2, #3
 8000df8:	4393      	bics	r3, r2
 8000dfa:	3a02      	subs	r2, #2
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	65a3      	str	r3, [r4, #88]	@ 0x58
 8000e00:	e004      	b.n	8000e0c <HAL_ADC_Init+0x218>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e02:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8000e04:	2210      	movs	r2, #16
 8000e06:	4313      	orrs	r3, r2
 8000e08:	65a3      	str	r3, [r4, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8000e0a:	2001      	movs	r0, #1
  }

  /* Return function status */
  return tmp_hal_status;
}
 8000e0c:	b003      	add	sp, #12
 8000e0e:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8000e10:	2001      	movs	r0, #1
 8000e12:	e7fb      	b.n	8000e0c <HAL_ADC_Init+0x218>
 8000e14:	6fffffe8 	.word	0x6fffffe8
 8000e18:	20000008 	.word	0x20000008
 8000e1c:	00030d40 	.word	0x00030d40
 8000e20:	fffffefd 	.word	0xfffffefd
 8000e24:	ffde0201 	.word	0xffde0201
 8000e28:	1ffffc02 	.word	0x1ffffc02
 8000e2c:	40012708 	.word	0x40012708
 8000e30:	ffc3ffff 	.word	0xffc3ffff

08000e34 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8000e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e36:	0004      	movs	r4, r0
 8000e38:	000d      	movs	r5, r1

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000e3a:	6946      	ldr	r6, [r0, #20]
 8000e3c:	2e08      	cmp	r6, #8
 8000e3e:	d004      	beq.n	8000e4a <HAL_ADC_PollForConversion+0x16>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8000e40:	6803      	ldr	r3, [r0, #0]
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	07db      	lsls	r3, r3, #31
 8000e46:	d419      	bmi.n	8000e7c <HAL_ADC_PollForConversion+0x48>

      return HAL_ERROR;
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8000e48:	2604      	movs	r6, #4
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8000e4a:	f7ff febb 	bl	8000bc4 <HAL_GetTick>
 8000e4e:	0007      	movs	r7, r0

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8000e50:	6823      	ldr	r3, [r4, #0]
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	4216      	tst	r6, r2
 8000e56:	d117      	bne.n	8000e88 <HAL_ADC_PollForConversion+0x54>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8000e58:	1c6b      	adds	r3, r5, #1
 8000e5a:	d0f9      	beq.n	8000e50 <HAL_ADC_PollForConversion+0x1c>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8000e5c:	f7ff feb2 	bl	8000bc4 <HAL_GetTick>
 8000e60:	1bc0      	subs	r0, r0, r7
 8000e62:	42a8      	cmp	r0, r5
 8000e64:	d801      	bhi.n	8000e6a <HAL_ADC_PollForConversion+0x36>
 8000e66:	2d00      	cmp	r5, #0
 8000e68:	d1f2      	bne.n	8000e50 <HAL_ADC_PollForConversion+0x1c>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000e6a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8000e6c:	2204      	movs	r2, #4
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	65a3      	str	r3, [r4, #88]	@ 0x58

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000e72:	2354      	movs	r3, #84	@ 0x54
 8000e74:	2200      	movs	r2, #0
 8000e76:	54e2      	strb	r2, [r4, r3]

        return HAL_TIMEOUT;
 8000e78:	2003      	movs	r0, #3
 8000e7a:	e029      	b.n	8000ed0 <HAL_ADC_PollForConversion+0x9c>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e7c:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8000e7e:	2220      	movs	r2, #32
 8000e80:	4313      	orrs	r3, r2
 8000e82:	6583      	str	r3, [r0, #88]	@ 0x58
      return HAL_ERROR;
 8000e84:	2001      	movs	r0, #1
 8000e86:	e023      	b.n	8000ed0 <HAL_ADC_PollForConversion+0x9c>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000e88:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8000e8a:	2280      	movs	r2, #128	@ 0x80
 8000e8c:	0092      	lsls	r2, r2, #2
 8000e8e:	430a      	orrs	r2, r1
 8000e90:	65a2      	str	r2, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8000e92:	68d9      	ldr	r1, [r3, #12]
 8000e94:	22c0      	movs	r2, #192	@ 0xc0
 8000e96:	0112      	lsls	r2, r2, #4
 8000e98:	4211      	tst	r1, r2
 8000e9a:	d113      	bne.n	8000ec4 <HAL_ADC_PollForConversion+0x90>

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8000e9c:	7ea2      	ldrb	r2, [r4, #26]
 8000e9e:	2a00      	cmp	r2, #0
 8000ea0:	d110      	bne.n	8000ec4 <HAL_ADC_PollForConversion+0x90>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	0712      	lsls	r2, r2, #28
 8000ea6:	d50d      	bpl.n	8000ec4 <HAL_ADC_PollForConversion+0x90>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000ea8:	689a      	ldr	r2, [r3, #8]
 8000eaa:	0752      	lsls	r2, r2, #29
 8000eac:	d411      	bmi.n	8000ed2 <HAL_ADC_PollForConversion+0x9e>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000eae:	685a      	ldr	r2, [r3, #4]
 8000eb0:	210c      	movs	r1, #12
 8000eb2:	438a      	bics	r2, r1
 8000eb4:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8000eb6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8000eb8:	4a0b      	ldr	r2, [pc, #44]	@ (8000ee8 <HAL_ADC_PollForConversion+0xb4>)
 8000eba:	4013      	ands	r3, r2
 8000ebc:	3204      	adds	r2, #4
 8000ebe:	32ff      	adds	r2, #255	@ 0xff
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	65a3      	str	r3, [r4, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8000ec4:	7e20      	ldrb	r0, [r4, #24]
 8000ec6:	2800      	cmp	r0, #0
 8000ec8:	d10c      	bne.n	8000ee4 <HAL_ADC_PollForConversion+0xb0>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8000eca:	6823      	ldr	r3, [r4, #0]
 8000ecc:	220c      	movs	r2, #12
 8000ece:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8000ed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ed2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8000ed4:	2220      	movs	r2, #32
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	65a3      	str	r3, [r4, #88]	@ 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000eda:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8000edc:	3a1f      	subs	r2, #31
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	65e3      	str	r3, [r4, #92]	@ 0x5c
 8000ee2:	e7ef      	b.n	8000ec4 <HAL_ADC_PollForConversion+0x90>
  return HAL_OK;
 8000ee4:	2000      	movs	r0, #0
 8000ee6:	e7f3      	b.n	8000ed0 <HAL_ADC_PollForConversion+0x9c>
 8000ee8:	fffffefe 	.word	0xfffffefe

08000eec <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8000eec:	6803      	ldr	r3, [r0, #0]
 8000eee:	6c18      	ldr	r0, [r3, #64]	@ 0x40
}
 8000ef0:	4770      	bx	lr
	...

08000ef4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 8000ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	0004      	movs	r4, r0
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(sConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8000efe:	6905      	ldr	r5, [r0, #16]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8000f00:	3354      	adds	r3, #84	@ 0x54
 8000f02:	5cc3      	ldrb	r3, [r0, r3]
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d100      	bne.n	8000f0a <HAL_ADC_ConfigChannel+0x16>
 8000f08:	e121      	b.n	800114e <HAL_ADC_ConfigChannel+0x25a>
 8000f0a:	2354      	movs	r3, #84	@ 0x54
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	54c2      	strb	r2, [r0, r3]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor       */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000f10:	6800      	ldr	r0, [r0, #0]
 8000f12:	6883      	ldr	r3, [r0, #8]
 8000f14:	3203      	adds	r2, #3
 8000f16:	0016      	movs	r6, r2
 8000f18:	401e      	ands	r6, r3
 8000f1a:	421a      	tst	r2, r3
 8000f1c:	d009      	beq.n	8000f32 <HAL_ADC_ConfigChannel+0x3e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f1e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8000f20:	321c      	adds	r2, #28
 8000f22:	4313      	orrs	r3, r2
 8000f24:	65a3      	str	r3, [r4, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8000f26:	2001      	movs	r0, #1
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f28:	2354      	movs	r3, #84	@ 0x54
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	54e2      	strb	r2, [r4, r3]

  /* Return function status */
  return tmp_hal_status;
}
 8000f2e:	b003      	add	sp, #12
 8000f30:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (sConfig->Rank != ADC_RANK_NONE)
 8000f32:	684b      	ldr	r3, [r1, #4]
 8000f34:	2b02      	cmp	r3, #2
 8000f36:	d100      	bne.n	8000f3a <HAL_ADC_ConfigChannel+0x46>
 8000f38:	e0d5      	b.n	80010e6 <HAL_ADC_ConfigChannel+0x1f2>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8000f3a:	2280      	movs	r2, #128	@ 0x80
 8000f3c:	0612      	lsls	r2, r2, #24
 8000f3e:	4295      	cmp	r5, r2
 8000f40:	d025      	beq.n	8000f8e <HAL_ADC_ConfigChannel+0x9a>
 8000f42:	4a84      	ldr	r2, [pc, #528]	@ (8001154 <HAL_ADC_ConfigChannel+0x260>)
 8000f44:	4295      	cmp	r5, r2
 8000f46:	d022      	beq.n	8000f8e <HAL_ADC_ConfigChannel+0x9a>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8000f48:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8000f4a:	271f      	movs	r7, #31
 8000f4c:	401f      	ands	r7, r3
 8000f4e:	250f      	movs	r5, #15
 8000f50:	40bd      	lsls	r5, r7
 8000f52:	43aa      	bics	r2, r5
 8000f54:	680b      	ldr	r3, [r1, #0]
 8000f56:	025d      	lsls	r5, r3, #9
 8000f58:	d12f      	bne.n	8000fba <HAL_ADC_ConfigChannel+0xc6>
 8000f5a:	0e9b      	lsrs	r3, r3, #26
 8000f5c:	261f      	movs	r6, #31
 8000f5e:	401e      	ands	r6, r3
 8000f60:	40be      	lsls	r6, r7
 8000f62:	4332      	orrs	r2, r6
 8000f64:	6622      	str	r2, [r4, #96]	@ 0x60
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8000f66:	684d      	ldr	r5, [r1, #4]
 8000f68:	08ab      	lsrs	r3, r5, #2
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	69e2      	ldr	r2, [r4, #28]
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d813      	bhi.n	8000f9a <HAL_ADC_ConfigChannel+0xa6>
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8000f72:	680e      	ldr	r6, [r1, #0]
  MODIFY_REG(ADCx->CHSELR,
 8000f74:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8000f76:	231f      	movs	r3, #31
 8000f78:	401d      	ands	r5, r3
 8000f7a:	3b10      	subs	r3, #16
 8000f7c:	001f      	movs	r7, r3
 8000f7e:	40af      	lsls	r7, r5
 8000f80:	43ba      	bics	r2, r7
 8000f82:	0eb6      	lsrs	r6, r6, #26
 8000f84:	4033      	ands	r3, r6
 8000f86:	40ab      	lsls	r3, r5
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	6283      	str	r3, [r0, #40]	@ 0x28
}
 8000f8c:	e005      	b.n	8000f9a <HAL_ADC_ConfigChannel+0xa6>
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8000f8e:	680b      	ldr	r3, [r1, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000f90:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8000f92:	025b      	lsls	r3, r3, #9
 8000f94:	0a5b      	lsrs	r3, r3, #9
 8000f96:	4313      	orrs	r3, r2
 8000f98:	6283      	str	r3, [r0, #40]	@ 0x28
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8000f9a:	6820      	ldr	r0, [r4, #0]
 8000f9c:	680b      	ldr	r3, [r1, #0]
 8000f9e:	688d      	ldr	r5, [r1, #8]
  MODIFY_REG(ADCx->SMPR,
 8000fa0:	6942      	ldr	r2, [r0, #20]
 8000fa2:	021b      	lsls	r3, r3, #8
 8000fa4:	439a      	bics	r2, r3
 8000fa6:	402b      	ands	r3, r5
 8000fa8:	4d6b      	ldr	r5, [pc, #428]	@ (8001158 <HAL_ADC_ConfigChannel+0x264>)
 8000faa:	402b      	ands	r3, r5
 8000fac:	4313      	orrs	r3, r2
 8000fae:	6143      	str	r3, [r0, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000fb0:	680b      	ldr	r3, [r1, #0]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	db5f      	blt.n	8001076 <HAL_ADC_ConfigChannel+0x182>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fb6:	2000      	movs	r0, #0
 8000fb8:	e7b6      	b.n	8000f28 <HAL_ADC_ConfigChannel+0x34>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8000fba:	07dd      	lsls	r5, r3, #31
 8000fbc:	d4d0      	bmi.n	8000f60 <HAL_ADC_ConfigChannel+0x6c>
 8000fbe:	079d      	lsls	r5, r3, #30
 8000fc0:	d42f      	bmi.n	8001022 <HAL_ADC_ConfigChannel+0x12e>
 8000fc2:	075d      	lsls	r5, r3, #29
 8000fc4:	d42f      	bmi.n	8001026 <HAL_ADC_ConfigChannel+0x132>
 8000fc6:	071d      	lsls	r5, r3, #28
 8000fc8:	d42f      	bmi.n	800102a <HAL_ADC_ConfigChannel+0x136>
 8000fca:	06dd      	lsls	r5, r3, #27
 8000fcc:	d42f      	bmi.n	800102e <HAL_ADC_ConfigChannel+0x13a>
 8000fce:	069d      	lsls	r5, r3, #26
 8000fd0:	d42f      	bmi.n	8001032 <HAL_ADC_ConfigChannel+0x13e>
 8000fd2:	065d      	lsls	r5, r3, #25
 8000fd4:	d42f      	bmi.n	8001036 <HAL_ADC_ConfigChannel+0x142>
 8000fd6:	061d      	lsls	r5, r3, #24
 8000fd8:	d42f      	bmi.n	800103a <HAL_ADC_ConfigChannel+0x146>
 8000fda:	05dd      	lsls	r5, r3, #23
 8000fdc:	d42f      	bmi.n	800103e <HAL_ADC_ConfigChannel+0x14a>
 8000fde:	059d      	lsls	r5, r3, #22
 8000fe0:	d42f      	bmi.n	8001042 <HAL_ADC_ConfigChannel+0x14e>
 8000fe2:	055d      	lsls	r5, r3, #21
 8000fe4:	d42f      	bmi.n	8001046 <HAL_ADC_ConfigChannel+0x152>
 8000fe6:	051d      	lsls	r5, r3, #20
 8000fe8:	d42f      	bmi.n	800104a <HAL_ADC_ConfigChannel+0x156>
 8000fea:	04dd      	lsls	r5, r3, #19
 8000fec:	d42f      	bmi.n	800104e <HAL_ADC_ConfigChannel+0x15a>
 8000fee:	049d      	lsls	r5, r3, #18
 8000ff0:	d42f      	bmi.n	8001052 <HAL_ADC_ConfigChannel+0x15e>
 8000ff2:	045d      	lsls	r5, r3, #17
 8000ff4:	d42f      	bmi.n	8001056 <HAL_ADC_ConfigChannel+0x162>
 8000ff6:	041d      	lsls	r5, r3, #16
 8000ff8:	d42f      	bmi.n	800105a <HAL_ADC_ConfigChannel+0x166>
 8000ffa:	03dd      	lsls	r5, r3, #15
 8000ffc:	d42f      	bmi.n	800105e <HAL_ADC_ConfigChannel+0x16a>
 8000ffe:	039d      	lsls	r5, r3, #14
 8001000:	d42f      	bmi.n	8001062 <HAL_ADC_ConfigChannel+0x16e>
 8001002:	035d      	lsls	r5, r3, #13
 8001004:	d42f      	bmi.n	8001066 <HAL_ADC_ConfigChannel+0x172>
 8001006:	031d      	lsls	r5, r3, #12
 8001008:	d42f      	bmi.n	800106a <HAL_ADC_ConfigChannel+0x176>
 800100a:	02dd      	lsls	r5, r3, #11
 800100c:	d42f      	bmi.n	800106e <HAL_ADC_ConfigChannel+0x17a>
 800100e:	029d      	lsls	r5, r3, #10
 8001010:	d42f      	bmi.n	8001072 <HAL_ADC_ConfigChannel+0x17e>
 8001012:	2580      	movs	r5, #128	@ 0x80
 8001014:	03ed      	lsls	r5, r5, #15
 8001016:	001e      	movs	r6, r3
 8001018:	402e      	ands	r6, r5
 800101a:	422b      	tst	r3, r5
 800101c:	d0a0      	beq.n	8000f60 <HAL_ADC_ConfigChannel+0x6c>
 800101e:	2616      	movs	r6, #22
 8001020:	e79e      	b.n	8000f60 <HAL_ADC_ConfigChannel+0x6c>
 8001022:	2601      	movs	r6, #1
 8001024:	e79c      	b.n	8000f60 <HAL_ADC_ConfigChannel+0x6c>
 8001026:	2602      	movs	r6, #2
 8001028:	e79a      	b.n	8000f60 <HAL_ADC_ConfigChannel+0x6c>
 800102a:	2603      	movs	r6, #3
 800102c:	e798      	b.n	8000f60 <HAL_ADC_ConfigChannel+0x6c>
 800102e:	2604      	movs	r6, #4
 8001030:	e796      	b.n	8000f60 <HAL_ADC_ConfigChannel+0x6c>
 8001032:	2605      	movs	r6, #5
 8001034:	e794      	b.n	8000f60 <HAL_ADC_ConfigChannel+0x6c>
 8001036:	2606      	movs	r6, #6
 8001038:	e792      	b.n	8000f60 <HAL_ADC_ConfigChannel+0x6c>
 800103a:	2607      	movs	r6, #7
 800103c:	e790      	b.n	8000f60 <HAL_ADC_ConfigChannel+0x6c>
 800103e:	2608      	movs	r6, #8
 8001040:	e78e      	b.n	8000f60 <HAL_ADC_ConfigChannel+0x6c>
 8001042:	2609      	movs	r6, #9
 8001044:	e78c      	b.n	8000f60 <HAL_ADC_ConfigChannel+0x6c>
 8001046:	260a      	movs	r6, #10
 8001048:	e78a      	b.n	8000f60 <HAL_ADC_ConfigChannel+0x6c>
 800104a:	260b      	movs	r6, #11
 800104c:	e788      	b.n	8000f60 <HAL_ADC_ConfigChannel+0x6c>
 800104e:	260c      	movs	r6, #12
 8001050:	e786      	b.n	8000f60 <HAL_ADC_ConfigChannel+0x6c>
 8001052:	260d      	movs	r6, #13
 8001054:	e784      	b.n	8000f60 <HAL_ADC_ConfigChannel+0x6c>
 8001056:	260e      	movs	r6, #14
 8001058:	e782      	b.n	8000f60 <HAL_ADC_ConfigChannel+0x6c>
 800105a:	260f      	movs	r6, #15
 800105c:	e780      	b.n	8000f60 <HAL_ADC_ConfigChannel+0x6c>
 800105e:	2610      	movs	r6, #16
 8001060:	e77e      	b.n	8000f60 <HAL_ADC_ConfigChannel+0x6c>
 8001062:	2611      	movs	r6, #17
 8001064:	e77c      	b.n	8000f60 <HAL_ADC_ConfigChannel+0x6c>
 8001066:	2612      	movs	r6, #18
 8001068:	e77a      	b.n	8000f60 <HAL_ADC_ConfigChannel+0x6c>
 800106a:	2613      	movs	r6, #19
 800106c:	e778      	b.n	8000f60 <HAL_ADC_ConfigChannel+0x6c>
 800106e:	2614      	movs	r6, #20
 8001070:	e776      	b.n	8000f60 <HAL_ADC_ConfigChannel+0x6c>
 8001072:	2615      	movs	r6, #21
 8001074:	e774      	b.n	8000f60 <HAL_ADC_ConfigChannel+0x6c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 8001076:	4a39      	ldr	r2, [pc, #228]	@ (800115c <HAL_ADC_ConfigChannel+0x268>)
 8001078:	6811      	ldr	r1, [r2, #0]
 800107a:	22c0      	movs	r2, #192	@ 0xc0
 800107c:	0412      	lsls	r2, r2, #16
 800107e:	400a      	ands	r2, r1
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001080:	4837      	ldr	r0, [pc, #220]	@ (8001160 <HAL_ADC_ConfigChannel+0x26c>)
 8001082:	4283      	cmp	r3, r0
 8001084:	d004      	beq.n	8001090 <HAL_ADC_ConfigChannel+0x19c>
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001086:	4837      	ldr	r0, [pc, #220]	@ (8001164 <HAL_ADC_ConfigChannel+0x270>)
 8001088:	4283      	cmp	r3, r0
 800108a:	d01f      	beq.n	80010cc <HAL_ADC_ConfigChannel+0x1d8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800108c:	2000      	movs	r0, #0
 800108e:	e74b      	b.n	8000f28 <HAL_ADC_ConfigChannel+0x34>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001090:	0208      	lsls	r0, r1, #8
 8001092:	d4f8      	bmi.n	8001086 <HAL_ADC_ConfigChannel+0x192>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001094:	2380      	movs	r3, #128	@ 0x80
 8001096:	041b      	lsls	r3, r3, #16
 8001098:	4313      	orrs	r3, r2
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 800109a:	4930      	ldr	r1, [pc, #192]	@ (800115c <HAL_ADC_ConfigChannel+0x268>)
 800109c:	680a      	ldr	r2, [r1, #0]
 800109e:	4832      	ldr	r0, [pc, #200]	@ (8001168 <HAL_ADC_ConfigChannel+0x274>)
 80010a0:	4002      	ands	r2, r0
 80010a2:	4313      	orrs	r3, r2
 80010a4:	600b      	str	r3, [r1, #0]
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 80010a6:	4b31      	ldr	r3, [pc, #196]	@ (800116c <HAL_ADC_ConfigChannel+0x278>)
 80010a8:	6818      	ldr	r0, [r3, #0]
 80010aa:	4931      	ldr	r1, [pc, #196]	@ (8001170 <HAL_ADC_ConfigChannel+0x27c>)
 80010ac:	f7ff f824 	bl	80000f8 <__udivsi3>
 80010b0:	0043      	lsls	r3, r0, #1
 80010b2:	181b      	adds	r3, r3, r0
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	3301      	adds	r3, #1
 80010b8:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 80010ba:	e002      	b.n	80010c2 <HAL_ADC_ConfigChannel+0x1ce>
            wait_loop_index--;
 80010bc:	9b01      	ldr	r3, [sp, #4]
 80010be:	3b01      	subs	r3, #1
 80010c0:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 80010c2:	9b01      	ldr	r3, [sp, #4]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d1f9      	bne.n	80010bc <HAL_ADC_ConfigChannel+0x1c8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010c8:	2000      	movs	r0, #0
 80010ca:	e72d      	b.n	8000f28 <HAL_ADC_ConfigChannel+0x34>
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80010cc:	0249      	lsls	r1, r1, #9
 80010ce:	d43c      	bmi.n	800114a <HAL_ADC_ConfigChannel+0x256>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80010d0:	2380      	movs	r3, #128	@ 0x80
 80010d2:	03db      	lsls	r3, r3, #15
 80010d4:	4313      	orrs	r3, r2
 80010d6:	4921      	ldr	r1, [pc, #132]	@ (800115c <HAL_ADC_ConfigChannel+0x268>)
 80010d8:	680a      	ldr	r2, [r1, #0]
 80010da:	4823      	ldr	r0, [pc, #140]	@ (8001168 <HAL_ADC_ConfigChannel+0x274>)
 80010dc:	4002      	ands	r2, r0
 80010de:	4313      	orrs	r3, r2
 80010e0:	600b      	str	r3, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010e2:	2000      	movs	r0, #0
}
 80010e4:	e720      	b.n	8000f28 <HAL_ADC_ConfigChannel+0x34>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80010e6:	2380      	movs	r3, #128	@ 0x80
 80010e8:	061b      	lsls	r3, r3, #24
 80010ea:	429d      	cmp	r5, r3
 80010ec:	d002      	beq.n	80010f4 <HAL_ADC_ConfigChannel+0x200>
 80010ee:	4b19      	ldr	r3, [pc, #100]	@ (8001154 <HAL_ADC_ConfigChannel+0x260>)
 80010f0:	429d      	cmp	r5, r3
 80010f2:	d105      	bne.n	8001100 <HAL_ADC_ConfigChannel+0x20c>
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 80010f4:	680b      	ldr	r3, [r1, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80010f6:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 80010f8:	025b      	lsls	r3, r3, #9
 80010fa:	0a5b      	lsrs	r3, r3, #9
 80010fc:	439a      	bics	r2, r3
 80010fe:	6282      	str	r2, [r0, #40]	@ 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001100:	680b      	ldr	r3, [r1, #0]
 8001102:	2b00      	cmp	r3, #0
 8001104:	db01      	blt.n	800110a <HAL_ADC_ConfigChannel+0x216>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001106:	2000      	movs	r0, #0
 8001108:	e70e      	b.n	8000f28 <HAL_ADC_ConfigChannel+0x34>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 800110a:	4a14      	ldr	r2, [pc, #80]	@ (800115c <HAL_ADC_ConfigChannel+0x268>)
 800110c:	6812      	ldr	r2, [r2, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800110e:	4914      	ldr	r1, [pc, #80]	@ (8001160 <HAL_ADC_ConfigChannel+0x26c>)
 8001110:	428b      	cmp	r3, r1
 8001112:	d004      	beq.n	800111e <HAL_ADC_ConfigChannel+0x22a>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001114:	4913      	ldr	r1, [pc, #76]	@ (8001164 <HAL_ADC_ConfigChannel+0x270>)
 8001116:	428b      	cmp	r3, r1
 8001118:	d00c      	beq.n	8001134 <HAL_ADC_ConfigChannel+0x240>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800111a:	2000      	movs	r0, #0
 800111c:	e704      	b.n	8000f28 <HAL_ADC_ConfigChannel+0x34>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800111e:	2380      	movs	r3, #128	@ 0x80
 8001120:	03db      	lsls	r3, r3, #15
 8001122:	401a      	ands	r2, r3
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 8001124:	490d      	ldr	r1, [pc, #52]	@ (800115c <HAL_ADC_ConfigChannel+0x268>)
 8001126:	680b      	ldr	r3, [r1, #0]
 8001128:	480f      	ldr	r0, [pc, #60]	@ (8001168 <HAL_ADC_ConfigChannel+0x274>)
 800112a:	4003      	ands	r3, r0
 800112c:	431a      	orrs	r2, r3
 800112e:	600a      	str	r2, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001130:	2000      	movs	r0, #0
}
 8001132:	e6f9      	b.n	8000f28 <HAL_ADC_ConfigChannel+0x34>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001134:	2380      	movs	r3, #128	@ 0x80
 8001136:	041b      	lsls	r3, r3, #16
 8001138:	401a      	ands	r2, r3
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 800113a:	4908      	ldr	r1, [pc, #32]	@ (800115c <HAL_ADC_ConfigChannel+0x268>)
 800113c:	680b      	ldr	r3, [r1, #0]
 800113e:	480a      	ldr	r0, [pc, #40]	@ (8001168 <HAL_ADC_ConfigChannel+0x274>)
 8001140:	4003      	ands	r3, r0
 8001142:	431a      	orrs	r2, r3
 8001144:	600a      	str	r2, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001146:	2000      	movs	r0, #0
}
 8001148:	e6ee      	b.n	8000f28 <HAL_ADC_ConfigChannel+0x34>
 800114a:	2000      	movs	r0, #0
 800114c:	e6ec      	b.n	8000f28 <HAL_ADC_ConfigChannel+0x34>
  __HAL_LOCK(hadc);
 800114e:	2002      	movs	r0, #2
 8001150:	e6ed      	b.n	8000f2e <HAL_ADC_ConfigChannel+0x3a>
 8001152:	46c0      	nop			@ (mov r8, r8)
 8001154:	80000004 	.word	0x80000004
 8001158:	7fffff00 	.word	0x7fffff00
 800115c:	40012708 	.word	0x40012708
 8001160:	a4000200 	.word	0xa4000200
 8001164:	a8000400 	.word	0xa8000400
 8001168:	ff3fffff 	.word	0xff3fffff
 800116c:	20000008 	.word	0x20000008
 8001170:	00030d40 	.word	0x00030d40

08001174 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8001174:	b570      	push	{r4, r5, r6, lr}
 8001176:	0004      	movs	r4, r0
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8001178:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800117a:	6893      	ldr	r3, [r2, #8]
 800117c:	075b      	lsls	r3, r3, #29
 800117e:	d520      	bpl.n	80011c2 <ADC_ConversionStop+0x4e>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001180:	6893      	ldr	r3, [r2, #8]
 8001182:	079b      	lsls	r3, r3, #30
 8001184:	d405      	bmi.n	8001192 <ADC_ConversionStop+0x1e>
  MODIFY_REG(ADCx->CR,
 8001186:	6893      	ldr	r3, [r2, #8]
 8001188:	490f      	ldr	r1, [pc, #60]	@ (80011c8 <ADC_ConversionStop+0x54>)
 800118a:	400b      	ands	r3, r1
 800118c:	2110      	movs	r1, #16
 800118e:	430b      	orrs	r3, r1
 8001190:	6093      	str	r3, [r2, #8]
      LL_ADC_REG_StopConversion(hadc->Instance);
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001192:	f7ff fd17 	bl	8000bc4 <HAL_GetTick>
 8001196:	0005      	movs	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8001198:	6823      	ldr	r3, [r4, #0]
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	075b      	lsls	r3, r3, #29
 800119e:	d50e      	bpl.n	80011be <ADC_ConversionStop+0x4a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80011a0:	f7ff fd10 	bl	8000bc4 <HAL_GetTick>
 80011a4:	1b40      	subs	r0, r0, r5
 80011a6:	2802      	cmp	r0, #2
 80011a8:	d9f6      	bls.n	8001198 <ADC_ConversionStop+0x24>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011aa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80011ac:	2210      	movs	r2, #16
 80011ae:	4313      	orrs	r3, r2
 80011b0:	65a3      	str	r3, [r4, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011b2:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80011b4:	3a0f      	subs	r2, #15
 80011b6:	4313      	orrs	r3, r2
 80011b8:	65e3      	str	r3, [r4, #92]	@ 0x5c

        return HAL_ERROR;
 80011ba:	2001      	movs	r0, #1
 80011bc:	e002      	b.n	80011c4 <ADC_ConversionStop+0x50>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80011be:	2000      	movs	r0, #0
 80011c0:	e000      	b.n	80011c4 <ADC_ConversionStop+0x50>
 80011c2:	2000      	movs	r0, #0
}
 80011c4:	bd70      	pop	{r4, r5, r6, pc}
 80011c6:	46c0      	nop			@ (mov r8, r8)
 80011c8:	7fffffe8 	.word	0x7fffffe8

080011cc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80011cc:	b530      	push	{r4, r5, lr}
 80011ce:	b083      	sub	sp, #12
 80011d0:	0004      	movs	r4, r0
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	9301      	str	r3, [sp, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80011d6:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80011d8:	689a      	ldr	r2, [r3, #8]
 80011da:	07d2      	lsls	r2, r2, #31
 80011dc:	d44d      	bmi.n	800127a <ADC_Enable+0xae>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80011de:	6899      	ldr	r1, [r3, #8]
 80011e0:	4a27      	ldr	r2, [pc, #156]	@ (8001280 <ADC_Enable+0xb4>)
 80011e2:	4211      	tst	r1, r2
 80011e4:	d117      	bne.n	8001216 <ADC_Enable+0x4a>
  MODIFY_REG(ADCx->CR,
 80011e6:	689a      	ldr	r2, [r3, #8]
 80011e8:	4926      	ldr	r1, [pc, #152]	@ (8001284 <ADC_Enable+0xb8>)
 80011ea:	400a      	ands	r2, r1
 80011ec:	2101      	movs	r1, #1
 80011ee:	430a      	orrs	r2, r1
 80011f0:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 80011f2:	4b25      	ldr	r3, [pc, #148]	@ (8001288 <ADC_Enable+0xbc>)
 80011f4:	681b      	ldr	r3, [r3, #0]
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 80011f6:	021b      	lsls	r3, r3, #8
 80011f8:	d517      	bpl.n	800122a <ADC_Enable+0x5e>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80011fa:	4b24      	ldr	r3, [pc, #144]	@ (800128c <ADC_Enable+0xc0>)
 80011fc:	6818      	ldr	r0, [r3, #0]
 80011fe:	4924      	ldr	r1, [pc, #144]	@ (8001290 <ADC_Enable+0xc4>)
 8001200:	f7fe ff7a 	bl	80000f8 <__udivsi3>
 8001204:	3001      	adds	r0, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8001206:	9001      	str	r0, [sp, #4]
      while (wait_loop_index != 0UL)
 8001208:	9b01      	ldr	r3, [sp, #4]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d00d      	beq.n	800122a <ADC_Enable+0x5e>
      {
        wait_loop_index--;
 800120e:	9b01      	ldr	r3, [sp, #4]
 8001210:	3b01      	subs	r3, #1
 8001212:	9301      	str	r3, [sp, #4]
 8001214:	e7f8      	b.n	8001208 <ADC_Enable+0x3c>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001216:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8001218:	2210      	movs	r2, #16
 800121a:	4313      	orrs	r3, r2
 800121c:	6583      	str	r3, [r0, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800121e:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8001220:	3a0f      	subs	r2, #15
 8001222:	4313      	orrs	r3, r2
 8001224:	65c3      	str	r3, [r0, #92]	@ 0x5c
      return HAL_ERROR;
 8001226:	2001      	movs	r0, #1
 8001228:	e028      	b.n	800127c <ADC_Enable+0xb0>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800122a:	7e63      	ldrb	r3, [r4, #25]
 800122c:	2b01      	cmp	r3, #1
 800122e:	d101      	bne.n	8001234 <ADC_Enable+0x68>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001230:	2000      	movs	r0, #0
 8001232:	e023      	b.n	800127c <ADC_Enable+0xb0>
      tickstart = HAL_GetTick();
 8001234:	f7ff fcc6 	bl	8000bc4 <HAL_GetTick>
 8001238:	0005      	movs	r5, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800123a:	e004      	b.n	8001246 <ADC_Enable+0x7a>
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800123c:	f7ff fcc2 	bl	8000bc4 <HAL_GetTick>
 8001240:	1b40      	subs	r0, r0, r5
 8001242:	2802      	cmp	r0, #2
 8001244:	d80d      	bhi.n	8001262 <ADC_Enable+0x96>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001246:	6823      	ldr	r3, [r4, #0]
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	07d2      	lsls	r2, r2, #31
 800124c:	d413      	bmi.n	8001276 <ADC_Enable+0xaa>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800124e:	689a      	ldr	r2, [r3, #8]
 8001250:	07d2      	lsls	r2, r2, #31
 8001252:	d4f3      	bmi.n	800123c <ADC_Enable+0x70>
  MODIFY_REG(ADCx->CR,
 8001254:	689a      	ldr	r2, [r3, #8]
 8001256:	490b      	ldr	r1, [pc, #44]	@ (8001284 <ADC_Enable+0xb8>)
 8001258:	400a      	ands	r2, r1
 800125a:	2101      	movs	r1, #1
 800125c:	430a      	orrs	r2, r1
 800125e:	609a      	str	r2, [r3, #8]
}
 8001260:	e7ec      	b.n	800123c <ADC_Enable+0x70>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001262:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001264:	2210      	movs	r2, #16
 8001266:	4313      	orrs	r3, r2
 8001268:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800126a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800126c:	3a0f      	subs	r2, #15
 800126e:	4313      	orrs	r3, r2
 8001270:	65e3      	str	r3, [r4, #92]	@ 0x5c
          return HAL_ERROR;
 8001272:	2001      	movs	r0, #1
 8001274:	e002      	b.n	800127c <ADC_Enable+0xb0>
  return HAL_OK;
 8001276:	2000      	movs	r0, #0
 8001278:	e000      	b.n	800127c <ADC_Enable+0xb0>
 800127a:	2000      	movs	r0, #0
}
 800127c:	b003      	add	sp, #12
 800127e:	bd30      	pop	{r4, r5, pc}
 8001280:	80000017 	.word	0x80000017
 8001284:	7fffffe8 	.word	0x7fffffe8
 8001288:	40012708 	.word	0x40012708
 800128c:	20000008 	.word	0x20000008
 8001290:	00030d40 	.word	0x00030d40

08001294 <HAL_ADC_Start>:
{
 8001294:	b510      	push	{r4, lr}
 8001296:	0004      	movs	r4, r0
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001298:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	075b      	lsls	r3, r3, #29
 800129e:	d424      	bmi.n	80012ea <HAL_ADC_Start+0x56>
    __HAL_LOCK(hadc);
 80012a0:	2354      	movs	r3, #84	@ 0x54
 80012a2:	5cc3      	ldrb	r3, [r0, r3]
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d022      	beq.n	80012ee <HAL_ADC_Start+0x5a>
 80012a8:	2354      	movs	r3, #84	@ 0x54
 80012aa:	2201      	movs	r2, #1
 80012ac:	54c2      	strb	r2, [r0, r3]
    tmp_hal_status = ADC_Enable(hadc);
 80012ae:	f7ff ff8d 	bl	80011cc <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80012b2:	2800      	cmp	r0, #0
 80012b4:	d115      	bne.n	80012e2 <HAL_ADC_Start+0x4e>
      ADC_STATE_CLR_SET(hadc->State,
 80012b6:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 80012b8:	4b0e      	ldr	r3, [pc, #56]	@ (80012f4 <HAL_ADC_Start+0x60>)
 80012ba:	401a      	ands	r2, r3
 80012bc:	2380      	movs	r3, #128	@ 0x80
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	4313      	orrs	r3, r2
 80012c2:	65a3      	str	r3, [r4, #88]	@ 0x58
      ADC_CLEAR_ERRORCODE(hadc);
 80012c4:	2300      	movs	r3, #0
 80012c6:	65e3      	str	r3, [r4, #92]	@ 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80012c8:	6822      	ldr	r2, [r4, #0]
 80012ca:	211c      	movs	r1, #28
 80012cc:	6011      	str	r1, [r2, #0]
      __HAL_UNLOCK(hadc);
 80012ce:	2254      	movs	r2, #84	@ 0x54
 80012d0:	54a3      	strb	r3, [r4, r2]
      LL_ADC_REG_StartConversion(hadc->Instance);
 80012d2:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80012d4:	6893      	ldr	r3, [r2, #8]
 80012d6:	4908      	ldr	r1, [pc, #32]	@ (80012f8 <HAL_ADC_Start+0x64>)
 80012d8:	400b      	ands	r3, r1
 80012da:	2104      	movs	r1, #4
 80012dc:	430b      	orrs	r3, r1
 80012de:	6093      	str	r3, [r2, #8]
}
 80012e0:	e004      	b.n	80012ec <HAL_ADC_Start+0x58>
      __HAL_UNLOCK(hadc);
 80012e2:	2354      	movs	r3, #84	@ 0x54
 80012e4:	2200      	movs	r2, #0
 80012e6:	54e2      	strb	r2, [r4, r3]
 80012e8:	e000      	b.n	80012ec <HAL_ADC_Start+0x58>
    tmp_hal_status = HAL_BUSY;
 80012ea:	2002      	movs	r0, #2
}
 80012ec:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hadc);
 80012ee:	2002      	movs	r0, #2
 80012f0:	e7fc      	b.n	80012ec <HAL_ADC_Start+0x58>
 80012f2:	46c0      	nop			@ (mov r8, r8)
 80012f4:	fffff0fe 	.word	0xfffff0fe
 80012f8:	7fffffe8 	.word	0x7fffffe8

080012fc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80012fc:	b570      	push	{r4, r5, r6, lr}
 80012fe:	0004      	movs	r4, r0
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001300:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001302:	689a      	ldr	r2, [r3, #8]
 8001304:	2102      	movs	r1, #2
 8001306:	0008      	movs	r0, r1
 8001308:	4010      	ands	r0, r2
 800130a:	4211      	tst	r1, r2
 800130c:	d000      	beq.n	8001310 <ADC_Disable+0x14>
 800130e:	2001      	movs	r0, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001310:	689a      	ldr	r2, [r3, #8]
 8001312:	07d2      	lsls	r2, r2, #31
 8001314:	d531      	bpl.n	800137a <ADC_Disable+0x7e>

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
      && (tmp_adc_is_disable_on_going == 0UL)
 8001316:	2800      	cmp	r0, #0
 8001318:	d131      	bne.n	800137e <ADC_Disable+0x82>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800131a:	6899      	ldr	r1, [r3, #8]
 800131c:	2205      	movs	r2, #5
 800131e:	400a      	ands	r2, r1
 8001320:	2a01      	cmp	r2, #1
 8001322:	d009      	beq.n	8001338 <ADC_Disable+0x3c>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001324:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001326:	2210      	movs	r2, #16
 8001328:	4313      	orrs	r3, r2
 800132a:	65a3      	str	r3, [r4, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800132c:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800132e:	3a0f      	subs	r2, #15
 8001330:	4313      	orrs	r3, r2
 8001332:	65e3      	str	r3, [r4, #92]	@ 0x5c

      return HAL_ERROR;
 8001334:	2001      	movs	r0, #1
 8001336:	e021      	b.n	800137c <ADC_Disable+0x80>
  MODIFY_REG(ADCx->CR,
 8001338:	689a      	ldr	r2, [r3, #8]
 800133a:	4912      	ldr	r1, [pc, #72]	@ (8001384 <ADC_Disable+0x88>)
 800133c:	400a      	ands	r2, r1
 800133e:	2102      	movs	r1, #2
 8001340:	430a      	orrs	r2, r1
 8001342:	609a      	str	r2, [r3, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8001344:	6823      	ldr	r3, [r4, #0]
 8001346:	2203      	movs	r2, #3
 8001348:	601a      	str	r2, [r3, #0]
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800134a:	f7ff fc3b 	bl	8000bc4 <HAL_GetTick>
 800134e:	0005      	movs	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001350:	6823      	ldr	r3, [r4, #0]
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	07db      	lsls	r3, r3, #31
 8001356:	d50e      	bpl.n	8001376 <ADC_Disable+0x7a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001358:	f7ff fc34 	bl	8000bc4 <HAL_GetTick>
 800135c:	1b40      	subs	r0, r0, r5
 800135e:	2802      	cmp	r0, #2
 8001360:	d9f6      	bls.n	8001350 <ADC_Disable+0x54>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001362:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001364:	2210      	movs	r2, #16
 8001366:	4313      	orrs	r3, r2
 8001368:	65a3      	str	r3, [r4, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800136a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800136c:	3a0f      	subs	r2, #15
 800136e:	4313      	orrs	r3, r2
 8001370:	65e3      	str	r3, [r4, #92]	@ 0x5c

        return HAL_ERROR;
 8001372:	2001      	movs	r0, #1
 8001374:	e002      	b.n	800137c <ADC_Disable+0x80>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001376:	2000      	movs	r0, #0
 8001378:	e000      	b.n	800137c <ADC_Disable+0x80>
 800137a:	2000      	movs	r0, #0
}
 800137c:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 800137e:	2000      	movs	r0, #0
 8001380:	e7fc      	b.n	800137c <ADC_Disable+0x80>
 8001382:	46c0      	nop			@ (mov r8, r8)
 8001384:	7fffffe8 	.word	0x7fffffe8

08001388 <HAL_ADC_Stop>:
{
 8001388:	b510      	push	{r4, lr}
 800138a:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 800138c:	2354      	movs	r3, #84	@ 0x54
 800138e:	5cc3      	ldrb	r3, [r0, r3]
 8001390:	2b01      	cmp	r3, #1
 8001392:	d017      	beq.n	80013c4 <HAL_ADC_Stop+0x3c>
 8001394:	2354      	movs	r3, #84	@ 0x54
 8001396:	2201      	movs	r2, #1
 8001398:	54c2      	strb	r2, [r0, r3]
  tmp_hal_status = ADC_ConversionStop(hadc);
 800139a:	f7ff feeb 	bl	8001174 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 800139e:	2800      	cmp	r0, #0
 80013a0:	d003      	beq.n	80013aa <HAL_ADC_Stop+0x22>
  __HAL_UNLOCK(hadc);
 80013a2:	2354      	movs	r3, #84	@ 0x54
 80013a4:	2200      	movs	r2, #0
 80013a6:	54e2      	strb	r2, [r4, r3]
}
 80013a8:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 80013aa:	0020      	movs	r0, r4
 80013ac:	f7ff ffa6 	bl	80012fc <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 80013b0:	2800      	cmp	r0, #0
 80013b2:	d1f6      	bne.n	80013a2 <HAL_ADC_Stop+0x1a>
      ADC_STATE_CLR_SET(hadc->State,
 80013b4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80013b6:	4a04      	ldr	r2, [pc, #16]	@ (80013c8 <HAL_ADC_Stop+0x40>)
 80013b8:	4013      	ands	r3, r2
 80013ba:	3204      	adds	r2, #4
 80013bc:	32ff      	adds	r2, #255	@ 0xff
 80013be:	4313      	orrs	r3, r2
 80013c0:	65a3      	str	r3, [r4, #88]	@ 0x58
 80013c2:	e7ee      	b.n	80013a2 <HAL_ADC_Stop+0x1a>
  __HAL_LOCK(hadc);
 80013c4:	2002      	movs	r0, #2
 80013c6:	e7ef      	b.n	80013a8 <HAL_ADC_Stop+0x20>
 80013c8:	fffffefe 	.word	0xfffffefe

080013cc <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 80013cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013ce:	b083      	sub	sp, #12
 80013d0:	0004      	movs	r4, r0
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80013d6:	3354      	adds	r3, #84	@ 0x54
 80013d8:	5cc3      	ldrb	r3, [r0, r3]
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d100      	bne.n	80013e0 <HAL_ADCEx_Calibration_Start+0x14>
 80013de:	e0a6      	b.n	800152e <HAL_ADCEx_Calibration_Start+0x162>
 80013e0:	2601      	movs	r6, #1
 80013e2:	2354      	movs	r3, #84	@ 0x54
 80013e4:	54c6      	strb	r6, [r0, r3]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80013e6:	f7ff ff89 	bl	80012fc <ADC_Disable>
 80013ea:	0005      	movs	r5, r0

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80013ec:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80013ee:	689a      	ldr	r2, [r3, #8]
 80013f0:	0031      	movs	r1, r6
 80013f2:	4011      	ands	r1, r2
 80013f4:	4216      	tst	r6, r2
 80013f6:	d009      	beq.n	800140c <HAL_ADCEx_Calibration_Start+0x40>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013f8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80013fa:	2210      	movs	r2, #16
 80013fc:	4313      	orrs	r3, r2
 80013fe:	65a3      	str	r3, [r4, #88]	@ 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001400:	2354      	movs	r3, #84	@ 0x54
 8001402:	2200      	movs	r2, #0
 8001404:	54e2      	strb	r2, [r4, r3]

  /* Return function status */
  return tmp_hal_status;
}
 8001406:	0028      	movs	r0, r5
 8001408:	b003      	add	sp, #12
 800140a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ADC_STATE_CLR_SET(hadc->State,
 800140c:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800140e:	4849      	ldr	r0, [pc, #292]	@ (8001534 <HAL_ADCEx_Calibration_Start+0x168>)
 8001410:	4002      	ands	r2, r0
 8001412:	3006      	adds	r0, #6
 8001414:	30ff      	adds	r0, #255	@ 0xff
 8001416:	4302      	orrs	r2, r0
 8001418:	65a2      	str	r2, [r4, #88]	@ 0x58
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800141a:	68de      	ldr	r6, [r3, #12]
 800141c:	4a46      	ldr	r2, [pc, #280]	@ (8001538 <HAL_ADCEx_Calibration_Start+0x16c>)
 800141e:	4016      	ands	r6, r2
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8001420:	68da      	ldr	r2, [r3, #12]
 8001422:	4846      	ldr	r0, [pc, #280]	@ (800153c <HAL_ADCEx_Calibration_Start+0x170>)
 8001424:	4002      	ands	r2, r0
 8001426:	60da      	str	r2, [r3, #12]
  uint32_t calibration_factor_accumulated = 0;
 8001428:	0008      	movs	r0, r1
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800142a:	e006      	b.n	800143a <HAL_ADCEx_Calibration_Start+0x6e>
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 800142c:	22b4      	movs	r2, #180	@ 0xb4
 800142e:	589a      	ldr	r2, [r3, r2]
 8001430:	237f      	movs	r3, #127	@ 0x7f
 8001432:	4013      	ands	r3, r2
      calibration_factor_accumulated += (LL_ADC_GetCalibrationFactor(hadc->Instance) + 1UL);
 8001434:	3301      	adds	r3, #1
 8001436:	18c0      	adds	r0, r0, r3
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8001438:	3101      	adds	r1, #1
 800143a:	2907      	cmp	r1, #7
 800143c:	d81d      	bhi.n	800147a <HAL_ADCEx_Calibration_Start+0xae>
      LL_ADC_StartCalibration(hadc->Instance);
 800143e:	6827      	ldr	r7, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8001440:	68ba      	ldr	r2, [r7, #8]
 8001442:	4b3f      	ldr	r3, [pc, #252]	@ (8001540 <HAL_ADCEx_Calibration_Start+0x174>)
 8001444:	401a      	ands	r2, r3
 8001446:	3318      	adds	r3, #24
 8001448:	4313      	orrs	r3, r2
 800144a:	60bb      	str	r3, [r7, #8]
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800144c:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800144e:	689a      	ldr	r2, [r3, #8]
 8001450:	2a00      	cmp	r2, #0
 8001452:	daeb      	bge.n	800142c <HAL_ADCEx_Calibration_Start+0x60>
        wait_loop_index++;
 8001454:	9b01      	ldr	r3, [sp, #4]
 8001456:	3301      	adds	r3, #1
 8001458:	9301      	str	r3, [sp, #4]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800145a:	9a01      	ldr	r2, [sp, #4]
 800145c:	23ae      	movs	r3, #174	@ 0xae
 800145e:	029b      	lsls	r3, r3, #10
 8001460:	429a      	cmp	r2, r3
 8001462:	d3f3      	bcc.n	800144c <HAL_ADCEx_Calibration_Start+0x80>
          ADC_STATE_CLR_SET(hadc->State,
 8001464:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001466:	2212      	movs	r2, #18
 8001468:	4393      	bics	r3, r2
 800146a:	3a02      	subs	r2, #2
 800146c:	4313      	orrs	r3, r2
 800146e:	65a3      	str	r3, [r4, #88]	@ 0x58
          __HAL_UNLOCK(hadc);
 8001470:	2354      	movs	r3, #84	@ 0x54
 8001472:	2200      	movs	r2, #0
 8001474:	54e2      	strb	r2, [r4, r3]
          return HAL_ERROR;
 8001476:	2501      	movs	r5, #1
 8001478:	e7c5      	b.n	8001406 <HAL_ADCEx_Calibration_Start+0x3a>
    calibration_factor_accumulated += (calibration_index / 2UL);
 800147a:	084b      	lsrs	r3, r1, #1
 800147c:	1818      	adds	r0, r3, r0
    calibration_factor_accumulated /= calibration_index;
 800147e:	f7fe fe3b 	bl	80000f8 <__udivsi3>
    LL_ADC_Enable(hadc->Instance);
 8001482:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8001484:	6893      	ldr	r3, [r2, #8]
 8001486:	492e      	ldr	r1, [pc, #184]	@ (8001540 <HAL_ADCEx_Calibration_Start+0x174>)
 8001488:	400b      	ands	r3, r1
 800148a:	2101      	movs	r1, #1
 800148c:	430b      	orrs	r3, r1
 800148e:	6093      	str	r3, [r2, #8]
    if (LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 8001490:	6822      	ldr	r2, [r4, #0]
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 8001492:	6911      	ldr	r1, [r2, #16]
 8001494:	2380      	movs	r3, #128	@ 0x80
 8001496:	05db      	lsls	r3, r3, #23
 8001498:	4299      	cmp	r1, r3
 800149a:	d217      	bcs.n	80014cc <HAL_ADCEx_Calibration_Start+0x100>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 800149c:	4b29      	ldr	r3, [pc, #164]	@ (8001544 <HAL_ADCEx_Calibration_Start+0x178>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	21f0      	movs	r1, #240	@ 0xf0
 80014a2:	0389      	lsls	r1, r1, #14
 80014a4:	400b      	ands	r3, r1
      if (adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 80014a6:	21e0      	movs	r1, #224	@ 0xe0
 80014a8:	0349      	lsls	r1, r1, #13
 80014aa:	428b      	cmp	r3, r1
 80014ac:	d30e      	bcc.n	80014cc <HAL_ADCEx_Calibration_Start+0x100>
        delay_cpu_cycles = (1UL << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3UL));
 80014ae:	0c9b      	lsrs	r3, r3, #18
 80014b0:	3b03      	subs	r3, #3
 80014b2:	2101      	movs	r1, #1
 80014b4:	4099      	lsls	r1, r3
 80014b6:	9100      	str	r1, [sp, #0]
        delay_cpu_cycles >>= 1UL;
 80014b8:	9b00      	ldr	r3, [sp, #0]
 80014ba:	085b      	lsrs	r3, r3, #1
 80014bc:	9300      	str	r3, [sp, #0]
        while (delay_cpu_cycles != 0UL)
 80014be:	e002      	b.n	80014c6 <HAL_ADCEx_Calibration_Start+0xfa>
          delay_cpu_cycles--;
 80014c0:	9b00      	ldr	r3, [sp, #0]
 80014c2:	3b01      	subs	r3, #1
 80014c4:	9300      	str	r3, [sp, #0]
        while (delay_cpu_cycles != 0UL)
 80014c6:	9b00      	ldr	r3, [sp, #0]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d1f9      	bne.n	80014c0 <HAL_ADCEx_Calibration_Start+0xf4>
  MODIFY_REG(ADCx->CALFACT,
 80014cc:	21b4      	movs	r1, #180	@ 0xb4
 80014ce:	5853      	ldr	r3, [r2, r1]
 80014d0:	277f      	movs	r7, #127	@ 0x7f
 80014d2:	43bb      	bics	r3, r7
 80014d4:	4318      	orrs	r0, r3
 80014d6:	5050      	str	r0, [r2, r1]
    LL_ADC_Disable(hadc->Instance);
 80014d8:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80014da:	6893      	ldr	r3, [r2, #8]
 80014dc:	4918      	ldr	r1, [pc, #96]	@ (8001540 <HAL_ADCEx_Calibration_Start+0x174>)
 80014de:	400b      	ands	r3, r1
 80014e0:	2102      	movs	r1, #2
 80014e2:	430b      	orrs	r3, r1
 80014e4:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 80014e6:	f7ff fb6d 	bl	8000bc4 <HAL_GetTick>
 80014ea:	0007      	movs	r7, r0
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80014ec:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80014ee:	689a      	ldr	r2, [r3, #8]
 80014f0:	07d2      	lsls	r2, r2, #31
 80014f2:	d409      	bmi.n	8001508 <HAL_ADCEx_Calibration_Start+0x13c>
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 80014f4:	68da      	ldr	r2, [r3, #12]
 80014f6:	4332      	orrs	r2, r6
 80014f8:	60da      	str	r2, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 80014fa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80014fc:	2203      	movs	r2, #3
 80014fe:	4393      	bics	r3, r2
 8001500:	3a02      	subs	r2, #2
 8001502:	4313      	orrs	r3, r2
 8001504:	65a3      	str	r3, [r4, #88]	@ 0x58
 8001506:	e77b      	b.n	8001400 <HAL_ADCEx_Calibration_Start+0x34>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001508:	f7ff fb5c 	bl	8000bc4 <HAL_GetTick>
 800150c:	1bc0      	subs	r0, r0, r7
 800150e:	2802      	cmp	r0, #2
 8001510:	d9ec      	bls.n	80014ec <HAL_ADCEx_Calibration_Start+0x120>
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001512:	6823      	ldr	r3, [r4, #0]
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	07db      	lsls	r3, r3, #31
 8001518:	d5e8      	bpl.n	80014ec <HAL_ADCEx_Calibration_Start+0x120>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800151a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800151c:	2210      	movs	r2, #16
 800151e:	4313      	orrs	r3, r2
 8001520:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001522:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8001524:	3a0f      	subs	r2, #15
 8001526:	4313      	orrs	r3, r2
 8001528:	65e3      	str	r3, [r4, #92]	@ 0x5c
          return HAL_ERROR;
 800152a:	2501      	movs	r5, #1
 800152c:	e76b      	b.n	8001406 <HAL_ADCEx_Calibration_Start+0x3a>
  __HAL_LOCK(hadc);
 800152e:	2502      	movs	r5, #2
 8001530:	e769      	b.n	8001406 <HAL_ADCEx_Calibration_Start+0x3a>
 8001532:	46c0      	nop			@ (mov r8, r8)
 8001534:	fffffefd 	.word	0xfffffefd
 8001538:	00008003 	.word	0x00008003
 800153c:	ffff7ffc 	.word	0xffff7ffc
 8001540:	7fffffe8 	.word	0x7fffffe8
 8001544:	40012708 	.word	0x40012708

08001548 <__NVIC_SetPriority>:
{
 8001548:	b570      	push	{r4, r5, r6, lr}
  if ((int32_t)(IRQn) >= 0)
 800154a:	2800      	cmp	r0, #0
 800154c:	db11      	blt.n	8001572 <__NVIC_SetPriority+0x2a>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800154e:	0883      	lsrs	r3, r0, #2
 8001550:	4d13      	ldr	r5, [pc, #76]	@ (80015a0 <__NVIC_SetPriority+0x58>)
 8001552:	33c0      	adds	r3, #192	@ 0xc0
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	595c      	ldr	r4, [r3, r5]
 8001558:	2203      	movs	r2, #3
 800155a:	4010      	ands	r0, r2
 800155c:	00c0      	lsls	r0, r0, #3
 800155e:	32fc      	adds	r2, #252	@ 0xfc
 8001560:	0016      	movs	r6, r2
 8001562:	4086      	lsls	r6, r0
 8001564:	43b4      	bics	r4, r6
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001566:	0189      	lsls	r1, r1, #6
 8001568:	400a      	ands	r2, r1
 800156a:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800156c:	4322      	orrs	r2, r4
 800156e:	515a      	str	r2, [r3, r5]
}
 8001570:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001572:	230f      	movs	r3, #15
 8001574:	4003      	ands	r3, r0
 8001576:	3b08      	subs	r3, #8
 8001578:	089b      	lsrs	r3, r3, #2
 800157a:	3306      	adds	r3, #6
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	4a09      	ldr	r2, [pc, #36]	@ (80015a4 <__NVIC_SetPriority+0x5c>)
 8001580:	4694      	mov	ip, r2
 8001582:	4463      	add	r3, ip
 8001584:	685c      	ldr	r4, [r3, #4]
 8001586:	2203      	movs	r2, #3
 8001588:	4010      	ands	r0, r2
 800158a:	00c0      	lsls	r0, r0, #3
 800158c:	32fc      	adds	r2, #252	@ 0xfc
 800158e:	0015      	movs	r5, r2
 8001590:	4085      	lsls	r5, r0
 8001592:	43ac      	bics	r4, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001594:	0189      	lsls	r1, r1, #6
 8001596:	400a      	ands	r2, r1
 8001598:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800159a:	4322      	orrs	r2, r4
 800159c:	605a      	str	r2, [r3, #4]
}
 800159e:	e7e7      	b.n	8001570 <__NVIC_SetPriority+0x28>
 80015a0:	e000e100 	.word	0xe000e100
 80015a4:	e000ed00 	.word	0xe000ed00

080015a8 <SysTick_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015a8:	3801      	subs	r0, #1
 80015aa:	2380      	movs	r3, #128	@ 0x80
 80015ac:	045b      	lsls	r3, r3, #17
 80015ae:	4298      	cmp	r0, r3
 80015b0:	d20f      	bcs.n	80015d2 <SysTick_Config+0x2a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015b2:	4a09      	ldr	r2, [pc, #36]	@ (80015d8 <SysTick_Config+0x30>)
 80015b4:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015b6:	4809      	ldr	r0, [pc, #36]	@ (80015dc <SysTick_Config+0x34>)
 80015b8:	6a03      	ldr	r3, [r0, #32]
 80015ba:	021b      	lsls	r3, r3, #8
 80015bc:	0a1b      	lsrs	r3, r3, #8
 80015be:	21c0      	movs	r1, #192	@ 0xc0
 80015c0:	0609      	lsls	r1, r1, #24
 80015c2:	430b      	orrs	r3, r1
 80015c4:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015c6:	2300      	movs	r3, #0
 80015c8:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015ca:	3307      	adds	r3, #7
 80015cc:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015ce:	2000      	movs	r0, #0
}
 80015d0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80015d2:	2001      	movs	r0, #1
 80015d4:	e7fc      	b.n	80015d0 <SysTick_Config+0x28>
 80015d6:	46c0      	nop			@ (mov r8, r8)
 80015d8:	e000e010 	.word	0xe000e010
 80015dc:	e000ed00 	.word	0xe000ed00

080015e0 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015e0:	b510      	push	{r4, lr}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80015e2:	f7ff ffb1 	bl	8001548 <__NVIC_SetPriority>
}
 80015e6:	bd10      	pop	{r4, pc}

080015e8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80015e8:	2800      	cmp	r0, #0
 80015ea:	db05      	blt.n	80015f8 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015ec:	221f      	movs	r2, #31
 80015ee:	4002      	ands	r2, r0
 80015f0:	2301      	movs	r3, #1
 80015f2:	4093      	lsls	r3, r2
 80015f4:	4a01      	ldr	r2, [pc, #4]	@ (80015fc <HAL_NVIC_EnableIRQ+0x14>)
 80015f6:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80015f8:	4770      	bx	lr
 80015fa:	46c0      	nop			@ (mov r8, r8)
 80015fc:	e000e100 	.word	0xe000e100

08001600 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001600:	b510      	push	{r4, lr}
  return SysTick_Config(TicksNumb);
 8001602:	f7ff ffd1 	bl	80015a8 <SysTick_Config>
}
 8001606:	bd10      	pop	{r4, pc}

08001608 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001608:	b510      	push	{r4, lr}
 800160a:	0004      	movs	r4, r0
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800160c:	6803      	ldr	r3, [r0, #0]
 800160e:	20ff      	movs	r0, #255	@ 0xff
 8001610:	4018      	ands	r0, r3
 8001612:	3808      	subs	r0, #8
 8001614:	2114      	movs	r1, #20
 8001616:	f7fe fd6f 	bl	80000f8 <__udivsi3>
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
                                                             ((hdma->ChannelIndex >> 2U) * \
 800161a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800161c:	089b      	lsrs	r3, r3, #2
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 800161e:	4a06      	ldr	r2, [pc, #24]	@ (8001638 <DMA_CalcDMAMUXChannelBaseAndMask+0x30>)
 8001620:	4694      	mov	ip, r2
 8001622:	4463      	add	r3, ip
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	6463      	str	r3, [r4, #68]	@ 0x44
                                                              ((uint32_t)DMAMUX1_Channel1 - \
                                                               (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001628:	4b04      	ldr	r3, [pc, #16]	@ (800163c <DMA_CalcDMAMUXChannelBaseAndMask+0x34>)
 800162a:	64a3      	str	r3, [r4, #72]	@ 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 800162c:	231c      	movs	r3, #28
 800162e:	4018      	ands	r0, r3
 8001630:	3b1b      	subs	r3, #27
 8001632:	4083      	lsls	r3, r0
 8001634:	64e3      	str	r3, [r4, #76]	@ 0x4c
}
 8001636:	bd10      	pop	{r4, pc}
 8001638:	10008200 	.word	0x10008200
 800163c:	40020880 	.word	0x40020880

08001640 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001640:	6842      	ldr	r2, [r0, #4]
 8001642:	23ff      	movs	r3, #255	@ 0xff
 8001644:	4013      	ands	r3, r2

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 8001646:	4a06      	ldr	r2, [pc, #24]	@ (8001660 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x20>)
 8001648:	189a      	adds	r2, r3, r2
 800164a:	0092      	lsls	r2, r2, #2
 800164c:	6502      	str	r2, [r0, #80]	@ 0x50
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800164e:	4a05      	ldr	r2, [pc, #20]	@ (8001664 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 8001650:	6542      	str	r2, [r0, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001652:	3b01      	subs	r3, #1
 8001654:	2203      	movs	r2, #3
 8001656:	401a      	ands	r2, r3
 8001658:	2301      	movs	r3, #1
 800165a:	4093      	lsls	r3, r2
 800165c:	6583      	str	r3, [r0, #88]	@ 0x58
}
 800165e:	4770      	bx	lr
 8001660:	1000823f 	.word	0x1000823f
 8001664:	40020940 	.word	0x40020940

08001668 <HAL_DMA_Init>:
{
 8001668:	b570      	push	{r4, r5, r6, lr}
 800166a:	1e04      	subs	r4, r0, #0
  if (hdma == NULL)
 800166c:	d04d      	beq.n	800170a <HAL_DMA_Init+0xa2>
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 800166e:	6805      	ldr	r5, [r0, #0]
 8001670:	4b27      	ldr	r3, [pc, #156]	@ (8001710 <HAL_DMA_Init+0xa8>)
 8001672:	18e8      	adds	r0, r5, r3
 8001674:	2114      	movs	r1, #20
 8001676:	f7fe fd3f 	bl	80000f8 <__udivsi3>
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 800167a:	0080      	lsls	r0, r0, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 800167c:	6420      	str	r0, [r4, #64]	@ 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 800167e:	2325      	movs	r3, #37	@ 0x25
 8001680:	2202      	movs	r2, #2
 8001682:	54e2      	strb	r2, [r4, r3]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001684:	682b      	ldr	r3, [r5, #0]
 8001686:	4a23      	ldr	r2, [pc, #140]	@ (8001714 <HAL_DMA_Init+0xac>)
 8001688:	4013      	ands	r3, r2
 800168a:	602b      	str	r3, [r5, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800168c:	6821      	ldr	r1, [r4, #0]
 800168e:	680a      	ldr	r2, [r1, #0]
 8001690:	68a3      	ldr	r3, [r4, #8]
 8001692:	68e0      	ldr	r0, [r4, #12]
 8001694:	4303      	orrs	r3, r0
 8001696:	6920      	ldr	r0, [r4, #16]
 8001698:	4303      	orrs	r3, r0
 800169a:	6960      	ldr	r0, [r4, #20]
 800169c:	4303      	orrs	r3, r0
 800169e:	69a0      	ldr	r0, [r4, #24]
 80016a0:	4303      	orrs	r3, r0
 80016a2:	69e0      	ldr	r0, [r4, #28]
 80016a4:	4303      	orrs	r3, r0
 80016a6:	6a20      	ldr	r0, [r4, #32]
 80016a8:	4303      	orrs	r3, r0
 80016aa:	4313      	orrs	r3, r2
 80016ac:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80016ae:	0020      	movs	r0, r4
 80016b0:	f7ff ffaa 	bl	8001608 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80016b4:	68a2      	ldr	r2, [r4, #8]
 80016b6:	2380      	movs	r3, #128	@ 0x80
 80016b8:	01db      	lsls	r3, r3, #7
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d018      	beq.n	80016f0 <HAL_DMA_Init+0x88>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80016be:	6861      	ldr	r1, [r4, #4]
 80016c0:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80016c2:	23ff      	movs	r3, #255	@ 0xff
 80016c4:	400b      	ands	r3, r1
 80016c6:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80016c8:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80016ca:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 80016cc:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request > 0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80016ce:	6863      	ldr	r3, [r4, #4]
 80016d0:	3b01      	subs	r3, #1
 80016d2:	2b03      	cmp	r3, #3
 80016d4:	d90f      	bls.n	80016f6 <HAL_DMA_Init+0x8e>
    hdma->DMAmuxRequestGen = 0U;
 80016d6:	2300      	movs	r3, #0
 80016d8:	6523      	str	r3, [r4, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80016da:	6563      	str	r3, [r4, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80016dc:	65a3      	str	r3, [r4, #88]	@ 0x58
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016de:	2300      	movs	r3, #0
 80016e0:	63e3      	str	r3, [r4, #60]	@ 0x3c
  hdma->State  = HAL_DMA_STATE_READY;
 80016e2:	2225      	movs	r2, #37	@ 0x25
 80016e4:	2101      	movs	r1, #1
 80016e6:	54a1      	strb	r1, [r4, r2]
  __HAL_UNLOCK(hdma);
 80016e8:	3a01      	subs	r2, #1
 80016ea:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 80016ec:	2000      	movs	r0, #0
}
 80016ee:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80016f0:	2300      	movs	r3, #0
 80016f2:	6063      	str	r3, [r4, #4]
 80016f4:	e7e3      	b.n	80016be <HAL_DMA_Init+0x56>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80016f6:	0020      	movs	r0, r4
 80016f8:	f7ff ffa2 	bl	8001640 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80016fc:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001702:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001704:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8001706:	605a      	str	r2, [r3, #4]
 8001708:	e7e9      	b.n	80016de <HAL_DMA_Init+0x76>
    return HAL_ERROR;
 800170a:	2001      	movs	r0, #1
 800170c:	e7ef      	b.n	80016ee <HAL_DMA_Init+0x86>
 800170e:	46c0      	nop			@ (mov r8, r8)
 8001710:	bffdfff8 	.word	0xbffdfff8
 8001714:	ffff800f 	.word	0xffff800f

08001718 <HAL_DMA_Abort>:
{
 8001718:	b530      	push	{r4, r5, lr}
  if (NULL == hdma)
 800171a:	2800      	cmp	r0, #0
 800171c:	d036      	beq.n	800178c <HAL_DMA_Abort+0x74>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800171e:	2325      	movs	r3, #37	@ 0x25
 8001720:	5cc3      	ldrb	r3, [r0, r3]
 8001722:	2b02      	cmp	r3, #2
 8001724:	d006      	beq.n	8001734 <HAL_DMA_Abort+0x1c>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001726:	2304      	movs	r3, #4
 8001728:	63c3      	str	r3, [r0, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 800172a:	3320      	adds	r3, #32
 800172c:	2200      	movs	r2, #0
 800172e:	54c2      	strb	r2, [r0, r3]
    return HAL_ERROR;
 8001730:	2001      	movs	r0, #1
}
 8001732:	bd30      	pop	{r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001734:	6802      	ldr	r2, [r0, #0]
 8001736:	6813      	ldr	r3, [r2, #0]
 8001738:	210e      	movs	r1, #14
 800173a:	438b      	bics	r3, r1
 800173c:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800173e:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8001740:	6813      	ldr	r3, [r2, #0]
 8001742:	4913      	ldr	r1, [pc, #76]	@ (8001790 <HAL_DMA_Abort+0x78>)
 8001744:	400b      	ands	r3, r1
 8001746:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001748:	6801      	ldr	r1, [r0, #0]
 800174a:	680a      	ldr	r2, [r1, #0]
 800174c:	2301      	movs	r3, #1
 800174e:	439a      	bics	r2, r3
 8001750:	600a      	str	r2, [r1, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1cU)));
 8001752:	4c10      	ldr	r4, [pc, #64]	@ (8001794 <HAL_DMA_Abort+0x7c>)
 8001754:	6862      	ldr	r2, [r4, #4]
 8001756:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 8001758:	211c      	movs	r1, #28
 800175a:	4029      	ands	r1, r5
 800175c:	408b      	lsls	r3, r1
 800175e:	4313      	orrs	r3, r2
 8001760:	6063      	str	r3, [r4, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001762:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8001764:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8001766:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8001768:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800176a:	2b00      	cmp	r3, #0
 800176c:	d006      	beq.n	800177c <HAL_DMA_Abort+0x64>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	4907      	ldr	r1, [pc, #28]	@ (8001790 <HAL_DMA_Abort+0x78>)
 8001772:	400a      	ands	r2, r1
 8001774:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001776:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8001778:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 800177a:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800177c:	2325      	movs	r3, #37	@ 0x25
 800177e:	2201      	movs	r2, #1
 8001780:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 8001782:	3b01      	subs	r3, #1
 8001784:	2200      	movs	r2, #0
 8001786:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 8001788:	2000      	movs	r0, #0
 800178a:	e7d2      	b.n	8001732 <HAL_DMA_Abort+0x1a>
    return HAL_ERROR;
 800178c:	2001      	movs	r0, #1
 800178e:	e7d0      	b.n	8001732 <HAL_DMA_Abort+0x1a>
 8001790:	fffffeff 	.word	0xfffffeff
 8001794:	40020000 	.word	0x40020000

08001798 <HAL_DMA_Abort_IT>:
{
 8001798:	b570      	push	{r4, r5, r6, lr}
  __HAL_UNLOCK(hdma);
 800179a:	2324      	movs	r3, #36	@ 0x24
 800179c:	2200      	movs	r2, #0
 800179e:	54c2      	strb	r2, [r0, r3]
  __HAL_LOCK(hdma);
 80017a0:	3201      	adds	r2, #1
 80017a2:	54c2      	strb	r2, [r0, r3]
  if (HAL_DMA_STATE_BUSY != hdma->State)
 80017a4:	3301      	adds	r3, #1
 80017a6:	5cc3      	ldrb	r3, [r0, r3]
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d003      	beq.n	80017b4 <HAL_DMA_Abort_IT+0x1c>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017ac:	2304      	movs	r3, #4
 80017ae:	63c3      	str	r3, [r0, #60]	@ 0x3c
    status = HAL_ERROR;
 80017b0:	2001      	movs	r0, #1
}
 80017b2:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017b4:	6802      	ldr	r2, [r0, #0]
 80017b6:	6813      	ldr	r3, [r2, #0]
 80017b8:	210e      	movs	r1, #14
 80017ba:	438b      	bics	r3, r1
 80017bc:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80017be:	6801      	ldr	r1, [r0, #0]
 80017c0:	680a      	ldr	r2, [r1, #0]
 80017c2:	2301      	movs	r3, #1
 80017c4:	439a      	bics	r2, r3
 80017c6:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80017c8:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 80017ca:	680a      	ldr	r2, [r1, #0]
 80017cc:	4c12      	ldr	r4, [pc, #72]	@ (8001818 <HAL_DMA_Abort_IT+0x80>)
 80017ce:	4022      	ands	r2, r4
 80017d0:	600a      	str	r2, [r1, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 80017d2:	4c12      	ldr	r4, [pc, #72]	@ (800181c <HAL_DMA_Abort_IT+0x84>)
 80017d4:	6862      	ldr	r2, [r4, #4]
 80017d6:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 80017d8:	211c      	movs	r1, #28
 80017da:	4029      	ands	r1, r5
 80017dc:	408b      	lsls	r3, r1
 80017de:	4313      	orrs	r3, r2
 80017e0:	6063      	str	r3, [r4, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80017e2:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 80017e4:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 80017e6:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 80017e8:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d006      	beq.n	80017fc <HAL_DMA_Abort_IT+0x64>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	4909      	ldr	r1, [pc, #36]	@ (8001818 <HAL_DMA_Abort_IT+0x80>)
 80017f2:	400a      	ands	r2, r1
 80017f4:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80017f6:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80017f8:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 80017fa:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80017fc:	2325      	movs	r3, #37	@ 0x25
 80017fe:	2201      	movs	r2, #1
 8001800:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 8001802:	3b01      	subs	r3, #1
 8001804:	2200      	movs	r2, #0
 8001806:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferAbortCallback != NULL)
 8001808:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800180a:	2b00      	cmp	r3, #0
 800180c:	d002      	beq.n	8001814 <HAL_DMA_Abort_IT+0x7c>
      hdma->XferAbortCallback(hdma);
 800180e:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8001810:	2000      	movs	r0, #0
 8001812:	e7ce      	b.n	80017b2 <HAL_DMA_Abort_IT+0x1a>
 8001814:	2000      	movs	r0, #0
 8001816:	e7cc      	b.n	80017b2 <HAL_DMA_Abort_IT+0x1a>
 8001818:	fffffeff 	.word	0xfffffeff
 800181c:	40020000 	.word	0x40020000

08001820 <HAL_DMA_IRQHandler>:
{
 8001820:	b570      	push	{r4, r5, r6, lr}
  uint32_t flag_it = DMA1->ISR;
 8001822:	4b31      	ldr	r3, [pc, #196]	@ (80018e8 <HAL_DMA_IRQHandler+0xc8>)
 8001824:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001826:	6804      	ldr	r4, [r0, #0]
 8001828:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800182a:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 800182c:	231c      	movs	r3, #28
 800182e:	4013      	ands	r3, r2
 8001830:	2204      	movs	r2, #4
 8001832:	409a      	lsls	r2, r3
 8001834:	4211      	tst	r1, r2
 8001836:	d016      	beq.n	8001866 <HAL_DMA_IRQHandler+0x46>
 8001838:	076a      	lsls	r2, r5, #29
 800183a:	d514      	bpl.n	8001866 <HAL_DMA_IRQHandler+0x46>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800183c:	6823      	ldr	r3, [r4, #0]
 800183e:	069b      	lsls	r3, r3, #26
 8001840:	d403      	bmi.n	800184a <HAL_DMA_IRQHandler+0x2a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001842:	6823      	ldr	r3, [r4, #0]
 8001844:	2204      	movs	r2, #4
 8001846:	4393      	bics	r3, r2
 8001848:	6023      	str	r3, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 800184a:	4c27      	ldr	r4, [pc, #156]	@ (80018e8 <HAL_DMA_IRQHandler+0xc8>)
 800184c:	6863      	ldr	r3, [r4, #4]
 800184e:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8001850:	211c      	movs	r1, #28
 8001852:	4011      	ands	r1, r2
 8001854:	2204      	movs	r2, #4
 8001856:	408a      	lsls	r2, r1
 8001858:	4313      	orrs	r3, r2
 800185a:	6063      	str	r3, [r4, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 800185c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800185e:	2b00      	cmp	r3, #0
 8001860:	d000      	beq.n	8001864 <HAL_DMA_IRQHandler+0x44>
      hdma->XferHalfCpltCallback(hdma);
 8001862:	4798      	blx	r3
}
 8001864:	bd70      	pop	{r4, r5, r6, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8001866:	2202      	movs	r2, #2
 8001868:	409a      	lsls	r2, r3
 800186a:	4211      	tst	r1, r2
 800186c:	d01c      	beq.n	80018a8 <HAL_DMA_IRQHandler+0x88>
 800186e:	07aa      	lsls	r2, r5, #30
 8001870:	d51a      	bpl.n	80018a8 <HAL_DMA_IRQHandler+0x88>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001872:	6823      	ldr	r3, [r4, #0]
 8001874:	069b      	lsls	r3, r3, #26
 8001876:	d406      	bmi.n	8001886 <HAL_DMA_IRQHandler+0x66>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001878:	6823      	ldr	r3, [r4, #0]
 800187a:	220a      	movs	r2, #10
 800187c:	4393      	bics	r3, r2
 800187e:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001880:	2325      	movs	r3, #37	@ 0x25
 8001882:	3a09      	subs	r2, #9
 8001884:	54c2      	strb	r2, [r0, r3]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 8001886:	4c18      	ldr	r4, [pc, #96]	@ (80018e8 <HAL_DMA_IRQHandler+0xc8>)
 8001888:	6863      	ldr	r3, [r4, #4]
 800188a:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 800188c:	211c      	movs	r1, #28
 800188e:	4011      	ands	r1, r2
 8001890:	2202      	movs	r2, #2
 8001892:	408a      	lsls	r2, r1
 8001894:	4313      	orrs	r3, r2
 8001896:	6063      	str	r3, [r4, #4]
    __HAL_UNLOCK(hdma);
 8001898:	2324      	movs	r3, #36	@ 0x24
 800189a:	2200      	movs	r2, #0
 800189c:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferCpltCallback != NULL)
 800189e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d0df      	beq.n	8001864 <HAL_DMA_IRQHandler+0x44>
      hdma->XferCpltCallback(hdma);
 80018a4:	4798      	blx	r3
 80018a6:	e7dd      	b.n	8001864 <HAL_DMA_IRQHandler+0x44>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80018a8:	2208      	movs	r2, #8
 80018aa:	409a      	lsls	r2, r3
 80018ac:	4211      	tst	r1, r2
 80018ae:	d0d9      	beq.n	8001864 <HAL_DMA_IRQHandler+0x44>
 80018b0:	072d      	lsls	r5, r5, #28
 80018b2:	d5d7      	bpl.n	8001864 <HAL_DMA_IRQHandler+0x44>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018b4:	6823      	ldr	r3, [r4, #0]
 80018b6:	220e      	movs	r2, #14
 80018b8:	4393      	bics	r3, r2
 80018ba:	6023      	str	r3, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 80018bc:	4c0a      	ldr	r4, [pc, #40]	@ (80018e8 <HAL_DMA_IRQHandler+0xc8>)
 80018be:	6862      	ldr	r2, [r4, #4]
 80018c0:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80018c2:	211c      	movs	r1, #28
 80018c4:	4019      	ands	r1, r3
 80018c6:	2301      	movs	r3, #1
 80018c8:	001d      	movs	r5, r3
 80018ca:	408d      	lsls	r5, r1
 80018cc:	432a      	orrs	r2, r5
 80018ce:	6062      	str	r2, [r4, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80018d0:	63c3      	str	r3, [r0, #60]	@ 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 80018d2:	2225      	movs	r2, #37	@ 0x25
 80018d4:	5483      	strb	r3, [r0, r2]
    __HAL_UNLOCK(hdma);
 80018d6:	3323      	adds	r3, #35	@ 0x23
 80018d8:	2200      	movs	r2, #0
 80018da:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferErrorCallback != NULL)
 80018dc:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d0c0      	beq.n	8001864 <HAL_DMA_IRQHandler+0x44>
      hdma->XferErrorCallback(hdma);
 80018e2:	4798      	blx	r3
  return;
 80018e4:	e7be      	b.n	8001864 <HAL_DMA_IRQHandler+0x44>
 80018e6:	46c0      	nop			@ (mov r8, r8)
 80018e8:	40020000 	.word	0x40020000

080018ec <HAL_EXTI_RegisterCallback>:
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
  HAL_StatusTypeDef status = HAL_OK;

  switch (CallbackID)
 80018ec:	2901      	cmp	r1, #1
 80018ee:	d007      	beq.n	8001900 <HAL_EXTI_RegisterCallback+0x14>
 80018f0:	2902      	cmp	r1, #2
 80018f2:	d008      	beq.n	8001906 <HAL_EXTI_RegisterCallback+0x1a>
 80018f4:	2900      	cmp	r1, #0
 80018f6:	d109      	bne.n	800190c <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 80018f8:	6042      	str	r2, [r0, #4]
      hexti->FallingCallback = pPendingCbfn;
 80018fa:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80018fc:	0008      	movs	r0, r1
      status = HAL_ERROR;
      break;
  }

  return status;
}
 80018fe:	4770      	bx	lr
      hexti->RisingCallback = pPendingCbfn;
 8001900:	6042      	str	r2, [r0, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001902:	2000      	movs	r0, #0
      break;
 8001904:	e7fb      	b.n	80018fe <HAL_EXTI_RegisterCallback+0x12>
      hexti->FallingCallback = pPendingCbfn;
 8001906:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001908:	2000      	movs	r0, #0
      break;
 800190a:	e7f8      	b.n	80018fe <HAL_EXTI_RegisterCallback+0x12>
  switch (CallbackID)
 800190c:	2001      	movs	r0, #1
 800190e:	e7f6      	b.n	80018fe <HAL_EXTI_RegisterCallback+0x12>

08001910 <HAL_EXTI_GetHandle>:
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8001910:	2800      	cmp	r0, #0
 8001912:	d002      	beq.n	800191a <HAL_EXTI_GetHandle+0xa>
    return HAL_ERROR;
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8001914:	6001      	str	r1, [r0, #0]

    return HAL_OK;
 8001916:	2000      	movs	r0, #0
  }
}
 8001918:	4770      	bx	lr
    return HAL_ERROR;
 800191a:	2001      	movs	r0, #1
 800191c:	e7fc      	b.n	8001918 <HAL_EXTI_GetHandle+0x8>
	...

08001920 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8001920:	b570      	push	{r4, r5, r6, lr}
 8001922:	0006      	movs	r6, r0
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8001924:	6802      	ldr	r2, [r0, #0]
 8001926:	0c14      	lsrs	r4, r2, #16
 8001928:	2501      	movs	r5, #1
 800192a:	402c      	ands	r4, r5
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 800192c:	231f      	movs	r3, #31
 800192e:	4013      	ands	r3, r2
 8001930:	409d      	lsls	r5, r3

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8001932:	0164      	lsls	r4, r4, #5
 8001934:	4b0a      	ldr	r3, [pc, #40]	@ (8001960 <HAL_EXTI_IRQHandler+0x40>)
 8001936:	18e3      	adds	r3, r4, r3
  regval = (*regaddr & maskline);
 8001938:	681a      	ldr	r2, [r3, #0]

  if (regval != 0U)
 800193a:	4215      	tst	r5, r2
 800193c:	d004      	beq.n	8001948 <HAL_EXTI_IRQHandler+0x28>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800193e:	601d      	str	r5, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 8001940:	6843      	ldr	r3, [r0, #4]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d000      	beq.n	8001948 <HAL_EXTI_IRQHandler+0x28>
    {
      hexti->RisingCallback();
 8001946:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 8001948:	4b06      	ldr	r3, [pc, #24]	@ (8001964 <HAL_EXTI_IRQHandler+0x44>)
 800194a:	469c      	mov	ip, r3
 800194c:	4464      	add	r4, ip
  regval = (*regaddr & maskline);
 800194e:	6823      	ldr	r3, [r4, #0]

  if (regval != 0U)
 8001950:	421d      	tst	r5, r3
 8001952:	d004      	beq.n	800195e <HAL_EXTI_IRQHandler+0x3e>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001954:	6025      	str	r5, [r4, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 8001956:	68b3      	ldr	r3, [r6, #8]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d000      	beq.n	800195e <HAL_EXTI_IRQHandler+0x3e>
    {
      hexti->FallingCallback();
 800195c:	4798      	blx	r3
    }
  }
}
 800195e:	bd70      	pop	{r4, r5, r6, pc}
 8001960:	4002180c 	.word	0x4002180c
 8001964:	40021810 	.word	0x40021810

08001968 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001968:	b5f0      	push	{r4, r5, r6, r7, lr}
 800196a:	46d6      	mov	lr, sl
 800196c:	464f      	mov	r7, r9
 800196e:	4646      	mov	r6, r8
 8001970:	b5c0      	push	{r6, r7, lr}
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001972:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001974:	e03b      	b.n	80019ee <HAL_GPIO_Init+0x86>
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        tmp = EXTI->EXTICR[position >> 2U];
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001976:	2505      	movs	r5, #5
 8001978:	e000      	b.n	800197c <HAL_GPIO_Init+0x14>
 800197a:	2500      	movs	r5, #0
 800197c:	40a5      	lsls	r5, r4
 800197e:	002c      	movs	r4, r5
 8001980:	433c      	orrs	r4, r7
        EXTI->EXTICR[position >> 2U] = tmp;
 8001982:	4d63      	ldr	r5, [pc, #396]	@ (8001b10 <HAL_GPIO_Init+0x1a8>)
 8001984:	3218      	adds	r2, #24
 8001986:	0092      	lsls	r2, r2, #2
 8001988:	5154      	str	r4, [r2, r5]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 800198a:	2280      	movs	r2, #128	@ 0x80
 800198c:	58af      	ldr	r7, [r5, r2]
        tmp &= ~((uint32_t)iocurrent);
 800198e:	464a      	mov	r2, r9
 8001990:	43d2      	mvns	r2, r2
 8001992:	003d      	movs	r5, r7
 8001994:	464c      	mov	r4, r9
 8001996:	43a5      	bics	r5, r4
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001998:	684c      	ldr	r4, [r1, #4]
 800199a:	03e4      	lsls	r4, r4, #15
 800199c:	d502      	bpl.n	80019a4 <HAL_GPIO_Init+0x3c>
        {
          tmp |= iocurrent;
 800199e:	003d      	movs	r5, r7
 80019a0:	464c      	mov	r4, r9
 80019a2:	4325      	orrs	r5, r4
        }
        EXTI->IMR1 = tmp;
 80019a4:	4c5a      	ldr	r4, [pc, #360]	@ (8001b10 <HAL_GPIO_Init+0x1a8>)
 80019a6:	2780      	movs	r7, #128	@ 0x80
 80019a8:	51e5      	str	r5, [r4, r7]

        tmp = EXTI->EMR1;
 80019aa:	2584      	movs	r5, #132	@ 0x84
 80019ac:	5967      	ldr	r7, [r4, r5]
        tmp &= ~((uint32_t)iocurrent);
 80019ae:	003d      	movs	r5, r7
 80019b0:	4015      	ands	r5, r2
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019b2:	684c      	ldr	r4, [r1, #4]
 80019b4:	03a4      	lsls	r4, r4, #14
 80019b6:	d502      	bpl.n	80019be <HAL_GPIO_Init+0x56>
        {
          tmp |= iocurrent;
 80019b8:	003d      	movs	r5, r7
 80019ba:	464c      	mov	r4, r9
 80019bc:	4325      	orrs	r5, r4
        }
        EXTI->EMR1 = tmp;
 80019be:	4c54      	ldr	r4, [pc, #336]	@ (8001b10 <HAL_GPIO_Init+0x1a8>)
 80019c0:	2784      	movs	r7, #132	@ 0x84
 80019c2:	51e5      	str	r5, [r4, r7]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80019c4:	6827      	ldr	r7, [r4, #0]
        tmp &= ~((uint32_t)iocurrent);
 80019c6:	003d      	movs	r5, r7
 80019c8:	4015      	ands	r5, r2
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019ca:	684c      	ldr	r4, [r1, #4]
 80019cc:	02e4      	lsls	r4, r4, #11
 80019ce:	d502      	bpl.n	80019d6 <HAL_GPIO_Init+0x6e>
        {
          tmp |= iocurrent;
 80019d0:	003d      	movs	r5, r7
 80019d2:	464c      	mov	r4, r9
 80019d4:	4325      	orrs	r5, r4
        }
        EXTI->RTSR1 = tmp;
 80019d6:	4c4e      	ldr	r4, [pc, #312]	@ (8001b10 <HAL_GPIO_Init+0x1a8>)
 80019d8:	6025      	str	r5, [r4, #0]

        tmp = EXTI->FTSR1;
 80019da:	6865      	ldr	r5, [r4, #4]
        tmp &= ~((uint32_t)iocurrent);
 80019dc:	402a      	ands	r2, r5
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019de:	684c      	ldr	r4, [r1, #4]
 80019e0:	02a4      	lsls	r4, r4, #10
 80019e2:	d501      	bpl.n	80019e8 <HAL_GPIO_Init+0x80>
        {
          tmp |= iocurrent;
 80019e4:	464a      	mov	r2, r9
 80019e6:	432a      	orrs	r2, r5
        }
        EXTI->FTSR1 = tmp;
 80019e8:	4c49      	ldr	r4, [pc, #292]	@ (8001b10 <HAL_GPIO_Init+0x1a8>)
 80019ea:	6062      	str	r2, [r4, #4]
      }
    }

    position++;
 80019ec:	3301      	adds	r3, #1
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80019ee:	680c      	ldr	r4, [r1, #0]
 80019f0:	0022      	movs	r2, r4
 80019f2:	40da      	lsrs	r2, r3
 80019f4:	d100      	bne.n	80019f8 <HAL_GPIO_Init+0x90>
 80019f6:	e086      	b.n	8001b06 <HAL_GPIO_Init+0x19e>
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80019f8:	2201      	movs	r2, #1
 80019fa:	409a      	lsls	r2, r3
 80019fc:	0026      	movs	r6, r4
 80019fe:	4016      	ands	r6, r2
 8001a00:	46b1      	mov	r9, r6
    if (iocurrent != 0U)
 8001a02:	4214      	tst	r4, r2
 8001a04:	d0f2      	beq.n	80019ec <HAL_GPIO_Init+0x84>
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a06:	684c      	ldr	r4, [r1, #4]
 8001a08:	2c02      	cmp	r4, #2
 8001a0a:	d001      	beq.n	8001a10 <HAL_GPIO_Init+0xa8>
 8001a0c:	2c12      	cmp	r4, #18
 8001a0e:	d118      	bne.n	8001a42 <HAL_GPIO_Init+0xda>
        tmp = GPIOx->AFR[position >> 3U];
 8001a10:	08dd      	lsrs	r5, r3, #3
 8001a12:	3508      	adds	r5, #8
 8001a14:	00ad      	lsls	r5, r5, #2
 8001a16:	582c      	ldr	r4, [r5, r0]
 8001a18:	46a4      	mov	ip, r4
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 8001a1a:	2707      	movs	r7, #7
 8001a1c:	401f      	ands	r7, r3
 8001a1e:	00bf      	lsls	r7, r7, #2
 8001a20:	240f      	movs	r4, #15
 8001a22:	46a2      	mov	sl, r4
 8001a24:	0026      	movs	r6, r4
 8001a26:	40be      	lsls	r6, r7
 8001a28:	46b0      	mov	r8, r6
 8001a2a:	4666      	mov	r6, ip
 8001a2c:	4644      	mov	r4, r8
 8001a2e:	43a6      	bics	r6, r4
 8001a30:	46b4      	mov	ip, r6
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001a32:	690c      	ldr	r4, [r1, #16]
 8001a34:	4656      	mov	r6, sl
 8001a36:	4026      	ands	r6, r4
 8001a38:	0034      	movs	r4, r6
 8001a3a:	40bc      	lsls	r4, r7
 8001a3c:	4666      	mov	r6, ip
 8001a3e:	4334      	orrs	r4, r6
        GPIOx->AFR[position >> 3U] = tmp;
 8001a40:	502c      	str	r4, [r5, r0]
      tmp = GPIOx->MODER;
 8001a42:	6804      	ldr	r4, [r0, #0]
 8001a44:	46a4      	mov	ip, r4
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8001a46:	005d      	lsls	r5, r3, #1
 8001a48:	2403      	movs	r4, #3
 8001a4a:	46a2      	mov	sl, r4
 8001a4c:	0027      	movs	r7, r4
 8001a4e:	40af      	lsls	r7, r5
 8001a50:	46b8      	mov	r8, r7
 8001a52:	43ff      	mvns	r7, r7
 8001a54:	4666      	mov	r6, ip
 8001a56:	4644      	mov	r4, r8
 8001a58:	43a6      	bics	r6, r4
 8001a5a:	46b4      	mov	ip, r6
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8001a5c:	684c      	ldr	r4, [r1, #4]
 8001a5e:	4656      	mov	r6, sl
 8001a60:	4026      	ands	r6, r4
 8001a62:	0034      	movs	r4, r6
 8001a64:	40ac      	lsls	r4, r5
 8001a66:	4666      	mov	r6, ip
 8001a68:	4334      	orrs	r4, r6
      GPIOx->MODER = tmp;
 8001a6a:	6004      	str	r4, [r0, #0]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a6c:	684c      	ldr	r4, [r1, #4]
 8001a6e:	1e66      	subs	r6, r4, #1
 8001a70:	2e01      	cmp	r6, #1
 8001a72:	d903      	bls.n	8001a7c <HAL_GPIO_Init+0x114>
 8001a74:	2c11      	cmp	r4, #17
 8001a76:	d001      	beq.n	8001a7c <HAL_GPIO_Init+0x114>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a78:	2c12      	cmp	r4, #18
 8001a7a:	d112      	bne.n	8001aa2 <HAL_GPIO_Init+0x13a>
        tmp = GPIOx->OSPEEDR;
 8001a7c:	6884      	ldr	r4, [r0, #8]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001a7e:	403c      	ands	r4, r7
 8001a80:	46a4      	mov	ip, r4
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001a82:	68cc      	ldr	r4, [r1, #12]
 8001a84:	40ac      	lsls	r4, r5
 8001a86:	4666      	mov	r6, ip
 8001a88:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = tmp;
 8001a8a:	6084      	str	r4, [r0, #8]
        tmp = GPIOx->OTYPER;
 8001a8c:	6844      	ldr	r4, [r0, #4]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a8e:	4394      	bics	r4, r2
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001a90:	684a      	ldr	r2, [r1, #4]
 8001a92:	0912      	lsrs	r2, r2, #4
 8001a94:	4694      	mov	ip, r2
 8001a96:	2201      	movs	r2, #1
 8001a98:	4666      	mov	r6, ip
 8001a9a:	4032      	ands	r2, r6
 8001a9c:	409a      	lsls	r2, r3
 8001a9e:	4322      	orrs	r2, r4
        GPIOx->OTYPER = tmp;
 8001aa0:	6042      	str	r2, [r0, #4]
      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001aa2:	684a      	ldr	r2, [r1, #4]
 8001aa4:	2a03      	cmp	r2, #3
 8001aa6:	d005      	beq.n	8001ab4 <HAL_GPIO_Init+0x14c>
        tmp = GPIOx->PUPDR;
 8001aa8:	68c4      	ldr	r4, [r0, #12]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8001aaa:	403c      	ands	r4, r7
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8001aac:	688a      	ldr	r2, [r1, #8]
 8001aae:	40aa      	lsls	r2, r5
 8001ab0:	4322      	orrs	r2, r4
        GPIOx->PUPDR = tmp;
 8001ab2:	60c2      	str	r2, [r0, #12]
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ab4:	684a      	ldr	r2, [r1, #4]
 8001ab6:	00d2      	lsls	r2, r2, #3
 8001ab8:	d598      	bpl.n	80019ec <HAL_GPIO_Init+0x84>
        tmp = EXTI->EXTICR[position >> 2U];
 8001aba:	089a      	lsrs	r2, r3, #2
 8001abc:	0014      	movs	r4, r2
 8001abe:	3418      	adds	r4, #24
 8001ac0:	00a4      	lsls	r4, r4, #2
 8001ac2:	4d13      	ldr	r5, [pc, #76]	@ (8001b10 <HAL_GPIO_Init+0x1a8>)
 8001ac4:	5967      	ldr	r7, [r4, r5]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001ac6:	2403      	movs	r4, #3
 8001ac8:	401c      	ands	r4, r3
 8001aca:	00e4      	lsls	r4, r4, #3
 8001acc:	250f      	movs	r5, #15
 8001ace:	40a5      	lsls	r5, r4
 8001ad0:	43af      	bics	r7, r5
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001ad2:	25a0      	movs	r5, #160	@ 0xa0
 8001ad4:	05ed      	lsls	r5, r5, #23
 8001ad6:	42a8      	cmp	r0, r5
 8001ad8:	d100      	bne.n	8001adc <HAL_GPIO_Init+0x174>
 8001ada:	e74e      	b.n	800197a <HAL_GPIO_Init+0x12>
 8001adc:	4d0d      	ldr	r5, [pc, #52]	@ (8001b14 <HAL_GPIO_Init+0x1ac>)
 8001ade:	42a8      	cmp	r0, r5
 8001ae0:	d00b      	beq.n	8001afa <HAL_GPIO_Init+0x192>
 8001ae2:	4d0d      	ldr	r5, [pc, #52]	@ (8001b18 <HAL_GPIO_Init+0x1b0>)
 8001ae4:	42a8      	cmp	r0, r5
 8001ae6:	d00a      	beq.n	8001afe <HAL_GPIO_Init+0x196>
 8001ae8:	4d0c      	ldr	r5, [pc, #48]	@ (8001b1c <HAL_GPIO_Init+0x1b4>)
 8001aea:	42a8      	cmp	r0, r5
 8001aec:	d009      	beq.n	8001b02 <HAL_GPIO_Init+0x19a>
 8001aee:	4d0c      	ldr	r5, [pc, #48]	@ (8001b20 <HAL_GPIO_Init+0x1b8>)
 8001af0:	42a8      	cmp	r0, r5
 8001af2:	d100      	bne.n	8001af6 <HAL_GPIO_Init+0x18e>
 8001af4:	e73f      	b.n	8001976 <HAL_GPIO_Init+0xe>
 8001af6:	2506      	movs	r5, #6
 8001af8:	e740      	b.n	800197c <HAL_GPIO_Init+0x14>
 8001afa:	2501      	movs	r5, #1
 8001afc:	e73e      	b.n	800197c <HAL_GPIO_Init+0x14>
 8001afe:	2502      	movs	r5, #2
 8001b00:	e73c      	b.n	800197c <HAL_GPIO_Init+0x14>
 8001b02:	2503      	movs	r5, #3
 8001b04:	e73a      	b.n	800197c <HAL_GPIO_Init+0x14>
  }
}
 8001b06:	bce0      	pop	{r5, r6, r7}
 8001b08:	46ba      	mov	sl, r7
 8001b0a:	46b1      	mov	r9, r6
 8001b0c:	46a8      	mov	r8, r5
 8001b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b10:	40021800 	.word	0x40021800
 8001b14:	50000400 	.word	0x50000400
 8001b18:	50000800 	.word	0x50000800
 8001b1c:	50000c00 	.word	0x50000c00
 8001b20:	50001400 	.word	0x50001400

08001b24 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8001b24:	6903      	ldr	r3, [r0, #16]
 8001b26:	420b      	tst	r3, r1
 8001b28:	d001      	beq.n	8001b2e <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8001b2a:	2001      	movs	r0, #1
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001b2c:	4770      	bx	lr
    bitstatus = GPIO_PIN_RESET;
 8001b2e:	2000      	movs	r0, #0
 8001b30:	e7fc      	b.n	8001b2c <HAL_GPIO_ReadPin+0x8>

08001b32 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b32:	2a00      	cmp	r2, #0
 8001b34:	d001      	beq.n	8001b3a <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b36:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b38:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b3a:	6281      	str	r1, [r0, #40]	@ 0x28
}
 8001b3c:	e7fc      	b.n	8001b38 <HAL_GPIO_WritePin+0x6>

08001b3e <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b3e:	6942      	ldr	r2, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b40:	0013      	movs	r3, r2
 8001b42:	400b      	ands	r3, r1
 8001b44:	041b      	lsls	r3, r3, #16
 8001b46:	4391      	bics	r1, r2
 8001b48:	430b      	orrs	r3, r1
 8001b4a:	6183      	str	r3, [r0, #24]
}
 8001b4c:	4770      	bx	lr
	...

08001b50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b50:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b52:	4b0a      	ldr	r3, [pc, #40]	@ (8001b7c <HAL_MspInit+0x2c>)
 8001b54:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8001b56:	2201      	movs	r2, #1
 8001b58:	4311      	orrs	r1, r2
 8001b5a:	6419      	str	r1, [r3, #64]	@ 0x40
 8001b5c:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8001b5e:	400a      	ands	r2, r1
 8001b60:	9200      	str	r2, [sp, #0]
 8001b62:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b64:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b66:	2180      	movs	r1, #128	@ 0x80
 8001b68:	0549      	lsls	r1, r1, #21
 8001b6a:	430a      	orrs	r2, r1
 8001b6c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001b6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b70:	400b      	ands	r3, r1
 8001b72:	9301      	str	r3, [sp, #4]
 8001b74:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b76:	b002      	add	sp, #8
 8001b78:	4770      	bx	lr
 8001b7a:	46c0      	nop			@ (mov r8, r8)
 8001b7c:	40021000 	.word	0x40021000

08001b80 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b80:	b530      	push	{r4, r5, lr}
 8001b82:	b08f      	sub	sp, #60	@ 0x3c
 8001b84:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b86:	2214      	movs	r2, #20
 8001b88:	2100      	movs	r1, #0
 8001b8a:	a809      	add	r0, sp, #36	@ 0x24
 8001b8c:	f002 f94c 	bl	8003e28 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b90:	221c      	movs	r2, #28
 8001b92:	2100      	movs	r1, #0
 8001b94:	a802      	add	r0, sp, #8
 8001b96:	f002 f947 	bl	8003e28 <memset>
  if(hadc->Instance==ADC1)
 8001b9a:	6822      	ldr	r2, [r4, #0]
 8001b9c:	4b23      	ldr	r3, [pc, #140]	@ (8001c2c <HAL_ADC_MspInit+0xac>)
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d001      	beq.n	8001ba6 <HAL_ADC_MspInit+0x26>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001ba2:	b00f      	add	sp, #60	@ 0x3c
 8001ba4:	bd30      	pop	{r4, r5, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001ba6:	2320      	movs	r3, #32
 8001ba8:	9302      	str	r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001baa:	a802      	add	r0, sp, #8
 8001bac:	f000 fb18 	bl	80021e0 <HAL_RCCEx_PeriphCLKConfig>
 8001bb0:	2800      	cmp	r0, #0
 8001bb2:	d135      	bne.n	8001c20 <HAL_ADC_MspInit+0xa0>
    __HAL_RCC_ADC_CLK_ENABLE();
 8001bb4:	4b1e      	ldr	r3, [pc, #120]	@ (8001c30 <HAL_ADC_MspInit+0xb0>)
 8001bb6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001bb8:	2180      	movs	r1, #128	@ 0x80
 8001bba:	0349      	lsls	r1, r1, #13
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	641a      	str	r2, [r3, #64]	@ 0x40
 8001bc0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001bc2:	400a      	ands	r2, r1
 8001bc4:	9200      	str	r2, [sp, #0]
 8001bc6:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bc8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001bca:	2201      	movs	r2, #1
 8001bcc:	4311      	orrs	r1, r2
 8001bce:	6359      	str	r1, [r3, #52]	@ 0x34
 8001bd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bd2:	401a      	ands	r2, r3
 8001bd4:	9201      	str	r2, [sp, #4]
 8001bd6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = HAL_ANALOG_Pin;
 8001bd8:	a909      	add	r1, sp, #36	@ 0x24
 8001bda:	2302      	movs	r3, #2
 8001bdc:	9309      	str	r3, [sp, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bde:	3301      	adds	r3, #1
 8001be0:	604b      	str	r3, [r1, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be2:	2500      	movs	r5, #0
 8001be4:	608d      	str	r5, [r1, #8]
    HAL_GPIO_Init(HAL_ANALOG_GPIO_Port, &GPIO_InitStruct);
 8001be6:	20a0      	movs	r0, #160	@ 0xa0
 8001be8:	05c0      	lsls	r0, r0, #23
 8001bea:	f7ff febd 	bl	8001968 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 8001bee:	4811      	ldr	r0, [pc, #68]	@ (8001c34 <HAL_ADC_MspInit+0xb4>)
 8001bf0:	4b11      	ldr	r3, [pc, #68]	@ (8001c38 <HAL_ADC_MspInit+0xb8>)
 8001bf2:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001bf4:	2305      	movs	r3, #5
 8001bf6:	6043      	str	r3, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bf8:	6085      	str	r5, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bfa:	60c5      	str	r5, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001bfc:	337b      	adds	r3, #123	@ 0x7b
 8001bfe:	6103      	str	r3, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c00:	3380      	adds	r3, #128	@ 0x80
 8001c02:	6143      	str	r3, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001c04:	2380      	movs	r3, #128	@ 0x80
 8001c06:	00db      	lsls	r3, r3, #3
 8001c08:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001c0a:	2320      	movs	r3, #32
 8001c0c:	61c3      	str	r3, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001c0e:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001c10:	f7ff fd2a 	bl	8001668 <HAL_DMA_Init>
 8001c14:	2800      	cmp	r0, #0
 8001c16:	d106      	bne.n	8001c26 <HAL_ADC_MspInit+0xa6>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001c18:	4b06      	ldr	r3, [pc, #24]	@ (8001c34 <HAL_ADC_MspInit+0xb4>)
 8001c1a:	6523      	str	r3, [r4, #80]	@ 0x50
 8001c1c:	629c      	str	r4, [r3, #40]	@ 0x28
}
 8001c1e:	e7c0      	b.n	8001ba2 <HAL_ADC_MspInit+0x22>
      Error_Handler();
 8001c20:	f7fe ff8a 	bl	8000b38 <Error_Handler>
 8001c24:	e7c6      	b.n	8001bb4 <HAL_ADC_MspInit+0x34>
      Error_Handler();
 8001c26:	f7fe ff87 	bl	8000b38 <Error_Handler>
 8001c2a:	e7f5      	b.n	8001c18 <HAL_ADC_MspInit+0x98>
 8001c2c:	40012400 	.word	0x40012400
 8001c30:	40021000 	.word	0x40021000
 8001c34:	200002e8 	.word	0x200002e8
 8001c38:	40020008 	.word	0x40020008

08001c3c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c3c:	b500      	push	{lr}
 8001c3e:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM14)
 8001c40:	6802      	ldr	r2, [r0, #0]
 8001c42:	4b0c      	ldr	r3, [pc, #48]	@ (8001c74 <HAL_TIM_Base_MspInit+0x38>)
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d001      	beq.n	8001c4c <HAL_TIM_Base_MspInit+0x10>

    /* USER CODE END TIM14_MspInit 1 */

  }

}
 8001c48:	b003      	add	sp, #12
 8001c4a:	bd00      	pop	{pc}
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001c4c:	4b0a      	ldr	r3, [pc, #40]	@ (8001c78 <HAL_TIM_Base_MspInit+0x3c>)
 8001c4e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c50:	2180      	movs	r1, #128	@ 0x80
 8001c52:	0209      	lsls	r1, r1, #8
 8001c54:	430a      	orrs	r2, r1
 8001c56:	641a      	str	r2, [r3, #64]	@ 0x40
 8001c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c5a:	400b      	ands	r3, r1
 8001c5c:	9301      	str	r3, [sp, #4]
 8001c5e:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8001c60:	2200      	movs	r2, #0
 8001c62:	2100      	movs	r1, #0
 8001c64:	2013      	movs	r0, #19
 8001c66:	f7ff fcbb 	bl	80015e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8001c6a:	2013      	movs	r0, #19
 8001c6c:	f7ff fcbc 	bl	80015e8 <HAL_NVIC_EnableIRQ>
}
 8001c70:	e7ea      	b.n	8001c48 <HAL_TIM_Base_MspInit+0xc>
 8001c72:	46c0      	nop			@ (mov r8, r8)
 8001c74:	40002000 	.word	0x40002000
 8001c78:	40021000 	.word	0x40021000

08001c7c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c7c:	b510      	push	{r4, lr}
 8001c7e:	b088      	sub	sp, #32
 8001c80:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c82:	2214      	movs	r2, #20
 8001c84:	2100      	movs	r1, #0
 8001c86:	a803      	add	r0, sp, #12
 8001c88:	f002 f8ce 	bl	8003e28 <memset>
  if(huart->Instance==USART2)
 8001c8c:	6822      	ldr	r2, [r4, #0]
 8001c8e:	4b15      	ldr	r3, [pc, #84]	@ (8001ce4 <HAL_UART_MspInit+0x68>)
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d001      	beq.n	8001c98 <HAL_UART_MspInit+0x1c>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001c94:	b008      	add	sp, #32
 8001c96:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c98:	4b13      	ldr	r3, [pc, #76]	@ (8001ce8 <HAL_UART_MspInit+0x6c>)
 8001c9a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001c9c:	2180      	movs	r1, #128	@ 0x80
 8001c9e:	0289      	lsls	r1, r1, #10
 8001ca0:	430a      	orrs	r2, r1
 8001ca2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001ca4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001ca6:	400a      	ands	r2, r1
 8001ca8:	9201      	str	r2, [sp, #4]
 8001caa:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cac:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001cae:	2201      	movs	r2, #1
 8001cb0:	4311      	orrs	r1, r2
 8001cb2:	6359      	str	r1, [r3, #52]	@ 0x34
 8001cb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	9302      	str	r3, [sp, #8]
 8001cba:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001cbc:	a903      	add	r1, sp, #12
 8001cbe:	230c      	movs	r3, #12
 8001cc0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc2:	3b0a      	subs	r3, #10
 8001cc4:	604b      	str	r3, [r1, #4]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001cc6:	610a      	str	r2, [r1, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc8:	20a0      	movs	r0, #160	@ 0xa0
 8001cca:	05c0      	lsls	r0, r0, #23
 8001ccc:	f7ff fe4c 	bl	8001968 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	2100      	movs	r1, #0
 8001cd4:	201c      	movs	r0, #28
 8001cd6:	f7ff fc83 	bl	80015e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001cda:	201c      	movs	r0, #28
 8001cdc:	f7ff fc84 	bl	80015e8 <HAL_NVIC_EnableIRQ>
}
 8001ce0:	e7d8      	b.n	8001c94 <HAL_UART_MspInit+0x18>
 8001ce2:	46c0      	nop			@ (mov r8, r8)
 8001ce4:	40004400 	.word	0x40004400
 8001ce8:	40021000 	.word	0x40021000

08001cec <HAL_RCC_OscConfig>:
            must adjust the number of CPU wait states in their application (SystemClock_Config() API)
            before calling the HAL_RCC_OscConfig() API to update the HSI48 clock division factor.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cec:	b570      	push	{r4, r5, r6, lr}
 8001cee:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cf0:	d100      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x8>
 8001cf2:	e139      	b.n	8001f68 <HAL_RCC_OscConfig+0x27c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cf4:	6803      	ldr	r3, [r0, #0]
 8001cf6:	07db      	lsls	r3, r3, #31
 8001cf8:	d52c      	bpl.n	8001d54 <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cfa:	4ba1      	ldr	r3, [pc, #644]	@ (8001f80 <HAL_RCC_OscConfig+0x294>)
 8001cfc:	689a      	ldr	r2, [r3, #8]
 8001cfe:	2338      	movs	r3, #56	@ 0x38
 8001d00:	4013      	ands	r3, r2

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8001d02:	2b08      	cmp	r3, #8
 8001d04:	d022      	beq.n	8001d4c <HAL_RCC_OscConfig+0x60>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d06:	6843      	ldr	r3, [r0, #4]
 8001d08:	2280      	movs	r2, #128	@ 0x80
 8001d0a:	0252      	lsls	r2, r2, #9
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d02e      	beq.n	8001d6e <HAL_RCC_OscConfig+0x82>
 8001d10:	22a0      	movs	r2, #160	@ 0xa0
 8001d12:	02d2      	lsls	r2, r2, #11
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d031      	beq.n	8001d7c <HAL_RCC_OscConfig+0x90>
 8001d18:	4b99      	ldr	r3, [pc, #612]	@ (8001f80 <HAL_RCC_OscConfig+0x294>)
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	4999      	ldr	r1, [pc, #612]	@ (8001f84 <HAL_RCC_OscConfig+0x298>)
 8001d1e:	400a      	ands	r2, r1
 8001d20:	601a      	str	r2, [r3, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	4998      	ldr	r1, [pc, #608]	@ (8001f88 <HAL_RCC_OscConfig+0x29c>)
 8001d26:	400a      	ands	r2, r1
 8001d28:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d2a:	6863      	ldr	r3, [r4, #4]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d031      	beq.n	8001d94 <HAL_RCC_OscConfig+0xa8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d30:	f7fe ff48 	bl	8000bc4 <HAL_GetTick>
 8001d34:	0005      	movs	r5, r0

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d36:	4b92      	ldr	r3, [pc, #584]	@ (8001f80 <HAL_RCC_OscConfig+0x294>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	039b      	lsls	r3, r3, #14
 8001d3c:	d40a      	bmi.n	8001d54 <HAL_RCC_OscConfig+0x68>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001d3e:	f7fe ff41 	bl	8000bc4 <HAL_GetTick>
 8001d42:	1b40      	subs	r0, r0, r5
 8001d44:	2864      	cmp	r0, #100	@ 0x64
 8001d46:	d9f6      	bls.n	8001d36 <HAL_RCC_OscConfig+0x4a>
          {
            return HAL_TIMEOUT;
 8001d48:	2003      	movs	r0, #3
 8001d4a:	e10e      	b.n	8001f6a <HAL_RCC_OscConfig+0x27e>
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001d4c:	6843      	ldr	r3, [r0, #4]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d100      	bne.n	8001d54 <HAL_RCC_OscConfig+0x68>
 8001d52:	e10b      	b.n	8001f6c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d54:	6823      	ldr	r3, [r4, #0]
 8001d56:	079b      	lsls	r3, r3, #30
 8001d58:	d547      	bpl.n	8001dea <HAL_RCC_OscConfig+0xfe>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d5a:	4b89      	ldr	r3, [pc, #548]	@ (8001f80 <HAL_RCC_OscConfig+0x294>)
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	2238      	movs	r2, #56	@ 0x38

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001d60:	421a      	tst	r2, r3
 8001d62:	d161      	bne.n	8001e28 <HAL_RCC_OscConfig+0x13c>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001d64:	68e3      	ldr	r3, [r4, #12]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d122      	bne.n	8001db0 <HAL_RCC_OscConfig+0xc4>
      {
        return HAL_ERROR;
 8001d6a:	2001      	movs	r0, #1
 8001d6c:	e0fd      	b.n	8001f6a <HAL_RCC_OscConfig+0x27e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d6e:	4a84      	ldr	r2, [pc, #528]	@ (8001f80 <HAL_RCC_OscConfig+0x294>)
 8001d70:	6811      	ldr	r1, [r2, #0]
 8001d72:	2380      	movs	r3, #128	@ 0x80
 8001d74:	025b      	lsls	r3, r3, #9
 8001d76:	430b      	orrs	r3, r1
 8001d78:	6013      	str	r3, [r2, #0]
 8001d7a:	e7d6      	b.n	8001d2a <HAL_RCC_OscConfig+0x3e>
 8001d7c:	4b80      	ldr	r3, [pc, #512]	@ (8001f80 <HAL_RCC_OscConfig+0x294>)
 8001d7e:	6819      	ldr	r1, [r3, #0]
 8001d80:	2280      	movs	r2, #128	@ 0x80
 8001d82:	02d2      	lsls	r2, r2, #11
 8001d84:	430a      	orrs	r2, r1
 8001d86:	601a      	str	r2, [r3, #0]
 8001d88:	6819      	ldr	r1, [r3, #0]
 8001d8a:	2280      	movs	r2, #128	@ 0x80
 8001d8c:	0252      	lsls	r2, r2, #9
 8001d8e:	430a      	orrs	r2, r1
 8001d90:	601a      	str	r2, [r3, #0]
 8001d92:	e7ca      	b.n	8001d2a <HAL_RCC_OscConfig+0x3e>
        tickstart = HAL_GetTick();
 8001d94:	f7fe ff16 	bl	8000bc4 <HAL_GetTick>
 8001d98:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d9a:	4b79      	ldr	r3, [pc, #484]	@ (8001f80 <HAL_RCC_OscConfig+0x294>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	039b      	lsls	r3, r3, #14
 8001da0:	d5d8      	bpl.n	8001d54 <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001da2:	f7fe ff0f 	bl	8000bc4 <HAL_GetTick>
 8001da6:	1b40      	subs	r0, r0, r5
 8001da8:	2864      	cmp	r0, #100	@ 0x64
 8001daa:	d9f6      	bls.n	8001d9a <HAL_RCC_OscConfig+0xae>
            return HAL_TIMEOUT;
 8001dac:	2003      	movs	r0, #3
 8001dae:	e0dc      	b.n	8001f6a <HAL_RCC_OscConfig+0x27e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001db0:	4b73      	ldr	r3, [pc, #460]	@ (8001f80 <HAL_RCC_OscConfig+0x294>)
 8001db2:	685a      	ldr	r2, [r3, #4]
 8001db4:	4975      	ldr	r1, [pc, #468]	@ (8001f8c <HAL_RCC_OscConfig+0x2a0>)
 8001db6:	400a      	ands	r2, r1
 8001db8:	6961      	ldr	r1, [r4, #20]
 8001dba:	0209      	lsls	r1, r1, #8
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	4973      	ldr	r1, [pc, #460]	@ (8001f90 <HAL_RCC_OscConfig+0x2a4>)
 8001dc4:	400a      	ands	r2, r1
 8001dc6:	6921      	ldr	r1, [r4, #16]
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	0adb      	lsrs	r3, r3, #11
 8001dd0:	2207      	movs	r2, #7
 8001dd2:	401a      	ands	r2, r3
 8001dd4:	4b6f      	ldr	r3, [pc, #444]	@ (8001f94 <HAL_RCC_OscConfig+0x2a8>)
 8001dd6:	40d3      	lsrs	r3, r2
 8001dd8:	4a6f      	ldr	r2, [pc, #444]	@ (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001dda:	6013      	str	r3, [r2, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001ddc:	4b6f      	ldr	r3, [pc, #444]	@ (8001f9c <HAL_RCC_OscConfig+0x2b0>)
 8001dde:	6818      	ldr	r0, [r3, #0]
 8001de0:	f7fe feac 	bl	8000b3c <HAL_InitTick>
 8001de4:	2800      	cmp	r0, #0
 8001de6:	d000      	beq.n	8001dea <HAL_RCC_OscConfig+0xfe>
 8001de8:	e0c2      	b.n	8001f70 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dea:	6823      	ldr	r3, [r4, #0]
 8001dec:	071b      	lsls	r3, r3, #28
 8001dee:	d557      	bpl.n	8001ea0 <HAL_RCC_OscConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001df0:	4b63      	ldr	r3, [pc, #396]	@ (8001f80 <HAL_RCC_OscConfig+0x294>)
 8001df2:	689a      	ldr	r2, [r3, #8]
 8001df4:	2338      	movs	r3, #56	@ 0x38
 8001df6:	4013      	ands	r3, r2
 8001df8:	2b18      	cmp	r3, #24
 8001dfa:	d04e      	beq.n	8001e9a <HAL_RCC_OscConfig+0x1ae>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dfc:	69a3      	ldr	r3, [r4, #24]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d077      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x206>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001e02:	4a5f      	ldr	r2, [pc, #380]	@ (8001f80 <HAL_RCC_OscConfig+0x294>)
 8001e04:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 8001e06:	2101      	movs	r1, #1
 8001e08:	430b      	orrs	r3, r1
 8001e0a:	6613      	str	r3, [r2, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e0c:	f7fe feda 	bl	8000bc4 <HAL_GetTick>
 8001e10:	0005      	movs	r5, r0

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001e12:	4b5b      	ldr	r3, [pc, #364]	@ (8001f80 <HAL_RCC_OscConfig+0x294>)
 8001e14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e16:	079b      	lsls	r3, r3, #30
 8001e18:	d442      	bmi.n	8001ea0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001e1a:	f7fe fed3 	bl	8000bc4 <HAL_GetTick>
 8001e1e:	1b40      	subs	r0, r0, r5
 8001e20:	2802      	cmp	r0, #2
 8001e22:	d9f6      	bls.n	8001e12 <HAL_RCC_OscConfig+0x126>
          {
            return HAL_TIMEOUT;
 8001e24:	2003      	movs	r0, #3
 8001e26:	e0a0      	b.n	8001f6a <HAL_RCC_OscConfig+0x27e>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e28:	68e3      	ldr	r3, [r4, #12]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d022      	beq.n	8001e74 <HAL_RCC_OscConfig+0x188>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001e2e:	4a54      	ldr	r2, [pc, #336]	@ (8001f80 <HAL_RCC_OscConfig+0x294>)
 8001e30:	6813      	ldr	r3, [r2, #0]
 8001e32:	4957      	ldr	r1, [pc, #348]	@ (8001f90 <HAL_RCC_OscConfig+0x2a4>)
 8001e34:	400b      	ands	r3, r1
 8001e36:	6921      	ldr	r1, [r4, #16]
 8001e38:	430b      	orrs	r3, r1
 8001e3a:	6013      	str	r3, [r2, #0]
        __HAL_RCC_HSI_ENABLE();
 8001e3c:	6811      	ldr	r1, [r2, #0]
 8001e3e:	2380      	movs	r3, #128	@ 0x80
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	430b      	orrs	r3, r1
 8001e44:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001e46:	f7fe febd 	bl	8000bc4 <HAL_GetTick>
 8001e4a:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e4c:	4b4c      	ldr	r3, [pc, #304]	@ (8001f80 <HAL_RCC_OscConfig+0x294>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	055b      	lsls	r3, r3, #21
 8001e52:	d406      	bmi.n	8001e62 <HAL_RCC_OscConfig+0x176>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001e54:	f7fe feb6 	bl	8000bc4 <HAL_GetTick>
 8001e58:	1b40      	subs	r0, r0, r5
 8001e5a:	2802      	cmp	r0, #2
 8001e5c:	d9f6      	bls.n	8001e4c <HAL_RCC_OscConfig+0x160>
            return HAL_TIMEOUT;
 8001e5e:	2003      	movs	r0, #3
 8001e60:	e083      	b.n	8001f6a <HAL_RCC_OscConfig+0x27e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e62:	4947      	ldr	r1, [pc, #284]	@ (8001f80 <HAL_RCC_OscConfig+0x294>)
 8001e64:	684b      	ldr	r3, [r1, #4]
 8001e66:	4a49      	ldr	r2, [pc, #292]	@ (8001f8c <HAL_RCC_OscConfig+0x2a0>)
 8001e68:	4013      	ands	r3, r2
 8001e6a:	6962      	ldr	r2, [r4, #20]
 8001e6c:	0212      	lsls	r2, r2, #8
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	604b      	str	r3, [r1, #4]
 8001e72:	e7ba      	b.n	8001dea <HAL_RCC_OscConfig+0xfe>
        __HAL_RCC_HSI_DISABLE();
 8001e74:	4a42      	ldr	r2, [pc, #264]	@ (8001f80 <HAL_RCC_OscConfig+0x294>)
 8001e76:	6813      	ldr	r3, [r2, #0]
 8001e78:	4949      	ldr	r1, [pc, #292]	@ (8001fa0 <HAL_RCC_OscConfig+0x2b4>)
 8001e7a:	400b      	ands	r3, r1
 8001e7c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001e7e:	f7fe fea1 	bl	8000bc4 <HAL_GetTick>
 8001e82:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e84:	4b3e      	ldr	r3, [pc, #248]	@ (8001f80 <HAL_RCC_OscConfig+0x294>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	055b      	lsls	r3, r3, #21
 8001e8a:	d5ae      	bpl.n	8001dea <HAL_RCC_OscConfig+0xfe>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001e8c:	f7fe fe9a 	bl	8000bc4 <HAL_GetTick>
 8001e90:	1b40      	subs	r0, r0, r5
 8001e92:	2802      	cmp	r0, #2
 8001e94:	d9f6      	bls.n	8001e84 <HAL_RCC_OscConfig+0x198>
            return HAL_TIMEOUT;
 8001e96:	2003      	movs	r0, #3
 8001e98:	e067      	b.n	8001f6a <HAL_RCC_OscConfig+0x27e>
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8001e9a:	69a3      	ldr	r3, [r4, #24]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d069      	beq.n	8001f74 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ea0:	6823      	ldr	r3, [r4, #0]
 8001ea2:	075b      	lsls	r3, r3, #29
 8001ea4:	d568      	bpl.n	8001f78 <HAL_RCC_OscConfig+0x28c>

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001ea6:	4b36      	ldr	r3, [pc, #216]	@ (8001f80 <HAL_RCC_OscConfig+0x294>)
 8001ea8:	689a      	ldr	r2, [r3, #8]
 8001eaa:	2338      	movs	r3, #56	@ 0x38
 8001eac:	4013      	ands	r3, r2
 8001eae:	2b20      	cmp	r3, #32
 8001eb0:	d032      	beq.n	8001f18 <HAL_RCC_OscConfig+0x22c>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eb2:	68a3      	ldr	r3, [r4, #8]
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d034      	beq.n	8001f22 <HAL_RCC_OscConfig+0x236>
 8001eb8:	2b05      	cmp	r3, #5
 8001eba:	d038      	beq.n	8001f2e <HAL_RCC_OscConfig+0x242>
 8001ebc:	4b30      	ldr	r3, [pc, #192]	@ (8001f80 <HAL_RCC_OscConfig+0x294>)
 8001ebe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001ec0:	2101      	movs	r1, #1
 8001ec2:	438a      	bics	r2, r1
 8001ec4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001ec6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001ec8:	3103      	adds	r1, #3
 8001eca:	438a      	bics	r2, r1
 8001ecc:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ece:	68a3      	ldr	r3, [r4, #8]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d038      	beq.n	8001f46 <HAL_RCC_OscConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ed4:	f7fe fe76 	bl	8000bc4 <HAL_GetTick>
 8001ed8:	0004      	movs	r4, r0

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001eda:	4b29      	ldr	r3, [pc, #164]	@ (8001f80 <HAL_RCC_OscConfig+0x294>)
 8001edc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ede:	079b      	lsls	r3, r3, #30
 8001ee0:	d42f      	bmi.n	8001f42 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ee2:	f7fe fe6f 	bl	8000bc4 <HAL_GetTick>
 8001ee6:	1b00      	subs	r0, r0, r4
 8001ee8:	4b2e      	ldr	r3, [pc, #184]	@ (8001fa4 <HAL_RCC_OscConfig+0x2b8>)
 8001eea:	4298      	cmp	r0, r3
 8001eec:	d9f5      	bls.n	8001eda <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001eee:	2003      	movs	r0, #3
 8001ef0:	e03b      	b.n	8001f6a <HAL_RCC_OscConfig+0x27e>
        __HAL_RCC_LSI_DISABLE();
 8001ef2:	4a23      	ldr	r2, [pc, #140]	@ (8001f80 <HAL_RCC_OscConfig+0x294>)
 8001ef4:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 8001ef6:	2101      	movs	r1, #1
 8001ef8:	438b      	bics	r3, r1
 8001efa:	6613      	str	r3, [r2, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8001efc:	f7fe fe62 	bl	8000bc4 <HAL_GetTick>
 8001f00:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001f02:	4b1f      	ldr	r3, [pc, #124]	@ (8001f80 <HAL_RCC_OscConfig+0x294>)
 8001f04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f06:	079b      	lsls	r3, r3, #30
 8001f08:	d5ca      	bpl.n	8001ea0 <HAL_RCC_OscConfig+0x1b4>
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001f0a:	f7fe fe5b 	bl	8000bc4 <HAL_GetTick>
 8001f0e:	1b40      	subs	r0, r0, r5
 8001f10:	2802      	cmp	r0, #2
 8001f12:	d9f6      	bls.n	8001f02 <HAL_RCC_OscConfig+0x216>
            return HAL_TIMEOUT;
 8001f14:	2003      	movs	r0, #3
 8001f16:	e028      	b.n	8001f6a <HAL_RCC_OscConfig+0x27e>
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8001f18:	68a3      	ldr	r3, [r4, #8]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d02e      	beq.n	8001f7c <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 8001f1e:	2000      	movs	r0, #0
 8001f20:	e023      	b.n	8001f6a <HAL_RCC_OscConfig+0x27e>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f22:	4a17      	ldr	r2, [pc, #92]	@ (8001f80 <HAL_RCC_OscConfig+0x294>)
 8001f24:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 8001f26:	2101      	movs	r1, #1
 8001f28:	430b      	orrs	r3, r1
 8001f2a:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001f2c:	e7cf      	b.n	8001ece <HAL_RCC_OscConfig+0x1e2>
 8001f2e:	4b14      	ldr	r3, [pc, #80]	@ (8001f80 <HAL_RCC_OscConfig+0x294>)
 8001f30:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001f32:	2104      	movs	r1, #4
 8001f34:	430a      	orrs	r2, r1
 8001f36:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001f38:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001f3a:	3903      	subs	r1, #3
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001f40:	e7c5      	b.n	8001ece <HAL_RCC_OscConfig+0x1e2>
  return HAL_OK;
 8001f42:	2000      	movs	r0, #0
 8001f44:	e011      	b.n	8001f6a <HAL_RCC_OscConfig+0x27e>
        tickstart = HAL_GetTick();
 8001f46:	f7fe fe3d 	bl	8000bc4 <HAL_GetTick>
 8001f4a:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001f4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001f80 <HAL_RCC_OscConfig+0x294>)
 8001f4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f50:	079b      	lsls	r3, r3, #30
 8001f52:	d507      	bpl.n	8001f64 <HAL_RCC_OscConfig+0x278>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f54:	f7fe fe36 	bl	8000bc4 <HAL_GetTick>
 8001f58:	1b00      	subs	r0, r0, r4
 8001f5a:	4b12      	ldr	r3, [pc, #72]	@ (8001fa4 <HAL_RCC_OscConfig+0x2b8>)
 8001f5c:	4298      	cmp	r0, r3
 8001f5e:	d9f5      	bls.n	8001f4c <HAL_RCC_OscConfig+0x260>
            return HAL_TIMEOUT;
 8001f60:	2003      	movs	r0, #3
 8001f62:	e002      	b.n	8001f6a <HAL_RCC_OscConfig+0x27e>
  return HAL_OK;
 8001f64:	2000      	movs	r0, #0
 8001f66:	e000      	b.n	8001f6a <HAL_RCC_OscConfig+0x27e>
    return HAL_ERROR;
 8001f68:	2001      	movs	r0, #1
}
 8001f6a:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001f6c:	2001      	movs	r0, #1
 8001f6e:	e7fc      	b.n	8001f6a <HAL_RCC_OscConfig+0x27e>
          return HAL_ERROR;
 8001f70:	2001      	movs	r0, #1
 8001f72:	e7fa      	b.n	8001f6a <HAL_RCC_OscConfig+0x27e>
        return HAL_ERROR;
 8001f74:	2001      	movs	r0, #1
 8001f76:	e7f8      	b.n	8001f6a <HAL_RCC_OscConfig+0x27e>
  return HAL_OK;
 8001f78:	2000      	movs	r0, #0
 8001f7a:	e7f6      	b.n	8001f6a <HAL_RCC_OscConfig+0x27e>
        return HAL_ERROR;
 8001f7c:	2001      	movs	r0, #1
 8001f7e:	e7f4      	b.n	8001f6a <HAL_RCC_OscConfig+0x27e>
 8001f80:	40021000 	.word	0x40021000
 8001f84:	fffeffff 	.word	0xfffeffff
 8001f88:	fffbffff 	.word	0xfffbffff
 8001f8c:	ffff80ff 	.word	0xffff80ff
 8001f90:	ffffc7ff 	.word	0xffffc7ff
 8001f94:	02dc6c00 	.word	0x02dc6c00
 8001f98:	20000008 	.word	0x20000008
 8001f9c:	20000004 	.word	0x20000004
 8001fa0:	fffffeff 	.word	0xfffffeff
 8001fa4:	00001388 	.word	0x00001388

08001fa8 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001fa8:	4b14      	ldr	r3, [pc, #80]	@ (8001ffc <HAL_RCC_GetSysClockFreq+0x54>)
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	2238      	movs	r2, #56	@ 0x38
 8001fae:	421a      	tst	r2, r3
 8001fb0:	d107      	bne.n	8001fc2 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001fb2:	4b12      	ldr	r3, [pc, #72]	@ (8001ffc <HAL_RCC_GetSysClockFreq+0x54>)
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	0ad2      	lsrs	r2, r2, #11
 8001fb8:	2307      	movs	r3, #7
 8001fba:	4013      	ands	r3, r2

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001fbc:	4810      	ldr	r0, [pc, #64]	@ (8002000 <HAL_RCC_GetSysClockFreq+0x58>)
 8001fbe:	40d8      	lsrs	r0, r3
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
}
 8001fc0:	4770      	bx	lr
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001fc2:	4b0e      	ldr	r3, [pc, #56]	@ (8001ffc <HAL_RCC_GetSysClockFreq+0x54>)
 8001fc4:	689a      	ldr	r2, [r3, #8]
 8001fc6:	2338      	movs	r3, #56	@ 0x38
 8001fc8:	4013      	ands	r3, r2
 8001fca:	2b08      	cmp	r3, #8
 8001fcc:	d010      	beq.n	8001ff0 <HAL_RCC_GetSysClockFreq+0x48>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001fce:	4b0b      	ldr	r3, [pc, #44]	@ (8001ffc <HAL_RCC_GetSysClockFreq+0x54>)
 8001fd0:	689a      	ldr	r2, [r3, #8]
 8001fd2:	2338      	movs	r3, #56	@ 0x38
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	2b20      	cmp	r3, #32
 8001fd8:	d00c      	beq.n	8001ff4 <HAL_RCC_GetSysClockFreq+0x4c>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001fda:	4b08      	ldr	r3, [pc, #32]	@ (8001ffc <HAL_RCC_GetSysClockFreq+0x54>)
 8001fdc:	689a      	ldr	r2, [r3, #8]
 8001fde:	2338      	movs	r3, #56	@ 0x38
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	2b18      	cmp	r3, #24
 8001fe4:	d001      	beq.n	8001fea <HAL_RCC_GetSysClockFreq+0x42>
    sysclockfreq = 0U;
 8001fe6:	2000      	movs	r0, #0
  return sysclockfreq;
 8001fe8:	e7ea      	b.n	8001fc0 <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = LSI_VALUE;
 8001fea:	20fa      	movs	r0, #250	@ 0xfa
 8001fec:	01c0      	lsls	r0, r0, #7
 8001fee:	e7e7      	b.n	8001fc0 <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = HSE_VALUE;
 8001ff0:	4803      	ldr	r0, [pc, #12]	@ (8002000 <HAL_RCC_GetSysClockFreq+0x58>)
 8001ff2:	e7e5      	b.n	8001fc0 <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = LSE_VALUE;
 8001ff4:	2080      	movs	r0, #128	@ 0x80
 8001ff6:	0200      	lsls	r0, r0, #8
 8001ff8:	e7e2      	b.n	8001fc0 <HAL_RCC_GetSysClockFreq+0x18>
 8001ffa:	46c0      	nop			@ (mov r8, r8)
 8001ffc:	40021000 	.word	0x40021000
 8002000:	02dc6c00 	.word	0x02dc6c00

08002004 <HAL_RCC_ClockConfig>:
{
 8002004:	b570      	push	{r4, r5, r6, lr}
 8002006:	0004      	movs	r4, r0
 8002008:	000d      	movs	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800200a:	2800      	cmp	r0, #0
 800200c:	d100      	bne.n	8002010 <HAL_RCC_ClockConfig+0xc>
 800200e:	e0a4      	b.n	800215a <HAL_RCC_ClockConfig+0x156>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002010:	4b54      	ldr	r3, [pc, #336]	@ (8002164 <HAL_RCC_ClockConfig+0x160>)
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	2307      	movs	r3, #7
 8002016:	4013      	ands	r3, r2
 8002018:	428b      	cmp	r3, r1
 800201a:	d321      	bcc.n	8002060 <HAL_RCC_ClockConfig+0x5c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800201c:	6823      	ldr	r3, [r4, #0]
 800201e:	079a      	lsls	r2, r3, #30
 8002020:	d510      	bpl.n	8002044 <HAL_RCC_ClockConfig+0x40>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002022:	075b      	lsls	r3, r3, #29
 8002024:	d507      	bpl.n	8002036 <HAL_RCC_ClockConfig+0x32>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002026:	4950      	ldr	r1, [pc, #320]	@ (8002168 <HAL_RCC_ClockConfig+0x164>)
 8002028:	688a      	ldr	r2, [r1, #8]
 800202a:	4b50      	ldr	r3, [pc, #320]	@ (800216c <HAL_RCC_ClockConfig+0x168>)
 800202c:	401a      	ands	r2, r3
 800202e:	23b0      	movs	r3, #176	@ 0xb0
 8002030:	011b      	lsls	r3, r3, #4
 8002032:	4313      	orrs	r3, r2
 8002034:	608b      	str	r3, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002036:	4a4c      	ldr	r2, [pc, #304]	@ (8002168 <HAL_RCC_ClockConfig+0x164>)
 8002038:	6893      	ldr	r3, [r2, #8]
 800203a:	494d      	ldr	r1, [pc, #308]	@ (8002170 <HAL_RCC_ClockConfig+0x16c>)
 800203c:	400b      	ands	r3, r1
 800203e:	68e1      	ldr	r1, [r4, #12]
 8002040:	430b      	orrs	r3, r1
 8002042:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002044:	6823      	ldr	r3, [r4, #0]
 8002046:	07db      	lsls	r3, r3, #31
 8002048:	d54c      	bpl.n	80020e4 <HAL_RCC_ClockConfig+0xe0>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800204a:	6863      	ldr	r3, [r4, #4]
 800204c:	2b01      	cmp	r3, #1
 800204e:	d01e      	beq.n	800208e <HAL_RCC_ClockConfig+0x8a>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002050:	2b00      	cmp	r3, #0
 8002052:	d139      	bne.n	80020c8 <HAL_RCC_ClockConfig+0xc4>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002054:	4a44      	ldr	r2, [pc, #272]	@ (8002168 <HAL_RCC_ClockConfig+0x164>)
 8002056:	6812      	ldr	r2, [r2, #0]
 8002058:	0552      	lsls	r2, r2, #21
 800205a:	d41c      	bmi.n	8002096 <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 800205c:	2001      	movs	r0, #1
 800205e:	e064      	b.n	800212a <HAL_RCC_ClockConfig+0x126>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002060:	4a40      	ldr	r2, [pc, #256]	@ (8002164 <HAL_RCC_ClockConfig+0x160>)
 8002062:	6813      	ldr	r3, [r2, #0]
 8002064:	2107      	movs	r1, #7
 8002066:	438b      	bics	r3, r1
 8002068:	432b      	orrs	r3, r5
 800206a:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800206c:	f7fe fdaa 	bl	8000bc4 <HAL_GetTick>
 8002070:	0006      	movs	r6, r0
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002072:	4b3c      	ldr	r3, [pc, #240]	@ (8002164 <HAL_RCC_ClockConfig+0x160>)
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	2307      	movs	r3, #7
 8002078:	4013      	ands	r3, r2
 800207a:	42ab      	cmp	r3, r5
 800207c:	d0ce      	beq.n	800201c <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800207e:	f7fe fda1 	bl	8000bc4 <HAL_GetTick>
 8002082:	1b80      	subs	r0, r0, r6
 8002084:	4a3b      	ldr	r2, [pc, #236]	@ (8002174 <HAL_RCC_ClockConfig+0x170>)
 8002086:	4290      	cmp	r0, r2
 8002088:	d9f3      	bls.n	8002072 <HAL_RCC_ClockConfig+0x6e>
        return HAL_TIMEOUT;
 800208a:	2003      	movs	r0, #3
 800208c:	e04d      	b.n	800212a <HAL_RCC_ClockConfig+0x126>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800208e:	4a36      	ldr	r2, [pc, #216]	@ (8002168 <HAL_RCC_ClockConfig+0x164>)
 8002090:	6812      	ldr	r2, [r2, #0]
 8002092:	0392      	lsls	r2, r2, #14
 8002094:	d563      	bpl.n	800215e <HAL_RCC_ClockConfig+0x15a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002096:	4934      	ldr	r1, [pc, #208]	@ (8002168 <HAL_RCC_ClockConfig+0x164>)
 8002098:	688a      	ldr	r2, [r1, #8]
 800209a:	2007      	movs	r0, #7
 800209c:	4382      	bics	r2, r0
 800209e:	4313      	orrs	r3, r2
 80020a0:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80020a2:	f7fe fd8f 	bl	8000bc4 <HAL_GetTick>
 80020a6:	0006      	movs	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020a8:	4b2f      	ldr	r3, [pc, #188]	@ (8002168 <HAL_RCC_ClockConfig+0x164>)
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	2238      	movs	r2, #56	@ 0x38
 80020ae:	401a      	ands	r2, r3
 80020b0:	6863      	ldr	r3, [r4, #4]
 80020b2:	00db      	lsls	r3, r3, #3
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d015      	beq.n	80020e4 <HAL_RCC_ClockConfig+0xe0>
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80020b8:	f7fe fd84 	bl	8000bc4 <HAL_GetTick>
 80020bc:	1b80      	subs	r0, r0, r6
 80020be:	4b2d      	ldr	r3, [pc, #180]	@ (8002174 <HAL_RCC_ClockConfig+0x170>)
 80020c0:	4298      	cmp	r0, r3
 80020c2:	d9f1      	bls.n	80020a8 <HAL_RCC_ClockConfig+0xa4>
        return HAL_TIMEOUT;
 80020c4:	2003      	movs	r0, #3
 80020c6:	e030      	b.n	800212a <HAL_RCC_ClockConfig+0x126>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80020c8:	2b03      	cmp	r3, #3
 80020ca:	d005      	beq.n	80020d8 <HAL_RCC_ClockConfig+0xd4>
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80020cc:	4a26      	ldr	r2, [pc, #152]	@ (8002168 <HAL_RCC_ClockConfig+0x164>)
 80020ce:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80020d0:	0792      	lsls	r2, r2, #30
 80020d2:	d4e0      	bmi.n	8002096 <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 80020d4:	2001      	movs	r0, #1
 80020d6:	e028      	b.n	800212a <HAL_RCC_ClockConfig+0x126>
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80020d8:	4a23      	ldr	r2, [pc, #140]	@ (8002168 <HAL_RCC_ClockConfig+0x164>)
 80020da:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 80020dc:	0792      	lsls	r2, r2, #30
 80020de:	d4da      	bmi.n	8002096 <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 80020e0:	2001      	movs	r0, #1
 80020e2:	e022      	b.n	800212a <HAL_RCC_ClockConfig+0x126>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020e4:	4b1f      	ldr	r3, [pc, #124]	@ (8002164 <HAL_RCC_ClockConfig+0x160>)
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	2307      	movs	r3, #7
 80020ea:	4013      	ands	r3, r2
 80020ec:	42ab      	cmp	r3, r5
 80020ee:	d81d      	bhi.n	800212c <HAL_RCC_ClockConfig+0x128>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020f0:	6823      	ldr	r3, [r4, #0]
 80020f2:	075b      	lsls	r3, r3, #29
 80020f4:	d506      	bpl.n	8002104 <HAL_RCC_ClockConfig+0x100>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80020f6:	4a1c      	ldr	r2, [pc, #112]	@ (8002168 <HAL_RCC_ClockConfig+0x164>)
 80020f8:	6893      	ldr	r3, [r2, #8]
 80020fa:	491f      	ldr	r1, [pc, #124]	@ (8002178 <HAL_RCC_ClockConfig+0x174>)
 80020fc:	400b      	ands	r3, r1
 80020fe:	6921      	ldr	r1, [r4, #16]
 8002100:	430b      	orrs	r3, r1
 8002102:	6093      	str	r3, [r2, #8]
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002104:	f7ff ff50 	bl	8001fa8 <HAL_RCC_GetSysClockFreq>
 8002108:	4b17      	ldr	r3, [pc, #92]	@ (8002168 <HAL_RCC_ClockConfig+0x164>)
 800210a:	689a      	ldr	r2, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800210c:	0a12      	lsrs	r2, r2, #8
 800210e:	230f      	movs	r3, #15
 8002110:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002112:	4a1a      	ldr	r2, [pc, #104]	@ (800217c <HAL_RCC_ClockConfig+0x178>)
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	589a      	ldr	r2, [r3, r2]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002118:	231f      	movs	r3, #31
 800211a:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800211c:	40d8      	lsrs	r0, r3
 800211e:	4b18      	ldr	r3, [pc, #96]	@ (8002180 <HAL_RCC_ClockConfig+0x17c>)
 8002120:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8002122:	4b18      	ldr	r3, [pc, #96]	@ (8002184 <HAL_RCC_ClockConfig+0x180>)
 8002124:	6818      	ldr	r0, [r3, #0]
 8002126:	f7fe fd09 	bl	8000b3c <HAL_InitTick>
}
 800212a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800212c:	4a0d      	ldr	r2, [pc, #52]	@ (8002164 <HAL_RCC_ClockConfig+0x160>)
 800212e:	6813      	ldr	r3, [r2, #0]
 8002130:	2107      	movs	r1, #7
 8002132:	438b      	bics	r3, r1
 8002134:	432b      	orrs	r3, r5
 8002136:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002138:	f7fe fd44 	bl	8000bc4 <HAL_GetTick>
 800213c:	0006      	movs	r6, r0
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800213e:	4b09      	ldr	r3, [pc, #36]	@ (8002164 <HAL_RCC_ClockConfig+0x160>)
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	2307      	movs	r3, #7
 8002144:	4013      	ands	r3, r2
 8002146:	42ab      	cmp	r3, r5
 8002148:	d0d2      	beq.n	80020f0 <HAL_RCC_ClockConfig+0xec>
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800214a:	f7fe fd3b 	bl	8000bc4 <HAL_GetTick>
 800214e:	1b80      	subs	r0, r0, r6
 8002150:	4b08      	ldr	r3, [pc, #32]	@ (8002174 <HAL_RCC_ClockConfig+0x170>)
 8002152:	4298      	cmp	r0, r3
 8002154:	d9f3      	bls.n	800213e <HAL_RCC_ClockConfig+0x13a>
        return HAL_TIMEOUT;
 8002156:	2003      	movs	r0, #3
 8002158:	e7e7      	b.n	800212a <HAL_RCC_ClockConfig+0x126>
    return HAL_ERROR;
 800215a:	2001      	movs	r0, #1
 800215c:	e7e5      	b.n	800212a <HAL_RCC_ClockConfig+0x126>
        return HAL_ERROR;
 800215e:	2001      	movs	r0, #1
 8002160:	e7e3      	b.n	800212a <HAL_RCC_ClockConfig+0x126>
 8002162:	46c0      	nop			@ (mov r8, r8)
 8002164:	40022000 	.word	0x40022000
 8002168:	40021000 	.word	0x40021000
 800216c:	ffff84ff 	.word	0xffff84ff
 8002170:	fffff0ff 	.word	0xfffff0ff
 8002174:	00001388 	.word	0x00001388
 8002178:	ffff8fff 	.word	0xffff8fff
 800217c:	08005f80 	.word	0x08005f80
 8002180:	20000008 	.word	0x20000008
 8002184:	20000004 	.word	0x20000004

08002188 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002188:	b510      	push	{r4, lr}
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800218a:	f7ff ff0d 	bl	8001fa8 <HAL_RCC_GetSysClockFreq>
 800218e:	4b07      	ldr	r3, [pc, #28]	@ (80021ac <HAL_RCC_GetHCLKFreq+0x24>)
 8002190:	689a      	ldr	r2, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002192:	0a12      	lsrs	r2, r2, #8
 8002194:	230f      	movs	r3, #15
 8002196:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002198:	4a05      	ldr	r2, [pc, #20]	@ (80021b0 <HAL_RCC_GetHCLKFreq+0x28>)
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	589a      	ldr	r2, [r3, r2]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800219e:	231f      	movs	r3, #31
 80021a0:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80021a2:	40d8      	lsrs	r0, r3
 80021a4:	4b03      	ldr	r3, [pc, #12]	@ (80021b4 <HAL_RCC_GetHCLKFreq+0x2c>)
 80021a6:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 80021a8:	bd10      	pop	{r4, pc}
 80021aa:	46c0      	nop			@ (mov r8, r8)
 80021ac:	40021000 	.word	0x40021000
 80021b0:	08005f80 	.word	0x08005f80
 80021b4:	20000008 	.word	0x20000008

080021b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021b8:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 80021ba:	f7ff ffe5 	bl	8002188 <HAL_RCC_GetHCLKFreq>
 80021be:	4b06      	ldr	r3, [pc, #24]	@ (80021d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80021c0:	689a      	ldr	r2, [r3, #8]
 80021c2:	0b12      	lsrs	r2, r2, #12
 80021c4:	2307      	movs	r3, #7
 80021c6:	4013      	ands	r3, r2
 80021c8:	4a04      	ldr	r2, [pc, #16]	@ (80021dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	589a      	ldr	r2, [r3, r2]
 80021ce:	231f      	movs	r3, #31
 80021d0:	4013      	ands	r3, r2
 80021d2:	40d8      	lsrs	r0, r3
}
 80021d4:	bd10      	pop	{r4, pc}
 80021d6:	46c0      	nop			@ (mov r8, r8)
 80021d8:	40021000 	.word	0x40021000
 80021dc:	08005f60 	.word	0x08005f60

080021e0 <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021e0:	b570      	push	{r4, r5, r6, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80021e6:	6803      	ldr	r3, [r0, #0]
 80021e8:	065b      	lsls	r3, r3, #25
 80021ea:	d550      	bpl.n	800228e <HAL_RCCEx_PeriphCLKConfig+0xae>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021ec:	4b42      	ldr	r3, [pc, #264]	@ (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 80021ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021f0:	00db      	lsls	r3, r3, #3
 80021f2:	d435      	bmi.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021f4:	4b40      	ldr	r3, [pc, #256]	@ (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 80021f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80021f8:	2180      	movs	r1, #128	@ 0x80
 80021fa:	0549      	lsls	r1, r1, #21
 80021fc:	430a      	orrs	r2, r1
 80021fe:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002200:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002202:	400b      	ands	r3, r1
 8002204:	9301      	str	r3, [sp, #4]
 8002206:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002208:	2501      	movs	r5, #1
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 800220a:	4b3b      	ldr	r3, [pc, #236]	@ (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 800220c:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800220e:	22c0      	movs	r2, #192	@ 0xc0
 8002210:	0092      	lsls	r2, r2, #2
 8002212:	000b      	movs	r3, r1
 8002214:	4013      	ands	r3, r2

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002216:	4211      	tst	r1, r2
 8002218:	d035      	beq.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0xa6>
 800221a:	69a2      	ldr	r2, [r4, #24]
 800221c:	429a      	cmp	r2, r3
 800221e:	d00d      	beq.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8002220:	4a35      	ldr	r2, [pc, #212]	@ (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8002222:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 8002224:	4935      	ldr	r1, [pc, #212]	@ (80022fc <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 8002226:	400b      	ands	r3, r1
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002228:	6dd0      	ldr	r0, [r2, #92]	@ 0x5c
 800222a:	2180      	movs	r1, #128	@ 0x80
 800222c:	0249      	lsls	r1, r1, #9
 800222e:	4301      	orrs	r1, r0
 8002230:	65d1      	str	r1, [r2, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002232:	6dd1      	ldr	r1, [r2, #92]	@ 0x5c
 8002234:	4832      	ldr	r0, [pc, #200]	@ (8002300 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8002236:	4001      	ands	r1, r0
 8002238:	65d1      	str	r1, [r2, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 800223a:	65d3      	str	r3, [r2, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 800223c:	07db      	lsls	r3, r3, #31
 800223e:	d411      	bmi.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x84>
    }

    if (ret == HAL_OK)
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002240:	4a2d      	ldr	r2, [pc, #180]	@ (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8002242:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 8002244:	492d      	ldr	r1, [pc, #180]	@ (80022fc <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 8002246:	400b      	ands	r3, r1
 8002248:	69a1      	ldr	r1, [r4, #24]
 800224a:	430b      	orrs	r3, r1
 800224c:	65d3      	str	r3, [r2, #92]	@ 0x5c
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800224e:	2000      	movs	r0, #0
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002250:	2d01      	cmp	r5, #1
 8002252:	d11d      	bne.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0xb0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002254:	4a28      	ldr	r2, [pc, #160]	@ (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8002256:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8002258:	492a      	ldr	r1, [pc, #168]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 800225a:	400b      	ands	r3, r1
 800225c:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800225e:	e017      	b.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0xb0>
    FlagStatus       pwrclkchanged = RESET;
 8002260:	2500      	movs	r5, #0
 8002262:	e7d2      	b.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x2a>
      tickstart = HAL_GetTick();
 8002264:	f7fe fcae 	bl	8000bc4 <HAL_GetTick>
 8002268:	0006      	movs	r6, r0
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800226a:	4b23      	ldr	r3, [pc, #140]	@ (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 800226c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800226e:	079b      	lsls	r3, r3, #30
 8002270:	d407      	bmi.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0xa2>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002272:	f7fe fca7 	bl	8000bc4 <HAL_GetTick>
 8002276:	1b80      	subs	r0, r0, r6
 8002278:	4b23      	ldr	r3, [pc, #140]	@ (8002308 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 800227a:	4298      	cmp	r0, r3
 800227c:	d9f5      	bls.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x8a>
          ret = HAL_TIMEOUT;
 800227e:	2003      	movs	r0, #3
 8002280:	e002      	b.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0xa8>
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002282:	2000      	movs	r0, #0
 8002284:	e000      	b.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0xa8>
 8002286:	2000      	movs	r0, #0
    if (ret == HAL_OK)
 8002288:	2800      	cmp	r0, #0
 800228a:	d1e1      	bne.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x70>
 800228c:	e7d8      	b.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x60>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800228e:	2000      	movs	r0, #0
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002290:	6823      	ldr	r3, [r4, #0]
 8002292:	07db      	lsls	r3, r3, #31
 8002294:	d506      	bpl.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002296:	4a18      	ldr	r2, [pc, #96]	@ (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8002298:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800229a:	2103      	movs	r1, #3
 800229c:	438b      	bics	r3, r1
 800229e:	68a1      	ldr	r1, [r4, #8]
 80022a0:	430b      	orrs	r3, r1
 80022a2:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022a4:	6823      	ldr	r3, [r4, #0]
 80022a6:	079b      	lsls	r3, r3, #30
 80022a8:	d506      	bpl.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022aa:	4a13      	ldr	r2, [pc, #76]	@ (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 80022ac:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 80022ae:	4917      	ldr	r1, [pc, #92]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 80022b0:	400b      	ands	r3, r1
 80022b2:	68e1      	ldr	r1, [r4, #12]
 80022b4:	430b      	orrs	r3, r1
 80022b6:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80022b8:	6823      	ldr	r3, [r4, #0]
 80022ba:	069b      	lsls	r3, r3, #26
 80022bc:	d506      	bpl.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80022be:	4a0e      	ldr	r2, [pc, #56]	@ (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 80022c0:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	089b      	lsrs	r3, r3, #2
 80022c6:	6961      	ldr	r1, [r4, #20]
 80022c8:	430b      	orrs	r3, r1
 80022ca:	6553      	str	r3, [r2, #84]	@ 0x54
    __HAL_RCC_FDCAN1_CONFIG(PeriphClkInit->Fdcan1ClockSelection);

  }
#endif /* FDCAN1 */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80022cc:	6823      	ldr	r3, [r4, #0]
 80022ce:	075b      	lsls	r3, r3, #29
 80022d0:	d506      	bpl.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80022d2:	4a09      	ldr	r2, [pc, #36]	@ (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 80022d4:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 80022d6:	490e      	ldr	r1, [pc, #56]	@ (8002310 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022d8:	400b      	ands	r3, r1
 80022da:	6921      	ldr	r1, [r4, #16]
 80022dc:	430b      	orrs	r3, r1
 80022de:	6553      	str	r3, [r2, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 80022e0:	6823      	ldr	r3, [r4, #0]
 80022e2:	061b      	lsls	r3, r3, #24
 80022e4:	d506      	bpl.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 80022e6:	4a04      	ldr	r2, [pc, #16]	@ (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 80022e8:	6813      	ldr	r3, [r2, #0]
 80022ea:	21e0      	movs	r1, #224	@ 0xe0
 80022ec:	438b      	bics	r3, r1
 80022ee:	6861      	ldr	r1, [r4, #4]
 80022f0:	430b      	orrs	r3, r1
 80022f2:	6013      	str	r3, [r2, #0]
  }
  return status;
}
 80022f4:	b002      	add	sp, #8
 80022f6:	bd70      	pop	{r4, r5, r6, pc}
 80022f8:	40021000 	.word	0x40021000
 80022fc:	fffffcff 	.word	0xfffffcff
 8002300:	fffeffff 	.word	0xfffeffff
 8002304:	efffffff 	.word	0xefffffff
 8002308:	00001388 	.word	0x00001388
 800230c:	ffffcfff 	.word	0xffffcfff
 8002310:	ffff3fff 	.word	0xffff3fff

08002314 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002314:	233d      	movs	r3, #61	@ 0x3d
 8002316:	5cc3      	ldrb	r3, [r0, r3]
 8002318:	2b01      	cmp	r3, #1
 800231a:	d122      	bne.n	8002362 <HAL_TIM_Base_Start_IT+0x4e>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800231c:	333c      	adds	r3, #60	@ 0x3c
 800231e:	2202      	movs	r2, #2
 8002320:	54c2      	strb	r2, [r0, r3]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002322:	6802      	ldr	r2, [r0, #0]
 8002324:	68d3      	ldr	r3, [r2, #12]
 8002326:	2101      	movs	r1, #1
 8002328:	430b      	orrs	r3, r1
 800232a:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800232c:	6803      	ldr	r3, [r0, #0]
 800232e:	4a10      	ldr	r2, [pc, #64]	@ (8002370 <HAL_TIM_Base_Start_IT+0x5c>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d008      	beq.n	8002346 <HAL_TIM_Base_Start_IT+0x32>
 8002334:	4a0f      	ldr	r2, [pc, #60]	@ (8002374 <HAL_TIM_Base_Start_IT+0x60>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d005      	beq.n	8002346 <HAL_TIM_Base_Start_IT+0x32>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	2101      	movs	r1, #1
 800233e:	430a      	orrs	r2, r1
 8002340:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002342:	2000      	movs	r0, #0
 8002344:	e00e      	b.n	8002364 <HAL_TIM_Base_Start_IT+0x50>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002346:	689a      	ldr	r2, [r3, #8]
 8002348:	490b      	ldr	r1, [pc, #44]	@ (8002378 <HAL_TIM_Base_Start_IT+0x64>)
 800234a:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800234c:	2a06      	cmp	r2, #6
 800234e:	d00a      	beq.n	8002366 <HAL_TIM_Base_Start_IT+0x52>
 8002350:	3907      	subs	r1, #7
 8002352:	428a      	cmp	r2, r1
 8002354:	d009      	beq.n	800236a <HAL_TIM_Base_Start_IT+0x56>
      __HAL_TIM_ENABLE(htim);
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	2101      	movs	r1, #1
 800235a:	430a      	orrs	r2, r1
 800235c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800235e:	2000      	movs	r0, #0
 8002360:	e000      	b.n	8002364 <HAL_TIM_Base_Start_IT+0x50>
    return HAL_ERROR;
 8002362:	2001      	movs	r0, #1
}
 8002364:	4770      	bx	lr
  return HAL_OK;
 8002366:	2000      	movs	r0, #0
 8002368:	e7fc      	b.n	8002364 <HAL_TIM_Base_Start_IT+0x50>
 800236a:	2000      	movs	r0, #0
 800236c:	e7fa      	b.n	8002364 <HAL_TIM_Base_Start_IT+0x50>
 800236e:	46c0      	nop			@ (mov r8, r8)
 8002370:	40012c00 	.word	0x40012c00
 8002374:	40000400 	.word	0x40000400
 8002378:	00010007 	.word	0x00010007

0800237c <HAL_TIM_Base_Stop_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800237c:	6802      	ldr	r2, [r0, #0]
 800237e:	68d3      	ldr	r3, [r2, #12]
 8002380:	2101      	movs	r1, #1
 8002382:	438b      	bics	r3, r1
 8002384:	60d3      	str	r3, [r2, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002386:	6803      	ldr	r3, [r0, #0]
 8002388:	6a19      	ldr	r1, [r3, #32]
 800238a:	4a08      	ldr	r2, [pc, #32]	@ (80023ac <HAL_TIM_Base_Stop_IT+0x30>)
 800238c:	4211      	tst	r1, r2
 800238e:	d107      	bne.n	80023a0 <HAL_TIM_Base_Stop_IT+0x24>
 8002390:	6a19      	ldr	r1, [r3, #32]
 8002392:	4a07      	ldr	r2, [pc, #28]	@ (80023b0 <HAL_TIM_Base_Stop_IT+0x34>)
 8002394:	4211      	tst	r1, r2
 8002396:	d103      	bne.n	80023a0 <HAL_TIM_Base_Stop_IT+0x24>
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	2101      	movs	r1, #1
 800239c:	438a      	bics	r2, r1
 800239e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80023a0:	233d      	movs	r3, #61	@ 0x3d
 80023a2:	2201      	movs	r2, #1
 80023a4:	54c2      	strb	r2, [r0, r3]

  /* Return function status */
  return HAL_OK;
}
 80023a6:	2000      	movs	r0, #0
 80023a8:	4770      	bx	lr
 80023aa:	46c0      	nop			@ (mov r8, r8)
 80023ac:	00001111 	.word	0x00001111
 80023b0:	00000444 	.word	0x00000444

080023b4 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80023b4:	4770      	bx	lr

080023b6 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80023b6:	4770      	bx	lr

080023b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80023b8:	4770      	bx	lr

080023ba <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80023ba:	4770      	bx	lr

080023bc <HAL_TIM_IRQHandler>:
{
 80023bc:	b570      	push	{r4, r5, r6, lr}
 80023be:	0005      	movs	r5, r0
  uint32_t itsource = htim->Instance->DIER;
 80023c0:	6803      	ldr	r3, [r0, #0]
 80023c2:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 80023c4:	691c      	ldr	r4, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80023c6:	07a2      	lsls	r2, r4, #30
 80023c8:	d50e      	bpl.n	80023e8 <HAL_TIM_IRQHandler+0x2c>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80023ca:	07b2      	lsls	r2, r6, #30
 80023cc:	d50c      	bpl.n	80023e8 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80023ce:	2203      	movs	r2, #3
 80023d0:	4252      	negs	r2, r2
 80023d2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023d4:	2301      	movs	r3, #1
 80023d6:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023d8:	6803      	ldr	r3, [r0, #0]
 80023da:	699b      	ldr	r3, [r3, #24]
 80023dc:	079b      	lsls	r3, r3, #30
 80023de:	d057      	beq.n	8002490 <HAL_TIM_IRQHandler+0xd4>
          HAL_TIM_IC_CaptureCallback(htim);
 80023e0:	f7ff ffe9 	bl	80023b6 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023e4:	2300      	movs	r3, #0
 80023e6:	772b      	strb	r3, [r5, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80023e8:	0763      	lsls	r3, r4, #29
 80023ea:	d512      	bpl.n	8002412 <HAL_TIM_IRQHandler+0x56>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80023ec:	0773      	lsls	r3, r6, #29
 80023ee:	d510      	bpl.n	8002412 <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80023f0:	682b      	ldr	r3, [r5, #0]
 80023f2:	2205      	movs	r2, #5
 80023f4:	4252      	negs	r2, r2
 80023f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023f8:	2302      	movs	r3, #2
 80023fa:	772b      	strb	r3, [r5, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023fc:	682b      	ldr	r3, [r5, #0]
 80023fe:	699a      	ldr	r2, [r3, #24]
 8002400:	23c0      	movs	r3, #192	@ 0xc0
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	421a      	tst	r2, r3
 8002406:	d049      	beq.n	800249c <HAL_TIM_IRQHandler+0xe0>
        HAL_TIM_IC_CaptureCallback(htim);
 8002408:	0028      	movs	r0, r5
 800240a:	f7ff ffd4 	bl	80023b6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800240e:	2300      	movs	r3, #0
 8002410:	772b      	strb	r3, [r5, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002412:	0723      	lsls	r3, r4, #28
 8002414:	d510      	bpl.n	8002438 <HAL_TIM_IRQHandler+0x7c>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002416:	0733      	lsls	r3, r6, #28
 8002418:	d50e      	bpl.n	8002438 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800241a:	682b      	ldr	r3, [r5, #0]
 800241c:	2209      	movs	r2, #9
 800241e:	4252      	negs	r2, r2
 8002420:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002422:	2304      	movs	r3, #4
 8002424:	772b      	strb	r3, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002426:	682b      	ldr	r3, [r5, #0]
 8002428:	69db      	ldr	r3, [r3, #28]
 800242a:	079b      	lsls	r3, r3, #30
 800242c:	d03d      	beq.n	80024aa <HAL_TIM_IRQHandler+0xee>
        HAL_TIM_IC_CaptureCallback(htim);
 800242e:	0028      	movs	r0, r5
 8002430:	f7ff ffc1 	bl	80023b6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002434:	2300      	movs	r3, #0
 8002436:	772b      	strb	r3, [r5, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002438:	06e3      	lsls	r3, r4, #27
 800243a:	d512      	bpl.n	8002462 <HAL_TIM_IRQHandler+0xa6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800243c:	06f3      	lsls	r3, r6, #27
 800243e:	d510      	bpl.n	8002462 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002440:	682b      	ldr	r3, [r5, #0]
 8002442:	2211      	movs	r2, #17
 8002444:	4252      	negs	r2, r2
 8002446:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002448:	2308      	movs	r3, #8
 800244a:	772b      	strb	r3, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800244c:	682b      	ldr	r3, [r5, #0]
 800244e:	69da      	ldr	r2, [r3, #28]
 8002450:	23c0      	movs	r3, #192	@ 0xc0
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	421a      	tst	r2, r3
 8002456:	d02f      	beq.n	80024b8 <HAL_TIM_IRQHandler+0xfc>
        HAL_TIM_IC_CaptureCallback(htim);
 8002458:	0028      	movs	r0, r5
 800245a:	f7ff ffac 	bl	80023b6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800245e:	2300      	movs	r3, #0
 8002460:	772b      	strb	r3, [r5, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002462:	07e3      	lsls	r3, r4, #31
 8002464:	d501      	bpl.n	800246a <HAL_TIM_IRQHandler+0xae>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002466:	07f3      	lsls	r3, r6, #31
 8002468:	d42d      	bmi.n	80024c6 <HAL_TIM_IRQHandler+0x10a>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800246a:	2382      	movs	r3, #130	@ 0x82
 800246c:	019b      	lsls	r3, r3, #6
 800246e:	421c      	tst	r4, r3
 8002470:	d001      	beq.n	8002476 <HAL_TIM_IRQHandler+0xba>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002472:	0633      	lsls	r3, r6, #24
 8002474:	d42f      	bmi.n	80024d6 <HAL_TIM_IRQHandler+0x11a>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002476:	05e3      	lsls	r3, r4, #23
 8002478:	d501      	bpl.n	800247e <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800247a:	0633      	lsls	r3, r6, #24
 800247c:	d432      	bmi.n	80024e4 <HAL_TIM_IRQHandler+0x128>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800247e:	0663      	lsls	r3, r4, #25
 8002480:	d501      	bpl.n	8002486 <HAL_TIM_IRQHandler+0xca>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002482:	0673      	lsls	r3, r6, #25
 8002484:	d435      	bmi.n	80024f2 <HAL_TIM_IRQHandler+0x136>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002486:	06a4      	lsls	r4, r4, #26
 8002488:	d501      	bpl.n	800248e <HAL_TIM_IRQHandler+0xd2>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800248a:	06b6      	lsls	r6, r6, #26
 800248c:	d439      	bmi.n	8002502 <HAL_TIM_IRQHandler+0x146>
}
 800248e:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002490:	f7ff ff90 	bl	80023b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002494:	0028      	movs	r0, r5
 8002496:	f7ff ff8f 	bl	80023b8 <HAL_TIM_PWM_PulseFinishedCallback>
 800249a:	e7a3      	b.n	80023e4 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800249c:	0028      	movs	r0, r5
 800249e:	f7ff ff89 	bl	80023b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024a2:	0028      	movs	r0, r5
 80024a4:	f7ff ff88 	bl	80023b8 <HAL_TIM_PWM_PulseFinishedCallback>
 80024a8:	e7b1      	b.n	800240e <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024aa:	0028      	movs	r0, r5
 80024ac:	f7ff ff82 	bl	80023b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024b0:	0028      	movs	r0, r5
 80024b2:	f7ff ff81 	bl	80023b8 <HAL_TIM_PWM_PulseFinishedCallback>
 80024b6:	e7bd      	b.n	8002434 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024b8:	0028      	movs	r0, r5
 80024ba:	f7ff ff7b 	bl	80023b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024be:	0028      	movs	r0, r5
 80024c0:	f7ff ff7a 	bl	80023b8 <HAL_TIM_PWM_PulseFinishedCallback>
 80024c4:	e7cb      	b.n	800245e <HAL_TIM_IRQHandler+0xa2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80024c6:	682b      	ldr	r3, [r5, #0]
 80024c8:	2202      	movs	r2, #2
 80024ca:	4252      	negs	r2, r2
 80024cc:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80024ce:	0028      	movs	r0, r5
 80024d0:	f7fe faf6 	bl	8000ac0 <HAL_TIM_PeriodElapsedCallback>
 80024d4:	e7c9      	b.n	800246a <HAL_TIM_IRQHandler+0xae>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80024d6:	682b      	ldr	r3, [r5, #0]
 80024d8:	4a0e      	ldr	r2, [pc, #56]	@ (8002514 <HAL_TIM_IRQHandler+0x158>)
 80024da:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80024dc:	0028      	movs	r0, r5
 80024de:	f000 f894 	bl	800260a <HAL_TIMEx_BreakCallback>
 80024e2:	e7c8      	b.n	8002476 <HAL_TIM_IRQHandler+0xba>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80024e4:	682b      	ldr	r3, [r5, #0]
 80024e6:	4a0c      	ldr	r2, [pc, #48]	@ (8002518 <HAL_TIM_IRQHandler+0x15c>)
 80024e8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80024ea:	0028      	movs	r0, r5
 80024ec:	f000 f88e 	bl	800260c <HAL_TIMEx_Break2Callback>
 80024f0:	e7c5      	b.n	800247e <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80024f2:	682b      	ldr	r3, [r5, #0]
 80024f4:	2241      	movs	r2, #65	@ 0x41
 80024f6:	4252      	negs	r2, r2
 80024f8:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80024fa:	0028      	movs	r0, r5
 80024fc:	f7ff ff5d 	bl	80023ba <HAL_TIM_TriggerCallback>
 8002500:	e7c1      	b.n	8002486 <HAL_TIM_IRQHandler+0xca>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002502:	682b      	ldr	r3, [r5, #0]
 8002504:	2221      	movs	r2, #33	@ 0x21
 8002506:	4252      	negs	r2, r2
 8002508:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800250a:	0028      	movs	r0, r5
 800250c:	f000 f87c 	bl	8002608 <HAL_TIMEx_CommutCallback>
}
 8002510:	e7bd      	b.n	800248e <HAL_TIM_IRQHandler+0xd2>
 8002512:	46c0      	nop			@ (mov r8, r8)
 8002514:	ffffdf7f 	.word	0xffffdf7f
 8002518:	fffffeff 	.word	0xfffffeff

0800251c <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800251c:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800251e:	4a1c      	ldr	r2, [pc, #112]	@ (8002590 <TIM_Base_SetConfig+0x74>)
 8002520:	4290      	cmp	r0, r2
 8002522:	d002      	beq.n	800252a <TIM_Base_SetConfig+0xe>
 8002524:	4a1b      	ldr	r2, [pc, #108]	@ (8002594 <TIM_Base_SetConfig+0x78>)
 8002526:	4290      	cmp	r0, r2
 8002528:	d103      	bne.n	8002532 <TIM_Base_SetConfig+0x16>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800252a:	2270      	movs	r2, #112	@ 0x70
 800252c:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 800252e:	684a      	ldr	r2, [r1, #4]
 8002530:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002532:	4a17      	ldr	r2, [pc, #92]	@ (8002590 <TIM_Base_SetConfig+0x74>)
 8002534:	4290      	cmp	r0, r2
 8002536:	d00b      	beq.n	8002550 <TIM_Base_SetConfig+0x34>
 8002538:	4a16      	ldr	r2, [pc, #88]	@ (8002594 <TIM_Base_SetConfig+0x78>)
 800253a:	4290      	cmp	r0, r2
 800253c:	d008      	beq.n	8002550 <TIM_Base_SetConfig+0x34>
 800253e:	4a16      	ldr	r2, [pc, #88]	@ (8002598 <TIM_Base_SetConfig+0x7c>)
 8002540:	4290      	cmp	r0, r2
 8002542:	d005      	beq.n	8002550 <TIM_Base_SetConfig+0x34>
 8002544:	4a15      	ldr	r2, [pc, #84]	@ (800259c <TIM_Base_SetConfig+0x80>)
 8002546:	4290      	cmp	r0, r2
 8002548:	d002      	beq.n	8002550 <TIM_Base_SetConfig+0x34>
 800254a:	4a15      	ldr	r2, [pc, #84]	@ (80025a0 <TIM_Base_SetConfig+0x84>)
 800254c:	4290      	cmp	r0, r2
 800254e:	d103      	bne.n	8002558 <TIM_Base_SetConfig+0x3c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002550:	4a14      	ldr	r2, [pc, #80]	@ (80025a4 <TIM_Base_SetConfig+0x88>)
 8002552:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002554:	68ca      	ldr	r2, [r1, #12]
 8002556:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002558:	2280      	movs	r2, #128	@ 0x80
 800255a:	4393      	bics	r3, r2
 800255c:	694a      	ldr	r2, [r1, #20]
 800255e:	4313      	orrs	r3, r2

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002560:	688a      	ldr	r2, [r1, #8]
 8002562:	62c2      	str	r2, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002564:	680a      	ldr	r2, [r1, #0]
 8002566:	6282      	str	r2, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002568:	4a09      	ldr	r2, [pc, #36]	@ (8002590 <TIM_Base_SetConfig+0x74>)
 800256a:	4290      	cmp	r0, r2
 800256c:	d005      	beq.n	800257a <TIM_Base_SetConfig+0x5e>
 800256e:	4a0b      	ldr	r2, [pc, #44]	@ (800259c <TIM_Base_SetConfig+0x80>)
 8002570:	4290      	cmp	r0, r2
 8002572:	d002      	beq.n	800257a <TIM_Base_SetConfig+0x5e>
 8002574:	4a0a      	ldr	r2, [pc, #40]	@ (80025a0 <TIM_Base_SetConfig+0x84>)
 8002576:	4290      	cmp	r0, r2
 8002578:	d101      	bne.n	800257e <TIM_Base_SetConfig+0x62>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800257a:	690a      	ldr	r2, [r1, #16]
 800257c:	6302      	str	r2, [r0, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800257e:	6802      	ldr	r2, [r0, #0]
 8002580:	2104      	movs	r1, #4
 8002582:	430a      	orrs	r2, r1
 8002584:	6002      	str	r2, [r0, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002586:	2201      	movs	r2, #1
 8002588:	6142      	str	r2, [r0, #20]

  TIMx->CR1 = tmpcr1;
 800258a:	6003      	str	r3, [r0, #0]
}
 800258c:	4770      	bx	lr
 800258e:	46c0      	nop			@ (mov r8, r8)
 8002590:	40012c00 	.word	0x40012c00
 8002594:	40000400 	.word	0x40000400
 8002598:	40002000 	.word	0x40002000
 800259c:	40014400 	.word	0x40014400
 80025a0:	40014800 	.word	0x40014800
 80025a4:	fffffcff 	.word	0xfffffcff

080025a8 <HAL_TIM_Base_Init>:
{
 80025a8:	b570      	push	{r4, r5, r6, lr}
 80025aa:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 80025ac:	d02a      	beq.n	8002604 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 80025ae:	233d      	movs	r3, #61	@ 0x3d
 80025b0:	5cc3      	ldrb	r3, [r0, r3]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d020      	beq.n	80025f8 <HAL_TIM_Base_Init+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 80025b6:	253d      	movs	r5, #61	@ 0x3d
 80025b8:	2302      	movs	r3, #2
 80025ba:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025bc:	0021      	movs	r1, r4
 80025be:	c901      	ldmia	r1!, {r0}
 80025c0:	f7ff ffac 	bl	800251c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025c4:	2301      	movs	r3, #1
 80025c6:	2248      	movs	r2, #72	@ 0x48
 80025c8:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025ca:	3a0a      	subs	r2, #10
 80025cc:	54a3      	strb	r3, [r4, r2]
 80025ce:	3201      	adds	r2, #1
 80025d0:	54a3      	strb	r3, [r4, r2]
 80025d2:	3201      	adds	r2, #1
 80025d4:	54a3      	strb	r3, [r4, r2]
 80025d6:	3201      	adds	r2, #1
 80025d8:	54a3      	strb	r3, [r4, r2]
 80025da:	3201      	adds	r2, #1
 80025dc:	54a3      	strb	r3, [r4, r2]
 80025de:	3201      	adds	r2, #1
 80025e0:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025e2:	3201      	adds	r2, #1
 80025e4:	54a3      	strb	r3, [r4, r2]
 80025e6:	3201      	adds	r2, #1
 80025e8:	54a3      	strb	r3, [r4, r2]
 80025ea:	3201      	adds	r2, #1
 80025ec:	54a3      	strb	r3, [r4, r2]
 80025ee:	3201      	adds	r2, #1
 80025f0:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 80025f2:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 80025f4:	2000      	movs	r0, #0
}
 80025f6:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 80025f8:	333c      	adds	r3, #60	@ 0x3c
 80025fa:	2200      	movs	r2, #0
 80025fc:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 80025fe:	f7ff fb1d 	bl	8001c3c <HAL_TIM_Base_MspInit>
 8002602:	e7d8      	b.n	80025b6 <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 8002604:	2001      	movs	r0, #1
 8002606:	e7f6      	b.n	80025f6 <HAL_TIM_Base_Init+0x4e>

08002608 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002608:	4770      	bx	lr

0800260a <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800260a:	4770      	bx	lr

0800260c <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800260c:	4770      	bx	lr
	...

08002610 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002610:	b530      	push	{r4, r5, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002612:	f3ef 8410 	mrs	r4, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002616:	2201      	movs	r2, #1
 8002618:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800261c:	6801      	ldr	r1, [r0, #0]
 800261e:	680b      	ldr	r3, [r1, #0]
 8002620:	4d12      	ldr	r5, [pc, #72]	@ (800266c <UART_EndRxTransfer+0x5c>)
 8002622:	402b      	ands	r3, r5
 8002624:	600b      	str	r3, [r1, #0]
 8002626:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800262a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800262e:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002632:	6802      	ldr	r2, [r0, #0]
 8002634:	6893      	ldr	r3, [r2, #8]
 8002636:	4c0e      	ldr	r4, [pc, #56]	@ (8002670 <UART_EndRxTransfer+0x60>)
 8002638:	4023      	ands	r3, r4
 800263a:	6093      	str	r3, [r2, #8]
 800263c:	f381 8810 	msr	PRIMASK, r1

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002640:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8002642:	2b01      	cmp	r3, #1
 8002644:	d006      	beq.n	8002654 <UART_EndRxTransfer+0x44>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002646:	238c      	movs	r3, #140	@ 0x8c
 8002648:	2220      	movs	r2, #32
 800264a:	50c2      	str	r2, [r0, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800264c:	2300      	movs	r3, #0
 800264e:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002650:	6743      	str	r3, [r0, #116]	@ 0x74
}
 8002652:	bd30      	pop	{r4, r5, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002654:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002658:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800265c:	6802      	ldr	r2, [r0, #0]
 800265e:	6813      	ldr	r3, [r2, #0]
 8002660:	2410      	movs	r4, #16
 8002662:	43a3      	bics	r3, r4
 8002664:	6013      	str	r3, [r2, #0]
 8002666:	f381 8810 	msr	PRIMASK, r1
}
 800266a:	e7ec      	b.n	8002646 <UART_EndRxTransfer+0x36>
 800266c:	fffffedf 	.word	0xfffffedf
 8002670:	effffffe 	.word	0xeffffffe

08002674 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8002674:	b510      	push	{r4, lr}
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002676:	2388      	movs	r3, #136	@ 0x88
 8002678:	58c3      	ldr	r3, [r0, r3]
 800267a:	2b21      	cmp	r3, #33	@ 0x21
 800267c:	d000      	beq.n	8002680 <UART_TxISR_8BIT+0xc>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800267e:	bd10      	pop	{r4, pc}
    if (huart->TxXferCount == 0U)
 8002680:	3335      	adds	r3, #53	@ 0x35
 8002682:	5ac3      	ldrh	r3, [r0, r3]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d117      	bne.n	80026b8 <UART_TxISR_8BIT+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002688:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800268c:	2201      	movs	r2, #1
 800268e:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8002692:	6801      	ldr	r1, [r0, #0]
 8002694:	680b      	ldr	r3, [r1, #0]
 8002696:	2480      	movs	r4, #128	@ 0x80
 8002698:	43a3      	bics	r3, r4
 800269a:	600b      	str	r3, [r1, #0]
 800269c:	f38c 8810 	msr	PRIMASK, ip
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80026a0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026a4:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80026a8:	6802      	ldr	r2, [r0, #0]
 80026aa:	6813      	ldr	r3, [r2, #0]
 80026ac:	2040      	movs	r0, #64	@ 0x40
 80026ae:	4303      	orrs	r3, r0
 80026b0:	6013      	str	r3, [r2, #0]
 80026b2:	f381 8810 	msr	PRIMASK, r1
}
 80026b6:	e7e2      	b.n	800267e <UART_TxISR_8BIT+0xa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80026b8:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 80026ba:	781a      	ldrb	r2, [r3, #0]
 80026bc:	6803      	ldr	r3, [r0, #0]
 80026be:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 80026c0:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 80026c2:	3301      	adds	r3, #1
 80026c4:	6503      	str	r3, [r0, #80]	@ 0x50
      huart->TxXferCount--;
 80026c6:	2256      	movs	r2, #86	@ 0x56
 80026c8:	5a83      	ldrh	r3, [r0, r2]
 80026ca:	3b01      	subs	r3, #1
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	5283      	strh	r3, [r0, r2]
}
 80026d0:	e7d5      	b.n	800267e <UART_TxISR_8BIT+0xa>

080026d2 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80026d2:	b510      	push	{r4, lr}
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80026d4:	2388      	movs	r3, #136	@ 0x88
 80026d6:	58c3      	ldr	r3, [r0, r3]
 80026d8:	2b21      	cmp	r3, #33	@ 0x21
 80026da:	d000      	beq.n	80026de <UART_TxISR_16BIT+0xc>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80026dc:	bd10      	pop	{r4, pc}
    if (huart->TxXferCount == 0U)
 80026de:	3335      	adds	r3, #53	@ 0x35
 80026e0:	5ac3      	ldrh	r3, [r0, r3]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d117      	bne.n	8002716 <UART_TxISR_16BIT+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80026e6:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026ea:	2201      	movs	r2, #1
 80026ec:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80026f0:	6801      	ldr	r1, [r0, #0]
 80026f2:	680b      	ldr	r3, [r1, #0]
 80026f4:	2480      	movs	r4, #128	@ 0x80
 80026f6:	43a3      	bics	r3, r4
 80026f8:	600b      	str	r3, [r1, #0]
 80026fa:	f38c 8810 	msr	PRIMASK, ip
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80026fe:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002702:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002706:	6802      	ldr	r2, [r0, #0]
 8002708:	6813      	ldr	r3, [r2, #0]
 800270a:	2040      	movs	r0, #64	@ 0x40
 800270c:	4303      	orrs	r3, r0
 800270e:	6013      	str	r3, [r2, #0]
 8002710:	f381 8810 	msr	PRIMASK, r1
}
 8002714:	e7e2      	b.n	80026dc <UART_TxISR_16BIT+0xa>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002716:	6d03      	ldr	r3, [r0, #80]	@ 0x50
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8002718:	881b      	ldrh	r3, [r3, #0]
 800271a:	6802      	ldr	r2, [r0, #0]
 800271c:	05db      	lsls	r3, r3, #23
 800271e:	0ddb      	lsrs	r3, r3, #23
 8002720:	6293      	str	r3, [r2, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8002722:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8002724:	3302      	adds	r3, #2
 8002726:	6503      	str	r3, [r0, #80]	@ 0x50
      huart->TxXferCount--;
 8002728:	2256      	movs	r2, #86	@ 0x56
 800272a:	5a83      	ldrh	r3, [r0, r2]
 800272c:	3b01      	subs	r3, #1
 800272e:	b29b      	uxth	r3, r3
 8002730:	5283      	strh	r3, [r0, r2]
}
 8002732:	e7d3      	b.n	80026dc <UART_TxISR_16BIT+0xa>

08002734 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8002734:	b510      	push	{r4, lr}
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002736:	2388      	movs	r3, #136	@ 0x88
 8002738:	58c3      	ldr	r3, [r0, r3]
 800273a:	2b21      	cmp	r3, #33	@ 0x21
 800273c:	d000      	beq.n	8002740 <UART_TxISR_8BIT_FIFOEN+0xc>
      {
        /* Nothing to do */
      }
    }
  }
}
 800273e:	bd10      	pop	{r4, pc}
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8002740:	3349      	adds	r3, #73	@ 0x49
 8002742:	5ac3      	ldrh	r3, [r0, r3]
 8002744:	e019      	b.n	800277a <UART_TxISR_8BIT_FIFOEN+0x46>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002746:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800274a:	3201      	adds	r2, #1
 800274c:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8002750:	6801      	ldr	r1, [r0, #0]
 8002752:	688b      	ldr	r3, [r1, #8]
 8002754:	4c14      	ldr	r4, [pc, #80]	@ (80027a8 <UART_TxISR_8BIT_FIFOEN+0x74>)
 8002756:	4023      	ands	r3, r4
 8002758:	608b      	str	r3, [r1, #8]
 800275a:	f38c 8810 	msr	PRIMASK, ip
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800275e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002762:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002766:	6802      	ldr	r2, [r0, #0]
 8002768:	6813      	ldr	r3, [r2, #0]
 800276a:	2040      	movs	r0, #64	@ 0x40
 800276c:	4303      	orrs	r3, r0
 800276e:	6013      	str	r3, [r2, #0]
 8002770:	f381 8810 	msr	PRIMASK, r1
}
 8002774:	e7e3      	b.n	800273e <UART_TxISR_8BIT_FIFOEN+0xa>
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8002776:	3b01      	subs	r3, #1
 8002778:	b29b      	uxth	r3, r3
 800277a:	2b00      	cmp	r3, #0
 800277c:	d0df      	beq.n	800273e <UART_TxISR_8BIT_FIFOEN+0xa>
      if (huart->TxXferCount == 0U)
 800277e:	2256      	movs	r2, #86	@ 0x56
 8002780:	5a82      	ldrh	r2, [r0, r2]
 8002782:	2a00      	cmp	r2, #0
 8002784:	d0df      	beq.n	8002746 <UART_TxISR_8BIT_FIFOEN+0x12>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8002786:	6801      	ldr	r1, [r0, #0]
 8002788:	69ca      	ldr	r2, [r1, #28]
 800278a:	0612      	lsls	r2, r2, #24
 800278c:	d5f3      	bpl.n	8002776 <UART_TxISR_8BIT_FIFOEN+0x42>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800278e:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8002790:	7812      	ldrb	r2, [r2, #0]
 8002792:	628a      	str	r2, [r1, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8002794:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8002796:	3201      	adds	r2, #1
 8002798:	6502      	str	r2, [r0, #80]	@ 0x50
        huart->TxXferCount--;
 800279a:	2156      	movs	r1, #86	@ 0x56
 800279c:	5a42      	ldrh	r2, [r0, r1]
 800279e:	3a01      	subs	r2, #1
 80027a0:	b292      	uxth	r2, r2
 80027a2:	5242      	strh	r2, [r0, r1]
 80027a4:	e7e7      	b.n	8002776 <UART_TxISR_8BIT_FIFOEN+0x42>
 80027a6:	46c0      	nop			@ (mov r8, r8)
 80027a8:	ff7fffff 	.word	0xff7fffff

080027ac <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80027ac:	b510      	push	{r4, lr}
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80027ae:	2388      	movs	r3, #136	@ 0x88
 80027b0:	58c3      	ldr	r3, [r0, r3]
 80027b2:	2b21      	cmp	r3, #33	@ 0x21
 80027b4:	d000      	beq.n	80027b8 <UART_TxISR_16BIT_FIFOEN+0xc>
      {
        /* Nothing to do */
      }
    }
  }
}
 80027b6:	bd10      	pop	{r4, pc}
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80027b8:	3349      	adds	r3, #73	@ 0x49
 80027ba:	5ac3      	ldrh	r3, [r0, r3]
 80027bc:	e019      	b.n	80027f2 <UART_TxISR_16BIT_FIFOEN+0x46>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80027be:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027c2:	3201      	adds	r2, #1
 80027c4:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80027c8:	6801      	ldr	r1, [r0, #0]
 80027ca:	688b      	ldr	r3, [r1, #8]
 80027cc:	4c15      	ldr	r4, [pc, #84]	@ (8002824 <UART_TxISR_16BIT_FIFOEN+0x78>)
 80027ce:	4023      	ands	r3, r4
 80027d0:	608b      	str	r3, [r1, #8]
 80027d2:	f38c 8810 	msr	PRIMASK, ip
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80027d6:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027da:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80027de:	6802      	ldr	r2, [r0, #0]
 80027e0:	6813      	ldr	r3, [r2, #0]
 80027e2:	2040      	movs	r0, #64	@ 0x40
 80027e4:	4303      	orrs	r3, r0
 80027e6:	6013      	str	r3, [r2, #0]
 80027e8:	f381 8810 	msr	PRIMASK, r1
}
 80027ec:	e7e3      	b.n	80027b6 <UART_TxISR_16BIT_FIFOEN+0xa>
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80027ee:	3b01      	subs	r3, #1
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d0df      	beq.n	80027b6 <UART_TxISR_16BIT_FIFOEN+0xa>
      if (huart->TxXferCount == 0U)
 80027f6:	2256      	movs	r2, #86	@ 0x56
 80027f8:	5a82      	ldrh	r2, [r0, r2]
 80027fa:	2a00      	cmp	r2, #0
 80027fc:	d0df      	beq.n	80027be <UART_TxISR_16BIT_FIFOEN+0x12>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80027fe:	6801      	ldr	r1, [r0, #0]
 8002800:	69ca      	ldr	r2, [r1, #28]
 8002802:	0612      	lsls	r2, r2, #24
 8002804:	d5f3      	bpl.n	80027ee <UART_TxISR_16BIT_FIFOEN+0x42>
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002806:	6d02      	ldr	r2, [r0, #80]	@ 0x50
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8002808:	8812      	ldrh	r2, [r2, #0]
 800280a:	05d2      	lsls	r2, r2, #23
 800280c:	0dd2      	lsrs	r2, r2, #23
 800280e:	628a      	str	r2, [r1, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 8002810:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8002812:	3202      	adds	r2, #2
 8002814:	6502      	str	r2, [r0, #80]	@ 0x50
        huart->TxXferCount--;
 8002816:	2156      	movs	r1, #86	@ 0x56
 8002818:	5a42      	ldrh	r2, [r0, r1]
 800281a:	3a01      	subs	r2, #1
 800281c:	b292      	uxth	r2, r2
 800281e:	5242      	strh	r2, [r0, r1]
 8002820:	e7e5      	b.n	80027ee <UART_TxISR_16BIT_FIFOEN+0x42>
 8002822:	46c0      	nop			@ (mov r8, r8)
 8002824:	ff7fffff 	.word	0xff7fffff

08002828 <HAL_UART_Transmit_IT>:
{
 8002828:	b510      	push	{r4, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 800282a:	2388      	movs	r3, #136	@ 0x88
 800282c:	58c3      	ldr	r3, [r0, r3]
 800282e:	2b20      	cmp	r3, #32
 8002830:	d152      	bne.n	80028d8 <HAL_UART_Transmit_IT+0xb0>
    if ((pData == NULL) || (Size == 0U))
 8002832:	2900      	cmp	r1, #0
 8002834:	d052      	beq.n	80028dc <HAL_UART_Transmit_IT+0xb4>
 8002836:	2a00      	cmp	r2, #0
 8002838:	d052      	beq.n	80028e0 <HAL_UART_Transmit_IT+0xb8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800283a:	6883      	ldr	r3, [r0, #8]
 800283c:	2480      	movs	r4, #128	@ 0x80
 800283e:	0164      	lsls	r4, r4, #5
 8002840:	42a3      	cmp	r3, r4
 8002842:	d104      	bne.n	800284e <HAL_UART_Transmit_IT+0x26>
 8002844:	6904      	ldr	r4, [r0, #16]
 8002846:	2c00      	cmp	r4, #0
 8002848:	d101      	bne.n	800284e <HAL_UART_Transmit_IT+0x26>
      if ((((uint32_t)pData) & 1U) != 0U)
 800284a:	07cc      	lsls	r4, r1, #31
 800284c:	d44a      	bmi.n	80028e4 <HAL_UART_Transmit_IT+0xbc>
    huart->pTxBuffPtr  = pData;
 800284e:	6501      	str	r1, [r0, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8002850:	2154      	movs	r1, #84	@ 0x54
 8002852:	5242      	strh	r2, [r0, r1]
    huart->TxXferCount = Size;
 8002854:	3102      	adds	r1, #2
 8002856:	5242      	strh	r2, [r0, r1]
    huart->TxISR       = NULL;
 8002858:	2200      	movs	r2, #0
 800285a:	6782      	str	r2, [r0, #120]	@ 0x78
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800285c:	313a      	adds	r1, #58	@ 0x3a
 800285e:	5042      	str	r2, [r0, r1]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002860:	3288      	adds	r2, #136	@ 0x88
 8002862:	396f      	subs	r1, #111	@ 0x6f
 8002864:	5081      	str	r1, [r0, r2]
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8002866:	6e41      	ldr	r1, [r0, #100]	@ 0x64
 8002868:	2280      	movs	r2, #128	@ 0x80
 800286a:	0592      	lsls	r2, r2, #22
 800286c:	4291      	cmp	r1, r2
 800286e:	d013      	beq.n	8002898 <HAL_UART_Transmit_IT+0x70>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002870:	2280      	movs	r2, #128	@ 0x80
 8002872:	0152      	lsls	r2, r2, #5
 8002874:	4293      	cmp	r3, r2
 8002876:	d029      	beq.n	80028cc <HAL_UART_Transmit_IT+0xa4>
        huart->TxISR = UART_TxISR_8BIT;
 8002878:	4b1b      	ldr	r3, [pc, #108]	@ (80028e8 <HAL_UART_Transmit_IT+0xc0>)
 800287a:	6783      	str	r3, [r0, #120]	@ 0x78
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800287c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002880:	2301      	movs	r3, #1
 8002882:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8002886:	6802      	ldr	r2, [r0, #0]
 8002888:	6813      	ldr	r3, [r2, #0]
 800288a:	2080      	movs	r0, #128	@ 0x80
 800288c:	4303      	orrs	r3, r0
 800288e:	6013      	str	r3, [r2, #0]
 8002890:	f381 8810 	msr	PRIMASK, r1
    return HAL_OK;
 8002894:	2000      	movs	r0, #0
 8002896:	e020      	b.n	80028da <HAL_UART_Transmit_IT+0xb2>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002898:	2280      	movs	r2, #128	@ 0x80
 800289a:	0152      	lsls	r2, r2, #5
 800289c:	4293      	cmp	r3, r2
 800289e:	d00f      	beq.n	80028c0 <HAL_UART_Transmit_IT+0x98>
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80028a0:	4b12      	ldr	r3, [pc, #72]	@ (80028ec <HAL_UART_Transmit_IT+0xc4>)
 80028a2:	6783      	str	r3, [r0, #120]	@ 0x78
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80028a4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028a8:	2301      	movs	r3, #1
 80028aa:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80028ae:	6802      	ldr	r2, [r0, #0]
 80028b0:	6890      	ldr	r0, [r2, #8]
 80028b2:	2380      	movs	r3, #128	@ 0x80
 80028b4:	041b      	lsls	r3, r3, #16
 80028b6:	4303      	orrs	r3, r0
 80028b8:	6093      	str	r3, [r2, #8]
 80028ba:	f381 8810 	msr	PRIMASK, r1
}
 80028be:	e7e9      	b.n	8002894 <HAL_UART_Transmit_IT+0x6c>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028c0:	6903      	ldr	r3, [r0, #16]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d1ec      	bne.n	80028a0 <HAL_UART_Transmit_IT+0x78>
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80028c6:	4b0a      	ldr	r3, [pc, #40]	@ (80028f0 <HAL_UART_Transmit_IT+0xc8>)
 80028c8:	6783      	str	r3, [r0, #120]	@ 0x78
 80028ca:	e7eb      	b.n	80028a4 <HAL_UART_Transmit_IT+0x7c>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028cc:	6903      	ldr	r3, [r0, #16]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d1d2      	bne.n	8002878 <HAL_UART_Transmit_IT+0x50>
        huart->TxISR = UART_TxISR_16BIT;
 80028d2:	4b08      	ldr	r3, [pc, #32]	@ (80028f4 <HAL_UART_Transmit_IT+0xcc>)
 80028d4:	6783      	str	r3, [r0, #120]	@ 0x78
 80028d6:	e7d1      	b.n	800287c <HAL_UART_Transmit_IT+0x54>
    return HAL_BUSY;
 80028d8:	2002      	movs	r0, #2
}
 80028da:	bd10      	pop	{r4, pc}
      return HAL_ERROR;
 80028dc:	2001      	movs	r0, #1
 80028de:	e7fc      	b.n	80028da <HAL_UART_Transmit_IT+0xb2>
 80028e0:	2001      	movs	r0, #1
 80028e2:	e7fa      	b.n	80028da <HAL_UART_Transmit_IT+0xb2>
        return  HAL_ERROR;
 80028e4:	2001      	movs	r0, #1
 80028e6:	e7f8      	b.n	80028da <HAL_UART_Transmit_IT+0xb2>
 80028e8:	08002675 	.word	0x08002675
 80028ec:	08002735 	.word	0x08002735
 80028f0:	080027ad 	.word	0x080027ad
 80028f4:	080026d3 	.word	0x080026d3

080028f8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80028f8:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80028fa:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028fe:	2301      	movs	r3, #1
 8002900:	f383 8810 	msr	PRIMASK, r3
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002904:	6802      	ldr	r2, [r0, #0]
 8002906:	6813      	ldr	r3, [r2, #0]
 8002908:	2440      	movs	r4, #64	@ 0x40
 800290a:	43a3      	bics	r3, r4
 800290c:	6013      	str	r3, [r2, #0]
 800290e:	f381 8810 	msr	PRIMASK, r1

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002912:	2388      	movs	r3, #136	@ 0x88
 8002914:	2220      	movs	r2, #32
 8002916:	50c2      	str	r2, [r0, r3]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8002918:	2300      	movs	r3, #0
 800291a:	6783      	str	r3, [r0, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800291c:	f7fe f8dc 	bl	8000ad8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002920:	bd10      	pop	{r4, pc}

08002922 <HAL_UART_ErrorCallback>:
}
 8002922:	4770      	bx	lr

08002924 <UART_DMAAbortOnError>:
{
 8002924:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002926:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  huart->RxXferCount = 0U;
 8002928:	235e      	movs	r3, #94	@ 0x5e
 800292a:	2200      	movs	r2, #0
 800292c:	52c2      	strh	r2, [r0, r3]
  HAL_UART_ErrorCallback(huart);
 800292e:	f7ff fff8 	bl	8002922 <HAL_UART_ErrorCallback>
}
 8002932:	bd10      	pop	{r4, pc}

08002934 <HAL_UARTEx_RxEventCallback>:
}
 8002934:	4770      	bx	lr
	...

08002938 <HAL_UART_IRQHandler>:
{
 8002938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800293a:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800293c:	6802      	ldr	r2, [r0, #0]
 800293e:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002940:	6810      	ldr	r0, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002942:	6891      	ldr	r1, [r2, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002944:	4dbd      	ldr	r5, [pc, #756]	@ (8002c3c <HAL_UART_IRQHandler+0x304>)
  if (errorflags == 0U)
 8002946:	422b      	tst	r3, r5
 8002948:	d10b      	bne.n	8002962 <HAL_UART_IRQHandler+0x2a>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800294a:	069d      	lsls	r5, r3, #26
 800294c:	d511      	bpl.n	8002972 <HAL_UART_IRQHandler+0x3a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800294e:	0685      	lsls	r5, r0, #26
 8002950:	d401      	bmi.n	8002956 <HAL_UART_IRQHandler+0x1e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002952:	00cd      	lsls	r5, r1, #3
 8002954:	d50d      	bpl.n	8002972 <HAL_UART_IRQHandler+0x3a>
      if (huart->RxISR != NULL)
 8002956:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8002958:	2b00      	cmp	r3, #0
 800295a:	d02a      	beq.n	80029b2 <HAL_UART_IRQHandler+0x7a>
        huart->RxISR(huart);
 800295c:	0020      	movs	r0, r4
 800295e:	4798      	blx	r3
      return;
 8002960:	e027      	b.n	80029b2 <HAL_UART_IRQHandler+0x7a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002962:	4db7      	ldr	r5, [pc, #732]	@ (8002c40 <HAL_UART_IRQHandler+0x308>)
 8002964:	000e      	movs	r6, r1
 8002966:	402e      	ands	r6, r5
 8002968:	4229      	tst	r1, r5
 800296a:	d123      	bne.n	80029b4 <HAL_UART_IRQHandler+0x7c>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800296c:	4db5      	ldr	r5, [pc, #724]	@ (8002c44 <HAL_UART_IRQHandler+0x30c>)
 800296e:	4228      	tst	r0, r5
 8002970:	d120      	bne.n	80029b4 <HAL_UART_IRQHandler+0x7c>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002972:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
 8002974:	2d01      	cmp	r5, #1
 8002976:	d100      	bne.n	800297a <HAL_UART_IRQHandler+0x42>
 8002978:	e0a4      	b.n	8002ac4 <HAL_UART_IRQHandler+0x18c>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800297a:	02dd      	lsls	r5, r3, #11
 800297c:	d502      	bpl.n	8002984 <HAL_UART_IRQHandler+0x4c>
 800297e:	024d      	lsls	r5, r1, #9
 8002980:	d500      	bpl.n	8002984 <HAL_UART_IRQHandler+0x4c>
 8002982:	e149      	b.n	8002c18 <HAL_UART_IRQHandler+0x2e0>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002984:	061a      	lsls	r2, r3, #24
 8002986:	d505      	bpl.n	8002994 <HAL_UART_IRQHandler+0x5c>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002988:	0602      	lsls	r2, r0, #24
 800298a:	d500      	bpl.n	800298e <HAL_UART_IRQHandler+0x56>
 800298c:	e14b      	b.n	8002c26 <HAL_UART_IRQHandler+0x2ee>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800298e:	0209      	lsls	r1, r1, #8
 8002990:	d500      	bpl.n	8002994 <HAL_UART_IRQHandler+0x5c>
 8002992:	e148      	b.n	8002c26 <HAL_UART_IRQHandler+0x2ee>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002994:	065a      	lsls	r2, r3, #25
 8002996:	d502      	bpl.n	800299e <HAL_UART_IRQHandler+0x66>
 8002998:	0642      	lsls	r2, r0, #25
 800299a:	d500      	bpl.n	800299e <HAL_UART_IRQHandler+0x66>
 800299c:	e14a      	b.n	8002c34 <HAL_UART_IRQHandler+0x2fc>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800299e:	021a      	lsls	r2, r3, #8
 80029a0:	d502      	bpl.n	80029a8 <HAL_UART_IRQHandler+0x70>
 80029a2:	0042      	lsls	r2, r0, #1
 80029a4:	d500      	bpl.n	80029a8 <HAL_UART_IRQHandler+0x70>
 80029a6:	e157      	b.n	8002c58 <HAL_UART_IRQHandler+0x320>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80029a8:	01db      	lsls	r3, r3, #7
 80029aa:	d502      	bpl.n	80029b2 <HAL_UART_IRQHandler+0x7a>
 80029ac:	2800      	cmp	r0, #0
 80029ae:	da00      	bge.n	80029b2 <HAL_UART_IRQHandler+0x7a>
 80029b0:	e156      	b.n	8002c60 <HAL_UART_IRQHandler+0x328>
}
 80029b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80029b4:	07dd      	lsls	r5, r3, #31
 80029b6:	d507      	bpl.n	80029c8 <HAL_UART_IRQHandler+0x90>
 80029b8:	05c5      	lsls	r5, r0, #23
 80029ba:	d505      	bpl.n	80029c8 <HAL_UART_IRQHandler+0x90>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80029bc:	2701      	movs	r7, #1
 80029be:	6217      	str	r7, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80029c0:	2590      	movs	r5, #144	@ 0x90
 80029c2:	5962      	ldr	r2, [r4, r5]
 80029c4:	433a      	orrs	r2, r7
 80029c6:	5162      	str	r2, [r4, r5]
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80029c8:	079a      	lsls	r2, r3, #30
 80029ca:	d509      	bpl.n	80029e0 <HAL_UART_IRQHandler+0xa8>
 80029cc:	07ca      	lsls	r2, r1, #31
 80029ce:	d507      	bpl.n	80029e0 <HAL_UART_IRQHandler+0xa8>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80029d0:	6822      	ldr	r2, [r4, #0]
 80029d2:	2502      	movs	r5, #2
 80029d4:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80029d6:	358e      	adds	r5, #142	@ 0x8e
 80029d8:	5962      	ldr	r2, [r4, r5]
 80029da:	2704      	movs	r7, #4
 80029dc:	433a      	orrs	r2, r7
 80029de:	5162      	str	r2, [r4, r5]
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80029e0:	075a      	lsls	r2, r3, #29
 80029e2:	d509      	bpl.n	80029f8 <HAL_UART_IRQHandler+0xc0>
 80029e4:	07ca      	lsls	r2, r1, #31
 80029e6:	d507      	bpl.n	80029f8 <HAL_UART_IRQHandler+0xc0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80029e8:	6822      	ldr	r2, [r4, #0]
 80029ea:	2504      	movs	r5, #4
 80029ec:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80029ee:	358c      	adds	r5, #140	@ 0x8c
 80029f0:	5962      	ldr	r2, [r4, r5]
 80029f2:	2702      	movs	r7, #2
 80029f4:	433a      	orrs	r2, r7
 80029f6:	5162      	str	r2, [r4, r5]
    if (((isrflags & USART_ISR_ORE) != 0U)
 80029f8:	071a      	lsls	r2, r3, #28
 80029fa:	d50a      	bpl.n	8002a12 <HAL_UART_IRQHandler+0xda>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80029fc:	0682      	lsls	r2, r0, #26
 80029fe:	d401      	bmi.n	8002a04 <HAL_UART_IRQHandler+0xcc>
 8002a00:	2e00      	cmp	r6, #0
 8002a02:	d006      	beq.n	8002a12 <HAL_UART_IRQHandler+0xda>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002a04:	6822      	ldr	r2, [r4, #0]
 8002a06:	2608      	movs	r6, #8
 8002a08:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a0a:	2590      	movs	r5, #144	@ 0x90
 8002a0c:	5962      	ldr	r2, [r4, r5]
 8002a0e:	4332      	orrs	r2, r6
 8002a10:	5162      	str	r2, [r4, r5]
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002a12:	051a      	lsls	r2, r3, #20
 8002a14:	d50a      	bpl.n	8002a2c <HAL_UART_IRQHandler+0xf4>
 8002a16:	0142      	lsls	r2, r0, #5
 8002a18:	d508      	bpl.n	8002a2c <HAL_UART_IRQHandler+0xf4>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a1a:	6822      	ldr	r2, [r4, #0]
 8002a1c:	2580      	movs	r5, #128	@ 0x80
 8002a1e:	012d      	lsls	r5, r5, #4
 8002a20:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002a22:	2590      	movs	r5, #144	@ 0x90
 8002a24:	5962      	ldr	r2, [r4, r5]
 8002a26:	2620      	movs	r6, #32
 8002a28:	4332      	orrs	r2, r6
 8002a2a:	5162      	str	r2, [r4, r5]
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a2c:	2290      	movs	r2, #144	@ 0x90
 8002a2e:	58a2      	ldr	r2, [r4, r2]
 8002a30:	2a00      	cmp	r2, #0
 8002a32:	d0be      	beq.n	80029b2 <HAL_UART_IRQHandler+0x7a>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002a34:	069b      	lsls	r3, r3, #26
 8002a36:	d508      	bpl.n	8002a4a <HAL_UART_IRQHandler+0x112>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002a38:	0680      	lsls	r0, r0, #26
 8002a3a:	d401      	bmi.n	8002a40 <HAL_UART_IRQHandler+0x108>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002a3c:	00c9      	lsls	r1, r1, #3
 8002a3e:	d504      	bpl.n	8002a4a <HAL_UART_IRQHandler+0x112>
        if (huart->RxISR != NULL)
 8002a40:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d001      	beq.n	8002a4a <HAL_UART_IRQHandler+0x112>
          huart->RxISR(huart);
 8002a46:	0020      	movs	r0, r4
 8002a48:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8002a4a:	2390      	movs	r3, #144	@ 0x90
 8002a4c:	58e2      	ldr	r2, [r4, r3]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002a4e:	6823      	ldr	r3, [r4, #0]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	065b      	lsls	r3, r3, #25
 8002a54:	d402      	bmi.n	8002a5c <HAL_UART_IRQHandler+0x124>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002a56:	2328      	movs	r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002a58:	4213      	tst	r3, r2
 8002a5a:	d02c      	beq.n	8002ab6 <HAL_UART_IRQHandler+0x17e>
        UART_EndRxTransfer(huart);
 8002a5c:	0020      	movs	r0, r4
 8002a5e:	f7ff fdd7 	bl	8002610 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a62:	6823      	ldr	r3, [r4, #0]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	065b      	lsls	r3, r3, #25
 8002a68:	d521      	bpl.n	8002aae <HAL_UART_IRQHandler+0x176>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002a6a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a6e:	2301      	movs	r3, #1
 8002a70:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a74:	6822      	ldr	r2, [r4, #0]
 8002a76:	6893      	ldr	r3, [r2, #8]
 8002a78:	2040      	movs	r0, #64	@ 0x40
 8002a7a:	4383      	bics	r3, r0
 8002a7c:	6093      	str	r3, [r2, #8]
 8002a7e:	f381 8810 	msr	PRIMASK, r1
          if (huart->hdmarx != NULL)
 8002a82:	2380      	movs	r3, #128	@ 0x80
 8002a84:	58e3      	ldr	r3, [r4, r3]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d00d      	beq.n	8002aa6 <HAL_UART_IRQHandler+0x16e>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002a8a:	4a6f      	ldr	r2, [pc, #444]	@ (8002c48 <HAL_UART_IRQHandler+0x310>)
 8002a8c:	639a      	str	r2, [r3, #56]	@ 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002a8e:	2380      	movs	r3, #128	@ 0x80
 8002a90:	58e0      	ldr	r0, [r4, r3]
 8002a92:	f7fe fe81 	bl	8001798 <HAL_DMA_Abort_IT>
 8002a96:	2800      	cmp	r0, #0
 8002a98:	d100      	bne.n	8002a9c <HAL_UART_IRQHandler+0x164>
 8002a9a:	e78a      	b.n	80029b2 <HAL_UART_IRQHandler+0x7a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002a9c:	2380      	movs	r3, #128	@ 0x80
 8002a9e:	58e0      	ldr	r0, [r4, r3]
 8002aa0:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8002aa2:	4798      	blx	r3
 8002aa4:	e785      	b.n	80029b2 <HAL_UART_IRQHandler+0x7a>
            HAL_UART_ErrorCallback(huart);
 8002aa6:	0020      	movs	r0, r4
 8002aa8:	f7ff ff3b 	bl	8002922 <HAL_UART_ErrorCallback>
 8002aac:	e781      	b.n	80029b2 <HAL_UART_IRQHandler+0x7a>
          HAL_UART_ErrorCallback(huart);
 8002aae:	0020      	movs	r0, r4
 8002ab0:	f7ff ff37 	bl	8002922 <HAL_UART_ErrorCallback>
 8002ab4:	e77d      	b.n	80029b2 <HAL_UART_IRQHandler+0x7a>
        HAL_UART_ErrorCallback(huart);
 8002ab6:	0020      	movs	r0, r4
 8002ab8:	f7ff ff33 	bl	8002922 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002abc:	2390      	movs	r3, #144	@ 0x90
 8002abe:	2200      	movs	r2, #0
 8002ac0:	50e2      	str	r2, [r4, r3]
    return;
 8002ac2:	e776      	b.n	80029b2 <HAL_UART_IRQHandler+0x7a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002ac4:	06dd      	lsls	r5, r3, #27
 8002ac6:	d400      	bmi.n	8002aca <HAL_UART_IRQHandler+0x192>
 8002ac8:	e757      	b.n	800297a <HAL_UART_IRQHandler+0x42>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002aca:	06c5      	lsls	r5, r0, #27
 8002acc:	d400      	bmi.n	8002ad0 <HAL_UART_IRQHandler+0x198>
 8002ace:	e754      	b.n	800297a <HAL_UART_IRQHandler+0x42>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002ad0:	2310      	movs	r3, #16
 8002ad2:	6213      	str	r3, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ad4:	6823      	ldr	r3, [r4, #0]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	065b      	lsls	r3, r3, #25
 8002ada:	d562      	bpl.n	8002ba2 <HAL_UART_IRQHandler+0x26a>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002adc:	2380      	movs	r3, #128	@ 0x80
 8002ade:	58e1      	ldr	r1, [r4, r3]
 8002ae0:	680a      	ldr	r2, [r1, #0]
 8002ae2:	6853      	ldr	r3, [r2, #4]
 8002ae4:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d04c      	beq.n	8002b84 <HAL_UART_IRQHandler+0x24c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002aea:	205c      	movs	r0, #92	@ 0x5c
 8002aec:	5a20      	ldrh	r0, [r4, r0]
 8002aee:	4298      	cmp	r0, r3
 8002af0:	d948      	bls.n	8002b84 <HAL_UART_IRQHandler+0x24c>
        huart->RxXferCount = nb_remaining_rx_data;
 8002af2:	225e      	movs	r2, #94	@ 0x5e
 8002af4:	52a3      	strh	r3, [r4, r2]
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002af6:	680b      	ldr	r3, [r1, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	069b      	lsls	r3, r3, #26
 8002afc:	d50b      	bpl.n	8002b16 <HAL_UART_IRQHandler+0x1de>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002afe:	2302      	movs	r3, #2
 8002b00:	6723      	str	r3, [r4, #112]	@ 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002b02:	335a      	adds	r3, #90	@ 0x5a
 8002b04:	5ae1      	ldrh	r1, [r4, r3]
 8002b06:	3302      	adds	r3, #2
 8002b08:	5ae3      	ldrh	r3, [r4, r3]
 8002b0a:	1ac9      	subs	r1, r1, r3
 8002b0c:	b289      	uxth	r1, r1
 8002b0e:	0020      	movs	r0, r4
 8002b10:	f7ff ff10 	bl	8002934 <HAL_UARTEx_RxEventCallback>
 8002b14:	e74d      	b.n	80029b2 <HAL_UART_IRQHandler+0x7a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002b16:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b20:	6821      	ldr	r1, [r4, #0]
 8002b22:	680a      	ldr	r2, [r1, #0]
 8002b24:	4d49      	ldr	r5, [pc, #292]	@ (8002c4c <HAL_UART_IRQHandler+0x314>)
 8002b26:	402a      	ands	r2, r5
 8002b28:	600a      	str	r2, [r1, #0]
 8002b2a:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002b2e:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b32:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b36:	6821      	ldr	r1, [r4, #0]
 8002b38:	688a      	ldr	r2, [r1, #8]
 8002b3a:	439a      	bics	r2, r3
 8002b3c:	608a      	str	r2, [r1, #8]
 8002b3e:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002b42:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b46:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b4a:	6821      	ldr	r1, [r4, #0]
 8002b4c:	688a      	ldr	r2, [r1, #8]
 8002b4e:	3542      	adds	r5, #66	@ 0x42
 8002b50:	35ff      	adds	r5, #255	@ 0xff
 8002b52:	43aa      	bics	r2, r5
 8002b54:	608a      	str	r2, [r1, #8]
 8002b56:	f380 8810 	msr	PRIMASK, r0
          huart->RxState = HAL_UART_STATE_READY;
 8002b5a:	228c      	movs	r2, #140	@ 0x8c
 8002b5c:	2120      	movs	r1, #32
 8002b5e:	50a1      	str	r1, [r4, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b60:	2200      	movs	r2, #0
 8002b62:	66e2      	str	r2, [r4, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002b64:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b68:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b6c:	6822      	ldr	r2, [r4, #0]
 8002b6e:	6813      	ldr	r3, [r2, #0]
 8002b70:	2010      	movs	r0, #16
 8002b72:	4383      	bics	r3, r0
 8002b74:	6013      	str	r3, [r2, #0]
 8002b76:	f381 8810 	msr	PRIMASK, r1
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002b7a:	2380      	movs	r3, #128	@ 0x80
 8002b7c:	58e0      	ldr	r0, [r4, r3]
 8002b7e:	f7fe fdcb 	bl	8001718 <HAL_DMA_Abort>
 8002b82:	e7bc      	b.n	8002afe <HAL_UART_IRQHandler+0x1c6>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8002b84:	215c      	movs	r1, #92	@ 0x5c
 8002b86:	5a61      	ldrh	r1, [r4, r1]
 8002b88:	4299      	cmp	r1, r3
 8002b8a:	d000      	beq.n	8002b8e <HAL_UART_IRQHandler+0x256>
 8002b8c:	e711      	b.n	80029b2 <HAL_UART_IRQHandler+0x7a>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002b8e:	6813      	ldr	r3, [r2, #0]
 8002b90:	069b      	lsls	r3, r3, #26
 8002b92:	d400      	bmi.n	8002b96 <HAL_UART_IRQHandler+0x25e>
 8002b94:	e70d      	b.n	80029b2 <HAL_UART_IRQHandler+0x7a>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002b96:	2302      	movs	r3, #2
 8002b98:	6723      	str	r3, [r4, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002b9a:	0020      	movs	r0, r4
 8002b9c:	f7ff feca 	bl	8002934 <HAL_UARTEx_RxEventCallback>
      return;
 8002ba0:	e707      	b.n	80029b2 <HAL_UART_IRQHandler+0x7a>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002ba2:	235c      	movs	r3, #92	@ 0x5c
 8002ba4:	5ae3      	ldrh	r3, [r4, r3]
 8002ba6:	225e      	movs	r2, #94	@ 0x5e
 8002ba8:	5aa1      	ldrh	r1, [r4, r2]
 8002baa:	1a59      	subs	r1, r3, r1
 8002bac:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8002bae:	5aa3      	ldrh	r3, [r4, r2]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d100      	bne.n	8002bb6 <HAL_UART_IRQHandler+0x27e>
 8002bb4:	e6fd      	b.n	80029b2 <HAL_UART_IRQHandler+0x7a>
          && (nb_rx_data > 0U))
 8002bb6:	2900      	cmp	r1, #0
 8002bb8:	d100      	bne.n	8002bbc <HAL_UART_IRQHandler+0x284>
 8002bba:	e6fa      	b.n	80029b2 <HAL_UART_IRQHandler+0x7a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002bbc:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002bc6:	6820      	ldr	r0, [r4, #0]
 8002bc8:	6802      	ldr	r2, [r0, #0]
 8002bca:	4e21      	ldr	r6, [pc, #132]	@ (8002c50 <HAL_UART_IRQHandler+0x318>)
 8002bcc:	4032      	ands	r2, r6
 8002bce:	6002      	str	r2, [r0, #0]
 8002bd0:	f385 8810 	msr	PRIMASK, r5
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002bd4:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bd8:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002bdc:	6820      	ldr	r0, [r4, #0]
 8002bde:	6882      	ldr	r2, [r0, #8]
 8002be0:	4e1c      	ldr	r6, [pc, #112]	@ (8002c54 <HAL_UART_IRQHandler+0x31c>)
 8002be2:	4032      	ands	r2, r6
 8002be4:	6082      	str	r2, [r0, #8]
 8002be6:	f385 8810 	msr	PRIMASK, r5
        huart->RxState = HAL_UART_STATE_READY;
 8002bea:	228c      	movs	r2, #140	@ 0x8c
 8002bec:	2020      	movs	r0, #32
 8002bee:	50a0      	str	r0, [r4, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	66e2      	str	r2, [r4, #108]	@ 0x6c
        huart->RxISR = NULL;
 8002bf4:	6762      	str	r2, [r4, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002bf6:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bfa:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bfe:	6822      	ldr	r2, [r4, #0]
 8002c00:	6813      	ldr	r3, [r2, #0]
 8002c02:	2510      	movs	r5, #16
 8002c04:	43ab      	bics	r3, r5
 8002c06:	6013      	str	r3, [r2, #0]
 8002c08:	f380 8810 	msr	PRIMASK, r0
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	6723      	str	r3, [r4, #112]	@ 0x70
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002c10:	0020      	movs	r0, r4
 8002c12:	f7ff fe8f 	bl	8002934 <HAL_UARTEx_RxEventCallback>
      return;
 8002c16:	e6cc      	b.n	80029b2 <HAL_UART_IRQHandler+0x7a>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002c18:	2380      	movs	r3, #128	@ 0x80
 8002c1a:	035b      	lsls	r3, r3, #13
 8002c1c:	6213      	str	r3, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8002c1e:	0020      	movs	r0, r4
 8002c20:	f000 fde9 	bl	80037f6 <HAL_UARTEx_WakeupCallback>
    return;
 8002c24:	e6c5      	b.n	80029b2 <HAL_UART_IRQHandler+0x7a>
    if (huart->TxISR != NULL)
 8002c26:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d100      	bne.n	8002c2e <HAL_UART_IRQHandler+0x2f6>
 8002c2c:	e6c1      	b.n	80029b2 <HAL_UART_IRQHandler+0x7a>
      huart->TxISR(huart);
 8002c2e:	0020      	movs	r0, r4
 8002c30:	4798      	blx	r3
    return;
 8002c32:	e6be      	b.n	80029b2 <HAL_UART_IRQHandler+0x7a>
    UART_EndTransmit_IT(huart);
 8002c34:	0020      	movs	r0, r4
 8002c36:	f7ff fe5f 	bl	80028f8 <UART_EndTransmit_IT>
    return;
 8002c3a:	e6ba      	b.n	80029b2 <HAL_UART_IRQHandler+0x7a>
 8002c3c:	0000080f 	.word	0x0000080f
 8002c40:	10000001 	.word	0x10000001
 8002c44:	04000120 	.word	0x04000120
 8002c48:	08002925 	.word	0x08002925
 8002c4c:	fffffeff 	.word	0xfffffeff
 8002c50:	fffffedf 	.word	0xfffffedf
 8002c54:	effffffe 	.word	0xeffffffe
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002c58:	0020      	movs	r0, r4
 8002c5a:	f000 fdce 	bl	80037fa <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 8002c5e:	e6a8      	b.n	80029b2 <HAL_UART_IRQHandler+0x7a>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002c60:	0020      	movs	r0, r4
 8002c62:	f000 fdc9 	bl	80037f8 <HAL_UARTEx_RxFifoFullCallback>
    return;
 8002c66:	e6a4      	b.n	80029b2 <HAL_UART_IRQHandler+0x7a>

08002c68 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8002c68:	b510      	push	{r4, lr}
  uint16_t uhMask = huart->Mask;
 8002c6a:	2360      	movs	r3, #96	@ 0x60
 8002c6c:	5ac3      	ldrh	r3, [r0, r3]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002c6e:	228c      	movs	r2, #140	@ 0x8c
 8002c70:	5882      	ldr	r2, [r0, r2]
 8002c72:	2a22      	cmp	r2, #34	@ 0x22
 8002c74:	d005      	beq.n	8002c82 <UART_RxISR_8BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002c76:	6802      	ldr	r2, [r0, #0]
 8002c78:	6993      	ldr	r3, [r2, #24]
 8002c7a:	2108      	movs	r1, #8
 8002c7c:	430b      	orrs	r3, r1
 8002c7e:	6193      	str	r3, [r2, #24]
  }
}
 8002c80:	bd10      	pop	{r4, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002c82:	6802      	ldr	r2, [r0, #0]
 8002c84:	6a52      	ldr	r2, [r2, #36]	@ 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	700b      	strb	r3, [r1, #0]
    huart->pRxBuffPtr++;
 8002c8e:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8002c90:	3301      	adds	r3, #1
 8002c92:	6583      	str	r3, [r0, #88]	@ 0x58
    huart->RxXferCount--;
 8002c94:	225e      	movs	r2, #94	@ 0x5e
 8002c96:	5a83      	ldrh	r3, [r0, r2]
 8002c98:	3b01      	subs	r3, #1
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	5283      	strh	r3, [r0, r2]
    if (huart->RxXferCount == 0U)
 8002c9e:	5a83      	ldrh	r3, [r0, r2]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d1ed      	bne.n	8002c80 <UART_RxISR_8BIT+0x18>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002ca4:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ca8:	3a5d      	subs	r2, #93	@ 0x5d
 8002caa:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002cae:	6801      	ldr	r1, [r0, #0]
 8002cb0:	680b      	ldr	r3, [r1, #0]
 8002cb2:	4c21      	ldr	r4, [pc, #132]	@ (8002d38 <UART_RxISR_8BIT+0xd0>)
 8002cb4:	4023      	ands	r3, r4
 8002cb6:	600b      	str	r3, [r1, #0]
 8002cb8:	f38c 8810 	msr	PRIMASK, ip
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002cbc:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cc0:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cc4:	6801      	ldr	r1, [r0, #0]
 8002cc6:	688b      	ldr	r3, [r1, #8]
 8002cc8:	4393      	bics	r3, r2
 8002cca:	608b      	str	r3, [r1, #8]
 8002ccc:	f38c 8810 	msr	PRIMASK, ip
      huart->RxState = HAL_UART_STATE_READY;
 8002cd0:	238c      	movs	r3, #140	@ 0x8c
 8002cd2:	321f      	adds	r2, #31
 8002cd4:	50c2      	str	r2, [r0, r3]
      huart->RxISR = NULL;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	6743      	str	r3, [r0, #116]	@ 0x74
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002cda:	6703      	str	r3, [r0, #112]	@ 0x70
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002cdc:	6803      	ldr	r3, [r0, #0]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	021b      	lsls	r3, r3, #8
 8002ce2:	d50b      	bpl.n	8002cfc <UART_RxISR_8BIT+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002ce4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ce8:	2301      	movs	r3, #1
 8002cea:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002cee:	6802      	ldr	r2, [r0, #0]
 8002cf0:	6813      	ldr	r3, [r2, #0]
 8002cf2:	4c12      	ldr	r4, [pc, #72]	@ (8002d3c <UART_RxISR_8BIT+0xd4>)
 8002cf4:	4023      	ands	r3, r4
 8002cf6:	6013      	str	r3, [r2, #0]
 8002cf8:	f381 8810 	msr	PRIMASK, r1
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cfc:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d117      	bne.n	8002d32 <UART_RxISR_8BIT+0xca>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d02:	2300      	movs	r3, #0
 8002d04:	66c3      	str	r3, [r0, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002d06:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d10:	6801      	ldr	r1, [r0, #0]
 8002d12:	680b      	ldr	r3, [r1, #0]
 8002d14:	2210      	movs	r2, #16
 8002d16:	4393      	bics	r3, r2
 8002d18:	600b      	str	r3, [r1, #0]
 8002d1a:	f384 8810 	msr	PRIMASK, r4
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8002d1e:	6803      	ldr	r3, [r0, #0]
 8002d20:	69d9      	ldr	r1, [r3, #28]
 8002d22:	420a      	tst	r2, r1
 8002d24:	d000      	beq.n	8002d28 <UART_RxISR_8BIT+0xc0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002d26:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002d28:	235c      	movs	r3, #92	@ 0x5c
 8002d2a:	5ac1      	ldrh	r1, [r0, r3]
 8002d2c:	f7ff fe02 	bl	8002934 <HAL_UARTEx_RxEventCallback>
 8002d30:	e7a6      	b.n	8002c80 <UART_RxISR_8BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 8002d32:	f7fd fed3 	bl	8000adc <HAL_UART_RxCpltCallback>
 8002d36:	e7a3      	b.n	8002c80 <UART_RxISR_8BIT+0x18>
 8002d38:	fffffedf 	.word	0xfffffedf
 8002d3c:	fbffffff 	.word	0xfbffffff

08002d40 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8002d40:	b510      	push	{r4, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8002d42:	2360      	movs	r3, #96	@ 0x60
 8002d44:	5ac2      	ldrh	r2, [r0, r3]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002d46:	332c      	adds	r3, #44	@ 0x2c
 8002d48:	58c3      	ldr	r3, [r0, r3]
 8002d4a:	2b22      	cmp	r3, #34	@ 0x22
 8002d4c:	d005      	beq.n	8002d5a <UART_RxISR_16BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002d4e:	6802      	ldr	r2, [r0, #0]
 8002d50:	6993      	ldr	r3, [r2, #24]
 8002d52:	2108      	movs	r1, #8
 8002d54:	430b      	orrs	r3, r1
 8002d56:	6193      	str	r3, [r2, #24]
  }
}
 8002d58:	bd10      	pop	{r4, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002d5a:	6803      	ldr	r3, [r0, #0]
 8002d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8002d5e:	6d81      	ldr	r1, [r0, #88]	@ 0x58
    *tmp = (uint16_t)(uhdata & uhMask);
 8002d60:	4013      	ands	r3, r2
 8002d62:	800b      	strh	r3, [r1, #0]
    huart->pRxBuffPtr += 2U;
 8002d64:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8002d66:	3302      	adds	r3, #2
 8002d68:	6583      	str	r3, [r0, #88]	@ 0x58
    huart->RxXferCount--;
 8002d6a:	225e      	movs	r2, #94	@ 0x5e
 8002d6c:	5a83      	ldrh	r3, [r0, r2]
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	5283      	strh	r3, [r0, r2]
    if (huart->RxXferCount == 0U)
 8002d74:	5a83      	ldrh	r3, [r0, r2]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d1ee      	bne.n	8002d58 <UART_RxISR_16BIT+0x18>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002d7a:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d7e:	3a5d      	subs	r2, #93	@ 0x5d
 8002d80:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002d84:	6801      	ldr	r1, [r0, #0]
 8002d86:	680b      	ldr	r3, [r1, #0]
 8002d88:	4c21      	ldr	r4, [pc, #132]	@ (8002e10 <UART_RxISR_16BIT+0xd0>)
 8002d8a:	4023      	ands	r3, r4
 8002d8c:	600b      	str	r3, [r1, #0]
 8002d8e:	f38c 8810 	msr	PRIMASK, ip
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002d92:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d96:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d9a:	6801      	ldr	r1, [r0, #0]
 8002d9c:	688b      	ldr	r3, [r1, #8]
 8002d9e:	4393      	bics	r3, r2
 8002da0:	608b      	str	r3, [r1, #8]
 8002da2:	f38c 8810 	msr	PRIMASK, ip
      huart->RxState = HAL_UART_STATE_READY;
 8002da6:	238c      	movs	r3, #140	@ 0x8c
 8002da8:	321f      	adds	r2, #31
 8002daa:	50c2      	str	r2, [r0, r3]
      huart->RxISR = NULL;
 8002dac:	2300      	movs	r3, #0
 8002dae:	6743      	str	r3, [r0, #116]	@ 0x74
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002db0:	6703      	str	r3, [r0, #112]	@ 0x70
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002db2:	6803      	ldr	r3, [r0, #0]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	021b      	lsls	r3, r3, #8
 8002db8:	d50b      	bpl.n	8002dd2 <UART_RxISR_16BIT+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002dba:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002dc4:	6802      	ldr	r2, [r0, #0]
 8002dc6:	6813      	ldr	r3, [r2, #0]
 8002dc8:	4c12      	ldr	r4, [pc, #72]	@ (8002e14 <UART_RxISR_16BIT+0xd4>)
 8002dca:	4023      	ands	r3, r4
 8002dcc:	6013      	str	r3, [r2, #0]
 8002dce:	f381 8810 	msr	PRIMASK, r1
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002dd2:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d117      	bne.n	8002e08 <UART_RxISR_16BIT+0xc8>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	66c3      	str	r3, [r0, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002ddc:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002de0:	3301      	adds	r3, #1
 8002de2:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002de6:	6801      	ldr	r1, [r0, #0]
 8002de8:	680b      	ldr	r3, [r1, #0]
 8002dea:	2210      	movs	r2, #16
 8002dec:	4393      	bics	r3, r2
 8002dee:	600b      	str	r3, [r1, #0]
 8002df0:	f384 8810 	msr	PRIMASK, r4
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8002df4:	6803      	ldr	r3, [r0, #0]
 8002df6:	69d9      	ldr	r1, [r3, #28]
 8002df8:	420a      	tst	r2, r1
 8002dfa:	d000      	beq.n	8002dfe <UART_RxISR_16BIT+0xbe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002dfc:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002dfe:	235c      	movs	r3, #92	@ 0x5c
 8002e00:	5ac1      	ldrh	r1, [r0, r3]
 8002e02:	f7ff fd97 	bl	8002934 <HAL_UARTEx_RxEventCallback>
 8002e06:	e7a7      	b.n	8002d58 <UART_RxISR_16BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 8002e08:	f7fd fe68 	bl	8000adc <HAL_UART_RxCpltCallback>
 8002e0c:	e7a4      	b.n	8002d58 <UART_RxISR_16BIT+0x18>
 8002e0e:	46c0      	nop			@ (mov r8, r8)
 8002e10:	fffffedf 	.word	0xfffffedf
 8002e14:	fbffffff 	.word	0xfbffffff

08002e18 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8002e18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e1a:	46c6      	mov	lr, r8
 8002e1c:	b500      	push	{lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	0004      	movs	r4, r0
  uint16_t  uhMask = huart->Mask;
 8002e22:	2360      	movs	r3, #96	@ 0x60
 8002e24:	5ac3      	ldrh	r3, [r0, r3]
 8002e26:	9301      	str	r3, [sp, #4]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8002e28:	6803      	ldr	r3, [r0, #0]
 8002e2a:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	4690      	mov	r8, r2
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8002e30:	689f      	ldr	r7, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002e32:	228c      	movs	r2, #140	@ 0x8c
 8002e34:	5882      	ldr	r2, [r0, r2]
 8002e36:	2a22      	cmp	r2, #34	@ 0x22
 8002e38:	d007      	beq.n	8002e4a <UART_RxISR_8BIT_FIFOEN+0x32>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002e3a:	699a      	ldr	r2, [r3, #24]
 8002e3c:	2108      	movs	r1, #8
 8002e3e:	430a      	orrs	r2, r1
 8002e40:	619a      	str	r2, [r3, #24]
  }
}
 8002e42:	b002      	add	sp, #8
 8002e44:	bc80      	pop	{r7}
 8002e46:	46b8      	mov	r8, r7
 8002e48:	bdf0      	pop	{r4, r5, r6, r7, pc}
    nb_rx_data = huart->NbRxDataToProcess;
 8002e4a:	2368      	movs	r3, #104	@ 0x68
 8002e4c:	5ac6      	ldrh	r6, [r0, r3]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8002e4e:	e007      	b.n	8002e60 <UART_RxISR_8BIT_FIFOEN+0x48>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e50:	2390      	movs	r3, #144	@ 0x90
 8002e52:	58e3      	ldr	r3, [r4, r3]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d140      	bne.n	8002eda <UART_RxISR_8BIT_FIFOEN+0xc2>
      if (huart->RxXferCount == 0U)
 8002e58:	235e      	movs	r3, #94	@ 0x5e
 8002e5a:	5ae3      	ldrh	r3, [r4, r3]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d043      	beq.n	8002ee8 <UART_RxISR_8BIT_FIFOEN+0xd0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8002e60:	2e00      	cmp	r6, #0
 8002e62:	d100      	bne.n	8002e66 <UART_RxISR_8BIT_FIFOEN+0x4e>
 8002e64:	e088      	b.n	8002f78 <UART_RxISR_8BIT_FIFOEN+0x160>
 8002e66:	06ad      	lsls	r5, r5, #26
 8002e68:	d400      	bmi.n	8002e6c <UART_RxISR_8BIT_FIFOEN+0x54>
 8002e6a:	e085      	b.n	8002f78 <UART_RxISR_8BIT_FIFOEN+0x160>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002e6c:	6823      	ldr	r3, [r4, #0]
 8002e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002e70:	466a      	mov	r2, sp
 8002e72:	7912      	ldrb	r2, [r2, #4]
 8002e74:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8002e76:	4013      	ands	r3, r2
 8002e78:	700b      	strb	r3, [r1, #0]
      huart->pRxBuffPtr++;
 8002e7a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	65a3      	str	r3, [r4, #88]	@ 0x58
      huart->RxXferCount--;
 8002e80:	225e      	movs	r2, #94	@ 0x5e
 8002e82:	5aa3      	ldrh	r3, [r4, r2]
 8002e84:	3b01      	subs	r3, #1
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	52a3      	strh	r3, [r4, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8002e8a:	6823      	ldr	r3, [r4, #0]
 8002e8c:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8002e8e:	076a      	lsls	r2, r5, #29
 8002e90:	d0e2      	beq.n	8002e58 <UART_RxISR_8BIT_FIFOEN+0x40>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002e92:	07ea      	lsls	r2, r5, #31
 8002e94:	d508      	bpl.n	8002ea8 <UART_RxISR_8BIT_FIFOEN+0x90>
 8002e96:	4642      	mov	r2, r8
 8002e98:	05d2      	lsls	r2, r2, #23
 8002e9a:	d505      	bpl.n	8002ea8 <UART_RxISR_8BIT_FIFOEN+0x90>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002e9c:	2101      	movs	r1, #1
 8002e9e:	6219      	str	r1, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ea0:	2290      	movs	r2, #144	@ 0x90
 8002ea2:	58a3      	ldr	r3, [r4, r2]
 8002ea4:	430b      	orrs	r3, r1
 8002ea6:	50a3      	str	r3, [r4, r2]
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002ea8:	07ab      	lsls	r3, r5, #30
 8002eaa:	d509      	bpl.n	8002ec0 <UART_RxISR_8BIT_FIFOEN+0xa8>
 8002eac:	07fb      	lsls	r3, r7, #31
 8002eae:	d507      	bpl.n	8002ec0 <UART_RxISR_8BIT_FIFOEN+0xa8>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002eb0:	6823      	ldr	r3, [r4, #0]
 8002eb2:	2202      	movs	r2, #2
 8002eb4:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002eb6:	328e      	adds	r2, #142	@ 0x8e
 8002eb8:	58a3      	ldr	r3, [r4, r2]
 8002eba:	2104      	movs	r1, #4
 8002ebc:	430b      	orrs	r3, r1
 8002ebe:	50a3      	str	r3, [r4, r2]
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002ec0:	076b      	lsls	r3, r5, #29
 8002ec2:	d5c5      	bpl.n	8002e50 <UART_RxISR_8BIT_FIFOEN+0x38>
 8002ec4:	07fb      	lsls	r3, r7, #31
 8002ec6:	d5c3      	bpl.n	8002e50 <UART_RxISR_8BIT_FIFOEN+0x38>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002ec8:	6823      	ldr	r3, [r4, #0]
 8002eca:	2204      	movs	r2, #4
 8002ecc:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ece:	328c      	adds	r2, #140	@ 0x8c
 8002ed0:	58a3      	ldr	r3, [r4, r2]
 8002ed2:	2102      	movs	r1, #2
 8002ed4:	430b      	orrs	r3, r1
 8002ed6:	50a3      	str	r3, [r4, r2]
 8002ed8:	e7ba      	b.n	8002e50 <UART_RxISR_8BIT_FIFOEN+0x38>
          HAL_UART_ErrorCallback(huart);
 8002eda:	0020      	movs	r0, r4
 8002edc:	f7ff fd21 	bl	8002922 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ee0:	2390      	movs	r3, #144	@ 0x90
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	50e2      	str	r2, [r4, r3]
 8002ee6:	e7b7      	b.n	8002e58 <UART_RxISR_8BIT_FIFOEN+0x40>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002ee8:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eec:	2201      	movs	r2, #1
 8002eee:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ef2:	6821      	ldr	r1, [r4, #0]
 8002ef4:	680b      	ldr	r3, [r1, #0]
 8002ef6:	4d35      	ldr	r5, [pc, #212]	@ (8002fcc <UART_RxISR_8BIT_FIFOEN+0x1b4>)
 8002ef8:	402b      	ands	r3, r5
 8002efa:	600b      	str	r3, [r1, #0]
 8002efc:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002f00:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f04:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002f08:	6822      	ldr	r2, [r4, #0]
 8002f0a:	6893      	ldr	r3, [r2, #8]
 8002f0c:	4830      	ldr	r0, [pc, #192]	@ (8002fd0 <UART_RxISR_8BIT_FIFOEN+0x1b8>)
 8002f0e:	4003      	ands	r3, r0
 8002f10:	6093      	str	r3, [r2, #8]
 8002f12:	f381 8810 	msr	PRIMASK, r1
        huart->RxState = HAL_UART_STATE_READY;
 8002f16:	238c      	movs	r3, #140	@ 0x8c
 8002f18:	2220      	movs	r2, #32
 8002f1a:	50e2      	str	r2, [r4, r3]
        huart->RxISR = NULL;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	6763      	str	r3, [r4, #116]	@ 0x74
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f20:	6723      	str	r3, [r4, #112]	@ 0x70
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002f22:	6823      	ldr	r3, [r4, #0]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	021b      	lsls	r3, r3, #8
 8002f28:	d50b      	bpl.n	8002f42 <UART_RxISR_8BIT_FIFOEN+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002f2a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f2e:	2301      	movs	r3, #1
 8002f30:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002f34:	6822      	ldr	r2, [r4, #0]
 8002f36:	6813      	ldr	r3, [r2, #0]
 8002f38:	4826      	ldr	r0, [pc, #152]	@ (8002fd4 <UART_RxISR_8BIT_FIFOEN+0x1bc>)
 8002f3a:	4003      	ands	r3, r0
 8002f3c:	6013      	str	r3, [r2, #0]
 8002f3e:	f381 8810 	msr	PRIMASK, r1
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f42:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d13c      	bne.n	8002fc2 <UART_RxISR_8BIT_FIFOEN+0x1aa>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	66e3      	str	r3, [r4, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002f4c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f50:	3301      	adds	r3, #1
 8002f52:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f56:	6821      	ldr	r1, [r4, #0]
 8002f58:	680b      	ldr	r3, [r1, #0]
 8002f5a:	2210      	movs	r2, #16
 8002f5c:	4393      	bics	r3, r2
 8002f5e:	600b      	str	r3, [r1, #0]
 8002f60:	f380 8810 	msr	PRIMASK, r0
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8002f64:	6823      	ldr	r3, [r4, #0]
 8002f66:	69d9      	ldr	r1, [r3, #28]
 8002f68:	420a      	tst	r2, r1
 8002f6a:	d000      	beq.n	8002f6e <UART_RxISR_8BIT_FIFOEN+0x156>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002f6c:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002f6e:	235c      	movs	r3, #92	@ 0x5c
 8002f70:	5ae1      	ldrh	r1, [r4, r3]
 8002f72:	0020      	movs	r0, r4
 8002f74:	f7ff fcde 	bl	8002934 <HAL_UARTEx_RxEventCallback>
    rxdatacount = huart->RxXferCount;
 8002f78:	235e      	movs	r3, #94	@ 0x5e
 8002f7a:	5ae3      	ldrh	r3, [r4, r3]
 8002f7c:	b29a      	uxth	r2, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d100      	bne.n	8002f84 <UART_RxISR_8BIT_FIFOEN+0x16c>
 8002f82:	e75e      	b.n	8002e42 <UART_RxISR_8BIT_FIFOEN+0x2a>
 8002f84:	2368      	movs	r3, #104	@ 0x68
 8002f86:	5ae3      	ldrh	r3, [r4, r3]
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d800      	bhi.n	8002f8e <UART_RxISR_8BIT_FIFOEN+0x176>
 8002f8c:	e759      	b.n	8002e42 <UART_RxISR_8BIT_FIFOEN+0x2a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002f8e:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f92:	2201      	movs	r2, #1
 8002f94:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8002f98:	6821      	ldr	r1, [r4, #0]
 8002f9a:	688b      	ldr	r3, [r1, #8]
 8002f9c:	4d0e      	ldr	r5, [pc, #56]	@ (8002fd8 <UART_RxISR_8BIT_FIFOEN+0x1c0>)
 8002f9e:	402b      	ands	r3, r5
 8002fa0:	608b      	str	r3, [r1, #8]
 8002fa2:	f380 8810 	msr	PRIMASK, r0
      huart->RxISR = UART_RxISR_8BIT;
 8002fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8002fdc <UART_RxISR_8BIT_FIFOEN+0x1c4>)
 8002fa8:	6763      	str	r3, [r4, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002faa:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fae:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8002fb2:	6822      	ldr	r2, [r4, #0]
 8002fb4:	6813      	ldr	r3, [r2, #0]
 8002fb6:	2020      	movs	r0, #32
 8002fb8:	4303      	orrs	r3, r0
 8002fba:	6013      	str	r3, [r2, #0]
 8002fbc:	f381 8810 	msr	PRIMASK, r1
}
 8002fc0:	e73f      	b.n	8002e42 <UART_RxISR_8BIT_FIFOEN+0x2a>
          HAL_UART_RxCpltCallback(huart);
 8002fc2:	0020      	movs	r0, r4
 8002fc4:	f7fd fd8a 	bl	8000adc <HAL_UART_RxCpltCallback>
 8002fc8:	e7d6      	b.n	8002f78 <UART_RxISR_8BIT_FIFOEN+0x160>
 8002fca:	46c0      	nop			@ (mov r8, r8)
 8002fcc:	fffffeff 	.word	0xfffffeff
 8002fd0:	effffffe 	.word	0xeffffffe
 8002fd4:	fbffffff 	.word	0xfbffffff
 8002fd8:	efffffff 	.word	0xefffffff
 8002fdc:	08002c69 	.word	0x08002c69

08002fe0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8002fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fe2:	46ce      	mov	lr, r9
 8002fe4:	4647      	mov	r7, r8
 8002fe6:	b580      	push	{r7, lr}
 8002fe8:	0004      	movs	r4, r0
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8002fea:	2360      	movs	r3, #96	@ 0x60
 8002fec:	5ac5      	ldrh	r5, [r0, r3]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8002fee:	6803      	ldr	r3, [r0, #0]
 8002ff0:	69df      	ldr	r7, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	4690      	mov	r8, r2
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8002ff6:	689a      	ldr	r2, [r3, #8]
 8002ff8:	4691      	mov	r9, r2

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002ffa:	228c      	movs	r2, #140	@ 0x8c
 8002ffc:	5882      	ldr	r2, [r0, r2]
 8002ffe:	2a22      	cmp	r2, #34	@ 0x22
 8003000:	d007      	beq.n	8003012 <UART_RxISR_16BIT_FIFOEN+0x32>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003002:	699a      	ldr	r2, [r3, #24]
 8003004:	2108      	movs	r1, #8
 8003006:	430a      	orrs	r2, r1
 8003008:	619a      	str	r2, [r3, #24]
  }
}
 800300a:	bcc0      	pop	{r6, r7}
 800300c:	46b9      	mov	r9, r7
 800300e:	46b0      	mov	r8, r6
 8003010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    nb_rx_data = huart->NbRxDataToProcess;
 8003012:	2368      	movs	r3, #104	@ 0x68
 8003014:	5ac6      	ldrh	r6, [r0, r3]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003016:	e007      	b.n	8003028 <UART_RxISR_16BIT_FIFOEN+0x48>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003018:	2390      	movs	r3, #144	@ 0x90
 800301a:	58e3      	ldr	r3, [r4, r3]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d140      	bne.n	80030a2 <UART_RxISR_16BIT_FIFOEN+0xc2>
      if (huart->RxXferCount == 0U)
 8003020:	235e      	movs	r3, #94	@ 0x5e
 8003022:	5ae3      	ldrh	r3, [r4, r3]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d043      	beq.n	80030b0 <UART_RxISR_16BIT_FIFOEN+0xd0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003028:	2e00      	cmp	r6, #0
 800302a:	d100      	bne.n	800302e <UART_RxISR_16BIT_FIFOEN+0x4e>
 800302c:	e088      	b.n	8003140 <UART_RxISR_16BIT_FIFOEN+0x160>
 800302e:	06bf      	lsls	r7, r7, #26
 8003030:	d400      	bmi.n	8003034 <UART_RxISR_16BIT_FIFOEN+0x54>
 8003032:	e085      	b.n	8003140 <UART_RxISR_16BIT_FIFOEN+0x160>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003034:	6823      	ldr	r3, [r4, #0]
 8003036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003038:	6da2      	ldr	r2, [r4, #88]	@ 0x58
      *tmp = (uint16_t)(uhdata & uhMask);
 800303a:	402b      	ands	r3, r5
 800303c:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 800303e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003040:	3302      	adds	r3, #2
 8003042:	65a3      	str	r3, [r4, #88]	@ 0x58
      huart->RxXferCount--;
 8003044:	225e      	movs	r2, #94	@ 0x5e
 8003046:	5aa3      	ldrh	r3, [r4, r2]
 8003048:	3b01      	subs	r3, #1
 800304a:	b29b      	uxth	r3, r3
 800304c:	52a3      	strh	r3, [r4, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800304e:	6823      	ldr	r3, [r4, #0]
 8003050:	69df      	ldr	r7, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8003052:	077a      	lsls	r2, r7, #29
 8003054:	d0e4      	beq.n	8003020 <UART_RxISR_16BIT_FIFOEN+0x40>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003056:	07fa      	lsls	r2, r7, #31
 8003058:	d508      	bpl.n	800306c <UART_RxISR_16BIT_FIFOEN+0x8c>
 800305a:	4642      	mov	r2, r8
 800305c:	05d2      	lsls	r2, r2, #23
 800305e:	d505      	bpl.n	800306c <UART_RxISR_16BIT_FIFOEN+0x8c>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003060:	2101      	movs	r1, #1
 8003062:	6219      	str	r1, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003064:	2290      	movs	r2, #144	@ 0x90
 8003066:	58a3      	ldr	r3, [r4, r2]
 8003068:	430b      	orrs	r3, r1
 800306a:	50a3      	str	r3, [r4, r2]
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800306c:	07bb      	lsls	r3, r7, #30
 800306e:	d50a      	bpl.n	8003086 <UART_RxISR_16BIT_FIFOEN+0xa6>
 8003070:	464b      	mov	r3, r9
 8003072:	07db      	lsls	r3, r3, #31
 8003074:	d507      	bpl.n	8003086 <UART_RxISR_16BIT_FIFOEN+0xa6>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003076:	6823      	ldr	r3, [r4, #0]
 8003078:	2202      	movs	r2, #2
 800307a:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800307c:	328e      	adds	r2, #142	@ 0x8e
 800307e:	58a3      	ldr	r3, [r4, r2]
 8003080:	2104      	movs	r1, #4
 8003082:	430b      	orrs	r3, r1
 8003084:	50a3      	str	r3, [r4, r2]
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003086:	077b      	lsls	r3, r7, #29
 8003088:	d5c6      	bpl.n	8003018 <UART_RxISR_16BIT_FIFOEN+0x38>
 800308a:	464b      	mov	r3, r9
 800308c:	07db      	lsls	r3, r3, #31
 800308e:	d5c3      	bpl.n	8003018 <UART_RxISR_16BIT_FIFOEN+0x38>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003090:	6823      	ldr	r3, [r4, #0]
 8003092:	2204      	movs	r2, #4
 8003094:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003096:	328c      	adds	r2, #140	@ 0x8c
 8003098:	58a3      	ldr	r3, [r4, r2]
 800309a:	2102      	movs	r1, #2
 800309c:	430b      	orrs	r3, r1
 800309e:	50a3      	str	r3, [r4, r2]
 80030a0:	e7ba      	b.n	8003018 <UART_RxISR_16BIT_FIFOEN+0x38>
          HAL_UART_ErrorCallback(huart);
 80030a2:	0020      	movs	r0, r4
 80030a4:	f7ff fc3d 	bl	8002922 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030a8:	2390      	movs	r3, #144	@ 0x90
 80030aa:	2200      	movs	r2, #0
 80030ac:	50e2      	str	r2, [r4, r3]
 80030ae:	e7b7      	b.n	8003020 <UART_RxISR_16BIT_FIFOEN+0x40>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80030b0:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030b4:	2201      	movs	r2, #1
 80030b6:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80030ba:	6821      	ldr	r1, [r4, #0]
 80030bc:	680b      	ldr	r3, [r1, #0]
 80030be:	4d35      	ldr	r5, [pc, #212]	@ (8003194 <UART_RxISR_16BIT_FIFOEN+0x1b4>)
 80030c0:	402b      	ands	r3, r5
 80030c2:	600b      	str	r3, [r1, #0]
 80030c4:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80030c8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030cc:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80030d0:	6822      	ldr	r2, [r4, #0]
 80030d2:	6893      	ldr	r3, [r2, #8]
 80030d4:	4830      	ldr	r0, [pc, #192]	@ (8003198 <UART_RxISR_16BIT_FIFOEN+0x1b8>)
 80030d6:	4003      	ands	r3, r0
 80030d8:	6093      	str	r3, [r2, #8]
 80030da:	f381 8810 	msr	PRIMASK, r1
        huart->RxState = HAL_UART_STATE_READY;
 80030de:	238c      	movs	r3, #140	@ 0x8c
 80030e0:	2220      	movs	r2, #32
 80030e2:	50e2      	str	r2, [r4, r3]
        huart->RxISR = NULL;
 80030e4:	2300      	movs	r3, #0
 80030e6:	6763      	str	r3, [r4, #116]	@ 0x74
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030e8:	6723      	str	r3, [r4, #112]	@ 0x70
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80030ea:	6823      	ldr	r3, [r4, #0]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	021b      	lsls	r3, r3, #8
 80030f0:	d50b      	bpl.n	800310a <UART_RxISR_16BIT_FIFOEN+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80030f2:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030f6:	2301      	movs	r3, #1
 80030f8:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80030fc:	6822      	ldr	r2, [r4, #0]
 80030fe:	6813      	ldr	r3, [r2, #0]
 8003100:	4826      	ldr	r0, [pc, #152]	@ (800319c <UART_RxISR_16BIT_FIFOEN+0x1bc>)
 8003102:	4003      	ands	r3, r0
 8003104:	6013      	str	r3, [r2, #0]
 8003106:	f381 8810 	msr	PRIMASK, r1
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800310a:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800310c:	2b01      	cmp	r3, #1
 800310e:	d13c      	bne.n	800318a <UART_RxISR_16BIT_FIFOEN+0x1aa>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003110:	2300      	movs	r3, #0
 8003112:	66e3      	str	r3, [r4, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003114:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003118:	3301      	adds	r3, #1
 800311a:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800311e:	6821      	ldr	r1, [r4, #0]
 8003120:	680b      	ldr	r3, [r1, #0]
 8003122:	2210      	movs	r2, #16
 8003124:	4393      	bics	r3, r2
 8003126:	600b      	str	r3, [r1, #0]
 8003128:	f380 8810 	msr	PRIMASK, r0
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800312c:	6823      	ldr	r3, [r4, #0]
 800312e:	69d9      	ldr	r1, [r3, #28]
 8003130:	420a      	tst	r2, r1
 8003132:	d000      	beq.n	8003136 <UART_RxISR_16BIT_FIFOEN+0x156>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003134:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003136:	235c      	movs	r3, #92	@ 0x5c
 8003138:	5ae1      	ldrh	r1, [r4, r3]
 800313a:	0020      	movs	r0, r4
 800313c:	f7ff fbfa 	bl	8002934 <HAL_UARTEx_RxEventCallback>
    rxdatacount = huart->RxXferCount;
 8003140:	235e      	movs	r3, #94	@ 0x5e
 8003142:	5ae3      	ldrh	r3, [r4, r3]
 8003144:	b29a      	uxth	r2, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8003146:	2b00      	cmp	r3, #0
 8003148:	d100      	bne.n	800314c <UART_RxISR_16BIT_FIFOEN+0x16c>
 800314a:	e75e      	b.n	800300a <UART_RxISR_16BIT_FIFOEN+0x2a>
 800314c:	2368      	movs	r3, #104	@ 0x68
 800314e:	5ae3      	ldrh	r3, [r4, r3]
 8003150:	4293      	cmp	r3, r2
 8003152:	d800      	bhi.n	8003156 <UART_RxISR_16BIT_FIFOEN+0x176>
 8003154:	e759      	b.n	800300a <UART_RxISR_16BIT_FIFOEN+0x2a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003156:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800315a:	2201      	movs	r2, #1
 800315c:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003160:	6821      	ldr	r1, [r4, #0]
 8003162:	688b      	ldr	r3, [r1, #8]
 8003164:	4d0e      	ldr	r5, [pc, #56]	@ (80031a0 <UART_RxISR_16BIT_FIFOEN+0x1c0>)
 8003166:	402b      	ands	r3, r5
 8003168:	608b      	str	r3, [r1, #8]
 800316a:	f380 8810 	msr	PRIMASK, r0
      huart->RxISR = UART_RxISR_16BIT;
 800316e:	4b0d      	ldr	r3, [pc, #52]	@ (80031a4 <UART_RxISR_16BIT_FIFOEN+0x1c4>)
 8003170:	6763      	str	r3, [r4, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003172:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003176:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800317a:	6822      	ldr	r2, [r4, #0]
 800317c:	6813      	ldr	r3, [r2, #0]
 800317e:	2020      	movs	r0, #32
 8003180:	4303      	orrs	r3, r0
 8003182:	6013      	str	r3, [r2, #0]
 8003184:	f381 8810 	msr	PRIMASK, r1
}
 8003188:	e73f      	b.n	800300a <UART_RxISR_16BIT_FIFOEN+0x2a>
          HAL_UART_RxCpltCallback(huart);
 800318a:	0020      	movs	r0, r4
 800318c:	f7fd fca6 	bl	8000adc <HAL_UART_RxCpltCallback>
 8003190:	e7d6      	b.n	8003140 <UART_RxISR_16BIT_FIFOEN+0x160>
 8003192:	46c0      	nop			@ (mov r8, r8)
 8003194:	fffffeff 	.word	0xfffffeff
 8003198:	effffffe 	.word	0xeffffffe
 800319c:	fbffffff 	.word	0xfbffffff
 80031a0:	efffffff 	.word	0xefffffff
 80031a4:	08002d41 	.word	0x08002d41

080031a8 <UART_SetConfig>:
{
 80031a8:	b510      	push	{r4, lr}
 80031aa:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80031ac:	6883      	ldr	r3, [r0, #8]
 80031ae:	6902      	ldr	r2, [r0, #16]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	6942      	ldr	r2, [r0, #20]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	69c2      	ldr	r2, [r0, #28]
 80031b8:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80031ba:	6801      	ldr	r1, [r0, #0]
 80031bc:	680a      	ldr	r2, [r1, #0]
 80031be:	4862      	ldr	r0, [pc, #392]	@ (8003348 <UART_SetConfig+0x1a0>)
 80031c0:	4002      	ands	r2, r0
 80031c2:	4313      	orrs	r3, r2
 80031c4:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031c6:	6822      	ldr	r2, [r4, #0]
 80031c8:	6853      	ldr	r3, [r2, #4]
 80031ca:	4960      	ldr	r1, [pc, #384]	@ (800334c <UART_SetConfig+0x1a4>)
 80031cc:	400b      	ands	r3, r1
 80031ce:	68e1      	ldr	r1, [r4, #12]
 80031d0:	430b      	orrs	r3, r1
 80031d2:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80031d4:	69a3      	ldr	r3, [r4, #24]
  tmpreg |= huart->Init.OneBitSampling;
 80031d6:	6a22      	ldr	r2, [r4, #32]
 80031d8:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80031da:	6821      	ldr	r1, [r4, #0]
 80031dc:	688b      	ldr	r3, [r1, #8]
 80031de:	485c      	ldr	r0, [pc, #368]	@ (8003350 <UART_SetConfig+0x1a8>)
 80031e0:	4003      	ands	r3, r0
 80031e2:	4313      	orrs	r3, r2
 80031e4:	608b      	str	r3, [r1, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80031e6:	6822      	ldr	r2, [r4, #0]
 80031e8:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80031ea:	210f      	movs	r1, #15
 80031ec:	438b      	bics	r3, r1
 80031ee:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80031f0:	430b      	orrs	r3, r1
 80031f2:	62d3      	str	r3, [r2, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80031f4:	6823      	ldr	r3, [r4, #0]
 80031f6:	4a57      	ldr	r2, [pc, #348]	@ (8003354 <UART_SetConfig+0x1ac>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d030      	beq.n	800325e <UART_SetConfig+0xb6>
 80031fc:	4a56      	ldr	r2, [pc, #344]	@ (8003358 <UART_SetConfig+0x1b0>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d03e      	beq.n	8003280 <UART_SetConfig+0xd8>
 8003202:	2310      	movs	r3, #16
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003204:	69e0      	ldr	r0, [r4, #28]
 8003206:	2280      	movs	r2, #128	@ 0x80
 8003208:	0212      	lsls	r2, r2, #8
 800320a:	4290      	cmp	r0, r2
 800320c:	d042      	beq.n	8003294 <UART_SetConfig+0xec>
    switch (clocksource)
 800320e:	2b04      	cmp	r3, #4
 8003210:	d100      	bne.n	8003214 <UART_SetConfig+0x6c>
 8003212:	e089      	b.n	8003328 <UART_SetConfig+0x180>
 8003214:	d87b      	bhi.n	800330e <UART_SetConfig+0x166>
 8003216:	2b00      	cmp	r3, #0
 8003218:	d100      	bne.n	800321c <UART_SetConfig+0x74>
 800321a:	e07f      	b.n	800331c <UART_SetConfig+0x174>
 800321c:	2b02      	cmp	r3, #2
 800321e:	d174      	bne.n	800330a <UART_SetConfig+0x162>
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8003220:	4b4e      	ldr	r3, [pc, #312]	@ (800335c <UART_SetConfig+0x1b4>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	095b      	lsrs	r3, r3, #5
 8003226:	2107      	movs	r1, #7
 8003228:	4019      	ands	r1, r3
 800322a:	3101      	adds	r1, #1
 800322c:	484c      	ldr	r0, [pc, #304]	@ (8003360 <UART_SetConfig+0x1b8>)
 800322e:	f7fc ff63 	bl	80000f8 <__udivsi3>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003232:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003234:	4b4b      	ldr	r3, [pc, #300]	@ (8003364 <UART_SetConfig+0x1bc>)
 8003236:	0052      	lsls	r2, r2, #1
 8003238:	5ad1      	ldrh	r1, [r2, r3]
 800323a:	f7fc ff5d 	bl	80000f8 <__udivsi3>
 800323e:	6861      	ldr	r1, [r4, #4]
 8003240:	084b      	lsrs	r3, r1, #1
 8003242:	18c0      	adds	r0, r0, r3
 8003244:	f7fc ff58 	bl	80000f8 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003248:	0002      	movs	r2, r0
 800324a:	3a10      	subs	r2, #16
 800324c:	4b46      	ldr	r3, [pc, #280]	@ (8003368 <UART_SetConfig+0x1c0>)
 800324e:	429a      	cmp	r2, r3
 8003250:	d86f      	bhi.n	8003332 <UART_SetConfig+0x18a>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003252:	6823      	ldr	r3, [r4, #0]
 8003254:	0400      	lsls	r0, r0, #16
 8003256:	0c00      	lsrs	r0, r0, #16
 8003258:	60d8      	str	r0, [r3, #12]
 800325a:	2000      	movs	r0, #0
 800325c:	e06a      	b.n	8003334 <UART_SetConfig+0x18c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800325e:	4b3f      	ldr	r3, [pc, #252]	@ (800335c <UART_SetConfig+0x1b4>)
 8003260:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003262:	2303      	movs	r3, #3
 8003264:	4013      	ands	r3, r2
 8003266:	2b02      	cmp	r3, #2
 8003268:	d00c      	beq.n	8003284 <UART_SetConfig+0xdc>
 800326a:	d805      	bhi.n	8003278 <UART_SetConfig+0xd0>
 800326c:	2b00      	cmp	r3, #0
 800326e:	d00b      	beq.n	8003288 <UART_SetConfig+0xe0>
 8003270:	2b01      	cmp	r3, #1
 8003272:	d10b      	bne.n	800328c <UART_SetConfig+0xe4>
 8003274:	3303      	adds	r3, #3
 8003276:	e7c5      	b.n	8003204 <UART_SetConfig+0x5c>
 8003278:	2b03      	cmp	r3, #3
 800327a:	d109      	bne.n	8003290 <UART_SetConfig+0xe8>
 800327c:	3305      	adds	r3, #5
 800327e:	e7c1      	b.n	8003204 <UART_SetConfig+0x5c>
 8003280:	2300      	movs	r3, #0
 8003282:	e7bf      	b.n	8003204 <UART_SetConfig+0x5c>
 8003284:	2302      	movs	r3, #2
 8003286:	e7bd      	b.n	8003204 <UART_SetConfig+0x5c>
 8003288:	2300      	movs	r3, #0
 800328a:	e7bb      	b.n	8003204 <UART_SetConfig+0x5c>
 800328c:	2310      	movs	r3, #16
 800328e:	e7b9      	b.n	8003204 <UART_SetConfig+0x5c>
 8003290:	2310      	movs	r3, #16
 8003292:	e7b7      	b.n	8003204 <UART_SetConfig+0x5c>
    switch (clocksource)
 8003294:	2b04      	cmp	r3, #4
 8003296:	d035      	beq.n	8003304 <UART_SetConfig+0x15c>
 8003298:	d82a      	bhi.n	80032f0 <UART_SetConfig+0x148>
 800329a:	2b00      	cmp	r3, #0
 800329c:	d02c      	beq.n	80032f8 <UART_SetConfig+0x150>
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d124      	bne.n	80032ec <UART_SetConfig+0x144>
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 80032a2:	4b2e      	ldr	r3, [pc, #184]	@ (800335c <UART_SetConfig+0x1b4>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	095b      	lsrs	r3, r3, #5
 80032a8:	2107      	movs	r1, #7
 80032aa:	4019      	ands	r1, r3
 80032ac:	3101      	adds	r1, #1
 80032ae:	482c      	ldr	r0, [pc, #176]	@ (8003360 <UART_SetConfig+0x1b8>)
 80032b0:	f7fc ff22 	bl	80000f8 <__udivsi3>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80032b4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80032b6:	4b2b      	ldr	r3, [pc, #172]	@ (8003364 <UART_SetConfig+0x1bc>)
 80032b8:	0052      	lsls	r2, r2, #1
 80032ba:	5ad1      	ldrh	r1, [r2, r3]
 80032bc:	f7fc ff1c 	bl	80000f8 <__udivsi3>
 80032c0:	0040      	lsls	r0, r0, #1
 80032c2:	6861      	ldr	r1, [r4, #4]
 80032c4:	084b      	lsrs	r3, r1, #1
 80032c6:	18c0      	adds	r0, r0, r3
 80032c8:	f7fc ff16 	bl	80000f8 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032cc:	0002      	movs	r2, r0
 80032ce:	3a10      	subs	r2, #16
 80032d0:	4b25      	ldr	r3, [pc, #148]	@ (8003368 <UART_SetConfig+0x1c0>)
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d82b      	bhi.n	800332e <UART_SetConfig+0x186>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80032d6:	b282      	uxth	r2, r0
 80032d8:	230f      	movs	r3, #15
 80032da:	439a      	bics	r2, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80032dc:	0840      	lsrs	r0, r0, #1
 80032de:	3b08      	subs	r3, #8
 80032e0:	4003      	ands	r3, r0
 80032e2:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 80032e4:	6822      	ldr	r2, [r4, #0]
 80032e6:	60d3      	str	r3, [r2, #12]
 80032e8:	2000      	movs	r0, #0
 80032ea:	e023      	b.n	8003334 <UART_SetConfig+0x18c>
    switch (clocksource)
 80032ec:	2001      	movs	r0, #1
 80032ee:	e021      	b.n	8003334 <UART_SetConfig+0x18c>
 80032f0:	2b08      	cmp	r3, #8
 80032f2:	d0df      	beq.n	80032b4 <UART_SetConfig+0x10c>
 80032f4:	2001      	movs	r0, #1
 80032f6:	e01d      	b.n	8003334 <UART_SetConfig+0x18c>
        pclk = HAL_RCC_GetPCLK1Freq();
 80032f8:	f7fe ff5e 	bl	80021b8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80032fc:	2800      	cmp	r0, #0
 80032fe:	d1d9      	bne.n	80032b4 <UART_SetConfig+0x10c>
 8003300:	2000      	movs	r0, #0
 8003302:	e017      	b.n	8003334 <UART_SetConfig+0x18c>
        pclk = HAL_RCC_GetSysClockFreq();
 8003304:	f7fe fe50 	bl	8001fa8 <HAL_RCC_GetSysClockFreq>
        break;
 8003308:	e7f8      	b.n	80032fc <UART_SetConfig+0x154>
    switch (clocksource)
 800330a:	2001      	movs	r0, #1
 800330c:	e012      	b.n	8003334 <UART_SetConfig+0x18c>
 800330e:	2b08      	cmp	r3, #8
 8003310:	d102      	bne.n	8003318 <UART_SetConfig+0x170>
 8003312:	2080      	movs	r0, #128	@ 0x80
 8003314:	0200      	lsls	r0, r0, #8
 8003316:	e78c      	b.n	8003232 <UART_SetConfig+0x8a>
 8003318:	2001      	movs	r0, #1
 800331a:	e00b      	b.n	8003334 <UART_SetConfig+0x18c>
        pclk = HAL_RCC_GetPCLK1Freq();
 800331c:	f7fe ff4c 	bl	80021b8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8003320:	2800      	cmp	r0, #0
 8003322:	d186      	bne.n	8003232 <UART_SetConfig+0x8a>
 8003324:	2000      	movs	r0, #0
 8003326:	e005      	b.n	8003334 <UART_SetConfig+0x18c>
        pclk = HAL_RCC_GetSysClockFreq();
 8003328:	f7fe fe3e 	bl	8001fa8 <HAL_RCC_GetSysClockFreq>
        break;
 800332c:	e7f8      	b.n	8003320 <UART_SetConfig+0x178>
        ret = HAL_ERROR;
 800332e:	2001      	movs	r0, #1
 8003330:	e000      	b.n	8003334 <UART_SetConfig+0x18c>
        ret = HAL_ERROR;
 8003332:	2001      	movs	r0, #1
  huart->NbTxDataToProcess = 1;
 8003334:	2301      	movs	r3, #1
 8003336:	226a      	movs	r2, #106	@ 0x6a
 8003338:	52a3      	strh	r3, [r4, r2]
  huart->NbRxDataToProcess = 1;
 800333a:	3a02      	subs	r2, #2
 800333c:	52a3      	strh	r3, [r4, r2]
  huart->RxISR = NULL;
 800333e:	2300      	movs	r3, #0
 8003340:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->TxISR = NULL;
 8003342:	67a3      	str	r3, [r4, #120]	@ 0x78
}
 8003344:	bd10      	pop	{r4, pc}
 8003346:	46c0      	nop			@ (mov r8, r8)
 8003348:	cfff69f3 	.word	0xcfff69f3
 800334c:	ffffcfff 	.word	0xffffcfff
 8003350:	11fff4ff 	.word	0x11fff4ff
 8003354:	40013800 	.word	0x40013800
 8003358:	40004400 	.word	0x40004400
 800335c:	40021000 	.word	0x40021000
 8003360:	02dc6c00 	.word	0x02dc6c00
 8003364:	08005f3c 	.word	0x08005f3c
 8003368:	0000ffef 	.word	0x0000ffef

0800336c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800336c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800336e:	071b      	lsls	r3, r3, #28
 8003370:	d506      	bpl.n	8003380 <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003372:	6802      	ldr	r2, [r0, #0]
 8003374:	6853      	ldr	r3, [r2, #4]
 8003376:	492c      	ldr	r1, [pc, #176]	@ (8003428 <UART_AdvFeatureConfig+0xbc>)
 8003378:	400b      	ands	r3, r1
 800337a:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 800337c:	430b      	orrs	r3, r1
 800337e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003380:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8003382:	07db      	lsls	r3, r3, #31
 8003384:	d506      	bpl.n	8003394 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003386:	6802      	ldr	r2, [r0, #0]
 8003388:	6853      	ldr	r3, [r2, #4]
 800338a:	4928      	ldr	r1, [pc, #160]	@ (800342c <UART_AdvFeatureConfig+0xc0>)
 800338c:	400b      	ands	r3, r1
 800338e:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8003390:	430b      	orrs	r3, r1
 8003392:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003394:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8003396:	079b      	lsls	r3, r3, #30
 8003398:	d506      	bpl.n	80033a8 <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800339a:	6802      	ldr	r2, [r0, #0]
 800339c:	6853      	ldr	r3, [r2, #4]
 800339e:	4924      	ldr	r1, [pc, #144]	@ (8003430 <UART_AdvFeatureConfig+0xc4>)
 80033a0:	400b      	ands	r3, r1
 80033a2:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 80033a4:	430b      	orrs	r3, r1
 80033a6:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80033a8:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80033aa:	075b      	lsls	r3, r3, #29
 80033ac:	d506      	bpl.n	80033bc <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80033ae:	6802      	ldr	r2, [r0, #0]
 80033b0:	6853      	ldr	r3, [r2, #4]
 80033b2:	4920      	ldr	r1, [pc, #128]	@ (8003434 <UART_AdvFeatureConfig+0xc8>)
 80033b4:	400b      	ands	r3, r1
 80033b6:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 80033b8:	430b      	orrs	r3, r1
 80033ba:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80033bc:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80033be:	06db      	lsls	r3, r3, #27
 80033c0:	d506      	bpl.n	80033d0 <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80033c2:	6802      	ldr	r2, [r0, #0]
 80033c4:	6893      	ldr	r3, [r2, #8]
 80033c6:	491c      	ldr	r1, [pc, #112]	@ (8003438 <UART_AdvFeatureConfig+0xcc>)
 80033c8:	400b      	ands	r3, r1
 80033ca:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 80033cc:	430b      	orrs	r3, r1
 80033ce:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80033d0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80033d2:	069b      	lsls	r3, r3, #26
 80033d4:	d506      	bpl.n	80033e4 <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80033d6:	6802      	ldr	r2, [r0, #0]
 80033d8:	6893      	ldr	r3, [r2, #8]
 80033da:	4918      	ldr	r1, [pc, #96]	@ (800343c <UART_AdvFeatureConfig+0xd0>)
 80033dc:	400b      	ands	r3, r1
 80033de:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 80033e0:	430b      	orrs	r3, r1
 80033e2:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033e4:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80033e6:	065b      	lsls	r3, r3, #25
 80033e8:	d50b      	bpl.n	8003402 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80033ea:	6802      	ldr	r2, [r0, #0]
 80033ec:	6853      	ldr	r3, [r2, #4]
 80033ee:	4914      	ldr	r1, [pc, #80]	@ (8003440 <UART_AdvFeatureConfig+0xd4>)
 80033f0:	400b      	ands	r3, r1
 80033f2:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 80033f4:	430b      	orrs	r3, r1
 80033f6:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80033f8:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 80033fa:	2380      	movs	r3, #128	@ 0x80
 80033fc:	035b      	lsls	r3, r3, #13
 80033fe:	429a      	cmp	r2, r3
 8003400:	d00a      	beq.n	8003418 <UART_AdvFeatureConfig+0xac>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003402:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8003404:	061b      	lsls	r3, r3, #24
 8003406:	d506      	bpl.n	8003416 <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003408:	6802      	ldr	r2, [r0, #0]
 800340a:	6853      	ldr	r3, [r2, #4]
 800340c:	490d      	ldr	r1, [pc, #52]	@ (8003444 <UART_AdvFeatureConfig+0xd8>)
 800340e:	400b      	ands	r3, r1
 8003410:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8003412:	430b      	orrs	r3, r1
 8003414:	6053      	str	r3, [r2, #4]
}
 8003416:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003418:	6802      	ldr	r2, [r0, #0]
 800341a:	6853      	ldr	r3, [r2, #4]
 800341c:	490a      	ldr	r1, [pc, #40]	@ (8003448 <UART_AdvFeatureConfig+0xdc>)
 800341e:	400b      	ands	r3, r1
 8003420:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8003422:	430b      	orrs	r3, r1
 8003424:	6053      	str	r3, [r2, #4]
 8003426:	e7ec      	b.n	8003402 <UART_AdvFeatureConfig+0x96>
 8003428:	ffff7fff 	.word	0xffff7fff
 800342c:	fffdffff 	.word	0xfffdffff
 8003430:	fffeffff 	.word	0xfffeffff
 8003434:	fffbffff 	.word	0xfffbffff
 8003438:	ffffefff 	.word	0xffffefff
 800343c:	ffffdfff 	.word	0xffffdfff
 8003440:	ffefffff 	.word	0xffefffff
 8003444:	fff7ffff 	.word	0xfff7ffff
 8003448:	ff9fffff 	.word	0xff9fffff

0800344c <UART_WaitOnFlagUntilTimeout>:
{
 800344c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800344e:	46ce      	mov	lr, r9
 8003450:	4647      	mov	r7, r8
 8003452:	b580      	push	{r7, lr}
 8003454:	0006      	movs	r6, r0
 8003456:	000d      	movs	r5, r1
 8003458:	0017      	movs	r7, r2
 800345a:	4699      	mov	r9, r3
 800345c:	9b08      	ldr	r3, [sp, #32]
 800345e:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003460:	6833      	ldr	r3, [r6, #0]
 8003462:	69dc      	ldr	r4, [r3, #28]
 8003464:	402c      	ands	r4, r5
 8003466:	1b64      	subs	r4, r4, r5
 8003468:	4263      	negs	r3, r4
 800346a:	415c      	adcs	r4, r3
 800346c:	42bc      	cmp	r4, r7
 800346e:	d133      	bne.n	80034d8 <UART_WaitOnFlagUntilTimeout+0x8c>
    if (Timeout != HAL_MAX_DELAY)
 8003470:	4643      	mov	r3, r8
 8003472:	3301      	adds	r3, #1
 8003474:	d0f4      	beq.n	8003460 <UART_WaitOnFlagUntilTimeout+0x14>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003476:	f7fd fba5 	bl	8000bc4 <HAL_GetTick>
 800347a:	464b      	mov	r3, r9
 800347c:	1ac0      	subs	r0, r0, r3
 800347e:	4540      	cmp	r0, r8
 8003480:	d82f      	bhi.n	80034e2 <UART_WaitOnFlagUntilTimeout+0x96>
 8003482:	4643      	mov	r3, r8
 8003484:	2b00      	cmp	r3, #0
 8003486:	d02e      	beq.n	80034e6 <UART_WaitOnFlagUntilTimeout+0x9a>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003488:	6832      	ldr	r2, [r6, #0]
 800348a:	6813      	ldr	r3, [r2, #0]
 800348c:	075b      	lsls	r3, r3, #29
 800348e:	d5e7      	bpl.n	8003460 <UART_WaitOnFlagUntilTimeout+0x14>
 8003490:	2d80      	cmp	r5, #128	@ 0x80
 8003492:	d0e5      	beq.n	8003460 <UART_WaitOnFlagUntilTimeout+0x14>
 8003494:	2d40      	cmp	r5, #64	@ 0x40
 8003496:	d0e3      	beq.n	8003460 <UART_WaitOnFlagUntilTimeout+0x14>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003498:	69d3      	ldr	r3, [r2, #28]
 800349a:	071b      	lsls	r3, r3, #28
 800349c:	d410      	bmi.n	80034c0 <UART_WaitOnFlagUntilTimeout+0x74>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800349e:	69d3      	ldr	r3, [r2, #28]
 80034a0:	051b      	lsls	r3, r3, #20
 80034a2:	d5dd      	bpl.n	8003460 <UART_WaitOnFlagUntilTimeout+0x14>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80034a4:	2380      	movs	r3, #128	@ 0x80
 80034a6:	011b      	lsls	r3, r3, #4
 80034a8:	6213      	str	r3, [r2, #32]
          UART_EndRxTransfer(huart);
 80034aa:	0030      	movs	r0, r6
 80034ac:	f7ff f8b0 	bl	8002610 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80034b0:	2390      	movs	r3, #144	@ 0x90
 80034b2:	2220      	movs	r2, #32
 80034b4:	50f2      	str	r2, [r6, r3]
          __HAL_UNLOCK(huart);
 80034b6:	3b0c      	subs	r3, #12
 80034b8:	2200      	movs	r2, #0
 80034ba:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 80034bc:	2003      	movs	r0, #3
 80034be:	e00c      	b.n	80034da <UART_WaitOnFlagUntilTimeout+0x8e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80034c0:	2408      	movs	r4, #8
 80034c2:	6214      	str	r4, [r2, #32]
          UART_EndRxTransfer(huart);
 80034c4:	0030      	movs	r0, r6
 80034c6:	f7ff f8a3 	bl	8002610 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80034ca:	2390      	movs	r3, #144	@ 0x90
 80034cc:	50f4      	str	r4, [r6, r3]
          __HAL_UNLOCK(huart);
 80034ce:	3b0c      	subs	r3, #12
 80034d0:	2200      	movs	r2, #0
 80034d2:	54f2      	strb	r2, [r6, r3]
          return HAL_ERROR;
 80034d4:	2001      	movs	r0, #1
 80034d6:	e000      	b.n	80034da <UART_WaitOnFlagUntilTimeout+0x8e>
  return HAL_OK;
 80034d8:	2000      	movs	r0, #0
}
 80034da:	bcc0      	pop	{r6, r7}
 80034dc:	46b9      	mov	r9, r7
 80034de:	46b0      	mov	r8, r6
 80034e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 80034e2:	2003      	movs	r0, #3
 80034e4:	e7f9      	b.n	80034da <UART_WaitOnFlagUntilTimeout+0x8e>
 80034e6:	2003      	movs	r0, #3
 80034e8:	e7f7      	b.n	80034da <UART_WaitOnFlagUntilTimeout+0x8e>
	...

080034ec <UART_CheckIdleState>:
{
 80034ec:	b530      	push	{r4, r5, lr}
 80034ee:	b083      	sub	sp, #12
 80034f0:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034f2:	2390      	movs	r3, #144	@ 0x90
 80034f4:	2200      	movs	r2, #0
 80034f6:	50c2      	str	r2, [r0, r3]
  tickstart = HAL_GetTick();
 80034f8:	f7fd fb64 	bl	8000bc4 <HAL_GetTick>
 80034fc:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80034fe:	6823      	ldr	r3, [r4, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	071b      	lsls	r3, r3, #28
 8003504:	d410      	bmi.n	8003528 <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003506:	6823      	ldr	r3, [r4, #0]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	075b      	lsls	r3, r3, #29
 800350c:	d42b      	bmi.n	8003566 <UART_CheckIdleState+0x7a>
  huart->gState = HAL_UART_STATE_READY;
 800350e:	2320      	movs	r3, #32
 8003510:	2288      	movs	r2, #136	@ 0x88
 8003512:	50a3      	str	r3, [r4, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003514:	3204      	adds	r2, #4
 8003516:	50a3      	str	r3, [r4, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003518:	2300      	movs	r3, #0
 800351a:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800351c:	6723      	str	r3, [r4, #112]	@ 0x70
  __HAL_UNLOCK(huart);
 800351e:	3a08      	subs	r2, #8
 8003520:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8003522:	2000      	movs	r0, #0
}
 8003524:	b003      	add	sp, #12
 8003526:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003528:	2180      	movs	r1, #128	@ 0x80
 800352a:	4b23      	ldr	r3, [pc, #140]	@ (80035b8 <UART_CheckIdleState+0xcc>)
 800352c:	9300      	str	r3, [sp, #0]
 800352e:	0003      	movs	r3, r0
 8003530:	2200      	movs	r2, #0
 8003532:	0389      	lsls	r1, r1, #14
 8003534:	0020      	movs	r0, r4
 8003536:	f7ff ff89 	bl	800344c <UART_WaitOnFlagUntilTimeout>
 800353a:	2800      	cmp	r0, #0
 800353c:	d0e3      	beq.n	8003506 <UART_CheckIdleState+0x1a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800353e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003542:	2301      	movs	r3, #1
 8003544:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003548:	6822      	ldr	r2, [r4, #0]
 800354a:	6813      	ldr	r3, [r2, #0]
 800354c:	2080      	movs	r0, #128	@ 0x80
 800354e:	4383      	bics	r3, r0
 8003550:	6013      	str	r3, [r2, #0]
 8003552:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 8003556:	2388      	movs	r3, #136	@ 0x88
 8003558:	2220      	movs	r2, #32
 800355a:	50e2      	str	r2, [r4, r3]
      __HAL_UNLOCK(huart);
 800355c:	3b04      	subs	r3, #4
 800355e:	2200      	movs	r2, #0
 8003560:	54e2      	strb	r2, [r4, r3]
      return HAL_TIMEOUT;
 8003562:	387d      	subs	r0, #125	@ 0x7d
 8003564:	e7de      	b.n	8003524 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003566:	2180      	movs	r1, #128	@ 0x80
 8003568:	4b13      	ldr	r3, [pc, #76]	@ (80035b8 <UART_CheckIdleState+0xcc>)
 800356a:	9300      	str	r3, [sp, #0]
 800356c:	002b      	movs	r3, r5
 800356e:	2200      	movs	r2, #0
 8003570:	03c9      	lsls	r1, r1, #15
 8003572:	0020      	movs	r0, r4
 8003574:	f7ff ff6a 	bl	800344c <UART_WaitOnFlagUntilTimeout>
 8003578:	2800      	cmp	r0, #0
 800357a:	d0c8      	beq.n	800350e <UART_CheckIdleState+0x22>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800357c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003580:	2201      	movs	r2, #1
 8003582:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003586:	6821      	ldr	r1, [r4, #0]
 8003588:	680b      	ldr	r3, [r1, #0]
 800358a:	4d0c      	ldr	r5, [pc, #48]	@ (80035bc <UART_CheckIdleState+0xd0>)
 800358c:	402b      	ands	r3, r5
 800358e:	600b      	str	r3, [r1, #0]
 8003590:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003594:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003598:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800359c:	6821      	ldr	r1, [r4, #0]
 800359e:	688b      	ldr	r3, [r1, #8]
 80035a0:	4393      	bics	r3, r2
 80035a2:	608b      	str	r3, [r1, #8]
 80035a4:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 80035a8:	238c      	movs	r3, #140	@ 0x8c
 80035aa:	321f      	adds	r2, #31
 80035ac:	50e2      	str	r2, [r4, r3]
      __HAL_UNLOCK(huart);
 80035ae:	3b08      	subs	r3, #8
 80035b0:	2200      	movs	r2, #0
 80035b2:	54e2      	strb	r2, [r4, r3]
      return HAL_TIMEOUT;
 80035b4:	2003      	movs	r0, #3
 80035b6:	e7b5      	b.n	8003524 <UART_CheckIdleState+0x38>
 80035b8:	01ffffff 	.word	0x01ffffff
 80035bc:	fffffedf 	.word	0xfffffedf

080035c0 <HAL_UART_Init>:
{
 80035c0:	b510      	push	{r4, lr}
 80035c2:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 80035c4:	d030      	beq.n	8003628 <HAL_UART_Init+0x68>
  if (huart->gState == HAL_UART_STATE_RESET)
 80035c6:	2388      	movs	r3, #136	@ 0x88
 80035c8:	58c3      	ldr	r3, [r0, r3]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d022      	beq.n	8003614 <HAL_UART_Init+0x54>
  huart->gState = HAL_UART_STATE_BUSY;
 80035ce:	2388      	movs	r3, #136	@ 0x88
 80035d0:	2224      	movs	r2, #36	@ 0x24
 80035d2:	50e2      	str	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 80035d4:	6822      	ldr	r2, [r4, #0]
 80035d6:	6813      	ldr	r3, [r2, #0]
 80035d8:	2101      	movs	r1, #1
 80035da:	438b      	bics	r3, r1
 80035dc:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80035de:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d11d      	bne.n	8003620 <HAL_UART_Init+0x60>
  if (UART_SetConfig(huart) == HAL_ERROR)
 80035e4:	0020      	movs	r0, r4
 80035e6:	f7ff fddf 	bl	80031a8 <UART_SetConfig>
 80035ea:	2801      	cmp	r0, #1
 80035ec:	d011      	beq.n	8003612 <HAL_UART_Init+0x52>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035ee:	6822      	ldr	r2, [r4, #0]
 80035f0:	6853      	ldr	r3, [r2, #4]
 80035f2:	490e      	ldr	r1, [pc, #56]	@ (800362c <HAL_UART_Init+0x6c>)
 80035f4:	400b      	ands	r3, r1
 80035f6:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035f8:	6822      	ldr	r2, [r4, #0]
 80035fa:	6893      	ldr	r3, [r2, #8]
 80035fc:	212a      	movs	r1, #42	@ 0x2a
 80035fe:	438b      	bics	r3, r1
 8003600:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8003602:	6822      	ldr	r2, [r4, #0]
 8003604:	6813      	ldr	r3, [r2, #0]
 8003606:	3929      	subs	r1, #41	@ 0x29
 8003608:	430b      	orrs	r3, r1
 800360a:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800360c:	0020      	movs	r0, r4
 800360e:	f7ff ff6d 	bl	80034ec <UART_CheckIdleState>
}
 8003612:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8003614:	3384      	adds	r3, #132	@ 0x84
 8003616:	2200      	movs	r2, #0
 8003618:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 800361a:	f7fe fb2f 	bl	8001c7c <HAL_UART_MspInit>
 800361e:	e7d6      	b.n	80035ce <HAL_UART_Init+0xe>
    UART_AdvFeatureConfig(huart);
 8003620:	0020      	movs	r0, r4
 8003622:	f7ff fea3 	bl	800336c <UART_AdvFeatureConfig>
 8003626:	e7dd      	b.n	80035e4 <HAL_UART_Init+0x24>
    return HAL_ERROR;
 8003628:	2001      	movs	r0, #1
 800362a:	e7f2      	b.n	8003612 <HAL_UART_Init+0x52>
 800362c:	ffffb7ff 	.word	0xffffb7ff

08003630 <UART_Start_Receive_IT>:
{
 8003630:	b510      	push	{r4, lr}
  huart->pRxBuffPtr  = pData;
 8003632:	6581      	str	r1, [r0, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8003634:	235c      	movs	r3, #92	@ 0x5c
 8003636:	52c2      	strh	r2, [r0, r3]
  huart->RxXferCount = Size;
 8003638:	3302      	adds	r3, #2
 800363a:	52c2      	strh	r2, [r0, r3]
  huart->RxISR       = NULL;
 800363c:	2300      	movs	r3, #0
 800363e:	6743      	str	r3, [r0, #116]	@ 0x74
  UART_MASK_COMPUTATION(huart);
 8003640:	6883      	ldr	r3, [r0, #8]
 8003642:	2180      	movs	r1, #128	@ 0x80
 8003644:	0149      	lsls	r1, r1, #5
 8003646:	428b      	cmp	r3, r1
 8003648:	d008      	beq.n	800365c <UART_Start_Receive_IT+0x2c>
 800364a:	2b00      	cmp	r3, #0
 800364c:	d115      	bne.n	800367a <UART_Start_Receive_IT+0x4a>
 800364e:	6903      	ldr	r3, [r0, #16]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d10e      	bne.n	8003672 <UART_Start_Receive_IT+0x42>
 8003654:	3360      	adds	r3, #96	@ 0x60
 8003656:	21ff      	movs	r1, #255	@ 0xff
 8003658:	52c1      	strh	r1, [r0, r3]
 800365a:	e015      	b.n	8003688 <UART_Start_Receive_IT+0x58>
 800365c:	6903      	ldr	r3, [r0, #16]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d103      	bne.n	800366a <UART_Start_Receive_IT+0x3a>
 8003662:	3360      	adds	r3, #96	@ 0x60
 8003664:	4946      	ldr	r1, [pc, #280]	@ (8003780 <UART_Start_Receive_IT+0x150>)
 8003666:	52c1      	strh	r1, [r0, r3]
 8003668:	e00e      	b.n	8003688 <UART_Start_Receive_IT+0x58>
 800366a:	2360      	movs	r3, #96	@ 0x60
 800366c:	21ff      	movs	r1, #255	@ 0xff
 800366e:	52c1      	strh	r1, [r0, r3]
 8003670:	e00a      	b.n	8003688 <UART_Start_Receive_IT+0x58>
 8003672:	2360      	movs	r3, #96	@ 0x60
 8003674:	217f      	movs	r1, #127	@ 0x7f
 8003676:	52c1      	strh	r1, [r0, r3]
 8003678:	e006      	b.n	8003688 <UART_Start_Receive_IT+0x58>
 800367a:	2180      	movs	r1, #128	@ 0x80
 800367c:	0549      	lsls	r1, r1, #21
 800367e:	428b      	cmp	r3, r1
 8003680:	d031      	beq.n	80036e6 <UART_Start_Receive_IT+0xb6>
 8003682:	2360      	movs	r3, #96	@ 0x60
 8003684:	2100      	movs	r1, #0
 8003686:	52c1      	strh	r1, [r0, r3]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003688:	2390      	movs	r3, #144	@ 0x90
 800368a:	2100      	movs	r1, #0
 800368c:	50c1      	str	r1, [r0, r3]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800368e:	3b04      	subs	r3, #4
 8003690:	3122      	adds	r1, #34	@ 0x22
 8003692:	50c1      	str	r1, [r0, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003694:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003698:	2401      	movs	r4, #1
 800369a:	f384 8810 	msr	PRIMASK, r4
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800369e:	6801      	ldr	r1, [r0, #0]
 80036a0:	688b      	ldr	r3, [r1, #8]
 80036a2:	4323      	orrs	r3, r4
 80036a4:	608b      	str	r3, [r1, #8]
 80036a6:	f38c 8810 	msr	PRIMASK, ip
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80036aa:	6e41      	ldr	r1, [r0, #100]	@ 0x64
 80036ac:	2380      	movs	r3, #128	@ 0x80
 80036ae:	059b      	lsls	r3, r3, #22
 80036b0:	4299      	cmp	r1, r3
 80036b2:	d023      	beq.n	80036fc <UART_Start_Receive_IT+0xcc>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036b4:	6882      	ldr	r2, [r0, #8]
 80036b6:	2380      	movs	r3, #128	@ 0x80
 80036b8:	015b      	lsls	r3, r3, #5
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d04c      	beq.n	8003758 <UART_Start_Receive_IT+0x128>
      huart->RxISR = UART_RxISR_8BIT;
 80036be:	4b31      	ldr	r3, [pc, #196]	@ (8003784 <UART_Start_Receive_IT+0x154>)
 80036c0:	6743      	str	r3, [r0, #116]	@ 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 80036c2:	6903      	ldr	r3, [r0, #16]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d04d      	beq.n	8003764 <UART_Start_Receive_IT+0x134>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80036c8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036cc:	2301      	movs	r3, #1
 80036ce:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80036d2:	6802      	ldr	r2, [r0, #0]
 80036d4:	6810      	ldr	r0, [r2, #0]
 80036d6:	3320      	adds	r3, #32
 80036d8:	33ff      	adds	r3, #255	@ 0xff
 80036da:	4303      	orrs	r3, r0
 80036dc:	6013      	str	r3, [r2, #0]
 80036de:	f381 8810 	msr	PRIMASK, r1
}
 80036e2:	2000      	movs	r0, #0
 80036e4:	bd10      	pop	{r4, pc}
  UART_MASK_COMPUTATION(huart);
 80036e6:	6903      	ldr	r3, [r0, #16]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d103      	bne.n	80036f4 <UART_Start_Receive_IT+0xc4>
 80036ec:	3360      	adds	r3, #96	@ 0x60
 80036ee:	217f      	movs	r1, #127	@ 0x7f
 80036f0:	52c1      	strh	r1, [r0, r3]
 80036f2:	e7c9      	b.n	8003688 <UART_Start_Receive_IT+0x58>
 80036f4:	2360      	movs	r3, #96	@ 0x60
 80036f6:	213f      	movs	r1, #63	@ 0x3f
 80036f8:	52c1      	strh	r1, [r0, r3]
 80036fa:	e7c5      	b.n	8003688 <UART_Start_Receive_IT+0x58>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80036fc:	2368      	movs	r3, #104	@ 0x68
 80036fe:	5ac3      	ldrh	r3, [r0, r3]
 8003700:	4293      	cmp	r3, r2
 8003702:	d8d7      	bhi.n	80036b4 <UART_Start_Receive_IT+0x84>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003704:	6882      	ldr	r2, [r0, #8]
 8003706:	2380      	movs	r3, #128	@ 0x80
 8003708:	015b      	lsls	r3, r3, #5
 800370a:	429a      	cmp	r2, r3
 800370c:	d01e      	beq.n	800374c <UART_Start_Receive_IT+0x11c>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800370e:	4b1e      	ldr	r3, [pc, #120]	@ (8003788 <UART_Start_Receive_IT+0x158>)
 8003710:	6743      	str	r3, [r0, #116]	@ 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003712:	6903      	ldr	r3, [r0, #16]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d00b      	beq.n	8003730 <UART_Start_Receive_IT+0x100>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003718:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800371c:	2301      	movs	r3, #1
 800371e:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003722:	6802      	ldr	r2, [r0, #0]
 8003724:	6814      	ldr	r4, [r2, #0]
 8003726:	33ff      	adds	r3, #255	@ 0xff
 8003728:	4323      	orrs	r3, r4
 800372a:	6013      	str	r3, [r2, #0]
 800372c:	f381 8810 	msr	PRIMASK, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003730:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003734:	2301      	movs	r3, #1
 8003736:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800373a:	6802      	ldr	r2, [r0, #0]
 800373c:	6890      	ldr	r0, [r2, #8]
 800373e:	2380      	movs	r3, #128	@ 0x80
 8003740:	055b      	lsls	r3, r3, #21
 8003742:	4303      	orrs	r3, r0
 8003744:	6093      	str	r3, [r2, #8]
 8003746:	f381 8810 	msr	PRIMASK, r1
}
 800374a:	e7ca      	b.n	80036e2 <UART_Start_Receive_IT+0xb2>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800374c:	6903      	ldr	r3, [r0, #16]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d1dd      	bne.n	800370e <UART_Start_Receive_IT+0xde>
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8003752:	4b0e      	ldr	r3, [pc, #56]	@ (800378c <UART_Start_Receive_IT+0x15c>)
 8003754:	6743      	str	r3, [r0, #116]	@ 0x74
 8003756:	e7dc      	b.n	8003712 <UART_Start_Receive_IT+0xe2>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003758:	6903      	ldr	r3, [r0, #16]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d1af      	bne.n	80036be <UART_Start_Receive_IT+0x8e>
      huart->RxISR = UART_RxISR_16BIT;
 800375e:	4b0c      	ldr	r3, [pc, #48]	@ (8003790 <UART_Start_Receive_IT+0x160>)
 8003760:	6743      	str	r3, [r0, #116]	@ 0x74
 8003762:	e7ae      	b.n	80036c2 <UART_Start_Receive_IT+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003764:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003768:	2301      	movs	r3, #1
 800376a:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800376e:	6802      	ldr	r2, [r0, #0]
 8003770:	6813      	ldr	r3, [r2, #0]
 8003772:	2020      	movs	r0, #32
 8003774:	4303      	orrs	r3, r0
 8003776:	6013      	str	r3, [r2, #0]
 8003778:	f381 8810 	msr	PRIMASK, r1
}
 800377c:	e7b1      	b.n	80036e2 <UART_Start_Receive_IT+0xb2>
 800377e:	46c0      	nop			@ (mov r8, r8)
 8003780:	000001ff 	.word	0x000001ff
 8003784:	08002c69 	.word	0x08002c69
 8003788:	08002e19 	.word	0x08002e19
 800378c:	08002fe1 	.word	0x08002fe1
 8003790:	08002d41 	.word	0x08002d41

08003794 <HAL_UART_Receive_IT>:
{
 8003794:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8003796:	238c      	movs	r3, #140	@ 0x8c
 8003798:	58c3      	ldr	r3, [r0, r3]
 800379a:	2b20      	cmp	r3, #32
 800379c:	d123      	bne.n	80037e6 <HAL_UART_Receive_IT+0x52>
    if ((pData == NULL) || (Size == 0U))
 800379e:	2900      	cmp	r1, #0
 80037a0:	d023      	beq.n	80037ea <HAL_UART_Receive_IT+0x56>
 80037a2:	2a00      	cmp	r2, #0
 80037a4:	d023      	beq.n	80037ee <HAL_UART_Receive_IT+0x5a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037a6:	6884      	ldr	r4, [r0, #8]
 80037a8:	2380      	movs	r3, #128	@ 0x80
 80037aa:	015b      	lsls	r3, r3, #5
 80037ac:	429c      	cmp	r4, r3
 80037ae:	d104      	bne.n	80037ba <HAL_UART_Receive_IT+0x26>
 80037b0:	6903      	ldr	r3, [r0, #16]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d101      	bne.n	80037ba <HAL_UART_Receive_IT+0x26>
      if ((((uint32_t)pData) & 1U) != 0U)
 80037b6:	07cb      	lsls	r3, r1, #31
 80037b8:	d41b      	bmi.n	80037f2 <HAL_UART_Receive_IT+0x5e>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037ba:	2300      	movs	r3, #0
 80037bc:	66c3      	str	r3, [r0, #108]	@ 0x6c
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80037be:	6803      	ldr	r3, [r0, #0]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	021b      	lsls	r3, r3, #8
 80037c4:	d50c      	bpl.n	80037e0 <HAL_UART_Receive_IT+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80037c6:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037ca:	2301      	movs	r3, #1
 80037cc:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80037d0:	6804      	ldr	r4, [r0, #0]
 80037d2:	6825      	ldr	r5, [r4, #0]
 80037d4:	2380      	movs	r3, #128	@ 0x80
 80037d6:	04db      	lsls	r3, r3, #19
 80037d8:	432b      	orrs	r3, r5
 80037da:	6023      	str	r3, [r4, #0]
 80037dc:	f38c 8810 	msr	PRIMASK, ip
    return (UART_Start_Receive_IT(huart, pData, Size));
 80037e0:	f7ff ff26 	bl	8003630 <UART_Start_Receive_IT>
 80037e4:	e000      	b.n	80037e8 <HAL_UART_Receive_IT+0x54>
    return HAL_BUSY;
 80037e6:	2002      	movs	r0, #2
}
 80037e8:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80037ea:	2001      	movs	r0, #1
 80037ec:	e7fc      	b.n	80037e8 <HAL_UART_Receive_IT+0x54>
 80037ee:	2001      	movs	r0, #1
 80037f0:	e7fa      	b.n	80037e8 <HAL_UART_Receive_IT+0x54>
        return  HAL_ERROR;
 80037f2:	2001      	movs	r0, #1
 80037f4:	e7f8      	b.n	80037e8 <HAL_UART_Receive_IT+0x54>

080037f6 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80037f6:	4770      	bx	lr

080037f8 <HAL_UARTEx_RxFifoFullCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80037f8:	4770      	bx	lr

080037fa <HAL_UARTEx_TxFifoEmptyCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80037fa:	4770      	bx	lr

080037fc <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80037fc:	e7fe      	b.n	80037fc <NMI_Handler>

080037fe <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80037fe:	e7fe      	b.n	80037fe <HardFault_Handler>

08003800 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003800:	4770      	bx	lr

08003802 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003802:	4770      	bx	lr

08003804 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003804:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003806:	f7fd f9d1 	bl	8000bac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800380a:	bd10      	pop	{r4, pc}

0800380c <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800380c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 800380e:	2000      	movs	r0, #0
 8003810:	f000 f906 	bl	8003a20 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8003814:	bd10      	pop	{r4, pc}
	...

08003818 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003818:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800381a:	4802      	ldr	r0, [pc, #8]	@ (8003824 <DMA1_Channel1_IRQHandler+0xc>)
 800381c:	f7fe f800 	bl	8001820 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003820:	bd10      	pop	{r4, pc}
 8003822:	46c0      	nop			@ (mov r8, r8)
 8003824:	200002e8 	.word	0x200002e8

08003828 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8003828:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 800382a:	4802      	ldr	r0, [pc, #8]	@ (8003834 <TIM14_IRQHandler+0xc>)
 800382c:	f7fe fdc6 	bl	80023bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8003830:	bd10      	pop	{r4, pc}
 8003832:	46c0      	nop			@ (mov r8, r8)
 8003834:	2000029c 	.word	0x2000029c

08003838 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 interrupt.
  */
void USART2_IRQHandler(void)
{
 8003838:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800383a:	4802      	ldr	r0, [pc, #8]	@ (8003844 <USART2_IRQHandler+0xc>)
 800383c:	f7ff f87c 	bl	8002938 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003840:	bd10      	pop	{r4, pc}
 8003842:	46c0      	nop			@ (mov r8, r8)
 8003844:	20000208 	.word	0x20000208

08003848 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED4
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8003848:	b570      	push	{r4, r5, r6, lr}
 800384a:	b088      	sub	sp, #32
 800384c:	0004      	movs	r4, r0
  int32_t ret = BSP_ERROR_NONE;
  GPIO_InitTypeDef  gpio_init_structure;

#if defined (USE_NUCLEO_64)
  if ((Led != LED1)
 800384e:	2801      	cmp	r0, #1
 8003850:	d832      	bhi.n	80038b8 <BSP_LED_Init+0x70>
  }
  else
  {
    /* Enable the GPIO LED Clock */
#if defined (USE_NUCLEO_64)
    if (Led == LED1)
 8003852:	2800      	cmp	r0, #0
 8003854:	d11d      	bne.n	8003892 <BSP_LED_Init+0x4a>
    {
      LED1_GPIO_CLK_ENABLE();
 8003856:	4a1a      	ldr	r2, [pc, #104]	@ (80038c0 <BSP_LED_Init+0x78>)
 8003858:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 800385a:	2301      	movs	r3, #1
 800385c:	4319      	orrs	r1, r3
 800385e:	6351      	str	r1, [r2, #52]	@ 0x34
 8003860:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003862:	4013      	ands	r3, r2
 8003864:	9301      	str	r3, [sp, #4]
 8003866:	9b01      	ldr	r3, [sp, #4]
      LED4_GPIO_CLK_ENABLE();
    }
#endif /* defined (USE_NUCLEO_64) */

    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8003868:	4b16      	ldr	r3, [pc, #88]	@ (80038c4 <BSP_LED_Init+0x7c>)
 800386a:	0062      	lsls	r2, r4, #1
 800386c:	5ad6      	ldrh	r6, [r2, r3]
 800386e:	a903      	add	r1, sp, #12
 8003870:	9603      	str	r6, [sp, #12]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8003872:	2301      	movs	r3, #1
 8003874:	604b      	str	r3, [r1, #4]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8003876:	2300      	movs	r3, #0
 8003878:	608b      	str	r3, [r1, #8]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800387a:	3303      	adds	r3, #3
 800387c:	60cb      	str	r3, [r1, #12]

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 800387e:	4b12      	ldr	r3, [pc, #72]	@ (80038c8 <BSP_LED_Init+0x80>)
 8003880:	00a2      	lsls	r2, r4, #2
 8003882:	58d0      	ldr	r0, [r2, r3]
 8003884:	f7fe f870 	bl	8001968 <HAL_GPIO_Init>
#if defined (USE_NUCLEO_64)
    if (Led == LED2)
 8003888:	2c01      	cmp	r4, #1
 800388a:	d00c      	beq.n	80038a6 <BSP_LED_Init+0x5e>
  int32_t ret = BSP_ERROR_NONE;
 800388c:	2000      	movs	r0, #0
     HAL_GPIO_WritePin(LED_PORT [Led], (uint16_t)LED_PIN[Led], GPIO_PIN_SET);
    }
#endif
  }
  return ret;
}
 800388e:	b008      	add	sp, #32
 8003890:	bd70      	pop	{r4, r5, r6, pc}
      LED2_GPIO_CLK_ENABLE();
 8003892:	4a0b      	ldr	r2, [pc, #44]	@ (80038c0 <BSP_LED_Init+0x78>)
 8003894:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 8003896:	2304      	movs	r3, #4
 8003898:	4319      	orrs	r1, r3
 800389a:	6351      	str	r1, [r2, #52]	@ 0x34
 800389c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800389e:	4013      	ands	r3, r2
 80038a0:	9302      	str	r3, [sp, #8]
 80038a2:	9b02      	ldr	r3, [sp, #8]
 80038a4:	e7e0      	b.n	8003868 <BSP_LED_Init+0x20>
     HAL_GPIO_WritePin(LED_PORT [Led], (uint16_t)LED_PIN[Led], GPIO_PIN_SET);
 80038a6:	4b08      	ldr	r3, [pc, #32]	@ (80038c8 <BSP_LED_Init+0x80>)
 80038a8:	00a4      	lsls	r4, r4, #2
 80038aa:	58e0      	ldr	r0, [r4, r3]
 80038ac:	2201      	movs	r2, #1
 80038ae:	0031      	movs	r1, r6
 80038b0:	f7fe f93f 	bl	8001b32 <HAL_GPIO_WritePin>
  int32_t ret = BSP_ERROR_NONE;
 80038b4:	2000      	movs	r0, #0
 80038b6:	e7ea      	b.n	800388e <BSP_LED_Init+0x46>
    ret = BSP_ERROR_WRONG_PARAM;
 80038b8:	2002      	movs	r0, #2
 80038ba:	4240      	negs	r0, r0
 80038bc:	e7e7      	b.n	800388e <BSP_LED_Init+0x46>
 80038be:	46c0      	nop			@ (mov r8, r8)
 80038c0:	40021000 	.word	0x40021000
 80038c4:	08005f54 	.word	0x08005f54
 80038c8:	08005f58 	.word	0x08005f58

080038cc <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED4
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 80038cc:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

#if defined (USE_NUCLEO_64)
  if ((Led != LED1)
 80038ce:	2801      	cmp	r0, #1
 80038d0:	d817      	bhi.n	8003902 <BSP_LED_On+0x36>
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
#if defined (USE_NUCLEO_64)
    if (Led == LED1)
 80038d2:	2800      	cmp	r0, #0
 80038d4:	d10a      	bne.n	80038ec <BSP_LED_On+0x20>
    {
      HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 80038d6:	4b0c      	ldr	r3, [pc, #48]	@ (8003908 <BSP_LED_On+0x3c>)
 80038d8:	0042      	lsls	r2, r0, #1
 80038da:	5ad1      	ldrh	r1, [r2, r3]
 80038dc:	4b0b      	ldr	r3, [pc, #44]	@ (800390c <BSP_LED_On+0x40>)
 80038de:	0080      	lsls	r0, r0, #2
 80038e0:	58c0      	ldr	r0, [r0, r3]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f7fe f925 	bl	8001b32 <HAL_GPIO_WritePin>
  int32_t ret = BSP_ERROR_NONE;
 80038e8:	2000      	movs	r0, #0
     HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
#endif
  }

  return ret;
}
 80038ea:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80038ec:	4b06      	ldr	r3, [pc, #24]	@ (8003908 <BSP_LED_On+0x3c>)
 80038ee:	0042      	lsls	r2, r0, #1
 80038f0:	5ad1      	ldrh	r1, [r2, r3]
 80038f2:	4b06      	ldr	r3, [pc, #24]	@ (800390c <BSP_LED_On+0x40>)
 80038f4:	0080      	lsls	r0, r0, #2
 80038f6:	58c0      	ldr	r0, [r0, r3]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f7fe f91a 	bl	8001b32 <HAL_GPIO_WritePin>
  int32_t ret = BSP_ERROR_NONE;
 80038fe:	2000      	movs	r0, #0
 8003900:	e7f3      	b.n	80038ea <BSP_LED_On+0x1e>
    ret = BSP_ERROR_WRONG_PARAM;
 8003902:	2002      	movs	r0, #2
 8003904:	4240      	negs	r0, r0
  return ret;
 8003906:	e7f0      	b.n	80038ea <BSP_LED_On+0x1e>
 8003908:	08005f54 	.word	0x08005f54
 800390c:	08005f58 	.word	0x08005f58

08003910 <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED4
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8003910:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

#if defined (USE_NUCLEO_64)
  if ((Led != LED1)
 8003912:	2801      	cmp	r0, #1
 8003914:	d817      	bhi.n	8003946 <BSP_LED_Off+0x36>
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
#if defined (USE_NUCLEO_64)
    if (Led == LED1)
 8003916:	2800      	cmp	r0, #0
 8003918:	d10a      	bne.n	8003930 <BSP_LED_Off+0x20>
    {
      HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 800391a:	4b0c      	ldr	r3, [pc, #48]	@ (800394c <BSP_LED_Off+0x3c>)
 800391c:	0042      	lsls	r2, r0, #1
 800391e:	5ad1      	ldrh	r1, [r2, r3]
 8003920:	4b0b      	ldr	r3, [pc, #44]	@ (8003950 <BSP_LED_Off+0x40>)
 8003922:	0080      	lsls	r0, r0, #2
 8003924:	58c0      	ldr	r0, [r0, r3]
 8003926:	2200      	movs	r2, #0
 8003928:	f7fe f903 	bl	8001b32 <HAL_GPIO_WritePin>
  int32_t ret = BSP_ERROR_NONE;
 800392c:	2000      	movs	r0, #0
     HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
#endif
  }

  return ret;
}
 800392e:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8003930:	4b06      	ldr	r3, [pc, #24]	@ (800394c <BSP_LED_Off+0x3c>)
 8003932:	0042      	lsls	r2, r0, #1
 8003934:	5ad1      	ldrh	r1, [r2, r3]
 8003936:	4b06      	ldr	r3, [pc, #24]	@ (8003950 <BSP_LED_Off+0x40>)
 8003938:	0080      	lsls	r0, r0, #2
 800393a:	58c0      	ldr	r0, [r0, r3]
 800393c:	2201      	movs	r2, #1
 800393e:	f7fe f8f8 	bl	8001b32 <HAL_GPIO_WritePin>
  int32_t ret = BSP_ERROR_NONE;
 8003942:	2000      	movs	r0, #0
 8003944:	e7f3      	b.n	800392e <BSP_LED_Off+0x1e>
    ret = BSP_ERROR_WRONG_PARAM;
 8003946:	2002      	movs	r0, #2
 8003948:	4240      	negs	r0, r0
  return ret;
 800394a:	e7f0      	b.n	800392e <BSP_LED_Off+0x1e>
 800394c:	08005f54 	.word	0x08005f54
 8003950:	08005f58 	.word	0x08005f58

08003954 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED4
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8003954:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

#if defined (USE_NUCLEO_64)
  if ((Led != LED1)
 8003956:	2801      	cmp	r0, #1
 8003958:	d809      	bhi.n	800396e <BSP_LED_Toggle+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 800395a:	4b06      	ldr	r3, [pc, #24]	@ (8003974 <BSP_LED_Toggle+0x20>)
 800395c:	0042      	lsls	r2, r0, #1
 800395e:	5ad1      	ldrh	r1, [r2, r3]
 8003960:	4b05      	ldr	r3, [pc, #20]	@ (8003978 <BSP_LED_Toggle+0x24>)
 8003962:	0080      	lsls	r0, r0, #2
 8003964:	58c0      	ldr	r0, [r0, r3]
 8003966:	f7fe f8ea 	bl	8001b3e <HAL_GPIO_TogglePin>
  int32_t ret = BSP_ERROR_NONE;
 800396a:	2000      	movs	r0, #0
  }

  return ret;
}
 800396c:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800396e:	2002      	movs	r0, #2
 8003970:	4240      	negs	r0, r0
  return ret;
 8003972:	e7fb      	b.n	800396c <BSP_LED_Toggle+0x18>
 8003974:	08005f54 	.word	0x08005f54
 8003978:	08005f58 	.word	0x08005f58

0800397c <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 800397c:	b530      	push	{r4, r5, lr}
 800397e:	b087      	sub	sp, #28
 8003980:	0005      	movs	r5, r0
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8003982:	4a1c      	ldr	r2, [pc, #112]	@ (80039f4 <BSP_PB_Init+0x78>)
 8003984:	6b50      	ldr	r0, [r2, #52]	@ 0x34
 8003986:	2304      	movs	r3, #4
 8003988:	4318      	orrs	r0, r3
 800398a:	6350      	str	r0, [r2, #52]	@ 0x34
 800398c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800398e:	4013      	ands	r3, r2
 8003990:	9300      	str	r3, [sp, #0]
 8003992:	9b00      	ldr	r3, [sp, #0]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8003994:	ab01      	add	r3, sp, #4
 8003996:	2280      	movs	r2, #128	@ 0x80
 8003998:	0192      	lsls	r2, r2, #6
 800399a:	9201      	str	r2, [sp, #4]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800399c:	2201      	movs	r2, #1
 800399e:	9203      	str	r2, [sp, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80039a0:	3201      	adds	r2, #1
 80039a2:	9204      	str	r2, [sp, #16]

  if (ButtonMode == BUTTON_MODE_GPIO)
 80039a4:	2900      	cmp	r1, #0
 80039a6:	d108      	bne.n	80039ba <BSP_PB_Init+0x3e>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80039a8:	0019      	movs	r1, r3
 80039aa:	2300      	movs	r3, #0
 80039ac:	604b      	str	r3, [r1, #4]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 80039ae:	4812      	ldr	r0, [pc, #72]	@ (80039f8 <BSP_PB_Init+0x7c>)
 80039b0:	f7fd ffda 	bl	8001968 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
  }

  return BSP_ERROR_NONE;
}
 80039b4:	2000      	movs	r0, #0
 80039b6:	b007      	add	sp, #28
 80039b8:	bd30      	pop	{r4, r5, pc}
    gpio_init_structure.Mode = GPIO_MODE_IT_FALLING;
 80039ba:	a901      	add	r1, sp, #4
 80039bc:	4b0f      	ldr	r3, [pc, #60]	@ (80039fc <BSP_PB_Init+0x80>)
 80039be:	604b      	str	r3, [r1, #4]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80039c0:	480d      	ldr	r0, [pc, #52]	@ (80039f8 <BSP_PB_Init+0x7c>)
 80039c2:	f7fd ffd1 	bl	8001968 <HAL_GPIO_Init>
    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 80039c6:	006c      	lsls	r4, r5, #1
 80039c8:	1964      	adds	r4, r4, r5
 80039ca:	00a4      	lsls	r4, r4, #2
 80039cc:	4b0c      	ldr	r3, [pc, #48]	@ (8003a00 <BSP_PB_Init+0x84>)
 80039ce:	18e4      	adds	r4, r4, r3
 80039d0:	490c      	ldr	r1, [pc, #48]	@ (8003a04 <BSP_PB_Init+0x88>)
 80039d2:	0020      	movs	r0, r4
 80039d4:	f7fd ff9c 	bl	8001910 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 80039d8:	4a0b      	ldr	r2, [pc, #44]	@ (8003a08 <BSP_PB_Init+0x8c>)
 80039da:	2100      	movs	r1, #0
 80039dc:	0020      	movs	r0, r4
 80039de:	f7fd ff85 	bl	80018ec <HAL_EXTI_RegisterCallback>
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80039e2:	2200      	movs	r2, #0
 80039e4:	210f      	movs	r1, #15
 80039e6:	2007      	movs	r0, #7
 80039e8:	f7fd fdfa 	bl	80015e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80039ec:	2007      	movs	r0, #7
 80039ee:	f7fd fdfb 	bl	80015e8 <HAL_NVIC_EnableIRQ>
 80039f2:	e7df      	b.n	80039b4 <BSP_PB_Init+0x38>
 80039f4:	40021000 	.word	0x40021000
 80039f8:	50000800 	.word	0x50000800
 80039fc:	10210000 	.word	0x10210000
 8003a00:	200003ac 	.word	0x200003ac
 8003a04:	0600000d 	.word	0x0600000d
 8003a08:	08003a3b 	.word	0x08003a3b

08003a0c <BSP_PB_GetState>:
  *          This parameter can be one of the following values:
  *            @arg  BUTTON_USER: Wakeup Push Button
  * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
  */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8003a0c:	b510      	push	{r4, lr}
  return (int32_t)HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8003a0e:	2180      	movs	r1, #128	@ 0x80
 8003a10:	0189      	lsls	r1, r1, #6
 8003a12:	4802      	ldr	r0, [pc, #8]	@ (8003a1c <BSP_PB_GetState+0x10>)
 8003a14:	f7fe f886 	bl	8001b24 <HAL_GPIO_ReadPin>
}
 8003a18:	bd10      	pop	{r4, pc}
 8003a1a:	46c0      	nop			@ (mov r8, r8)
 8003a1c:	50000800 	.word	0x50000800

08003a20 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8003a20:	b510      	push	{r4, lr}
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8003a22:	0043      	lsls	r3, r0, #1
 8003a24:	1818      	adds	r0, r3, r0
 8003a26:	0080      	lsls	r0, r0, #2
 8003a28:	4b02      	ldr	r3, [pc, #8]	@ (8003a34 <BSP_PB_IRQHandler+0x14>)
 8003a2a:	18c0      	adds	r0, r0, r3
 8003a2c:	f7fd ff78 	bl	8001920 <HAL_EXTI_IRQHandler>
}
 8003a30:	bd10      	pop	{r4, pc}
 8003a32:	46c0      	nop			@ (mov r8, r8)
 8003a34:	200003ac 	.word	0x200003ac

08003a38 <BSP_PB_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8003a38:	4770      	bx	lr

08003a3a <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8003a3a:	b510      	push	{r4, lr}
  BSP_PB_Callback(BUTTON_USER);
 8003a3c:	2000      	movs	r0, #0
 8003a3e:	f7ff fffb 	bl	8003a38 <BSP_PB_Callback>
}
 8003a42:	bd10      	pop	{r4, pc}

08003a44 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8003a44:	2001      	movs	r0, #1
 8003a46:	4770      	bx	lr

08003a48 <_kill>:

int _kill(int pid, int sig)
{
 8003a48:	b510      	push	{r4, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003a4a:	f000 f9f5 	bl	8003e38 <__errno>
 8003a4e:	2316      	movs	r3, #22
 8003a50:	6003      	str	r3, [r0, #0]
  return -1;
 8003a52:	2001      	movs	r0, #1
}
 8003a54:	4240      	negs	r0, r0
 8003a56:	bd10      	pop	{r4, pc}

08003a58 <_exit>:

void _exit (int status)
{
 8003a58:	b510      	push	{r4, lr}
  _kill(status, -1);
 8003a5a:	2101      	movs	r1, #1
 8003a5c:	4249      	negs	r1, r1
 8003a5e:	f7ff fff3 	bl	8003a48 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003a62:	e7fe      	b.n	8003a62 <_exit+0xa>

08003a64 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003a64:	b570      	push	{r4, r5, r6, lr}
 8003a66:	000c      	movs	r4, r1
 8003a68:	0016      	movs	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a6a:	2500      	movs	r5, #0
 8003a6c:	e004      	b.n	8003a78 <_read+0x14>
  {
    *ptr++ = __io_getchar();
 8003a6e:	e000      	b.n	8003a72 <_read+0xe>
 8003a70:	bf00      	nop
 8003a72:	7020      	strb	r0, [r4, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a74:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 8003a76:	3401      	adds	r4, #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a78:	42b5      	cmp	r5, r6
 8003a7a:	dbf8      	blt.n	8003a6e <_read+0xa>
  }

  return len;
}
 8003a7c:	0030      	movs	r0, r6
 8003a7e:	bd70      	pop	{r4, r5, r6, pc}

08003a80 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003a80:	b570      	push	{r4, r5, r6, lr}
 8003a82:	0016      	movs	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a84:	2400      	movs	r4, #0
 8003a86:	e005      	b.n	8003a94 <_write+0x14>
  {
    __io_putchar(*ptr++);
 8003a88:	1c4d      	adds	r5, r1, #1
 8003a8a:	7808      	ldrb	r0, [r1, #0]
 8003a8c:	e000      	b.n	8003a90 <_write+0x10>
 8003a8e:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a90:	3401      	adds	r4, #1
    __io_putchar(*ptr++);
 8003a92:	0029      	movs	r1, r5
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a94:	42b4      	cmp	r4, r6
 8003a96:	dbf7      	blt.n	8003a88 <_write+0x8>
  }
  return len;
}
 8003a98:	0030      	movs	r0, r6
 8003a9a:	bd70      	pop	{r4, r5, r6, pc}

08003a9c <_close>:

int _close(int file)
{
  (void)file;
  return -1;
 8003a9c:	2001      	movs	r0, #1
}
 8003a9e:	4240      	negs	r0, r0
 8003aa0:	4770      	bx	lr

08003aa2 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8003aa2:	2380      	movs	r3, #128	@ 0x80
 8003aa4:	019b      	lsls	r3, r3, #6
 8003aa6:	604b      	str	r3, [r1, #4]
  return 0;
}
 8003aa8:	2000      	movs	r0, #0
 8003aaa:	4770      	bx	lr

08003aac <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8003aac:	2001      	movs	r0, #1
 8003aae:	4770      	bx	lr

08003ab0 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8003ab0:	2000      	movs	r0, #0
 8003ab2:	4770      	bx	lr

08003ab4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003ab4:	b510      	push	{r4, lr}
 8003ab6:	0003      	movs	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ab8:	4a0c      	ldr	r2, [pc, #48]	@ (8003aec <_sbrk+0x38>)
 8003aba:	490d      	ldr	r1, [pc, #52]	@ (8003af0 <_sbrk+0x3c>)
 8003abc:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003abe:	490d      	ldr	r1, [pc, #52]	@ (8003af4 <_sbrk+0x40>)
 8003ac0:	6809      	ldr	r1, [r1, #0]
 8003ac2:	2900      	cmp	r1, #0
 8003ac4:	d007      	beq.n	8003ad6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003ac6:	490b      	ldr	r1, [pc, #44]	@ (8003af4 <_sbrk+0x40>)
 8003ac8:	6808      	ldr	r0, [r1, #0]
 8003aca:	18c3      	adds	r3, r0, r3
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d806      	bhi.n	8003ade <_sbrk+0x2a>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8003ad0:	4a08      	ldr	r2, [pc, #32]	@ (8003af4 <_sbrk+0x40>)
 8003ad2:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8003ad4:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8003ad6:	4907      	ldr	r1, [pc, #28]	@ (8003af4 <_sbrk+0x40>)
 8003ad8:	4807      	ldr	r0, [pc, #28]	@ (8003af8 <_sbrk+0x44>)
 8003ada:	6008      	str	r0, [r1, #0]
 8003adc:	e7f3      	b.n	8003ac6 <_sbrk+0x12>
    errno = ENOMEM;
 8003ade:	f000 f9ab 	bl	8003e38 <__errno>
 8003ae2:	230c      	movs	r3, #12
 8003ae4:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8003ae6:	2001      	movs	r0, #1
 8003ae8:	4240      	negs	r0, r0
 8003aea:	e7f3      	b.n	8003ad4 <_sbrk+0x20>
 8003aec:	20003000 	.word	0x20003000
 8003af0:	00000400 	.word	0x00000400
 8003af4:	200003b8 	.word	0x200003b8
 8003af8:	20000508 	.word	0x20000508

08003afc <SystemInit>:
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003afc:	4b02      	ldr	r3, [pc, #8]	@ (8003b08 <SystemInit+0xc>)
 8003afe:	2280      	movs	r2, #128	@ 0x80
 8003b00:	0512      	lsls	r2, r2, #20
 8003b02:	609a      	str	r2, [r3, #8]
#endif
}
 8003b04:	4770      	bx	lr
 8003b06:	46c0      	nop			@ (mov r8, r8)
 8003b08:	e000ed00 	.word	0xe000ed00

08003b0c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003b0c:	480d      	ldr	r0, [pc, #52]	@ (8003b44 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003b0e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003b10:	f7ff fff4 	bl	8003afc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003b14:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003b16:	e003      	b.n	8003b20 <LoopCopyDataInit>

08003b18 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003b18:	4b0b      	ldr	r3, [pc, #44]	@ (8003b48 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8003b1a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003b1c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003b1e:	3104      	adds	r1, #4

08003b20 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003b20:	480a      	ldr	r0, [pc, #40]	@ (8003b4c <LoopForever+0xa>)
  ldr r3, =_edata
 8003b22:	4b0b      	ldr	r3, [pc, #44]	@ (8003b50 <LoopForever+0xe>)
  adds r2, r0, r1
 8003b24:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003b26:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003b28:	d3f6      	bcc.n	8003b18 <CopyDataInit>
  ldr r2, =_sbss
 8003b2a:	4a0a      	ldr	r2, [pc, #40]	@ (8003b54 <LoopForever+0x12>)
  b LoopFillZerobss
 8003b2c:	e002      	b.n	8003b34 <LoopFillZerobss>

08003b2e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003b2e:	2300      	movs	r3, #0
  str  r3, [r2]
 8003b30:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b32:	3204      	adds	r2, #4

08003b34 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8003b34:	4b08      	ldr	r3, [pc, #32]	@ (8003b58 <LoopForever+0x16>)
  cmp r2, r3
 8003b36:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003b38:	d3f9      	bcc.n	8003b2e <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8003b3a:	f000 f983 	bl	8003e44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003b3e:	f7fc ffb5 	bl	8000aac <main>

08003b42 <LoopForever>:

LoopForever:
    b LoopForever
 8003b42:	e7fe      	b.n	8003b42 <LoopForever>
  ldr   r0, =_estack
 8003b44:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 8003b48:	08006100 	.word	0x08006100
  ldr r0, =_sdata
 8003b4c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003b50:	20000068 	.word	0x20000068
  ldr r2, =_sbss
 8003b54:	20000068 	.word	0x20000068
  ldr r3, = _ebss
 8003b58:	20000508 	.word	0x20000508

08003b5c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003b5c:	e7fe      	b.n	8003b5c <ADC1_IRQHandler>
	...

08003b60 <sniprintf>:
 8003b60:	b40c      	push	{r2, r3}
 8003b62:	b530      	push	{r4, r5, lr}
 8003b64:	4b17      	ldr	r3, [pc, #92]	@ (8003bc4 <sniprintf+0x64>)
 8003b66:	000c      	movs	r4, r1
 8003b68:	681d      	ldr	r5, [r3, #0]
 8003b6a:	b09d      	sub	sp, #116	@ 0x74
 8003b6c:	2900      	cmp	r1, #0
 8003b6e:	da08      	bge.n	8003b82 <sniprintf+0x22>
 8003b70:	238b      	movs	r3, #139	@ 0x8b
 8003b72:	2001      	movs	r0, #1
 8003b74:	602b      	str	r3, [r5, #0]
 8003b76:	4240      	negs	r0, r0
 8003b78:	b01d      	add	sp, #116	@ 0x74
 8003b7a:	bc30      	pop	{r4, r5}
 8003b7c:	bc08      	pop	{r3}
 8003b7e:	b002      	add	sp, #8
 8003b80:	4718      	bx	r3
 8003b82:	2382      	movs	r3, #130	@ 0x82
 8003b84:	a902      	add	r1, sp, #8
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	818b      	strh	r3, [r1, #12]
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	9002      	str	r0, [sp, #8]
 8003b8e:	664b      	str	r3, [r1, #100]	@ 0x64
 8003b90:	6108      	str	r0, [r1, #16]
 8003b92:	429c      	cmp	r4, r3
 8003b94:	d000      	beq.n	8003b98 <sniprintf+0x38>
 8003b96:	1e63      	subs	r3, r4, #1
 8003b98:	608b      	str	r3, [r1, #8]
 8003b9a:	614b      	str	r3, [r1, #20]
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	425b      	negs	r3, r3
 8003ba0:	81cb      	strh	r3, [r1, #14]
 8003ba2:	0028      	movs	r0, r5
 8003ba4:	ab21      	add	r3, sp, #132	@ 0x84
 8003ba6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003ba8:	9301      	str	r3, [sp, #4]
 8003baa:	f000 fa23 	bl	8003ff4 <_svfiprintf_r>
 8003bae:	1c43      	adds	r3, r0, #1
 8003bb0:	da01      	bge.n	8003bb6 <sniprintf+0x56>
 8003bb2:	238b      	movs	r3, #139	@ 0x8b
 8003bb4:	602b      	str	r3, [r5, #0]
 8003bb6:	2c00      	cmp	r4, #0
 8003bb8:	d0de      	beq.n	8003b78 <sniprintf+0x18>
 8003bba:	2200      	movs	r2, #0
 8003bbc:	9b02      	ldr	r3, [sp, #8]
 8003bbe:	701a      	strb	r2, [r3, #0]
 8003bc0:	e7da      	b.n	8003b78 <sniprintf+0x18>
 8003bc2:	46c0      	nop			@ (mov r8, r8)
 8003bc4:	20000018 	.word	0x20000018

08003bc8 <srand>:
 8003bc8:	4b10      	ldr	r3, [pc, #64]	@ (8003c0c <srand+0x44>)
 8003bca:	b570      	push	{r4, r5, r6, lr}
 8003bcc:	681d      	ldr	r5, [r3, #0]
 8003bce:	0004      	movs	r4, r0
 8003bd0:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8003bd2:	2a00      	cmp	r2, #0
 8003bd4:	d116      	bne.n	8003c04 <srand+0x3c>
 8003bd6:	2018      	movs	r0, #24
 8003bd8:	f000 fb10 	bl	80041fc <malloc>
 8003bdc:	1e02      	subs	r2, r0, #0
 8003bde:	6328      	str	r0, [r5, #48]	@ 0x30
 8003be0:	d104      	bne.n	8003bec <srand+0x24>
 8003be2:	2146      	movs	r1, #70	@ 0x46
 8003be4:	4b0a      	ldr	r3, [pc, #40]	@ (8003c10 <srand+0x48>)
 8003be6:	480b      	ldr	r0, [pc, #44]	@ (8003c14 <srand+0x4c>)
 8003be8:	f000 f982 	bl	8003ef0 <__assert_func>
 8003bec:	4b0a      	ldr	r3, [pc, #40]	@ (8003c18 <srand+0x50>)
 8003bee:	2100      	movs	r1, #0
 8003bf0:	6003      	str	r3, [r0, #0]
 8003bf2:	4b0a      	ldr	r3, [pc, #40]	@ (8003c1c <srand+0x54>)
 8003bf4:	6043      	str	r3, [r0, #4]
 8003bf6:	4b0a      	ldr	r3, [pc, #40]	@ (8003c20 <srand+0x58>)
 8003bf8:	6083      	str	r3, [r0, #8]
 8003bfa:	230b      	movs	r3, #11
 8003bfc:	8183      	strh	r3, [r0, #12]
 8003bfe:	2001      	movs	r0, #1
 8003c00:	6110      	str	r0, [r2, #16]
 8003c02:	6151      	str	r1, [r2, #20]
 8003c04:	2300      	movs	r3, #0
 8003c06:	6114      	str	r4, [r2, #16]
 8003c08:	6153      	str	r3, [r2, #20]
 8003c0a:	bd70      	pop	{r4, r5, r6, pc}
 8003c0c:	20000018 	.word	0x20000018
 8003c10:	08005fc0 	.word	0x08005fc0
 8003c14:	08005fd7 	.word	0x08005fd7
 8003c18:	abcd330e 	.word	0xabcd330e
 8003c1c:	e66d1234 	.word	0xe66d1234
 8003c20:	0005deec 	.word	0x0005deec

08003c24 <rand>:
 8003c24:	4b16      	ldr	r3, [pc, #88]	@ (8003c80 <rand+0x5c>)
 8003c26:	b570      	push	{r4, r5, r6, lr}
 8003c28:	681d      	ldr	r5, [r3, #0]
 8003c2a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8003c2c:	2c00      	cmp	r4, #0
 8003c2e:	d117      	bne.n	8003c60 <rand+0x3c>
 8003c30:	2018      	movs	r0, #24
 8003c32:	f000 fae3 	bl	80041fc <malloc>
 8003c36:	1e04      	subs	r4, r0, #0
 8003c38:	6328      	str	r0, [r5, #48]	@ 0x30
 8003c3a:	d105      	bne.n	8003c48 <rand+0x24>
 8003c3c:	0022      	movs	r2, r4
 8003c3e:	2152      	movs	r1, #82	@ 0x52
 8003c40:	4b10      	ldr	r3, [pc, #64]	@ (8003c84 <rand+0x60>)
 8003c42:	4811      	ldr	r0, [pc, #68]	@ (8003c88 <rand+0x64>)
 8003c44:	f000 f954 	bl	8003ef0 <__assert_func>
 8003c48:	4b10      	ldr	r3, [pc, #64]	@ (8003c8c <rand+0x68>)
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	6003      	str	r3, [r0, #0]
 8003c4e:	4b10      	ldr	r3, [pc, #64]	@ (8003c90 <rand+0x6c>)
 8003c50:	6043      	str	r3, [r0, #4]
 8003c52:	4b10      	ldr	r3, [pc, #64]	@ (8003c94 <rand+0x70>)
 8003c54:	6083      	str	r3, [r0, #8]
 8003c56:	230b      	movs	r3, #11
 8003c58:	8183      	strh	r3, [r0, #12]
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	6102      	str	r2, [r0, #16]
 8003c5e:	6143      	str	r3, [r0, #20]
 8003c60:	6920      	ldr	r0, [r4, #16]
 8003c62:	6961      	ldr	r1, [r4, #20]
 8003c64:	4a0c      	ldr	r2, [pc, #48]	@ (8003c98 <rand+0x74>)
 8003c66:	4b0d      	ldr	r3, [pc, #52]	@ (8003c9c <rand+0x78>)
 8003c68:	f001 f9de 	bl	8005028 <__aeabi_lmul>
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	2300      	movs	r3, #0
 8003c70:	1880      	adds	r0, r0, r2
 8003c72:	4159      	adcs	r1, r3
 8003c74:	6120      	str	r0, [r4, #16]
 8003c76:	6161      	str	r1, [r4, #20]
 8003c78:	0048      	lsls	r0, r1, #1
 8003c7a:	0840      	lsrs	r0, r0, #1
 8003c7c:	bd70      	pop	{r4, r5, r6, pc}
 8003c7e:	46c0      	nop			@ (mov r8, r8)
 8003c80:	20000018 	.word	0x20000018
 8003c84:	08005fc0 	.word	0x08005fc0
 8003c88:	08005fd7 	.word	0x08005fd7
 8003c8c:	abcd330e 	.word	0xabcd330e
 8003c90:	e66d1234 	.word	0xe66d1234
 8003c94:	0005deec 	.word	0x0005deec
 8003c98:	4c957f2d 	.word	0x4c957f2d
 8003c9c:	5851f42d 	.word	0x5851f42d

08003ca0 <std>:
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	b510      	push	{r4, lr}
 8003ca4:	0004      	movs	r4, r0
 8003ca6:	6003      	str	r3, [r0, #0]
 8003ca8:	6043      	str	r3, [r0, #4]
 8003caa:	6083      	str	r3, [r0, #8]
 8003cac:	8181      	strh	r1, [r0, #12]
 8003cae:	6643      	str	r3, [r0, #100]	@ 0x64
 8003cb0:	81c2      	strh	r2, [r0, #14]
 8003cb2:	6103      	str	r3, [r0, #16]
 8003cb4:	6143      	str	r3, [r0, #20]
 8003cb6:	6183      	str	r3, [r0, #24]
 8003cb8:	0019      	movs	r1, r3
 8003cba:	2208      	movs	r2, #8
 8003cbc:	305c      	adds	r0, #92	@ 0x5c
 8003cbe:	f000 f8b3 	bl	8003e28 <memset>
 8003cc2:	4b0b      	ldr	r3, [pc, #44]	@ (8003cf0 <std+0x50>)
 8003cc4:	6224      	str	r4, [r4, #32]
 8003cc6:	6263      	str	r3, [r4, #36]	@ 0x24
 8003cc8:	4b0a      	ldr	r3, [pc, #40]	@ (8003cf4 <std+0x54>)
 8003cca:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003ccc:	4b0a      	ldr	r3, [pc, #40]	@ (8003cf8 <std+0x58>)
 8003cce:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003cd0:	4b0a      	ldr	r3, [pc, #40]	@ (8003cfc <std+0x5c>)
 8003cd2:	6323      	str	r3, [r4, #48]	@ 0x30
 8003cd4:	4b0a      	ldr	r3, [pc, #40]	@ (8003d00 <std+0x60>)
 8003cd6:	429c      	cmp	r4, r3
 8003cd8:	d005      	beq.n	8003ce6 <std+0x46>
 8003cda:	4b0a      	ldr	r3, [pc, #40]	@ (8003d04 <std+0x64>)
 8003cdc:	429c      	cmp	r4, r3
 8003cde:	d002      	beq.n	8003ce6 <std+0x46>
 8003ce0:	4b09      	ldr	r3, [pc, #36]	@ (8003d08 <std+0x68>)
 8003ce2:	429c      	cmp	r4, r3
 8003ce4:	d103      	bne.n	8003cee <std+0x4e>
 8003ce6:	0020      	movs	r0, r4
 8003ce8:	3058      	adds	r0, #88	@ 0x58
 8003cea:	f000 f8eb 	bl	8003ec4 <__retarget_lock_init_recursive>
 8003cee:	bd10      	pop	{r4, pc}
 8003cf0:	080047d9 	.word	0x080047d9
 8003cf4:	08004801 	.word	0x08004801
 8003cf8:	08004839 	.word	0x08004839
 8003cfc:	08004865 	.word	0x08004865
 8003d00:	200003bc 	.word	0x200003bc
 8003d04:	20000424 	.word	0x20000424
 8003d08:	2000048c 	.word	0x2000048c

08003d0c <stdio_exit_handler>:
 8003d0c:	b510      	push	{r4, lr}
 8003d0e:	4a03      	ldr	r2, [pc, #12]	@ (8003d1c <stdio_exit_handler+0x10>)
 8003d10:	4903      	ldr	r1, [pc, #12]	@ (8003d20 <stdio_exit_handler+0x14>)
 8003d12:	4804      	ldr	r0, [pc, #16]	@ (8003d24 <stdio_exit_handler+0x18>)
 8003d14:	f000 f86c 	bl	8003df0 <_fwalk_sglue>
 8003d18:	bd10      	pop	{r4, pc}
 8003d1a:	46c0      	nop			@ (mov r8, r8)
 8003d1c:	2000000c 	.word	0x2000000c
 8003d20:	08004761 	.word	0x08004761
 8003d24:	2000001c 	.word	0x2000001c

08003d28 <cleanup_stdio>:
 8003d28:	6841      	ldr	r1, [r0, #4]
 8003d2a:	4b0b      	ldr	r3, [pc, #44]	@ (8003d58 <cleanup_stdio+0x30>)
 8003d2c:	b510      	push	{r4, lr}
 8003d2e:	0004      	movs	r4, r0
 8003d30:	4299      	cmp	r1, r3
 8003d32:	d001      	beq.n	8003d38 <cleanup_stdio+0x10>
 8003d34:	f000 fd14 	bl	8004760 <_fflush_r>
 8003d38:	68a1      	ldr	r1, [r4, #8]
 8003d3a:	4b08      	ldr	r3, [pc, #32]	@ (8003d5c <cleanup_stdio+0x34>)
 8003d3c:	4299      	cmp	r1, r3
 8003d3e:	d002      	beq.n	8003d46 <cleanup_stdio+0x1e>
 8003d40:	0020      	movs	r0, r4
 8003d42:	f000 fd0d 	bl	8004760 <_fflush_r>
 8003d46:	68e1      	ldr	r1, [r4, #12]
 8003d48:	4b05      	ldr	r3, [pc, #20]	@ (8003d60 <cleanup_stdio+0x38>)
 8003d4a:	4299      	cmp	r1, r3
 8003d4c:	d002      	beq.n	8003d54 <cleanup_stdio+0x2c>
 8003d4e:	0020      	movs	r0, r4
 8003d50:	f000 fd06 	bl	8004760 <_fflush_r>
 8003d54:	bd10      	pop	{r4, pc}
 8003d56:	46c0      	nop			@ (mov r8, r8)
 8003d58:	200003bc 	.word	0x200003bc
 8003d5c:	20000424 	.word	0x20000424
 8003d60:	2000048c 	.word	0x2000048c

08003d64 <global_stdio_init.part.0>:
 8003d64:	b510      	push	{r4, lr}
 8003d66:	4b09      	ldr	r3, [pc, #36]	@ (8003d8c <global_stdio_init.part.0+0x28>)
 8003d68:	4a09      	ldr	r2, [pc, #36]	@ (8003d90 <global_stdio_init.part.0+0x2c>)
 8003d6a:	2104      	movs	r1, #4
 8003d6c:	601a      	str	r2, [r3, #0]
 8003d6e:	4809      	ldr	r0, [pc, #36]	@ (8003d94 <global_stdio_init.part.0+0x30>)
 8003d70:	2200      	movs	r2, #0
 8003d72:	f7ff ff95 	bl	8003ca0 <std>
 8003d76:	2201      	movs	r2, #1
 8003d78:	2109      	movs	r1, #9
 8003d7a:	4807      	ldr	r0, [pc, #28]	@ (8003d98 <global_stdio_init.part.0+0x34>)
 8003d7c:	f7ff ff90 	bl	8003ca0 <std>
 8003d80:	2202      	movs	r2, #2
 8003d82:	2112      	movs	r1, #18
 8003d84:	4805      	ldr	r0, [pc, #20]	@ (8003d9c <global_stdio_init.part.0+0x38>)
 8003d86:	f7ff ff8b 	bl	8003ca0 <std>
 8003d8a:	bd10      	pop	{r4, pc}
 8003d8c:	200004f4 	.word	0x200004f4
 8003d90:	08003d0d 	.word	0x08003d0d
 8003d94:	200003bc 	.word	0x200003bc
 8003d98:	20000424 	.word	0x20000424
 8003d9c:	2000048c 	.word	0x2000048c

08003da0 <__sfp_lock_acquire>:
 8003da0:	b510      	push	{r4, lr}
 8003da2:	4802      	ldr	r0, [pc, #8]	@ (8003dac <__sfp_lock_acquire+0xc>)
 8003da4:	f000 f88f 	bl	8003ec6 <__retarget_lock_acquire_recursive>
 8003da8:	bd10      	pop	{r4, pc}
 8003daa:	46c0      	nop			@ (mov r8, r8)
 8003dac:	200004f9 	.word	0x200004f9

08003db0 <__sfp_lock_release>:
 8003db0:	b510      	push	{r4, lr}
 8003db2:	4802      	ldr	r0, [pc, #8]	@ (8003dbc <__sfp_lock_release+0xc>)
 8003db4:	f000 f888 	bl	8003ec8 <__retarget_lock_release_recursive>
 8003db8:	bd10      	pop	{r4, pc}
 8003dba:	46c0      	nop			@ (mov r8, r8)
 8003dbc:	200004f9 	.word	0x200004f9

08003dc0 <__sinit>:
 8003dc0:	b510      	push	{r4, lr}
 8003dc2:	0004      	movs	r4, r0
 8003dc4:	f7ff ffec 	bl	8003da0 <__sfp_lock_acquire>
 8003dc8:	6a23      	ldr	r3, [r4, #32]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d002      	beq.n	8003dd4 <__sinit+0x14>
 8003dce:	f7ff ffef 	bl	8003db0 <__sfp_lock_release>
 8003dd2:	bd10      	pop	{r4, pc}
 8003dd4:	4b04      	ldr	r3, [pc, #16]	@ (8003de8 <__sinit+0x28>)
 8003dd6:	6223      	str	r3, [r4, #32]
 8003dd8:	4b04      	ldr	r3, [pc, #16]	@ (8003dec <__sinit+0x2c>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d1f6      	bne.n	8003dce <__sinit+0xe>
 8003de0:	f7ff ffc0 	bl	8003d64 <global_stdio_init.part.0>
 8003de4:	e7f3      	b.n	8003dce <__sinit+0xe>
 8003de6:	46c0      	nop			@ (mov r8, r8)
 8003de8:	08003d29 	.word	0x08003d29
 8003dec:	200004f4 	.word	0x200004f4

08003df0 <_fwalk_sglue>:
 8003df0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003df2:	0014      	movs	r4, r2
 8003df4:	2600      	movs	r6, #0
 8003df6:	9000      	str	r0, [sp, #0]
 8003df8:	9101      	str	r1, [sp, #4]
 8003dfa:	68a5      	ldr	r5, [r4, #8]
 8003dfc:	6867      	ldr	r7, [r4, #4]
 8003dfe:	3f01      	subs	r7, #1
 8003e00:	d504      	bpl.n	8003e0c <_fwalk_sglue+0x1c>
 8003e02:	6824      	ldr	r4, [r4, #0]
 8003e04:	2c00      	cmp	r4, #0
 8003e06:	d1f8      	bne.n	8003dfa <_fwalk_sglue+0xa>
 8003e08:	0030      	movs	r0, r6
 8003e0a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003e0c:	89ab      	ldrh	r3, [r5, #12]
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d908      	bls.n	8003e24 <_fwalk_sglue+0x34>
 8003e12:	220e      	movs	r2, #14
 8003e14:	5eab      	ldrsh	r3, [r5, r2]
 8003e16:	3301      	adds	r3, #1
 8003e18:	d004      	beq.n	8003e24 <_fwalk_sglue+0x34>
 8003e1a:	0029      	movs	r1, r5
 8003e1c:	9800      	ldr	r0, [sp, #0]
 8003e1e:	9b01      	ldr	r3, [sp, #4]
 8003e20:	4798      	blx	r3
 8003e22:	4306      	orrs	r6, r0
 8003e24:	3568      	adds	r5, #104	@ 0x68
 8003e26:	e7ea      	b.n	8003dfe <_fwalk_sglue+0xe>

08003e28 <memset>:
 8003e28:	0003      	movs	r3, r0
 8003e2a:	1882      	adds	r2, r0, r2
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d100      	bne.n	8003e32 <memset+0xa>
 8003e30:	4770      	bx	lr
 8003e32:	7019      	strb	r1, [r3, #0]
 8003e34:	3301      	adds	r3, #1
 8003e36:	e7f9      	b.n	8003e2c <memset+0x4>

08003e38 <__errno>:
 8003e38:	4b01      	ldr	r3, [pc, #4]	@ (8003e40 <__errno+0x8>)
 8003e3a:	6818      	ldr	r0, [r3, #0]
 8003e3c:	4770      	bx	lr
 8003e3e:	46c0      	nop			@ (mov r8, r8)
 8003e40:	20000018 	.word	0x20000018

08003e44 <__libc_init_array>:
 8003e44:	b570      	push	{r4, r5, r6, lr}
 8003e46:	2600      	movs	r6, #0
 8003e48:	4c0c      	ldr	r4, [pc, #48]	@ (8003e7c <__libc_init_array+0x38>)
 8003e4a:	4d0d      	ldr	r5, [pc, #52]	@ (8003e80 <__libc_init_array+0x3c>)
 8003e4c:	1b64      	subs	r4, r4, r5
 8003e4e:	10a4      	asrs	r4, r4, #2
 8003e50:	42a6      	cmp	r6, r4
 8003e52:	d109      	bne.n	8003e68 <__libc_init_array+0x24>
 8003e54:	2600      	movs	r6, #0
 8003e56:	f001 fff7 	bl	8005e48 <_init>
 8003e5a:	4c0a      	ldr	r4, [pc, #40]	@ (8003e84 <__libc_init_array+0x40>)
 8003e5c:	4d0a      	ldr	r5, [pc, #40]	@ (8003e88 <__libc_init_array+0x44>)
 8003e5e:	1b64      	subs	r4, r4, r5
 8003e60:	10a4      	asrs	r4, r4, #2
 8003e62:	42a6      	cmp	r6, r4
 8003e64:	d105      	bne.n	8003e72 <__libc_init_array+0x2e>
 8003e66:	bd70      	pop	{r4, r5, r6, pc}
 8003e68:	00b3      	lsls	r3, r6, #2
 8003e6a:	58eb      	ldr	r3, [r5, r3]
 8003e6c:	4798      	blx	r3
 8003e6e:	3601      	adds	r6, #1
 8003e70:	e7ee      	b.n	8003e50 <__libc_init_array+0xc>
 8003e72:	00b3      	lsls	r3, r6, #2
 8003e74:	58eb      	ldr	r3, [r5, r3]
 8003e76:	4798      	blx	r3
 8003e78:	3601      	adds	r6, #1
 8003e7a:	e7f2      	b.n	8003e62 <__libc_init_array+0x1e>
 8003e7c:	080060f8 	.word	0x080060f8
 8003e80:	080060f8 	.word	0x080060f8
 8003e84:	080060fc 	.word	0x080060fc
 8003e88:	080060f8 	.word	0x080060f8

08003e8c <time>:
 8003e8c:	b5df      	push	{r0, r1, r2, r3, r4, r6, r7, lr}
 8003e8e:	2601      	movs	r6, #1
 8003e90:	4276      	negs	r6, r6
 8003e92:	17f7      	asrs	r7, r6, #31
 8003e94:	4b0a      	ldr	r3, [pc, #40]	@ (8003ec0 <time+0x34>)
 8003e96:	0004      	movs	r4, r0
 8003e98:	2200      	movs	r2, #0
 8003e9a:	4669      	mov	r1, sp
 8003e9c:	6818      	ldr	r0, [r3, #0]
 8003e9e:	9600      	str	r6, [sp, #0]
 8003ea0:	9701      	str	r7, [sp, #4]
 8003ea2:	f000 f813 	bl	8003ecc <_gettimeofday_r>
 8003ea6:	2800      	cmp	r0, #0
 8003ea8:	da01      	bge.n	8003eae <time+0x22>
 8003eaa:	9600      	str	r6, [sp, #0]
 8003eac:	9701      	str	r7, [sp, #4]
 8003eae:	9800      	ldr	r0, [sp, #0]
 8003eb0:	9901      	ldr	r1, [sp, #4]
 8003eb2:	2c00      	cmp	r4, #0
 8003eb4:	d001      	beq.n	8003eba <time+0x2e>
 8003eb6:	6020      	str	r0, [r4, #0]
 8003eb8:	6061      	str	r1, [r4, #4]
 8003eba:	b004      	add	sp, #16
 8003ebc:	bdd0      	pop	{r4, r6, r7, pc}
 8003ebe:	46c0      	nop			@ (mov r8, r8)
 8003ec0:	20000018 	.word	0x20000018

08003ec4 <__retarget_lock_init_recursive>:
 8003ec4:	4770      	bx	lr

08003ec6 <__retarget_lock_acquire_recursive>:
 8003ec6:	4770      	bx	lr

08003ec8 <__retarget_lock_release_recursive>:
 8003ec8:	4770      	bx	lr
	...

08003ecc <_gettimeofday_r>:
 8003ecc:	2300      	movs	r3, #0
 8003ece:	b570      	push	{r4, r5, r6, lr}
 8003ed0:	4d06      	ldr	r5, [pc, #24]	@ (8003eec <_gettimeofday_r+0x20>)
 8003ed2:	0004      	movs	r4, r0
 8003ed4:	0008      	movs	r0, r1
 8003ed6:	0011      	movs	r1, r2
 8003ed8:	602b      	str	r3, [r5, #0]
 8003eda:	f001 f89d 	bl	8005018 <_gettimeofday>
 8003ede:	1c43      	adds	r3, r0, #1
 8003ee0:	d103      	bne.n	8003eea <_gettimeofday_r+0x1e>
 8003ee2:	682b      	ldr	r3, [r5, #0]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d000      	beq.n	8003eea <_gettimeofday_r+0x1e>
 8003ee8:	6023      	str	r3, [r4, #0]
 8003eea:	bd70      	pop	{r4, r5, r6, pc}
 8003eec:	20000504 	.word	0x20000504

08003ef0 <__assert_func>:
 8003ef0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8003ef2:	0014      	movs	r4, r2
 8003ef4:	001a      	movs	r2, r3
 8003ef6:	4b09      	ldr	r3, [pc, #36]	@ (8003f1c <__assert_func+0x2c>)
 8003ef8:	0005      	movs	r5, r0
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	000e      	movs	r6, r1
 8003efe:	68d8      	ldr	r0, [r3, #12]
 8003f00:	4b07      	ldr	r3, [pc, #28]	@ (8003f20 <__assert_func+0x30>)
 8003f02:	2c00      	cmp	r4, #0
 8003f04:	d101      	bne.n	8003f0a <__assert_func+0x1a>
 8003f06:	4b07      	ldr	r3, [pc, #28]	@ (8003f24 <__assert_func+0x34>)
 8003f08:	001c      	movs	r4, r3
 8003f0a:	4907      	ldr	r1, [pc, #28]	@ (8003f28 <__assert_func+0x38>)
 8003f0c:	9301      	str	r3, [sp, #4]
 8003f0e:	9402      	str	r4, [sp, #8]
 8003f10:	002b      	movs	r3, r5
 8003f12:	9600      	str	r6, [sp, #0]
 8003f14:	f000 fcac 	bl	8004870 <fiprintf>
 8003f18:	f000 fd70 	bl	80049fc <abort>
 8003f1c:	20000018 	.word	0x20000018
 8003f20:	08006088 	.word	0x08006088
 8003f24:	080060c3 	.word	0x080060c3
 8003f28:	08006095 	.word	0x08006095

08003f2c <__ssputs_r>:
 8003f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f2e:	688e      	ldr	r6, [r1, #8]
 8003f30:	b085      	sub	sp, #20
 8003f32:	001f      	movs	r7, r3
 8003f34:	000c      	movs	r4, r1
 8003f36:	0033      	movs	r3, r6
 8003f38:	9002      	str	r0, [sp, #8]
 8003f3a:	9203      	str	r2, [sp, #12]
 8003f3c:	42be      	cmp	r6, r7
 8003f3e:	d854      	bhi.n	8003fea <__ssputs_r+0xbe>
 8003f40:	220c      	movs	r2, #12
 8003f42:	5e88      	ldrsh	r0, [r1, r2]
 8003f44:	2290      	movs	r2, #144	@ 0x90
 8003f46:	00d2      	lsls	r2, r2, #3
 8003f48:	4210      	tst	r0, r2
 8003f4a:	d02c      	beq.n	8003fa6 <__ssputs_r+0x7a>
 8003f4c:	2203      	movs	r2, #3
 8003f4e:	6909      	ldr	r1, [r1, #16]
 8003f50:	6823      	ldr	r3, [r4, #0]
 8003f52:	1a5b      	subs	r3, r3, r1
 8003f54:	9301      	str	r3, [sp, #4]
 8003f56:	6963      	ldr	r3, [r4, #20]
 8003f58:	4353      	muls	r3, r2
 8003f5a:	9a01      	ldr	r2, [sp, #4]
 8003f5c:	0fdd      	lsrs	r5, r3, #31
 8003f5e:	18ed      	adds	r5, r5, r3
 8003f60:	1c7b      	adds	r3, r7, #1
 8003f62:	106d      	asrs	r5, r5, #1
 8003f64:	189b      	adds	r3, r3, r2
 8003f66:	002a      	movs	r2, r5
 8003f68:	42ab      	cmp	r3, r5
 8003f6a:	d901      	bls.n	8003f70 <__ssputs_r+0x44>
 8003f6c:	001d      	movs	r5, r3
 8003f6e:	001a      	movs	r2, r3
 8003f70:	0540      	lsls	r0, r0, #21
 8003f72:	d527      	bpl.n	8003fc4 <__ssputs_r+0x98>
 8003f74:	0011      	movs	r1, r2
 8003f76:	9802      	ldr	r0, [sp, #8]
 8003f78:	f000 f96c 	bl	8004254 <_malloc_r>
 8003f7c:	1e06      	subs	r6, r0, #0
 8003f7e:	d02a      	beq.n	8003fd6 <__ssputs_r+0xaa>
 8003f80:	9a01      	ldr	r2, [sp, #4]
 8003f82:	6921      	ldr	r1, [r4, #16]
 8003f84:	f000 fd31 	bl	80049ea <memcpy>
 8003f88:	89a2      	ldrh	r2, [r4, #12]
 8003f8a:	4b19      	ldr	r3, [pc, #100]	@ (8003ff0 <__ssputs_r+0xc4>)
 8003f8c:	401a      	ands	r2, r3
 8003f8e:	2380      	movs	r3, #128	@ 0x80
 8003f90:	4313      	orrs	r3, r2
 8003f92:	81a3      	strh	r3, [r4, #12]
 8003f94:	9b01      	ldr	r3, [sp, #4]
 8003f96:	6126      	str	r6, [r4, #16]
 8003f98:	18f6      	adds	r6, r6, r3
 8003f9a:	6026      	str	r6, [r4, #0]
 8003f9c:	6165      	str	r5, [r4, #20]
 8003f9e:	003e      	movs	r6, r7
 8003fa0:	1aed      	subs	r5, r5, r3
 8003fa2:	003b      	movs	r3, r7
 8003fa4:	60a5      	str	r5, [r4, #8]
 8003fa6:	001f      	movs	r7, r3
 8003fa8:	003a      	movs	r2, r7
 8003faa:	9903      	ldr	r1, [sp, #12]
 8003fac:	6820      	ldr	r0, [r4, #0]
 8003fae:	f000 fc9f 	bl	80048f0 <memmove>
 8003fb2:	2000      	movs	r0, #0
 8003fb4:	68a3      	ldr	r3, [r4, #8]
 8003fb6:	1b9b      	subs	r3, r3, r6
 8003fb8:	60a3      	str	r3, [r4, #8]
 8003fba:	6823      	ldr	r3, [r4, #0]
 8003fbc:	19db      	adds	r3, r3, r7
 8003fbe:	6023      	str	r3, [r4, #0]
 8003fc0:	b005      	add	sp, #20
 8003fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fc4:	9802      	ldr	r0, [sp, #8]
 8003fc6:	f000 fc63 	bl	8004890 <_realloc_r>
 8003fca:	1e06      	subs	r6, r0, #0
 8003fcc:	d1e2      	bne.n	8003f94 <__ssputs_r+0x68>
 8003fce:	6921      	ldr	r1, [r4, #16]
 8003fd0:	9802      	ldr	r0, [sp, #8]
 8003fd2:	f000 fd1b 	bl	8004a0c <_free_r>
 8003fd6:	230c      	movs	r3, #12
 8003fd8:	2001      	movs	r0, #1
 8003fda:	9a02      	ldr	r2, [sp, #8]
 8003fdc:	4240      	negs	r0, r0
 8003fde:	6013      	str	r3, [r2, #0]
 8003fe0:	89a2      	ldrh	r2, [r4, #12]
 8003fe2:	3334      	adds	r3, #52	@ 0x34
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	81a3      	strh	r3, [r4, #12]
 8003fe8:	e7ea      	b.n	8003fc0 <__ssputs_r+0x94>
 8003fea:	003e      	movs	r6, r7
 8003fec:	e7dc      	b.n	8003fa8 <__ssputs_r+0x7c>
 8003fee:	46c0      	nop			@ (mov r8, r8)
 8003ff0:	fffffb7f 	.word	0xfffffb7f

08003ff4 <_svfiprintf_r>:
 8003ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ff6:	b09f      	sub	sp, #124	@ 0x7c
 8003ff8:	9002      	str	r0, [sp, #8]
 8003ffa:	001c      	movs	r4, r3
 8003ffc:	898b      	ldrh	r3, [r1, #12]
 8003ffe:	000e      	movs	r6, r1
 8004000:	0015      	movs	r5, r2
 8004002:	061b      	lsls	r3, r3, #24
 8004004:	d511      	bpl.n	800402a <_svfiprintf_r+0x36>
 8004006:	690b      	ldr	r3, [r1, #16]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d10e      	bne.n	800402a <_svfiprintf_r+0x36>
 800400c:	2140      	movs	r1, #64	@ 0x40
 800400e:	f000 f921 	bl	8004254 <_malloc_r>
 8004012:	6030      	str	r0, [r6, #0]
 8004014:	6130      	str	r0, [r6, #16]
 8004016:	2800      	cmp	r0, #0
 8004018:	d105      	bne.n	8004026 <_svfiprintf_r+0x32>
 800401a:	230c      	movs	r3, #12
 800401c:	9a02      	ldr	r2, [sp, #8]
 800401e:	6013      	str	r3, [r2, #0]
 8004020:	2001      	movs	r0, #1
 8004022:	4240      	negs	r0, r0
 8004024:	e0d4      	b.n	80041d0 <_svfiprintf_r+0x1dc>
 8004026:	2340      	movs	r3, #64	@ 0x40
 8004028:	6173      	str	r3, [r6, #20]
 800402a:	2300      	movs	r3, #0
 800402c:	2129      	movs	r1, #41	@ 0x29
 800402e:	aa02      	add	r2, sp, #8
 8004030:	1852      	adds	r2, r2, r1
 8004032:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004034:	3320      	adds	r3, #32
 8004036:	7013      	strb	r3, [r2, #0]
 8004038:	3101      	adds	r1, #1
 800403a:	aa02      	add	r2, sp, #8
 800403c:	3310      	adds	r3, #16
 800403e:	1852      	adds	r2, r2, r1
 8004040:	7013      	strb	r3, [r2, #0]
 8004042:	9405      	str	r4, [sp, #20]
 8004044:	002c      	movs	r4, r5
 8004046:	7823      	ldrb	r3, [r4, #0]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d001      	beq.n	8004050 <_svfiprintf_r+0x5c>
 800404c:	2b25      	cmp	r3, #37	@ 0x25
 800404e:	d148      	bne.n	80040e2 <_svfiprintf_r+0xee>
 8004050:	1b67      	subs	r7, r4, r5
 8004052:	42ac      	cmp	r4, r5
 8004054:	d00b      	beq.n	800406e <_svfiprintf_r+0x7a>
 8004056:	003b      	movs	r3, r7
 8004058:	002a      	movs	r2, r5
 800405a:	0031      	movs	r1, r6
 800405c:	9802      	ldr	r0, [sp, #8]
 800405e:	f7ff ff65 	bl	8003f2c <__ssputs_r>
 8004062:	3001      	adds	r0, #1
 8004064:	d100      	bne.n	8004068 <_svfiprintf_r+0x74>
 8004066:	e0ae      	b.n	80041c6 <_svfiprintf_r+0x1d2>
 8004068:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800406a:	19db      	adds	r3, r3, r7
 800406c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800406e:	7823      	ldrb	r3, [r4, #0]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d100      	bne.n	8004076 <_svfiprintf_r+0x82>
 8004074:	e0a7      	b.n	80041c6 <_svfiprintf_r+0x1d2>
 8004076:	2201      	movs	r2, #1
 8004078:	2153      	movs	r1, #83	@ 0x53
 800407a:	2300      	movs	r3, #0
 800407c:	4252      	negs	r2, r2
 800407e:	9207      	str	r2, [sp, #28]
 8004080:	aa02      	add	r2, sp, #8
 8004082:	1852      	adds	r2, r2, r1
 8004084:	1c65      	adds	r5, r4, #1
 8004086:	9306      	str	r3, [sp, #24]
 8004088:	9309      	str	r3, [sp, #36]	@ 0x24
 800408a:	9308      	str	r3, [sp, #32]
 800408c:	7013      	strb	r3, [r2, #0]
 800408e:	931c      	str	r3, [sp, #112]	@ 0x70
 8004090:	4f55      	ldr	r7, [pc, #340]	@ (80041e8 <_svfiprintf_r+0x1f4>)
 8004092:	7829      	ldrb	r1, [r5, #0]
 8004094:	2205      	movs	r2, #5
 8004096:	0038      	movs	r0, r7
 8004098:	f000 fc9c 	bl	80049d4 <memchr>
 800409c:	1c6c      	adds	r4, r5, #1
 800409e:	9906      	ldr	r1, [sp, #24]
 80040a0:	ab06      	add	r3, sp, #24
 80040a2:	2800      	cmp	r0, #0
 80040a4:	d11f      	bne.n	80040e6 <_svfiprintf_r+0xf2>
 80040a6:	06ca      	lsls	r2, r1, #27
 80040a8:	d504      	bpl.n	80040b4 <_svfiprintf_r+0xc0>
 80040aa:	2753      	movs	r7, #83	@ 0x53
 80040ac:	2220      	movs	r2, #32
 80040ae:	a802      	add	r0, sp, #8
 80040b0:	19c0      	adds	r0, r0, r7
 80040b2:	7002      	strb	r2, [r0, #0]
 80040b4:	070a      	lsls	r2, r1, #28
 80040b6:	d504      	bpl.n	80040c2 <_svfiprintf_r+0xce>
 80040b8:	2753      	movs	r7, #83	@ 0x53
 80040ba:	222b      	movs	r2, #43	@ 0x2b
 80040bc:	a802      	add	r0, sp, #8
 80040be:	19c0      	adds	r0, r0, r7
 80040c0:	7002      	strb	r2, [r0, #0]
 80040c2:	782a      	ldrb	r2, [r5, #0]
 80040c4:	2a2a      	cmp	r2, #42	@ 0x2a
 80040c6:	d015      	beq.n	80040f4 <_svfiprintf_r+0x100>
 80040c8:	002c      	movs	r4, r5
 80040ca:	2000      	movs	r0, #0
 80040cc:	270a      	movs	r7, #10
 80040ce:	68da      	ldr	r2, [r3, #12]
 80040d0:	7821      	ldrb	r1, [r4, #0]
 80040d2:	1c65      	adds	r5, r4, #1
 80040d4:	3930      	subs	r1, #48	@ 0x30
 80040d6:	2909      	cmp	r1, #9
 80040d8:	d950      	bls.n	800417c <_svfiprintf_r+0x188>
 80040da:	2800      	cmp	r0, #0
 80040dc:	d011      	beq.n	8004102 <_svfiprintf_r+0x10e>
 80040de:	9209      	str	r2, [sp, #36]	@ 0x24
 80040e0:	e00f      	b.n	8004102 <_svfiprintf_r+0x10e>
 80040e2:	3401      	adds	r4, #1
 80040e4:	e7af      	b.n	8004046 <_svfiprintf_r+0x52>
 80040e6:	2301      	movs	r3, #1
 80040e8:	1bc0      	subs	r0, r0, r7
 80040ea:	4083      	lsls	r3, r0
 80040ec:	430b      	orrs	r3, r1
 80040ee:	0025      	movs	r5, r4
 80040f0:	9306      	str	r3, [sp, #24]
 80040f2:	e7cd      	b.n	8004090 <_svfiprintf_r+0x9c>
 80040f4:	9a05      	ldr	r2, [sp, #20]
 80040f6:	1d10      	adds	r0, r2, #4
 80040f8:	6812      	ldr	r2, [r2, #0]
 80040fa:	9005      	str	r0, [sp, #20]
 80040fc:	2a00      	cmp	r2, #0
 80040fe:	db37      	blt.n	8004170 <_svfiprintf_r+0x17c>
 8004100:	60da      	str	r2, [r3, #12]
 8004102:	7822      	ldrb	r2, [r4, #0]
 8004104:	2a2e      	cmp	r2, #46	@ 0x2e
 8004106:	d10c      	bne.n	8004122 <_svfiprintf_r+0x12e>
 8004108:	7862      	ldrb	r2, [r4, #1]
 800410a:	2a2a      	cmp	r2, #42	@ 0x2a
 800410c:	d13b      	bne.n	8004186 <_svfiprintf_r+0x192>
 800410e:	9a05      	ldr	r2, [sp, #20]
 8004110:	3402      	adds	r4, #2
 8004112:	1d11      	adds	r1, r2, #4
 8004114:	6812      	ldr	r2, [r2, #0]
 8004116:	9105      	str	r1, [sp, #20]
 8004118:	2a00      	cmp	r2, #0
 800411a:	da01      	bge.n	8004120 <_svfiprintf_r+0x12c>
 800411c:	2201      	movs	r2, #1
 800411e:	4252      	negs	r2, r2
 8004120:	605a      	str	r2, [r3, #4]
 8004122:	4d32      	ldr	r5, [pc, #200]	@ (80041ec <_svfiprintf_r+0x1f8>)
 8004124:	2203      	movs	r2, #3
 8004126:	0028      	movs	r0, r5
 8004128:	7821      	ldrb	r1, [r4, #0]
 800412a:	f000 fc53 	bl	80049d4 <memchr>
 800412e:	af06      	add	r7, sp, #24
 8004130:	2800      	cmp	r0, #0
 8004132:	d006      	beq.n	8004142 <_svfiprintf_r+0x14e>
 8004134:	2340      	movs	r3, #64	@ 0x40
 8004136:	1b40      	subs	r0, r0, r5
 8004138:	4083      	lsls	r3, r0
 800413a:	9a06      	ldr	r2, [sp, #24]
 800413c:	3401      	adds	r4, #1
 800413e:	4313      	orrs	r3, r2
 8004140:	9306      	str	r3, [sp, #24]
 8004142:	7821      	ldrb	r1, [r4, #0]
 8004144:	2206      	movs	r2, #6
 8004146:	482a      	ldr	r0, [pc, #168]	@ (80041f0 <_svfiprintf_r+0x1fc>)
 8004148:	1c65      	adds	r5, r4, #1
 800414a:	7639      	strb	r1, [r7, #24]
 800414c:	f000 fc42 	bl	80049d4 <memchr>
 8004150:	2800      	cmp	r0, #0
 8004152:	d03f      	beq.n	80041d4 <_svfiprintf_r+0x1e0>
 8004154:	4b27      	ldr	r3, [pc, #156]	@ (80041f4 <_svfiprintf_r+0x200>)
 8004156:	2b00      	cmp	r3, #0
 8004158:	d129      	bne.n	80041ae <_svfiprintf_r+0x1ba>
 800415a:	2207      	movs	r2, #7
 800415c:	9b05      	ldr	r3, [sp, #20]
 800415e:	3307      	adds	r3, #7
 8004160:	4393      	bics	r3, r2
 8004162:	3308      	adds	r3, #8
 8004164:	9305      	str	r3, [sp, #20]
 8004166:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004168:	9903      	ldr	r1, [sp, #12]
 800416a:	185b      	adds	r3, r3, r1
 800416c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800416e:	e769      	b.n	8004044 <_svfiprintf_r+0x50>
 8004170:	4252      	negs	r2, r2
 8004172:	60da      	str	r2, [r3, #12]
 8004174:	2202      	movs	r2, #2
 8004176:	430a      	orrs	r2, r1
 8004178:	9206      	str	r2, [sp, #24]
 800417a:	e7c2      	b.n	8004102 <_svfiprintf_r+0x10e>
 800417c:	437a      	muls	r2, r7
 800417e:	002c      	movs	r4, r5
 8004180:	2001      	movs	r0, #1
 8004182:	1852      	adds	r2, r2, r1
 8004184:	e7a4      	b.n	80040d0 <_svfiprintf_r+0xdc>
 8004186:	2200      	movs	r2, #0
 8004188:	200a      	movs	r0, #10
 800418a:	605a      	str	r2, [r3, #4]
 800418c:	0011      	movs	r1, r2
 800418e:	0013      	movs	r3, r2
 8004190:	3401      	adds	r4, #1
 8004192:	7822      	ldrb	r2, [r4, #0]
 8004194:	1c65      	adds	r5, r4, #1
 8004196:	3a30      	subs	r2, #48	@ 0x30
 8004198:	2a09      	cmp	r2, #9
 800419a:	d903      	bls.n	80041a4 <_svfiprintf_r+0x1b0>
 800419c:	2b00      	cmp	r3, #0
 800419e:	d0c0      	beq.n	8004122 <_svfiprintf_r+0x12e>
 80041a0:	9107      	str	r1, [sp, #28]
 80041a2:	e7be      	b.n	8004122 <_svfiprintf_r+0x12e>
 80041a4:	4341      	muls	r1, r0
 80041a6:	002c      	movs	r4, r5
 80041a8:	2301      	movs	r3, #1
 80041aa:	1889      	adds	r1, r1, r2
 80041ac:	e7f1      	b.n	8004192 <_svfiprintf_r+0x19e>
 80041ae:	aa05      	add	r2, sp, #20
 80041b0:	9200      	str	r2, [sp, #0]
 80041b2:	0039      	movs	r1, r7
 80041b4:	0032      	movs	r2, r6
 80041b6:	4b10      	ldr	r3, [pc, #64]	@ (80041f8 <_svfiprintf_r+0x204>)
 80041b8:	9802      	ldr	r0, [sp, #8]
 80041ba:	e000      	b.n	80041be <_svfiprintf_r+0x1ca>
 80041bc:	bf00      	nop
 80041be:	9003      	str	r0, [sp, #12]
 80041c0:	9b03      	ldr	r3, [sp, #12]
 80041c2:	3301      	adds	r3, #1
 80041c4:	d1cf      	bne.n	8004166 <_svfiprintf_r+0x172>
 80041c6:	89b3      	ldrh	r3, [r6, #12]
 80041c8:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80041ca:	065b      	lsls	r3, r3, #25
 80041cc:	d500      	bpl.n	80041d0 <_svfiprintf_r+0x1dc>
 80041ce:	e727      	b.n	8004020 <_svfiprintf_r+0x2c>
 80041d0:	b01f      	add	sp, #124	@ 0x7c
 80041d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041d4:	aa05      	add	r2, sp, #20
 80041d6:	9200      	str	r2, [sp, #0]
 80041d8:	0039      	movs	r1, r7
 80041da:	0032      	movs	r2, r6
 80041dc:	4b06      	ldr	r3, [pc, #24]	@ (80041f8 <_svfiprintf_r+0x204>)
 80041de:	9802      	ldr	r0, [sp, #8]
 80041e0:	f000 f928 	bl	8004434 <_printf_i>
 80041e4:	e7eb      	b.n	80041be <_svfiprintf_r+0x1ca>
 80041e6:	46c0      	nop			@ (mov r8, r8)
 80041e8:	080060c4 	.word	0x080060c4
 80041ec:	080060ca 	.word	0x080060ca
 80041f0:	080060ce 	.word	0x080060ce
 80041f4:	00000000 	.word	0x00000000
 80041f8:	08003f2d 	.word	0x08003f2d

080041fc <malloc>:
 80041fc:	b510      	push	{r4, lr}
 80041fe:	4b03      	ldr	r3, [pc, #12]	@ (800420c <malloc+0x10>)
 8004200:	0001      	movs	r1, r0
 8004202:	6818      	ldr	r0, [r3, #0]
 8004204:	f000 f826 	bl	8004254 <_malloc_r>
 8004208:	bd10      	pop	{r4, pc}
 800420a:	46c0      	nop			@ (mov r8, r8)
 800420c:	20000018 	.word	0x20000018

08004210 <sbrk_aligned>:
 8004210:	b570      	push	{r4, r5, r6, lr}
 8004212:	4e0f      	ldr	r6, [pc, #60]	@ (8004250 <sbrk_aligned+0x40>)
 8004214:	000d      	movs	r5, r1
 8004216:	6831      	ldr	r1, [r6, #0]
 8004218:	0004      	movs	r4, r0
 800421a:	2900      	cmp	r1, #0
 800421c:	d102      	bne.n	8004224 <sbrk_aligned+0x14>
 800421e:	f000 fba1 	bl	8004964 <_sbrk_r>
 8004222:	6030      	str	r0, [r6, #0]
 8004224:	0029      	movs	r1, r5
 8004226:	0020      	movs	r0, r4
 8004228:	f000 fb9c 	bl	8004964 <_sbrk_r>
 800422c:	1c43      	adds	r3, r0, #1
 800422e:	d103      	bne.n	8004238 <sbrk_aligned+0x28>
 8004230:	2501      	movs	r5, #1
 8004232:	426d      	negs	r5, r5
 8004234:	0028      	movs	r0, r5
 8004236:	bd70      	pop	{r4, r5, r6, pc}
 8004238:	2303      	movs	r3, #3
 800423a:	1cc5      	adds	r5, r0, #3
 800423c:	439d      	bics	r5, r3
 800423e:	42a8      	cmp	r0, r5
 8004240:	d0f8      	beq.n	8004234 <sbrk_aligned+0x24>
 8004242:	1a29      	subs	r1, r5, r0
 8004244:	0020      	movs	r0, r4
 8004246:	f000 fb8d 	bl	8004964 <_sbrk_r>
 800424a:	3001      	adds	r0, #1
 800424c:	d1f2      	bne.n	8004234 <sbrk_aligned+0x24>
 800424e:	e7ef      	b.n	8004230 <sbrk_aligned+0x20>
 8004250:	200004fc 	.word	0x200004fc

08004254 <_malloc_r>:
 8004254:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004256:	2203      	movs	r2, #3
 8004258:	1ccb      	adds	r3, r1, #3
 800425a:	4393      	bics	r3, r2
 800425c:	3308      	adds	r3, #8
 800425e:	0005      	movs	r5, r0
 8004260:	001f      	movs	r7, r3
 8004262:	2b0c      	cmp	r3, #12
 8004264:	d234      	bcs.n	80042d0 <_malloc_r+0x7c>
 8004266:	270c      	movs	r7, #12
 8004268:	42b9      	cmp	r1, r7
 800426a:	d833      	bhi.n	80042d4 <_malloc_r+0x80>
 800426c:	0028      	movs	r0, r5
 800426e:	f000 faa3 	bl	80047b8 <__malloc_lock>
 8004272:	4e37      	ldr	r6, [pc, #220]	@ (8004350 <_malloc_r+0xfc>)
 8004274:	6833      	ldr	r3, [r6, #0]
 8004276:	001c      	movs	r4, r3
 8004278:	2c00      	cmp	r4, #0
 800427a:	d12f      	bne.n	80042dc <_malloc_r+0x88>
 800427c:	0039      	movs	r1, r7
 800427e:	0028      	movs	r0, r5
 8004280:	f7ff ffc6 	bl	8004210 <sbrk_aligned>
 8004284:	0004      	movs	r4, r0
 8004286:	1c43      	adds	r3, r0, #1
 8004288:	d15f      	bne.n	800434a <_malloc_r+0xf6>
 800428a:	6834      	ldr	r4, [r6, #0]
 800428c:	9400      	str	r4, [sp, #0]
 800428e:	9b00      	ldr	r3, [sp, #0]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d14a      	bne.n	800432a <_malloc_r+0xd6>
 8004294:	2c00      	cmp	r4, #0
 8004296:	d052      	beq.n	800433e <_malloc_r+0xea>
 8004298:	6823      	ldr	r3, [r4, #0]
 800429a:	0028      	movs	r0, r5
 800429c:	18e3      	adds	r3, r4, r3
 800429e:	9900      	ldr	r1, [sp, #0]
 80042a0:	9301      	str	r3, [sp, #4]
 80042a2:	f000 fb5f 	bl	8004964 <_sbrk_r>
 80042a6:	9b01      	ldr	r3, [sp, #4]
 80042a8:	4283      	cmp	r3, r0
 80042aa:	d148      	bne.n	800433e <_malloc_r+0xea>
 80042ac:	6823      	ldr	r3, [r4, #0]
 80042ae:	0028      	movs	r0, r5
 80042b0:	1aff      	subs	r7, r7, r3
 80042b2:	0039      	movs	r1, r7
 80042b4:	f7ff ffac 	bl	8004210 <sbrk_aligned>
 80042b8:	3001      	adds	r0, #1
 80042ba:	d040      	beq.n	800433e <_malloc_r+0xea>
 80042bc:	6823      	ldr	r3, [r4, #0]
 80042be:	19db      	adds	r3, r3, r7
 80042c0:	6023      	str	r3, [r4, #0]
 80042c2:	6833      	ldr	r3, [r6, #0]
 80042c4:	685a      	ldr	r2, [r3, #4]
 80042c6:	2a00      	cmp	r2, #0
 80042c8:	d133      	bne.n	8004332 <_malloc_r+0xde>
 80042ca:	9b00      	ldr	r3, [sp, #0]
 80042cc:	6033      	str	r3, [r6, #0]
 80042ce:	e019      	b.n	8004304 <_malloc_r+0xb0>
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	dac9      	bge.n	8004268 <_malloc_r+0x14>
 80042d4:	230c      	movs	r3, #12
 80042d6:	602b      	str	r3, [r5, #0]
 80042d8:	2000      	movs	r0, #0
 80042da:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80042dc:	6821      	ldr	r1, [r4, #0]
 80042de:	1bc9      	subs	r1, r1, r7
 80042e0:	d420      	bmi.n	8004324 <_malloc_r+0xd0>
 80042e2:	290b      	cmp	r1, #11
 80042e4:	d90a      	bls.n	80042fc <_malloc_r+0xa8>
 80042e6:	19e2      	adds	r2, r4, r7
 80042e8:	6027      	str	r7, [r4, #0]
 80042ea:	42a3      	cmp	r3, r4
 80042ec:	d104      	bne.n	80042f8 <_malloc_r+0xa4>
 80042ee:	6032      	str	r2, [r6, #0]
 80042f0:	6863      	ldr	r3, [r4, #4]
 80042f2:	6011      	str	r1, [r2, #0]
 80042f4:	6053      	str	r3, [r2, #4]
 80042f6:	e005      	b.n	8004304 <_malloc_r+0xb0>
 80042f8:	605a      	str	r2, [r3, #4]
 80042fa:	e7f9      	b.n	80042f0 <_malloc_r+0x9c>
 80042fc:	6862      	ldr	r2, [r4, #4]
 80042fe:	42a3      	cmp	r3, r4
 8004300:	d10e      	bne.n	8004320 <_malloc_r+0xcc>
 8004302:	6032      	str	r2, [r6, #0]
 8004304:	0028      	movs	r0, r5
 8004306:	f000 fa5f 	bl	80047c8 <__malloc_unlock>
 800430a:	0020      	movs	r0, r4
 800430c:	2207      	movs	r2, #7
 800430e:	300b      	adds	r0, #11
 8004310:	1d23      	adds	r3, r4, #4
 8004312:	4390      	bics	r0, r2
 8004314:	1ac2      	subs	r2, r0, r3
 8004316:	4298      	cmp	r0, r3
 8004318:	d0df      	beq.n	80042da <_malloc_r+0x86>
 800431a:	1a1b      	subs	r3, r3, r0
 800431c:	50a3      	str	r3, [r4, r2]
 800431e:	e7dc      	b.n	80042da <_malloc_r+0x86>
 8004320:	605a      	str	r2, [r3, #4]
 8004322:	e7ef      	b.n	8004304 <_malloc_r+0xb0>
 8004324:	0023      	movs	r3, r4
 8004326:	6864      	ldr	r4, [r4, #4]
 8004328:	e7a6      	b.n	8004278 <_malloc_r+0x24>
 800432a:	9c00      	ldr	r4, [sp, #0]
 800432c:	6863      	ldr	r3, [r4, #4]
 800432e:	9300      	str	r3, [sp, #0]
 8004330:	e7ad      	b.n	800428e <_malloc_r+0x3a>
 8004332:	001a      	movs	r2, r3
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	42a3      	cmp	r3, r4
 8004338:	d1fb      	bne.n	8004332 <_malloc_r+0xde>
 800433a:	2300      	movs	r3, #0
 800433c:	e7da      	b.n	80042f4 <_malloc_r+0xa0>
 800433e:	230c      	movs	r3, #12
 8004340:	0028      	movs	r0, r5
 8004342:	602b      	str	r3, [r5, #0]
 8004344:	f000 fa40 	bl	80047c8 <__malloc_unlock>
 8004348:	e7c6      	b.n	80042d8 <_malloc_r+0x84>
 800434a:	6007      	str	r7, [r0, #0]
 800434c:	e7da      	b.n	8004304 <_malloc_r+0xb0>
 800434e:	46c0      	nop			@ (mov r8, r8)
 8004350:	20000500 	.word	0x20000500

08004354 <_printf_common>:
 8004354:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004356:	0016      	movs	r6, r2
 8004358:	9301      	str	r3, [sp, #4]
 800435a:	688a      	ldr	r2, [r1, #8]
 800435c:	690b      	ldr	r3, [r1, #16]
 800435e:	000c      	movs	r4, r1
 8004360:	9000      	str	r0, [sp, #0]
 8004362:	4293      	cmp	r3, r2
 8004364:	da00      	bge.n	8004368 <_printf_common+0x14>
 8004366:	0013      	movs	r3, r2
 8004368:	0022      	movs	r2, r4
 800436a:	6033      	str	r3, [r6, #0]
 800436c:	3243      	adds	r2, #67	@ 0x43
 800436e:	7812      	ldrb	r2, [r2, #0]
 8004370:	2a00      	cmp	r2, #0
 8004372:	d001      	beq.n	8004378 <_printf_common+0x24>
 8004374:	3301      	adds	r3, #1
 8004376:	6033      	str	r3, [r6, #0]
 8004378:	6823      	ldr	r3, [r4, #0]
 800437a:	069b      	lsls	r3, r3, #26
 800437c:	d502      	bpl.n	8004384 <_printf_common+0x30>
 800437e:	6833      	ldr	r3, [r6, #0]
 8004380:	3302      	adds	r3, #2
 8004382:	6033      	str	r3, [r6, #0]
 8004384:	6822      	ldr	r2, [r4, #0]
 8004386:	2306      	movs	r3, #6
 8004388:	0015      	movs	r5, r2
 800438a:	401d      	ands	r5, r3
 800438c:	421a      	tst	r2, r3
 800438e:	d027      	beq.n	80043e0 <_printf_common+0x8c>
 8004390:	0023      	movs	r3, r4
 8004392:	3343      	adds	r3, #67	@ 0x43
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	1e5a      	subs	r2, r3, #1
 8004398:	4193      	sbcs	r3, r2
 800439a:	6822      	ldr	r2, [r4, #0]
 800439c:	0692      	lsls	r2, r2, #26
 800439e:	d430      	bmi.n	8004402 <_printf_common+0xae>
 80043a0:	0022      	movs	r2, r4
 80043a2:	9901      	ldr	r1, [sp, #4]
 80043a4:	9800      	ldr	r0, [sp, #0]
 80043a6:	9d08      	ldr	r5, [sp, #32]
 80043a8:	3243      	adds	r2, #67	@ 0x43
 80043aa:	47a8      	blx	r5
 80043ac:	3001      	adds	r0, #1
 80043ae:	d025      	beq.n	80043fc <_printf_common+0xa8>
 80043b0:	2206      	movs	r2, #6
 80043b2:	6823      	ldr	r3, [r4, #0]
 80043b4:	2500      	movs	r5, #0
 80043b6:	4013      	ands	r3, r2
 80043b8:	2b04      	cmp	r3, #4
 80043ba:	d105      	bne.n	80043c8 <_printf_common+0x74>
 80043bc:	6833      	ldr	r3, [r6, #0]
 80043be:	68e5      	ldr	r5, [r4, #12]
 80043c0:	1aed      	subs	r5, r5, r3
 80043c2:	43eb      	mvns	r3, r5
 80043c4:	17db      	asrs	r3, r3, #31
 80043c6:	401d      	ands	r5, r3
 80043c8:	68a3      	ldr	r3, [r4, #8]
 80043ca:	6922      	ldr	r2, [r4, #16]
 80043cc:	4293      	cmp	r3, r2
 80043ce:	dd01      	ble.n	80043d4 <_printf_common+0x80>
 80043d0:	1a9b      	subs	r3, r3, r2
 80043d2:	18ed      	adds	r5, r5, r3
 80043d4:	2600      	movs	r6, #0
 80043d6:	42b5      	cmp	r5, r6
 80043d8:	d120      	bne.n	800441c <_printf_common+0xc8>
 80043da:	2000      	movs	r0, #0
 80043dc:	e010      	b.n	8004400 <_printf_common+0xac>
 80043de:	3501      	adds	r5, #1
 80043e0:	68e3      	ldr	r3, [r4, #12]
 80043e2:	6832      	ldr	r2, [r6, #0]
 80043e4:	1a9b      	subs	r3, r3, r2
 80043e6:	42ab      	cmp	r3, r5
 80043e8:	ddd2      	ble.n	8004390 <_printf_common+0x3c>
 80043ea:	0022      	movs	r2, r4
 80043ec:	2301      	movs	r3, #1
 80043ee:	9901      	ldr	r1, [sp, #4]
 80043f0:	9800      	ldr	r0, [sp, #0]
 80043f2:	9f08      	ldr	r7, [sp, #32]
 80043f4:	3219      	adds	r2, #25
 80043f6:	47b8      	blx	r7
 80043f8:	3001      	adds	r0, #1
 80043fa:	d1f0      	bne.n	80043de <_printf_common+0x8a>
 80043fc:	2001      	movs	r0, #1
 80043fe:	4240      	negs	r0, r0
 8004400:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004402:	2030      	movs	r0, #48	@ 0x30
 8004404:	18e1      	adds	r1, r4, r3
 8004406:	3143      	adds	r1, #67	@ 0x43
 8004408:	7008      	strb	r0, [r1, #0]
 800440a:	0021      	movs	r1, r4
 800440c:	1c5a      	adds	r2, r3, #1
 800440e:	3145      	adds	r1, #69	@ 0x45
 8004410:	7809      	ldrb	r1, [r1, #0]
 8004412:	18a2      	adds	r2, r4, r2
 8004414:	3243      	adds	r2, #67	@ 0x43
 8004416:	3302      	adds	r3, #2
 8004418:	7011      	strb	r1, [r2, #0]
 800441a:	e7c1      	b.n	80043a0 <_printf_common+0x4c>
 800441c:	0022      	movs	r2, r4
 800441e:	2301      	movs	r3, #1
 8004420:	9901      	ldr	r1, [sp, #4]
 8004422:	9800      	ldr	r0, [sp, #0]
 8004424:	9f08      	ldr	r7, [sp, #32]
 8004426:	321a      	adds	r2, #26
 8004428:	47b8      	blx	r7
 800442a:	3001      	adds	r0, #1
 800442c:	d0e6      	beq.n	80043fc <_printf_common+0xa8>
 800442e:	3601      	adds	r6, #1
 8004430:	e7d1      	b.n	80043d6 <_printf_common+0x82>
	...

08004434 <_printf_i>:
 8004434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004436:	b08b      	sub	sp, #44	@ 0x2c
 8004438:	9206      	str	r2, [sp, #24]
 800443a:	000a      	movs	r2, r1
 800443c:	3243      	adds	r2, #67	@ 0x43
 800443e:	9307      	str	r3, [sp, #28]
 8004440:	9005      	str	r0, [sp, #20]
 8004442:	9203      	str	r2, [sp, #12]
 8004444:	7e0a      	ldrb	r2, [r1, #24]
 8004446:	000c      	movs	r4, r1
 8004448:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800444a:	2a78      	cmp	r2, #120	@ 0x78
 800444c:	d809      	bhi.n	8004462 <_printf_i+0x2e>
 800444e:	2a62      	cmp	r2, #98	@ 0x62
 8004450:	d80b      	bhi.n	800446a <_printf_i+0x36>
 8004452:	2a00      	cmp	r2, #0
 8004454:	d100      	bne.n	8004458 <_printf_i+0x24>
 8004456:	e0ba      	b.n	80045ce <_printf_i+0x19a>
 8004458:	497a      	ldr	r1, [pc, #488]	@ (8004644 <_printf_i+0x210>)
 800445a:	9104      	str	r1, [sp, #16]
 800445c:	2a58      	cmp	r2, #88	@ 0x58
 800445e:	d100      	bne.n	8004462 <_printf_i+0x2e>
 8004460:	e08e      	b.n	8004580 <_printf_i+0x14c>
 8004462:	0025      	movs	r5, r4
 8004464:	3542      	adds	r5, #66	@ 0x42
 8004466:	702a      	strb	r2, [r5, #0]
 8004468:	e022      	b.n	80044b0 <_printf_i+0x7c>
 800446a:	0010      	movs	r0, r2
 800446c:	3863      	subs	r0, #99	@ 0x63
 800446e:	2815      	cmp	r0, #21
 8004470:	d8f7      	bhi.n	8004462 <_printf_i+0x2e>
 8004472:	f7fb fe37 	bl	80000e4 <__gnu_thumb1_case_shi>
 8004476:	0016      	.short	0x0016
 8004478:	fff6001f 	.word	0xfff6001f
 800447c:	fff6fff6 	.word	0xfff6fff6
 8004480:	001ffff6 	.word	0x001ffff6
 8004484:	fff6fff6 	.word	0xfff6fff6
 8004488:	fff6fff6 	.word	0xfff6fff6
 800448c:	0036009f 	.word	0x0036009f
 8004490:	fff6007e 	.word	0xfff6007e
 8004494:	00b0fff6 	.word	0x00b0fff6
 8004498:	0036fff6 	.word	0x0036fff6
 800449c:	fff6fff6 	.word	0xfff6fff6
 80044a0:	0082      	.short	0x0082
 80044a2:	0025      	movs	r5, r4
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	3542      	adds	r5, #66	@ 0x42
 80044a8:	1d11      	adds	r1, r2, #4
 80044aa:	6019      	str	r1, [r3, #0]
 80044ac:	6813      	ldr	r3, [r2, #0]
 80044ae:	702b      	strb	r3, [r5, #0]
 80044b0:	2301      	movs	r3, #1
 80044b2:	e09e      	b.n	80045f2 <_printf_i+0x1be>
 80044b4:	6818      	ldr	r0, [r3, #0]
 80044b6:	6809      	ldr	r1, [r1, #0]
 80044b8:	1d02      	adds	r2, r0, #4
 80044ba:	060d      	lsls	r5, r1, #24
 80044bc:	d50b      	bpl.n	80044d6 <_printf_i+0xa2>
 80044be:	6806      	ldr	r6, [r0, #0]
 80044c0:	601a      	str	r2, [r3, #0]
 80044c2:	2e00      	cmp	r6, #0
 80044c4:	da03      	bge.n	80044ce <_printf_i+0x9a>
 80044c6:	232d      	movs	r3, #45	@ 0x2d
 80044c8:	9a03      	ldr	r2, [sp, #12]
 80044ca:	4276      	negs	r6, r6
 80044cc:	7013      	strb	r3, [r2, #0]
 80044ce:	4b5d      	ldr	r3, [pc, #372]	@ (8004644 <_printf_i+0x210>)
 80044d0:	270a      	movs	r7, #10
 80044d2:	9304      	str	r3, [sp, #16]
 80044d4:	e018      	b.n	8004508 <_printf_i+0xd4>
 80044d6:	6806      	ldr	r6, [r0, #0]
 80044d8:	601a      	str	r2, [r3, #0]
 80044da:	0649      	lsls	r1, r1, #25
 80044dc:	d5f1      	bpl.n	80044c2 <_printf_i+0x8e>
 80044de:	b236      	sxth	r6, r6
 80044e0:	e7ef      	b.n	80044c2 <_printf_i+0x8e>
 80044e2:	6808      	ldr	r0, [r1, #0]
 80044e4:	6819      	ldr	r1, [r3, #0]
 80044e6:	c940      	ldmia	r1!, {r6}
 80044e8:	0605      	lsls	r5, r0, #24
 80044ea:	d402      	bmi.n	80044f2 <_printf_i+0xbe>
 80044ec:	0640      	lsls	r0, r0, #25
 80044ee:	d500      	bpl.n	80044f2 <_printf_i+0xbe>
 80044f0:	b2b6      	uxth	r6, r6
 80044f2:	6019      	str	r1, [r3, #0]
 80044f4:	4b53      	ldr	r3, [pc, #332]	@ (8004644 <_printf_i+0x210>)
 80044f6:	270a      	movs	r7, #10
 80044f8:	9304      	str	r3, [sp, #16]
 80044fa:	2a6f      	cmp	r2, #111	@ 0x6f
 80044fc:	d100      	bne.n	8004500 <_printf_i+0xcc>
 80044fe:	3f02      	subs	r7, #2
 8004500:	0023      	movs	r3, r4
 8004502:	2200      	movs	r2, #0
 8004504:	3343      	adds	r3, #67	@ 0x43
 8004506:	701a      	strb	r2, [r3, #0]
 8004508:	6863      	ldr	r3, [r4, #4]
 800450a:	60a3      	str	r3, [r4, #8]
 800450c:	2b00      	cmp	r3, #0
 800450e:	db06      	blt.n	800451e <_printf_i+0xea>
 8004510:	2104      	movs	r1, #4
 8004512:	6822      	ldr	r2, [r4, #0]
 8004514:	9d03      	ldr	r5, [sp, #12]
 8004516:	438a      	bics	r2, r1
 8004518:	6022      	str	r2, [r4, #0]
 800451a:	4333      	orrs	r3, r6
 800451c:	d00c      	beq.n	8004538 <_printf_i+0x104>
 800451e:	9d03      	ldr	r5, [sp, #12]
 8004520:	0030      	movs	r0, r6
 8004522:	0039      	movs	r1, r7
 8004524:	f7fb fe6e 	bl	8000204 <__aeabi_uidivmod>
 8004528:	9b04      	ldr	r3, [sp, #16]
 800452a:	3d01      	subs	r5, #1
 800452c:	5c5b      	ldrb	r3, [r3, r1]
 800452e:	702b      	strb	r3, [r5, #0]
 8004530:	0033      	movs	r3, r6
 8004532:	0006      	movs	r6, r0
 8004534:	429f      	cmp	r7, r3
 8004536:	d9f3      	bls.n	8004520 <_printf_i+0xec>
 8004538:	2f08      	cmp	r7, #8
 800453a:	d109      	bne.n	8004550 <_printf_i+0x11c>
 800453c:	6823      	ldr	r3, [r4, #0]
 800453e:	07db      	lsls	r3, r3, #31
 8004540:	d506      	bpl.n	8004550 <_printf_i+0x11c>
 8004542:	6862      	ldr	r2, [r4, #4]
 8004544:	6923      	ldr	r3, [r4, #16]
 8004546:	429a      	cmp	r2, r3
 8004548:	dc02      	bgt.n	8004550 <_printf_i+0x11c>
 800454a:	2330      	movs	r3, #48	@ 0x30
 800454c:	3d01      	subs	r5, #1
 800454e:	702b      	strb	r3, [r5, #0]
 8004550:	9b03      	ldr	r3, [sp, #12]
 8004552:	1b5b      	subs	r3, r3, r5
 8004554:	6123      	str	r3, [r4, #16]
 8004556:	9b07      	ldr	r3, [sp, #28]
 8004558:	0021      	movs	r1, r4
 800455a:	9300      	str	r3, [sp, #0]
 800455c:	9805      	ldr	r0, [sp, #20]
 800455e:	9b06      	ldr	r3, [sp, #24]
 8004560:	aa09      	add	r2, sp, #36	@ 0x24
 8004562:	f7ff fef7 	bl	8004354 <_printf_common>
 8004566:	3001      	adds	r0, #1
 8004568:	d148      	bne.n	80045fc <_printf_i+0x1c8>
 800456a:	2001      	movs	r0, #1
 800456c:	4240      	negs	r0, r0
 800456e:	b00b      	add	sp, #44	@ 0x2c
 8004570:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004572:	2220      	movs	r2, #32
 8004574:	6809      	ldr	r1, [r1, #0]
 8004576:	430a      	orrs	r2, r1
 8004578:	6022      	str	r2, [r4, #0]
 800457a:	2278      	movs	r2, #120	@ 0x78
 800457c:	4932      	ldr	r1, [pc, #200]	@ (8004648 <_printf_i+0x214>)
 800457e:	9104      	str	r1, [sp, #16]
 8004580:	0021      	movs	r1, r4
 8004582:	3145      	adds	r1, #69	@ 0x45
 8004584:	700a      	strb	r2, [r1, #0]
 8004586:	6819      	ldr	r1, [r3, #0]
 8004588:	6822      	ldr	r2, [r4, #0]
 800458a:	c940      	ldmia	r1!, {r6}
 800458c:	0610      	lsls	r0, r2, #24
 800458e:	d402      	bmi.n	8004596 <_printf_i+0x162>
 8004590:	0650      	lsls	r0, r2, #25
 8004592:	d500      	bpl.n	8004596 <_printf_i+0x162>
 8004594:	b2b6      	uxth	r6, r6
 8004596:	6019      	str	r1, [r3, #0]
 8004598:	07d3      	lsls	r3, r2, #31
 800459a:	d502      	bpl.n	80045a2 <_printf_i+0x16e>
 800459c:	2320      	movs	r3, #32
 800459e:	4313      	orrs	r3, r2
 80045a0:	6023      	str	r3, [r4, #0]
 80045a2:	2e00      	cmp	r6, #0
 80045a4:	d001      	beq.n	80045aa <_printf_i+0x176>
 80045a6:	2710      	movs	r7, #16
 80045a8:	e7aa      	b.n	8004500 <_printf_i+0xcc>
 80045aa:	2220      	movs	r2, #32
 80045ac:	6823      	ldr	r3, [r4, #0]
 80045ae:	4393      	bics	r3, r2
 80045b0:	6023      	str	r3, [r4, #0]
 80045b2:	e7f8      	b.n	80045a6 <_printf_i+0x172>
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	680d      	ldr	r5, [r1, #0]
 80045b8:	1d10      	adds	r0, r2, #4
 80045ba:	6949      	ldr	r1, [r1, #20]
 80045bc:	6018      	str	r0, [r3, #0]
 80045be:	6813      	ldr	r3, [r2, #0]
 80045c0:	062e      	lsls	r6, r5, #24
 80045c2:	d501      	bpl.n	80045c8 <_printf_i+0x194>
 80045c4:	6019      	str	r1, [r3, #0]
 80045c6:	e002      	b.n	80045ce <_printf_i+0x19a>
 80045c8:	066d      	lsls	r5, r5, #25
 80045ca:	d5fb      	bpl.n	80045c4 <_printf_i+0x190>
 80045cc:	8019      	strh	r1, [r3, #0]
 80045ce:	2300      	movs	r3, #0
 80045d0:	9d03      	ldr	r5, [sp, #12]
 80045d2:	6123      	str	r3, [r4, #16]
 80045d4:	e7bf      	b.n	8004556 <_printf_i+0x122>
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	1d11      	adds	r1, r2, #4
 80045da:	6019      	str	r1, [r3, #0]
 80045dc:	6815      	ldr	r5, [r2, #0]
 80045de:	2100      	movs	r1, #0
 80045e0:	0028      	movs	r0, r5
 80045e2:	6862      	ldr	r2, [r4, #4]
 80045e4:	f000 f9f6 	bl	80049d4 <memchr>
 80045e8:	2800      	cmp	r0, #0
 80045ea:	d001      	beq.n	80045f0 <_printf_i+0x1bc>
 80045ec:	1b40      	subs	r0, r0, r5
 80045ee:	6060      	str	r0, [r4, #4]
 80045f0:	6863      	ldr	r3, [r4, #4]
 80045f2:	6123      	str	r3, [r4, #16]
 80045f4:	2300      	movs	r3, #0
 80045f6:	9a03      	ldr	r2, [sp, #12]
 80045f8:	7013      	strb	r3, [r2, #0]
 80045fa:	e7ac      	b.n	8004556 <_printf_i+0x122>
 80045fc:	002a      	movs	r2, r5
 80045fe:	6923      	ldr	r3, [r4, #16]
 8004600:	9906      	ldr	r1, [sp, #24]
 8004602:	9805      	ldr	r0, [sp, #20]
 8004604:	9d07      	ldr	r5, [sp, #28]
 8004606:	47a8      	blx	r5
 8004608:	3001      	adds	r0, #1
 800460a:	d0ae      	beq.n	800456a <_printf_i+0x136>
 800460c:	6823      	ldr	r3, [r4, #0]
 800460e:	079b      	lsls	r3, r3, #30
 8004610:	d415      	bmi.n	800463e <_printf_i+0x20a>
 8004612:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004614:	68e0      	ldr	r0, [r4, #12]
 8004616:	4298      	cmp	r0, r3
 8004618:	daa9      	bge.n	800456e <_printf_i+0x13a>
 800461a:	0018      	movs	r0, r3
 800461c:	e7a7      	b.n	800456e <_printf_i+0x13a>
 800461e:	0022      	movs	r2, r4
 8004620:	2301      	movs	r3, #1
 8004622:	9906      	ldr	r1, [sp, #24]
 8004624:	9805      	ldr	r0, [sp, #20]
 8004626:	9e07      	ldr	r6, [sp, #28]
 8004628:	3219      	adds	r2, #25
 800462a:	47b0      	blx	r6
 800462c:	3001      	adds	r0, #1
 800462e:	d09c      	beq.n	800456a <_printf_i+0x136>
 8004630:	3501      	adds	r5, #1
 8004632:	68e3      	ldr	r3, [r4, #12]
 8004634:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004636:	1a9b      	subs	r3, r3, r2
 8004638:	42ab      	cmp	r3, r5
 800463a:	dcf0      	bgt.n	800461e <_printf_i+0x1ea>
 800463c:	e7e9      	b.n	8004612 <_printf_i+0x1de>
 800463e:	2500      	movs	r5, #0
 8004640:	e7f7      	b.n	8004632 <_printf_i+0x1fe>
 8004642:	46c0      	nop			@ (mov r8, r8)
 8004644:	080060d5 	.word	0x080060d5
 8004648:	080060e6 	.word	0x080060e6

0800464c <__sflush_r>:
 800464c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800464e:	220c      	movs	r2, #12
 8004650:	5e8b      	ldrsh	r3, [r1, r2]
 8004652:	0005      	movs	r5, r0
 8004654:	000c      	movs	r4, r1
 8004656:	071a      	lsls	r2, r3, #28
 8004658:	d45a      	bmi.n	8004710 <__sflush_r+0xc4>
 800465a:	684a      	ldr	r2, [r1, #4]
 800465c:	2a00      	cmp	r2, #0
 800465e:	dc02      	bgt.n	8004666 <__sflush_r+0x1a>
 8004660:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8004662:	2a00      	cmp	r2, #0
 8004664:	dd4f      	ble.n	8004706 <__sflush_r+0xba>
 8004666:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8004668:	2f00      	cmp	r7, #0
 800466a:	d04c      	beq.n	8004706 <__sflush_r+0xba>
 800466c:	2200      	movs	r2, #0
 800466e:	2180      	movs	r1, #128	@ 0x80
 8004670:	682e      	ldr	r6, [r5, #0]
 8004672:	602a      	str	r2, [r5, #0]
 8004674:	001a      	movs	r2, r3
 8004676:	0149      	lsls	r1, r1, #5
 8004678:	400a      	ands	r2, r1
 800467a:	420b      	tst	r3, r1
 800467c:	d034      	beq.n	80046e8 <__sflush_r+0x9c>
 800467e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004680:	89a3      	ldrh	r3, [r4, #12]
 8004682:	075b      	lsls	r3, r3, #29
 8004684:	d506      	bpl.n	8004694 <__sflush_r+0x48>
 8004686:	6863      	ldr	r3, [r4, #4]
 8004688:	1ad2      	subs	r2, r2, r3
 800468a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800468c:	2b00      	cmp	r3, #0
 800468e:	d001      	beq.n	8004694 <__sflush_r+0x48>
 8004690:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004692:	1ad2      	subs	r2, r2, r3
 8004694:	2300      	movs	r3, #0
 8004696:	0028      	movs	r0, r5
 8004698:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800469a:	6a21      	ldr	r1, [r4, #32]
 800469c:	47b8      	blx	r7
 800469e:	230c      	movs	r3, #12
 80046a0:	5ee2      	ldrsh	r2, [r4, r3]
 80046a2:	1c43      	adds	r3, r0, #1
 80046a4:	d106      	bne.n	80046b4 <__sflush_r+0x68>
 80046a6:	6829      	ldr	r1, [r5, #0]
 80046a8:	291d      	cmp	r1, #29
 80046aa:	d82e      	bhi.n	800470a <__sflush_r+0xbe>
 80046ac:	4b2b      	ldr	r3, [pc, #172]	@ (800475c <__sflush_r+0x110>)
 80046ae:	40cb      	lsrs	r3, r1
 80046b0:	07db      	lsls	r3, r3, #31
 80046b2:	d52a      	bpl.n	800470a <__sflush_r+0xbe>
 80046b4:	2300      	movs	r3, #0
 80046b6:	6063      	str	r3, [r4, #4]
 80046b8:	6923      	ldr	r3, [r4, #16]
 80046ba:	6023      	str	r3, [r4, #0]
 80046bc:	04d2      	lsls	r2, r2, #19
 80046be:	d505      	bpl.n	80046cc <__sflush_r+0x80>
 80046c0:	1c43      	adds	r3, r0, #1
 80046c2:	d102      	bne.n	80046ca <__sflush_r+0x7e>
 80046c4:	682b      	ldr	r3, [r5, #0]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d100      	bne.n	80046cc <__sflush_r+0x80>
 80046ca:	6560      	str	r0, [r4, #84]	@ 0x54
 80046cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80046ce:	602e      	str	r6, [r5, #0]
 80046d0:	2900      	cmp	r1, #0
 80046d2:	d018      	beq.n	8004706 <__sflush_r+0xba>
 80046d4:	0023      	movs	r3, r4
 80046d6:	3344      	adds	r3, #68	@ 0x44
 80046d8:	4299      	cmp	r1, r3
 80046da:	d002      	beq.n	80046e2 <__sflush_r+0x96>
 80046dc:	0028      	movs	r0, r5
 80046de:	f000 f995 	bl	8004a0c <_free_r>
 80046e2:	2300      	movs	r3, #0
 80046e4:	6363      	str	r3, [r4, #52]	@ 0x34
 80046e6:	e00e      	b.n	8004706 <__sflush_r+0xba>
 80046e8:	2301      	movs	r3, #1
 80046ea:	0028      	movs	r0, r5
 80046ec:	6a21      	ldr	r1, [r4, #32]
 80046ee:	47b8      	blx	r7
 80046f0:	0002      	movs	r2, r0
 80046f2:	1c43      	adds	r3, r0, #1
 80046f4:	d1c4      	bne.n	8004680 <__sflush_r+0x34>
 80046f6:	682b      	ldr	r3, [r5, #0]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d0c1      	beq.n	8004680 <__sflush_r+0x34>
 80046fc:	2b1d      	cmp	r3, #29
 80046fe:	d001      	beq.n	8004704 <__sflush_r+0xb8>
 8004700:	2b16      	cmp	r3, #22
 8004702:	d11d      	bne.n	8004740 <__sflush_r+0xf4>
 8004704:	602e      	str	r6, [r5, #0]
 8004706:	2000      	movs	r0, #0
 8004708:	e021      	b.n	800474e <__sflush_r+0x102>
 800470a:	2340      	movs	r3, #64	@ 0x40
 800470c:	4313      	orrs	r3, r2
 800470e:	e01b      	b.n	8004748 <__sflush_r+0xfc>
 8004710:	690e      	ldr	r6, [r1, #16]
 8004712:	2e00      	cmp	r6, #0
 8004714:	d0f7      	beq.n	8004706 <__sflush_r+0xba>
 8004716:	680f      	ldr	r7, [r1, #0]
 8004718:	600e      	str	r6, [r1, #0]
 800471a:	1bba      	subs	r2, r7, r6
 800471c:	9201      	str	r2, [sp, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	079b      	lsls	r3, r3, #30
 8004722:	d100      	bne.n	8004726 <__sflush_r+0xda>
 8004724:	694a      	ldr	r2, [r1, #20]
 8004726:	60a2      	str	r2, [r4, #8]
 8004728:	9b01      	ldr	r3, [sp, #4]
 800472a:	2b00      	cmp	r3, #0
 800472c:	ddeb      	ble.n	8004706 <__sflush_r+0xba>
 800472e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004730:	0032      	movs	r2, r6
 8004732:	001f      	movs	r7, r3
 8004734:	0028      	movs	r0, r5
 8004736:	9b01      	ldr	r3, [sp, #4]
 8004738:	6a21      	ldr	r1, [r4, #32]
 800473a:	47b8      	blx	r7
 800473c:	2800      	cmp	r0, #0
 800473e:	dc07      	bgt.n	8004750 <__sflush_r+0x104>
 8004740:	2340      	movs	r3, #64	@ 0x40
 8004742:	89a2      	ldrh	r2, [r4, #12]
 8004744:	4313      	orrs	r3, r2
 8004746:	b21b      	sxth	r3, r3
 8004748:	2001      	movs	r0, #1
 800474a:	81a3      	strh	r3, [r4, #12]
 800474c:	4240      	negs	r0, r0
 800474e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004750:	9b01      	ldr	r3, [sp, #4]
 8004752:	1836      	adds	r6, r6, r0
 8004754:	1a1b      	subs	r3, r3, r0
 8004756:	9301      	str	r3, [sp, #4]
 8004758:	e7e6      	b.n	8004728 <__sflush_r+0xdc>
 800475a:	46c0      	nop			@ (mov r8, r8)
 800475c:	20400001 	.word	0x20400001

08004760 <_fflush_r>:
 8004760:	690b      	ldr	r3, [r1, #16]
 8004762:	b570      	push	{r4, r5, r6, lr}
 8004764:	0005      	movs	r5, r0
 8004766:	000c      	movs	r4, r1
 8004768:	2b00      	cmp	r3, #0
 800476a:	d102      	bne.n	8004772 <_fflush_r+0x12>
 800476c:	2500      	movs	r5, #0
 800476e:	0028      	movs	r0, r5
 8004770:	bd70      	pop	{r4, r5, r6, pc}
 8004772:	2800      	cmp	r0, #0
 8004774:	d004      	beq.n	8004780 <_fflush_r+0x20>
 8004776:	6a03      	ldr	r3, [r0, #32]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d101      	bne.n	8004780 <_fflush_r+0x20>
 800477c:	f7ff fb20 	bl	8003dc0 <__sinit>
 8004780:	220c      	movs	r2, #12
 8004782:	5ea3      	ldrsh	r3, [r4, r2]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d0f1      	beq.n	800476c <_fflush_r+0xc>
 8004788:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800478a:	07d2      	lsls	r2, r2, #31
 800478c:	d404      	bmi.n	8004798 <_fflush_r+0x38>
 800478e:	059b      	lsls	r3, r3, #22
 8004790:	d402      	bmi.n	8004798 <_fflush_r+0x38>
 8004792:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004794:	f7ff fb97 	bl	8003ec6 <__retarget_lock_acquire_recursive>
 8004798:	0028      	movs	r0, r5
 800479a:	0021      	movs	r1, r4
 800479c:	f7ff ff56 	bl	800464c <__sflush_r>
 80047a0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80047a2:	0005      	movs	r5, r0
 80047a4:	07db      	lsls	r3, r3, #31
 80047a6:	d4e2      	bmi.n	800476e <_fflush_r+0xe>
 80047a8:	89a3      	ldrh	r3, [r4, #12]
 80047aa:	059b      	lsls	r3, r3, #22
 80047ac:	d4df      	bmi.n	800476e <_fflush_r+0xe>
 80047ae:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80047b0:	f7ff fb8a 	bl	8003ec8 <__retarget_lock_release_recursive>
 80047b4:	e7db      	b.n	800476e <_fflush_r+0xe>
	...

080047b8 <__malloc_lock>:
 80047b8:	b510      	push	{r4, lr}
 80047ba:	4802      	ldr	r0, [pc, #8]	@ (80047c4 <__malloc_lock+0xc>)
 80047bc:	f7ff fb83 	bl	8003ec6 <__retarget_lock_acquire_recursive>
 80047c0:	bd10      	pop	{r4, pc}
 80047c2:	46c0      	nop			@ (mov r8, r8)
 80047c4:	200004f8 	.word	0x200004f8

080047c8 <__malloc_unlock>:
 80047c8:	b510      	push	{r4, lr}
 80047ca:	4802      	ldr	r0, [pc, #8]	@ (80047d4 <__malloc_unlock+0xc>)
 80047cc:	f7ff fb7c 	bl	8003ec8 <__retarget_lock_release_recursive>
 80047d0:	bd10      	pop	{r4, pc}
 80047d2:	46c0      	nop			@ (mov r8, r8)
 80047d4:	200004f8 	.word	0x200004f8

080047d8 <__sread>:
 80047d8:	b570      	push	{r4, r5, r6, lr}
 80047da:	000c      	movs	r4, r1
 80047dc:	250e      	movs	r5, #14
 80047de:	5f49      	ldrsh	r1, [r1, r5]
 80047e0:	f000 f8ac 	bl	800493c <_read_r>
 80047e4:	2800      	cmp	r0, #0
 80047e6:	db03      	blt.n	80047f0 <__sread+0x18>
 80047e8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80047ea:	181b      	adds	r3, r3, r0
 80047ec:	6563      	str	r3, [r4, #84]	@ 0x54
 80047ee:	bd70      	pop	{r4, r5, r6, pc}
 80047f0:	89a3      	ldrh	r3, [r4, #12]
 80047f2:	4a02      	ldr	r2, [pc, #8]	@ (80047fc <__sread+0x24>)
 80047f4:	4013      	ands	r3, r2
 80047f6:	81a3      	strh	r3, [r4, #12]
 80047f8:	e7f9      	b.n	80047ee <__sread+0x16>
 80047fa:	46c0      	nop			@ (mov r8, r8)
 80047fc:	ffffefff 	.word	0xffffefff

08004800 <__swrite>:
 8004800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004802:	001f      	movs	r7, r3
 8004804:	898b      	ldrh	r3, [r1, #12]
 8004806:	0005      	movs	r5, r0
 8004808:	000c      	movs	r4, r1
 800480a:	0016      	movs	r6, r2
 800480c:	05db      	lsls	r3, r3, #23
 800480e:	d505      	bpl.n	800481c <__swrite+0x1c>
 8004810:	230e      	movs	r3, #14
 8004812:	5ec9      	ldrsh	r1, [r1, r3]
 8004814:	2200      	movs	r2, #0
 8004816:	2302      	movs	r3, #2
 8004818:	f000 f87c 	bl	8004914 <_lseek_r>
 800481c:	89a3      	ldrh	r3, [r4, #12]
 800481e:	4a05      	ldr	r2, [pc, #20]	@ (8004834 <__swrite+0x34>)
 8004820:	0028      	movs	r0, r5
 8004822:	4013      	ands	r3, r2
 8004824:	81a3      	strh	r3, [r4, #12]
 8004826:	0032      	movs	r2, r6
 8004828:	230e      	movs	r3, #14
 800482a:	5ee1      	ldrsh	r1, [r4, r3]
 800482c:	003b      	movs	r3, r7
 800482e:	f000 f8ab 	bl	8004988 <_write_r>
 8004832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004834:	ffffefff 	.word	0xffffefff

08004838 <__sseek>:
 8004838:	b570      	push	{r4, r5, r6, lr}
 800483a:	000c      	movs	r4, r1
 800483c:	250e      	movs	r5, #14
 800483e:	5f49      	ldrsh	r1, [r1, r5]
 8004840:	f000 f868 	bl	8004914 <_lseek_r>
 8004844:	220c      	movs	r2, #12
 8004846:	5ea3      	ldrsh	r3, [r4, r2]
 8004848:	1c42      	adds	r2, r0, #1
 800484a:	d103      	bne.n	8004854 <__sseek+0x1c>
 800484c:	4a04      	ldr	r2, [pc, #16]	@ (8004860 <__sseek+0x28>)
 800484e:	4013      	ands	r3, r2
 8004850:	81a3      	strh	r3, [r4, #12]
 8004852:	bd70      	pop	{r4, r5, r6, pc}
 8004854:	2280      	movs	r2, #128	@ 0x80
 8004856:	0152      	lsls	r2, r2, #5
 8004858:	4313      	orrs	r3, r2
 800485a:	81a3      	strh	r3, [r4, #12]
 800485c:	6560      	str	r0, [r4, #84]	@ 0x54
 800485e:	e7f8      	b.n	8004852 <__sseek+0x1a>
 8004860:	ffffefff 	.word	0xffffefff

08004864 <__sclose>:
 8004864:	b510      	push	{r4, lr}
 8004866:	230e      	movs	r3, #14
 8004868:	5ec9      	ldrsh	r1, [r1, r3]
 800486a:	f000 f8a1 	bl	80049b0 <_close_r>
 800486e:	bd10      	pop	{r4, pc}

08004870 <fiprintf>:
 8004870:	b40e      	push	{r1, r2, r3}
 8004872:	b517      	push	{r0, r1, r2, r4, lr}
 8004874:	4c05      	ldr	r4, [pc, #20]	@ (800488c <fiprintf+0x1c>)
 8004876:	ab05      	add	r3, sp, #20
 8004878:	cb04      	ldmia	r3!, {r2}
 800487a:	0001      	movs	r1, r0
 800487c:	6820      	ldr	r0, [r4, #0]
 800487e:	9301      	str	r3, [sp, #4]
 8004880:	f000 f936 	bl	8004af0 <_vfiprintf_r>
 8004884:	bc1e      	pop	{r1, r2, r3, r4}
 8004886:	bc08      	pop	{r3}
 8004888:	b003      	add	sp, #12
 800488a:	4718      	bx	r3
 800488c:	20000018 	.word	0x20000018

08004890 <_realloc_r>:
 8004890:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004892:	0006      	movs	r6, r0
 8004894:	000c      	movs	r4, r1
 8004896:	0015      	movs	r5, r2
 8004898:	2900      	cmp	r1, #0
 800489a:	d105      	bne.n	80048a8 <_realloc_r+0x18>
 800489c:	0011      	movs	r1, r2
 800489e:	f7ff fcd9 	bl	8004254 <_malloc_r>
 80048a2:	0004      	movs	r4, r0
 80048a4:	0020      	movs	r0, r4
 80048a6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80048a8:	2a00      	cmp	r2, #0
 80048aa:	d103      	bne.n	80048b4 <_realloc_r+0x24>
 80048ac:	f000 f8ae 	bl	8004a0c <_free_r>
 80048b0:	002c      	movs	r4, r5
 80048b2:	e7f7      	b.n	80048a4 <_realloc_r+0x14>
 80048b4:	f000 fa3c 	bl	8004d30 <_malloc_usable_size_r>
 80048b8:	0007      	movs	r7, r0
 80048ba:	4285      	cmp	r5, r0
 80048bc:	d802      	bhi.n	80048c4 <_realloc_r+0x34>
 80048be:	0843      	lsrs	r3, r0, #1
 80048c0:	42ab      	cmp	r3, r5
 80048c2:	d3ef      	bcc.n	80048a4 <_realloc_r+0x14>
 80048c4:	0029      	movs	r1, r5
 80048c6:	0030      	movs	r0, r6
 80048c8:	f7ff fcc4 	bl	8004254 <_malloc_r>
 80048cc:	9001      	str	r0, [sp, #4]
 80048ce:	2800      	cmp	r0, #0
 80048d0:	d101      	bne.n	80048d6 <_realloc_r+0x46>
 80048d2:	9c01      	ldr	r4, [sp, #4]
 80048d4:	e7e6      	b.n	80048a4 <_realloc_r+0x14>
 80048d6:	002a      	movs	r2, r5
 80048d8:	42bd      	cmp	r5, r7
 80048da:	d900      	bls.n	80048de <_realloc_r+0x4e>
 80048dc:	003a      	movs	r2, r7
 80048de:	0021      	movs	r1, r4
 80048e0:	9801      	ldr	r0, [sp, #4]
 80048e2:	f000 f882 	bl	80049ea <memcpy>
 80048e6:	0021      	movs	r1, r4
 80048e8:	0030      	movs	r0, r6
 80048ea:	f000 f88f 	bl	8004a0c <_free_r>
 80048ee:	e7f0      	b.n	80048d2 <_realloc_r+0x42>

080048f0 <memmove>:
 80048f0:	b510      	push	{r4, lr}
 80048f2:	4288      	cmp	r0, r1
 80048f4:	d902      	bls.n	80048fc <memmove+0xc>
 80048f6:	188b      	adds	r3, r1, r2
 80048f8:	4298      	cmp	r0, r3
 80048fa:	d308      	bcc.n	800490e <memmove+0x1e>
 80048fc:	2300      	movs	r3, #0
 80048fe:	429a      	cmp	r2, r3
 8004900:	d007      	beq.n	8004912 <memmove+0x22>
 8004902:	5ccc      	ldrb	r4, [r1, r3]
 8004904:	54c4      	strb	r4, [r0, r3]
 8004906:	3301      	adds	r3, #1
 8004908:	e7f9      	b.n	80048fe <memmove+0xe>
 800490a:	5c8b      	ldrb	r3, [r1, r2]
 800490c:	5483      	strb	r3, [r0, r2]
 800490e:	3a01      	subs	r2, #1
 8004910:	d2fb      	bcs.n	800490a <memmove+0x1a>
 8004912:	bd10      	pop	{r4, pc}

08004914 <_lseek_r>:
 8004914:	b570      	push	{r4, r5, r6, lr}
 8004916:	0004      	movs	r4, r0
 8004918:	0008      	movs	r0, r1
 800491a:	0011      	movs	r1, r2
 800491c:	001a      	movs	r2, r3
 800491e:	2300      	movs	r3, #0
 8004920:	4d05      	ldr	r5, [pc, #20]	@ (8004938 <_lseek_r+0x24>)
 8004922:	602b      	str	r3, [r5, #0]
 8004924:	f7ff f8c4 	bl	8003ab0 <_lseek>
 8004928:	1c43      	adds	r3, r0, #1
 800492a:	d103      	bne.n	8004934 <_lseek_r+0x20>
 800492c:	682b      	ldr	r3, [r5, #0]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d000      	beq.n	8004934 <_lseek_r+0x20>
 8004932:	6023      	str	r3, [r4, #0]
 8004934:	bd70      	pop	{r4, r5, r6, pc}
 8004936:	46c0      	nop			@ (mov r8, r8)
 8004938:	20000504 	.word	0x20000504

0800493c <_read_r>:
 800493c:	b570      	push	{r4, r5, r6, lr}
 800493e:	0004      	movs	r4, r0
 8004940:	0008      	movs	r0, r1
 8004942:	0011      	movs	r1, r2
 8004944:	001a      	movs	r2, r3
 8004946:	2300      	movs	r3, #0
 8004948:	4d05      	ldr	r5, [pc, #20]	@ (8004960 <_read_r+0x24>)
 800494a:	602b      	str	r3, [r5, #0]
 800494c:	f7ff f88a 	bl	8003a64 <_read>
 8004950:	1c43      	adds	r3, r0, #1
 8004952:	d103      	bne.n	800495c <_read_r+0x20>
 8004954:	682b      	ldr	r3, [r5, #0]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d000      	beq.n	800495c <_read_r+0x20>
 800495a:	6023      	str	r3, [r4, #0]
 800495c:	bd70      	pop	{r4, r5, r6, pc}
 800495e:	46c0      	nop			@ (mov r8, r8)
 8004960:	20000504 	.word	0x20000504

08004964 <_sbrk_r>:
 8004964:	2300      	movs	r3, #0
 8004966:	b570      	push	{r4, r5, r6, lr}
 8004968:	4d06      	ldr	r5, [pc, #24]	@ (8004984 <_sbrk_r+0x20>)
 800496a:	0004      	movs	r4, r0
 800496c:	0008      	movs	r0, r1
 800496e:	602b      	str	r3, [r5, #0]
 8004970:	f7ff f8a0 	bl	8003ab4 <_sbrk>
 8004974:	1c43      	adds	r3, r0, #1
 8004976:	d103      	bne.n	8004980 <_sbrk_r+0x1c>
 8004978:	682b      	ldr	r3, [r5, #0]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d000      	beq.n	8004980 <_sbrk_r+0x1c>
 800497e:	6023      	str	r3, [r4, #0]
 8004980:	bd70      	pop	{r4, r5, r6, pc}
 8004982:	46c0      	nop			@ (mov r8, r8)
 8004984:	20000504 	.word	0x20000504

08004988 <_write_r>:
 8004988:	b570      	push	{r4, r5, r6, lr}
 800498a:	0004      	movs	r4, r0
 800498c:	0008      	movs	r0, r1
 800498e:	0011      	movs	r1, r2
 8004990:	001a      	movs	r2, r3
 8004992:	2300      	movs	r3, #0
 8004994:	4d05      	ldr	r5, [pc, #20]	@ (80049ac <_write_r+0x24>)
 8004996:	602b      	str	r3, [r5, #0]
 8004998:	f7ff f872 	bl	8003a80 <_write>
 800499c:	1c43      	adds	r3, r0, #1
 800499e:	d103      	bne.n	80049a8 <_write_r+0x20>
 80049a0:	682b      	ldr	r3, [r5, #0]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d000      	beq.n	80049a8 <_write_r+0x20>
 80049a6:	6023      	str	r3, [r4, #0]
 80049a8:	bd70      	pop	{r4, r5, r6, pc}
 80049aa:	46c0      	nop			@ (mov r8, r8)
 80049ac:	20000504 	.word	0x20000504

080049b0 <_close_r>:
 80049b0:	2300      	movs	r3, #0
 80049b2:	b570      	push	{r4, r5, r6, lr}
 80049b4:	4d06      	ldr	r5, [pc, #24]	@ (80049d0 <_close_r+0x20>)
 80049b6:	0004      	movs	r4, r0
 80049b8:	0008      	movs	r0, r1
 80049ba:	602b      	str	r3, [r5, #0]
 80049bc:	f7ff f86e 	bl	8003a9c <_close>
 80049c0:	1c43      	adds	r3, r0, #1
 80049c2:	d103      	bne.n	80049cc <_close_r+0x1c>
 80049c4:	682b      	ldr	r3, [r5, #0]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d000      	beq.n	80049cc <_close_r+0x1c>
 80049ca:	6023      	str	r3, [r4, #0]
 80049cc:	bd70      	pop	{r4, r5, r6, pc}
 80049ce:	46c0      	nop			@ (mov r8, r8)
 80049d0:	20000504 	.word	0x20000504

080049d4 <memchr>:
 80049d4:	b2c9      	uxtb	r1, r1
 80049d6:	1882      	adds	r2, r0, r2
 80049d8:	4290      	cmp	r0, r2
 80049da:	d101      	bne.n	80049e0 <memchr+0xc>
 80049dc:	2000      	movs	r0, #0
 80049de:	4770      	bx	lr
 80049e0:	7803      	ldrb	r3, [r0, #0]
 80049e2:	428b      	cmp	r3, r1
 80049e4:	d0fb      	beq.n	80049de <memchr+0xa>
 80049e6:	3001      	adds	r0, #1
 80049e8:	e7f6      	b.n	80049d8 <memchr+0x4>

080049ea <memcpy>:
 80049ea:	2300      	movs	r3, #0
 80049ec:	b510      	push	{r4, lr}
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d100      	bne.n	80049f4 <memcpy+0xa>
 80049f2:	bd10      	pop	{r4, pc}
 80049f4:	5ccc      	ldrb	r4, [r1, r3]
 80049f6:	54c4      	strb	r4, [r0, r3]
 80049f8:	3301      	adds	r3, #1
 80049fa:	e7f8      	b.n	80049ee <memcpy+0x4>

080049fc <abort>:
 80049fc:	2006      	movs	r0, #6
 80049fe:	b510      	push	{r4, lr}
 8004a00:	f000 fac6 	bl	8004f90 <raise>
 8004a04:	2001      	movs	r0, #1
 8004a06:	f7ff f827 	bl	8003a58 <_exit>
	...

08004a0c <_free_r>:
 8004a0c:	b570      	push	{r4, r5, r6, lr}
 8004a0e:	0005      	movs	r5, r0
 8004a10:	1e0c      	subs	r4, r1, #0
 8004a12:	d010      	beq.n	8004a36 <_free_r+0x2a>
 8004a14:	3c04      	subs	r4, #4
 8004a16:	6823      	ldr	r3, [r4, #0]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	da00      	bge.n	8004a1e <_free_r+0x12>
 8004a1c:	18e4      	adds	r4, r4, r3
 8004a1e:	0028      	movs	r0, r5
 8004a20:	f7ff feca 	bl	80047b8 <__malloc_lock>
 8004a24:	4a1d      	ldr	r2, [pc, #116]	@ (8004a9c <_free_r+0x90>)
 8004a26:	6813      	ldr	r3, [r2, #0]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d105      	bne.n	8004a38 <_free_r+0x2c>
 8004a2c:	6063      	str	r3, [r4, #4]
 8004a2e:	6014      	str	r4, [r2, #0]
 8004a30:	0028      	movs	r0, r5
 8004a32:	f7ff fec9 	bl	80047c8 <__malloc_unlock>
 8004a36:	bd70      	pop	{r4, r5, r6, pc}
 8004a38:	42a3      	cmp	r3, r4
 8004a3a:	d908      	bls.n	8004a4e <_free_r+0x42>
 8004a3c:	6820      	ldr	r0, [r4, #0]
 8004a3e:	1821      	adds	r1, r4, r0
 8004a40:	428b      	cmp	r3, r1
 8004a42:	d1f3      	bne.n	8004a2c <_free_r+0x20>
 8004a44:	6819      	ldr	r1, [r3, #0]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	1809      	adds	r1, r1, r0
 8004a4a:	6021      	str	r1, [r4, #0]
 8004a4c:	e7ee      	b.n	8004a2c <_free_r+0x20>
 8004a4e:	001a      	movs	r2, r3
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d001      	beq.n	8004a5a <_free_r+0x4e>
 8004a56:	42a3      	cmp	r3, r4
 8004a58:	d9f9      	bls.n	8004a4e <_free_r+0x42>
 8004a5a:	6811      	ldr	r1, [r2, #0]
 8004a5c:	1850      	adds	r0, r2, r1
 8004a5e:	42a0      	cmp	r0, r4
 8004a60:	d10b      	bne.n	8004a7a <_free_r+0x6e>
 8004a62:	6820      	ldr	r0, [r4, #0]
 8004a64:	1809      	adds	r1, r1, r0
 8004a66:	1850      	adds	r0, r2, r1
 8004a68:	6011      	str	r1, [r2, #0]
 8004a6a:	4283      	cmp	r3, r0
 8004a6c:	d1e0      	bne.n	8004a30 <_free_r+0x24>
 8004a6e:	6818      	ldr	r0, [r3, #0]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	1841      	adds	r1, r0, r1
 8004a74:	6011      	str	r1, [r2, #0]
 8004a76:	6053      	str	r3, [r2, #4]
 8004a78:	e7da      	b.n	8004a30 <_free_r+0x24>
 8004a7a:	42a0      	cmp	r0, r4
 8004a7c:	d902      	bls.n	8004a84 <_free_r+0x78>
 8004a7e:	230c      	movs	r3, #12
 8004a80:	602b      	str	r3, [r5, #0]
 8004a82:	e7d5      	b.n	8004a30 <_free_r+0x24>
 8004a84:	6820      	ldr	r0, [r4, #0]
 8004a86:	1821      	adds	r1, r4, r0
 8004a88:	428b      	cmp	r3, r1
 8004a8a:	d103      	bne.n	8004a94 <_free_r+0x88>
 8004a8c:	6819      	ldr	r1, [r3, #0]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	1809      	adds	r1, r1, r0
 8004a92:	6021      	str	r1, [r4, #0]
 8004a94:	6063      	str	r3, [r4, #4]
 8004a96:	6054      	str	r4, [r2, #4]
 8004a98:	e7ca      	b.n	8004a30 <_free_r+0x24>
 8004a9a:	46c0      	nop			@ (mov r8, r8)
 8004a9c:	20000500 	.word	0x20000500

08004aa0 <__sfputc_r>:
 8004aa0:	6893      	ldr	r3, [r2, #8]
 8004aa2:	b510      	push	{r4, lr}
 8004aa4:	3b01      	subs	r3, #1
 8004aa6:	6093      	str	r3, [r2, #8]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	da04      	bge.n	8004ab6 <__sfputc_r+0x16>
 8004aac:	6994      	ldr	r4, [r2, #24]
 8004aae:	42a3      	cmp	r3, r4
 8004ab0:	db07      	blt.n	8004ac2 <__sfputc_r+0x22>
 8004ab2:	290a      	cmp	r1, #10
 8004ab4:	d005      	beq.n	8004ac2 <__sfputc_r+0x22>
 8004ab6:	6813      	ldr	r3, [r2, #0]
 8004ab8:	1c58      	adds	r0, r3, #1
 8004aba:	6010      	str	r0, [r2, #0]
 8004abc:	7019      	strb	r1, [r3, #0]
 8004abe:	0008      	movs	r0, r1
 8004ac0:	bd10      	pop	{r4, pc}
 8004ac2:	f000 f93d 	bl	8004d40 <__swbuf_r>
 8004ac6:	0001      	movs	r1, r0
 8004ac8:	e7f9      	b.n	8004abe <__sfputc_r+0x1e>

08004aca <__sfputs_r>:
 8004aca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004acc:	0006      	movs	r6, r0
 8004ace:	000f      	movs	r7, r1
 8004ad0:	0014      	movs	r4, r2
 8004ad2:	18d5      	adds	r5, r2, r3
 8004ad4:	42ac      	cmp	r4, r5
 8004ad6:	d101      	bne.n	8004adc <__sfputs_r+0x12>
 8004ad8:	2000      	movs	r0, #0
 8004ada:	e007      	b.n	8004aec <__sfputs_r+0x22>
 8004adc:	7821      	ldrb	r1, [r4, #0]
 8004ade:	003a      	movs	r2, r7
 8004ae0:	0030      	movs	r0, r6
 8004ae2:	f7ff ffdd 	bl	8004aa0 <__sfputc_r>
 8004ae6:	3401      	adds	r4, #1
 8004ae8:	1c43      	adds	r3, r0, #1
 8004aea:	d1f3      	bne.n	8004ad4 <__sfputs_r+0xa>
 8004aec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004af0 <_vfiprintf_r>:
 8004af0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004af2:	b09f      	sub	sp, #124	@ 0x7c
 8004af4:	000d      	movs	r5, r1
 8004af6:	0016      	movs	r6, r2
 8004af8:	001c      	movs	r4, r3
 8004afa:	9002      	str	r0, [sp, #8]
 8004afc:	2800      	cmp	r0, #0
 8004afe:	d004      	beq.n	8004b0a <_vfiprintf_r+0x1a>
 8004b00:	6a03      	ldr	r3, [r0, #32]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d101      	bne.n	8004b0a <_vfiprintf_r+0x1a>
 8004b06:	f7ff f95b 	bl	8003dc0 <__sinit>
 8004b0a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004b0c:	07db      	lsls	r3, r3, #31
 8004b0e:	d405      	bmi.n	8004b1c <_vfiprintf_r+0x2c>
 8004b10:	89ab      	ldrh	r3, [r5, #12]
 8004b12:	059b      	lsls	r3, r3, #22
 8004b14:	d402      	bmi.n	8004b1c <_vfiprintf_r+0x2c>
 8004b16:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004b18:	f7ff f9d5 	bl	8003ec6 <__retarget_lock_acquire_recursive>
 8004b1c:	89ab      	ldrh	r3, [r5, #12]
 8004b1e:	071b      	lsls	r3, r3, #28
 8004b20:	d502      	bpl.n	8004b28 <_vfiprintf_r+0x38>
 8004b22:	692b      	ldr	r3, [r5, #16]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d113      	bne.n	8004b50 <_vfiprintf_r+0x60>
 8004b28:	0029      	movs	r1, r5
 8004b2a:	9802      	ldr	r0, [sp, #8]
 8004b2c:	f000 f94a 	bl	8004dc4 <__swsetup_r>
 8004b30:	2800      	cmp	r0, #0
 8004b32:	d00d      	beq.n	8004b50 <_vfiprintf_r+0x60>
 8004b34:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004b36:	07db      	lsls	r3, r3, #31
 8004b38:	d503      	bpl.n	8004b42 <_vfiprintf_r+0x52>
 8004b3a:	2001      	movs	r0, #1
 8004b3c:	4240      	negs	r0, r0
 8004b3e:	b01f      	add	sp, #124	@ 0x7c
 8004b40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b42:	89ab      	ldrh	r3, [r5, #12]
 8004b44:	059b      	lsls	r3, r3, #22
 8004b46:	d4f8      	bmi.n	8004b3a <_vfiprintf_r+0x4a>
 8004b48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004b4a:	f7ff f9bd 	bl	8003ec8 <__retarget_lock_release_recursive>
 8004b4e:	e7f4      	b.n	8004b3a <_vfiprintf_r+0x4a>
 8004b50:	2300      	movs	r3, #0
 8004b52:	2129      	movs	r1, #41	@ 0x29
 8004b54:	aa02      	add	r2, sp, #8
 8004b56:	1852      	adds	r2, r2, r1
 8004b58:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004b5a:	3320      	adds	r3, #32
 8004b5c:	7013      	strb	r3, [r2, #0]
 8004b5e:	3101      	adds	r1, #1
 8004b60:	aa02      	add	r2, sp, #8
 8004b62:	3310      	adds	r3, #16
 8004b64:	1852      	adds	r2, r2, r1
 8004b66:	7013      	strb	r3, [r2, #0]
 8004b68:	9405      	str	r4, [sp, #20]
 8004b6a:	0034      	movs	r4, r6
 8004b6c:	7823      	ldrb	r3, [r4, #0]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d001      	beq.n	8004b76 <_vfiprintf_r+0x86>
 8004b72:	2b25      	cmp	r3, #37	@ 0x25
 8004b74:	d148      	bne.n	8004c08 <_vfiprintf_r+0x118>
 8004b76:	1ba7      	subs	r7, r4, r6
 8004b78:	42b4      	cmp	r4, r6
 8004b7a:	d00b      	beq.n	8004b94 <_vfiprintf_r+0xa4>
 8004b7c:	003b      	movs	r3, r7
 8004b7e:	0032      	movs	r2, r6
 8004b80:	0029      	movs	r1, r5
 8004b82:	9802      	ldr	r0, [sp, #8]
 8004b84:	f7ff ffa1 	bl	8004aca <__sfputs_r>
 8004b88:	3001      	adds	r0, #1
 8004b8a:	d100      	bne.n	8004b8e <_vfiprintf_r+0x9e>
 8004b8c:	e0ae      	b.n	8004cec <_vfiprintf_r+0x1fc>
 8004b8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004b90:	19db      	adds	r3, r3, r7
 8004b92:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004b94:	7823      	ldrb	r3, [r4, #0]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d100      	bne.n	8004b9c <_vfiprintf_r+0xac>
 8004b9a:	e0a7      	b.n	8004cec <_vfiprintf_r+0x1fc>
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	2153      	movs	r1, #83	@ 0x53
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	4252      	negs	r2, r2
 8004ba4:	9207      	str	r2, [sp, #28]
 8004ba6:	aa02      	add	r2, sp, #8
 8004ba8:	1852      	adds	r2, r2, r1
 8004baa:	1c66      	adds	r6, r4, #1
 8004bac:	9306      	str	r3, [sp, #24]
 8004bae:	9309      	str	r3, [sp, #36]	@ 0x24
 8004bb0:	9308      	str	r3, [sp, #32]
 8004bb2:	7013      	strb	r3, [r2, #0]
 8004bb4:	931c      	str	r3, [sp, #112]	@ 0x70
 8004bb6:	4f59      	ldr	r7, [pc, #356]	@ (8004d1c <_vfiprintf_r+0x22c>)
 8004bb8:	7831      	ldrb	r1, [r6, #0]
 8004bba:	2205      	movs	r2, #5
 8004bbc:	0038      	movs	r0, r7
 8004bbe:	f7ff ff09 	bl	80049d4 <memchr>
 8004bc2:	1c74      	adds	r4, r6, #1
 8004bc4:	9906      	ldr	r1, [sp, #24]
 8004bc6:	ab06      	add	r3, sp, #24
 8004bc8:	2800      	cmp	r0, #0
 8004bca:	d11f      	bne.n	8004c0c <_vfiprintf_r+0x11c>
 8004bcc:	06ca      	lsls	r2, r1, #27
 8004bce:	d504      	bpl.n	8004bda <_vfiprintf_r+0xea>
 8004bd0:	2753      	movs	r7, #83	@ 0x53
 8004bd2:	2220      	movs	r2, #32
 8004bd4:	a802      	add	r0, sp, #8
 8004bd6:	19c0      	adds	r0, r0, r7
 8004bd8:	7002      	strb	r2, [r0, #0]
 8004bda:	070a      	lsls	r2, r1, #28
 8004bdc:	d504      	bpl.n	8004be8 <_vfiprintf_r+0xf8>
 8004bde:	2753      	movs	r7, #83	@ 0x53
 8004be0:	222b      	movs	r2, #43	@ 0x2b
 8004be2:	a802      	add	r0, sp, #8
 8004be4:	19c0      	adds	r0, r0, r7
 8004be6:	7002      	strb	r2, [r0, #0]
 8004be8:	7832      	ldrb	r2, [r6, #0]
 8004bea:	2a2a      	cmp	r2, #42	@ 0x2a
 8004bec:	d015      	beq.n	8004c1a <_vfiprintf_r+0x12a>
 8004bee:	0034      	movs	r4, r6
 8004bf0:	2000      	movs	r0, #0
 8004bf2:	270a      	movs	r7, #10
 8004bf4:	68da      	ldr	r2, [r3, #12]
 8004bf6:	7821      	ldrb	r1, [r4, #0]
 8004bf8:	1c66      	adds	r6, r4, #1
 8004bfa:	3930      	subs	r1, #48	@ 0x30
 8004bfc:	2909      	cmp	r1, #9
 8004bfe:	d950      	bls.n	8004ca2 <_vfiprintf_r+0x1b2>
 8004c00:	2800      	cmp	r0, #0
 8004c02:	d011      	beq.n	8004c28 <_vfiprintf_r+0x138>
 8004c04:	9209      	str	r2, [sp, #36]	@ 0x24
 8004c06:	e00f      	b.n	8004c28 <_vfiprintf_r+0x138>
 8004c08:	3401      	adds	r4, #1
 8004c0a:	e7af      	b.n	8004b6c <_vfiprintf_r+0x7c>
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	1bc0      	subs	r0, r0, r7
 8004c10:	4083      	lsls	r3, r0
 8004c12:	430b      	orrs	r3, r1
 8004c14:	0026      	movs	r6, r4
 8004c16:	9306      	str	r3, [sp, #24]
 8004c18:	e7cd      	b.n	8004bb6 <_vfiprintf_r+0xc6>
 8004c1a:	9a05      	ldr	r2, [sp, #20]
 8004c1c:	1d10      	adds	r0, r2, #4
 8004c1e:	6812      	ldr	r2, [r2, #0]
 8004c20:	9005      	str	r0, [sp, #20]
 8004c22:	2a00      	cmp	r2, #0
 8004c24:	db37      	blt.n	8004c96 <_vfiprintf_r+0x1a6>
 8004c26:	60da      	str	r2, [r3, #12]
 8004c28:	7822      	ldrb	r2, [r4, #0]
 8004c2a:	2a2e      	cmp	r2, #46	@ 0x2e
 8004c2c:	d10c      	bne.n	8004c48 <_vfiprintf_r+0x158>
 8004c2e:	7862      	ldrb	r2, [r4, #1]
 8004c30:	2a2a      	cmp	r2, #42	@ 0x2a
 8004c32:	d13b      	bne.n	8004cac <_vfiprintf_r+0x1bc>
 8004c34:	9a05      	ldr	r2, [sp, #20]
 8004c36:	3402      	adds	r4, #2
 8004c38:	1d11      	adds	r1, r2, #4
 8004c3a:	6812      	ldr	r2, [r2, #0]
 8004c3c:	9105      	str	r1, [sp, #20]
 8004c3e:	2a00      	cmp	r2, #0
 8004c40:	da01      	bge.n	8004c46 <_vfiprintf_r+0x156>
 8004c42:	2201      	movs	r2, #1
 8004c44:	4252      	negs	r2, r2
 8004c46:	605a      	str	r2, [r3, #4]
 8004c48:	4e35      	ldr	r6, [pc, #212]	@ (8004d20 <_vfiprintf_r+0x230>)
 8004c4a:	2203      	movs	r2, #3
 8004c4c:	0030      	movs	r0, r6
 8004c4e:	7821      	ldrb	r1, [r4, #0]
 8004c50:	f7ff fec0 	bl	80049d4 <memchr>
 8004c54:	af06      	add	r7, sp, #24
 8004c56:	2800      	cmp	r0, #0
 8004c58:	d006      	beq.n	8004c68 <_vfiprintf_r+0x178>
 8004c5a:	2340      	movs	r3, #64	@ 0x40
 8004c5c:	1b80      	subs	r0, r0, r6
 8004c5e:	4083      	lsls	r3, r0
 8004c60:	9a06      	ldr	r2, [sp, #24]
 8004c62:	3401      	adds	r4, #1
 8004c64:	4313      	orrs	r3, r2
 8004c66:	9306      	str	r3, [sp, #24]
 8004c68:	7821      	ldrb	r1, [r4, #0]
 8004c6a:	2206      	movs	r2, #6
 8004c6c:	482d      	ldr	r0, [pc, #180]	@ (8004d24 <_vfiprintf_r+0x234>)
 8004c6e:	1c66      	adds	r6, r4, #1
 8004c70:	7639      	strb	r1, [r7, #24]
 8004c72:	f7ff feaf 	bl	80049d4 <memchr>
 8004c76:	2800      	cmp	r0, #0
 8004c78:	d047      	beq.n	8004d0a <_vfiprintf_r+0x21a>
 8004c7a:	4b2b      	ldr	r3, [pc, #172]	@ (8004d28 <_vfiprintf_r+0x238>)
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d129      	bne.n	8004cd4 <_vfiprintf_r+0x1e4>
 8004c80:	2207      	movs	r2, #7
 8004c82:	9b05      	ldr	r3, [sp, #20]
 8004c84:	3307      	adds	r3, #7
 8004c86:	4393      	bics	r3, r2
 8004c88:	3308      	adds	r3, #8
 8004c8a:	9305      	str	r3, [sp, #20]
 8004c8c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004c8e:	9903      	ldr	r1, [sp, #12]
 8004c90:	185b      	adds	r3, r3, r1
 8004c92:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004c94:	e769      	b.n	8004b6a <_vfiprintf_r+0x7a>
 8004c96:	4252      	negs	r2, r2
 8004c98:	60da      	str	r2, [r3, #12]
 8004c9a:	2202      	movs	r2, #2
 8004c9c:	430a      	orrs	r2, r1
 8004c9e:	9206      	str	r2, [sp, #24]
 8004ca0:	e7c2      	b.n	8004c28 <_vfiprintf_r+0x138>
 8004ca2:	437a      	muls	r2, r7
 8004ca4:	0034      	movs	r4, r6
 8004ca6:	2001      	movs	r0, #1
 8004ca8:	1852      	adds	r2, r2, r1
 8004caa:	e7a4      	b.n	8004bf6 <_vfiprintf_r+0x106>
 8004cac:	2200      	movs	r2, #0
 8004cae:	200a      	movs	r0, #10
 8004cb0:	605a      	str	r2, [r3, #4]
 8004cb2:	0011      	movs	r1, r2
 8004cb4:	0013      	movs	r3, r2
 8004cb6:	3401      	adds	r4, #1
 8004cb8:	7822      	ldrb	r2, [r4, #0]
 8004cba:	1c66      	adds	r6, r4, #1
 8004cbc:	3a30      	subs	r2, #48	@ 0x30
 8004cbe:	2a09      	cmp	r2, #9
 8004cc0:	d903      	bls.n	8004cca <_vfiprintf_r+0x1da>
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d0c0      	beq.n	8004c48 <_vfiprintf_r+0x158>
 8004cc6:	9107      	str	r1, [sp, #28]
 8004cc8:	e7be      	b.n	8004c48 <_vfiprintf_r+0x158>
 8004cca:	4341      	muls	r1, r0
 8004ccc:	0034      	movs	r4, r6
 8004cce:	2301      	movs	r3, #1
 8004cd0:	1889      	adds	r1, r1, r2
 8004cd2:	e7f1      	b.n	8004cb8 <_vfiprintf_r+0x1c8>
 8004cd4:	aa05      	add	r2, sp, #20
 8004cd6:	9200      	str	r2, [sp, #0]
 8004cd8:	0039      	movs	r1, r7
 8004cda:	002a      	movs	r2, r5
 8004cdc:	4b13      	ldr	r3, [pc, #76]	@ (8004d2c <_vfiprintf_r+0x23c>)
 8004cde:	9802      	ldr	r0, [sp, #8]
 8004ce0:	e000      	b.n	8004ce4 <_vfiprintf_r+0x1f4>
 8004ce2:	bf00      	nop
 8004ce4:	9003      	str	r0, [sp, #12]
 8004ce6:	9b03      	ldr	r3, [sp, #12]
 8004ce8:	3301      	adds	r3, #1
 8004cea:	d1cf      	bne.n	8004c8c <_vfiprintf_r+0x19c>
 8004cec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004cee:	07db      	lsls	r3, r3, #31
 8004cf0:	d405      	bmi.n	8004cfe <_vfiprintf_r+0x20e>
 8004cf2:	89ab      	ldrh	r3, [r5, #12]
 8004cf4:	059b      	lsls	r3, r3, #22
 8004cf6:	d402      	bmi.n	8004cfe <_vfiprintf_r+0x20e>
 8004cf8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004cfa:	f7ff f8e5 	bl	8003ec8 <__retarget_lock_release_recursive>
 8004cfe:	89ab      	ldrh	r3, [r5, #12]
 8004d00:	065b      	lsls	r3, r3, #25
 8004d02:	d500      	bpl.n	8004d06 <_vfiprintf_r+0x216>
 8004d04:	e719      	b.n	8004b3a <_vfiprintf_r+0x4a>
 8004d06:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8004d08:	e719      	b.n	8004b3e <_vfiprintf_r+0x4e>
 8004d0a:	aa05      	add	r2, sp, #20
 8004d0c:	9200      	str	r2, [sp, #0]
 8004d0e:	0039      	movs	r1, r7
 8004d10:	002a      	movs	r2, r5
 8004d12:	4b06      	ldr	r3, [pc, #24]	@ (8004d2c <_vfiprintf_r+0x23c>)
 8004d14:	9802      	ldr	r0, [sp, #8]
 8004d16:	f7ff fb8d 	bl	8004434 <_printf_i>
 8004d1a:	e7e3      	b.n	8004ce4 <_vfiprintf_r+0x1f4>
 8004d1c:	080060c4 	.word	0x080060c4
 8004d20:	080060ca 	.word	0x080060ca
 8004d24:	080060ce 	.word	0x080060ce
 8004d28:	00000000 	.word	0x00000000
 8004d2c:	08004acb 	.word	0x08004acb

08004d30 <_malloc_usable_size_r>:
 8004d30:	1f0b      	subs	r3, r1, #4
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	1f18      	subs	r0, r3, #4
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	da01      	bge.n	8004d3e <_malloc_usable_size_r+0xe>
 8004d3a:	580b      	ldr	r3, [r1, r0]
 8004d3c:	18c0      	adds	r0, r0, r3
 8004d3e:	4770      	bx	lr

08004d40 <__swbuf_r>:
 8004d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d42:	0006      	movs	r6, r0
 8004d44:	000d      	movs	r5, r1
 8004d46:	0014      	movs	r4, r2
 8004d48:	2800      	cmp	r0, #0
 8004d4a:	d004      	beq.n	8004d56 <__swbuf_r+0x16>
 8004d4c:	6a03      	ldr	r3, [r0, #32]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d101      	bne.n	8004d56 <__swbuf_r+0x16>
 8004d52:	f7ff f835 	bl	8003dc0 <__sinit>
 8004d56:	69a3      	ldr	r3, [r4, #24]
 8004d58:	60a3      	str	r3, [r4, #8]
 8004d5a:	89a3      	ldrh	r3, [r4, #12]
 8004d5c:	071b      	lsls	r3, r3, #28
 8004d5e:	d502      	bpl.n	8004d66 <__swbuf_r+0x26>
 8004d60:	6923      	ldr	r3, [r4, #16]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d109      	bne.n	8004d7a <__swbuf_r+0x3a>
 8004d66:	0021      	movs	r1, r4
 8004d68:	0030      	movs	r0, r6
 8004d6a:	f000 f82b 	bl	8004dc4 <__swsetup_r>
 8004d6e:	2800      	cmp	r0, #0
 8004d70:	d003      	beq.n	8004d7a <__swbuf_r+0x3a>
 8004d72:	2501      	movs	r5, #1
 8004d74:	426d      	negs	r5, r5
 8004d76:	0028      	movs	r0, r5
 8004d78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d7a:	6923      	ldr	r3, [r4, #16]
 8004d7c:	6820      	ldr	r0, [r4, #0]
 8004d7e:	b2ef      	uxtb	r7, r5
 8004d80:	1ac0      	subs	r0, r0, r3
 8004d82:	6963      	ldr	r3, [r4, #20]
 8004d84:	b2ed      	uxtb	r5, r5
 8004d86:	4283      	cmp	r3, r0
 8004d88:	dc05      	bgt.n	8004d96 <__swbuf_r+0x56>
 8004d8a:	0021      	movs	r1, r4
 8004d8c:	0030      	movs	r0, r6
 8004d8e:	f7ff fce7 	bl	8004760 <_fflush_r>
 8004d92:	2800      	cmp	r0, #0
 8004d94:	d1ed      	bne.n	8004d72 <__swbuf_r+0x32>
 8004d96:	68a3      	ldr	r3, [r4, #8]
 8004d98:	3001      	adds	r0, #1
 8004d9a:	3b01      	subs	r3, #1
 8004d9c:	60a3      	str	r3, [r4, #8]
 8004d9e:	6823      	ldr	r3, [r4, #0]
 8004da0:	1c5a      	adds	r2, r3, #1
 8004da2:	6022      	str	r2, [r4, #0]
 8004da4:	701f      	strb	r7, [r3, #0]
 8004da6:	6963      	ldr	r3, [r4, #20]
 8004da8:	4283      	cmp	r3, r0
 8004daa:	d004      	beq.n	8004db6 <__swbuf_r+0x76>
 8004dac:	89a3      	ldrh	r3, [r4, #12]
 8004dae:	07db      	lsls	r3, r3, #31
 8004db0:	d5e1      	bpl.n	8004d76 <__swbuf_r+0x36>
 8004db2:	2d0a      	cmp	r5, #10
 8004db4:	d1df      	bne.n	8004d76 <__swbuf_r+0x36>
 8004db6:	0021      	movs	r1, r4
 8004db8:	0030      	movs	r0, r6
 8004dba:	f7ff fcd1 	bl	8004760 <_fflush_r>
 8004dbe:	2800      	cmp	r0, #0
 8004dc0:	d0d9      	beq.n	8004d76 <__swbuf_r+0x36>
 8004dc2:	e7d6      	b.n	8004d72 <__swbuf_r+0x32>

08004dc4 <__swsetup_r>:
 8004dc4:	4b2b      	ldr	r3, [pc, #172]	@ (8004e74 <__swsetup_r+0xb0>)
 8004dc6:	b570      	push	{r4, r5, r6, lr}
 8004dc8:	0005      	movs	r5, r0
 8004dca:	6818      	ldr	r0, [r3, #0]
 8004dcc:	000c      	movs	r4, r1
 8004dce:	2800      	cmp	r0, #0
 8004dd0:	d004      	beq.n	8004ddc <__swsetup_r+0x18>
 8004dd2:	6a03      	ldr	r3, [r0, #32]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d101      	bne.n	8004ddc <__swsetup_r+0x18>
 8004dd8:	f7fe fff2 	bl	8003dc0 <__sinit>
 8004ddc:	220c      	movs	r2, #12
 8004dde:	5ea3      	ldrsh	r3, [r4, r2]
 8004de0:	071a      	lsls	r2, r3, #28
 8004de2:	d422      	bmi.n	8004e2a <__swsetup_r+0x66>
 8004de4:	06da      	lsls	r2, r3, #27
 8004de6:	d407      	bmi.n	8004df8 <__swsetup_r+0x34>
 8004de8:	2209      	movs	r2, #9
 8004dea:	602a      	str	r2, [r5, #0]
 8004dec:	3237      	adds	r2, #55	@ 0x37
 8004dee:	2001      	movs	r0, #1
 8004df0:	4313      	orrs	r3, r2
 8004df2:	81a3      	strh	r3, [r4, #12]
 8004df4:	4240      	negs	r0, r0
 8004df6:	bd70      	pop	{r4, r5, r6, pc}
 8004df8:	075a      	lsls	r2, r3, #29
 8004dfa:	d513      	bpl.n	8004e24 <__swsetup_r+0x60>
 8004dfc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004dfe:	2900      	cmp	r1, #0
 8004e00:	d008      	beq.n	8004e14 <__swsetup_r+0x50>
 8004e02:	0023      	movs	r3, r4
 8004e04:	3344      	adds	r3, #68	@ 0x44
 8004e06:	4299      	cmp	r1, r3
 8004e08:	d002      	beq.n	8004e10 <__swsetup_r+0x4c>
 8004e0a:	0028      	movs	r0, r5
 8004e0c:	f7ff fdfe 	bl	8004a0c <_free_r>
 8004e10:	2300      	movs	r3, #0
 8004e12:	6363      	str	r3, [r4, #52]	@ 0x34
 8004e14:	2224      	movs	r2, #36	@ 0x24
 8004e16:	89a3      	ldrh	r3, [r4, #12]
 8004e18:	4393      	bics	r3, r2
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	6062      	str	r2, [r4, #4]
 8004e1e:	6922      	ldr	r2, [r4, #16]
 8004e20:	b21b      	sxth	r3, r3
 8004e22:	6022      	str	r2, [r4, #0]
 8004e24:	2208      	movs	r2, #8
 8004e26:	4313      	orrs	r3, r2
 8004e28:	81a3      	strh	r3, [r4, #12]
 8004e2a:	6922      	ldr	r2, [r4, #16]
 8004e2c:	2a00      	cmp	r2, #0
 8004e2e:	d107      	bne.n	8004e40 <__swsetup_r+0x7c>
 8004e30:	059a      	lsls	r2, r3, #22
 8004e32:	d501      	bpl.n	8004e38 <__swsetup_r+0x74>
 8004e34:	061b      	lsls	r3, r3, #24
 8004e36:	d503      	bpl.n	8004e40 <__swsetup_r+0x7c>
 8004e38:	0021      	movs	r1, r4
 8004e3a:	0028      	movs	r0, r5
 8004e3c:	f000 f846 	bl	8004ecc <__smakebuf_r>
 8004e40:	230c      	movs	r3, #12
 8004e42:	5ee2      	ldrsh	r2, [r4, r3]
 8004e44:	2101      	movs	r1, #1
 8004e46:	0013      	movs	r3, r2
 8004e48:	400b      	ands	r3, r1
 8004e4a:	420a      	tst	r2, r1
 8004e4c:	d00c      	beq.n	8004e68 <__swsetup_r+0xa4>
 8004e4e:	2300      	movs	r3, #0
 8004e50:	60a3      	str	r3, [r4, #8]
 8004e52:	6963      	ldr	r3, [r4, #20]
 8004e54:	425b      	negs	r3, r3
 8004e56:	61a3      	str	r3, [r4, #24]
 8004e58:	2000      	movs	r0, #0
 8004e5a:	6923      	ldr	r3, [r4, #16]
 8004e5c:	4283      	cmp	r3, r0
 8004e5e:	d1ca      	bne.n	8004df6 <__swsetup_r+0x32>
 8004e60:	0613      	lsls	r3, r2, #24
 8004e62:	d5c8      	bpl.n	8004df6 <__swsetup_r+0x32>
 8004e64:	2340      	movs	r3, #64	@ 0x40
 8004e66:	e7c2      	b.n	8004dee <__swsetup_r+0x2a>
 8004e68:	0791      	lsls	r1, r2, #30
 8004e6a:	d400      	bmi.n	8004e6e <__swsetup_r+0xaa>
 8004e6c:	6963      	ldr	r3, [r4, #20]
 8004e6e:	60a3      	str	r3, [r4, #8]
 8004e70:	e7f2      	b.n	8004e58 <__swsetup_r+0x94>
 8004e72:	46c0      	nop			@ (mov r8, r8)
 8004e74:	20000018 	.word	0x20000018

08004e78 <__swhatbuf_r>:
 8004e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e7a:	000e      	movs	r6, r1
 8004e7c:	001d      	movs	r5, r3
 8004e7e:	230e      	movs	r3, #14
 8004e80:	5ec9      	ldrsh	r1, [r1, r3]
 8004e82:	0014      	movs	r4, r2
 8004e84:	b097      	sub	sp, #92	@ 0x5c
 8004e86:	2900      	cmp	r1, #0
 8004e88:	da0c      	bge.n	8004ea4 <__swhatbuf_r+0x2c>
 8004e8a:	89b2      	ldrh	r2, [r6, #12]
 8004e8c:	2380      	movs	r3, #128	@ 0x80
 8004e8e:	0011      	movs	r1, r2
 8004e90:	4019      	ands	r1, r3
 8004e92:	421a      	tst	r2, r3
 8004e94:	d114      	bne.n	8004ec0 <__swhatbuf_r+0x48>
 8004e96:	2380      	movs	r3, #128	@ 0x80
 8004e98:	00db      	lsls	r3, r3, #3
 8004e9a:	2000      	movs	r0, #0
 8004e9c:	6029      	str	r1, [r5, #0]
 8004e9e:	6023      	str	r3, [r4, #0]
 8004ea0:	b017      	add	sp, #92	@ 0x5c
 8004ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ea4:	466a      	mov	r2, sp
 8004ea6:	f000 f8a5 	bl	8004ff4 <_fstat_r>
 8004eaa:	2800      	cmp	r0, #0
 8004eac:	dbed      	blt.n	8004e8a <__swhatbuf_r+0x12>
 8004eae:	23f0      	movs	r3, #240	@ 0xf0
 8004eb0:	9901      	ldr	r1, [sp, #4]
 8004eb2:	021b      	lsls	r3, r3, #8
 8004eb4:	4019      	ands	r1, r3
 8004eb6:	4b04      	ldr	r3, [pc, #16]	@ (8004ec8 <__swhatbuf_r+0x50>)
 8004eb8:	18c9      	adds	r1, r1, r3
 8004eba:	424b      	negs	r3, r1
 8004ebc:	4159      	adcs	r1, r3
 8004ebe:	e7ea      	b.n	8004e96 <__swhatbuf_r+0x1e>
 8004ec0:	2100      	movs	r1, #0
 8004ec2:	2340      	movs	r3, #64	@ 0x40
 8004ec4:	e7e9      	b.n	8004e9a <__swhatbuf_r+0x22>
 8004ec6:	46c0      	nop			@ (mov r8, r8)
 8004ec8:	ffffe000 	.word	0xffffe000

08004ecc <__smakebuf_r>:
 8004ecc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ece:	2602      	movs	r6, #2
 8004ed0:	898b      	ldrh	r3, [r1, #12]
 8004ed2:	0005      	movs	r5, r0
 8004ed4:	000c      	movs	r4, r1
 8004ed6:	4233      	tst	r3, r6
 8004ed8:	d006      	beq.n	8004ee8 <__smakebuf_r+0x1c>
 8004eda:	0023      	movs	r3, r4
 8004edc:	3347      	adds	r3, #71	@ 0x47
 8004ede:	6023      	str	r3, [r4, #0]
 8004ee0:	6123      	str	r3, [r4, #16]
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	6163      	str	r3, [r4, #20]
 8004ee6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8004ee8:	466a      	mov	r2, sp
 8004eea:	ab01      	add	r3, sp, #4
 8004eec:	f7ff ffc4 	bl	8004e78 <__swhatbuf_r>
 8004ef0:	9f00      	ldr	r7, [sp, #0]
 8004ef2:	0028      	movs	r0, r5
 8004ef4:	0039      	movs	r1, r7
 8004ef6:	f7ff f9ad 	bl	8004254 <_malloc_r>
 8004efa:	220c      	movs	r2, #12
 8004efc:	5ea3      	ldrsh	r3, [r4, r2]
 8004efe:	2800      	cmp	r0, #0
 8004f00:	d106      	bne.n	8004f10 <__smakebuf_r+0x44>
 8004f02:	059a      	lsls	r2, r3, #22
 8004f04:	d4ef      	bmi.n	8004ee6 <__smakebuf_r+0x1a>
 8004f06:	2203      	movs	r2, #3
 8004f08:	4393      	bics	r3, r2
 8004f0a:	431e      	orrs	r6, r3
 8004f0c:	81a6      	strh	r6, [r4, #12]
 8004f0e:	e7e4      	b.n	8004eda <__smakebuf_r+0xe>
 8004f10:	2280      	movs	r2, #128	@ 0x80
 8004f12:	4313      	orrs	r3, r2
 8004f14:	81a3      	strh	r3, [r4, #12]
 8004f16:	9b01      	ldr	r3, [sp, #4]
 8004f18:	6020      	str	r0, [r4, #0]
 8004f1a:	6120      	str	r0, [r4, #16]
 8004f1c:	6167      	str	r7, [r4, #20]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d0e1      	beq.n	8004ee6 <__smakebuf_r+0x1a>
 8004f22:	0028      	movs	r0, r5
 8004f24:	230e      	movs	r3, #14
 8004f26:	5ee1      	ldrsh	r1, [r4, r3]
 8004f28:	f000 f83c 	bl	8004fa4 <_isatty_r>
 8004f2c:	2800      	cmp	r0, #0
 8004f2e:	d0da      	beq.n	8004ee6 <__smakebuf_r+0x1a>
 8004f30:	2303      	movs	r3, #3
 8004f32:	89a2      	ldrh	r2, [r4, #12]
 8004f34:	439a      	bics	r2, r3
 8004f36:	3b02      	subs	r3, #2
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	81a3      	strh	r3, [r4, #12]
 8004f3c:	e7d3      	b.n	8004ee6 <__smakebuf_r+0x1a>

08004f3e <_raise_r>:
 8004f3e:	b570      	push	{r4, r5, r6, lr}
 8004f40:	0004      	movs	r4, r0
 8004f42:	000d      	movs	r5, r1
 8004f44:	291f      	cmp	r1, #31
 8004f46:	d904      	bls.n	8004f52 <_raise_r+0x14>
 8004f48:	2316      	movs	r3, #22
 8004f4a:	6003      	str	r3, [r0, #0]
 8004f4c:	2001      	movs	r0, #1
 8004f4e:	4240      	negs	r0, r0
 8004f50:	bd70      	pop	{r4, r5, r6, pc}
 8004f52:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d004      	beq.n	8004f62 <_raise_r+0x24>
 8004f58:	008a      	lsls	r2, r1, #2
 8004f5a:	189b      	adds	r3, r3, r2
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	2a00      	cmp	r2, #0
 8004f60:	d108      	bne.n	8004f74 <_raise_r+0x36>
 8004f62:	0020      	movs	r0, r4
 8004f64:	f000 f842 	bl	8004fec <_getpid_r>
 8004f68:	002a      	movs	r2, r5
 8004f6a:	0001      	movs	r1, r0
 8004f6c:	0020      	movs	r0, r4
 8004f6e:	f000 f82b 	bl	8004fc8 <_kill_r>
 8004f72:	e7ed      	b.n	8004f50 <_raise_r+0x12>
 8004f74:	2a01      	cmp	r2, #1
 8004f76:	d009      	beq.n	8004f8c <_raise_r+0x4e>
 8004f78:	1c51      	adds	r1, r2, #1
 8004f7a:	d103      	bne.n	8004f84 <_raise_r+0x46>
 8004f7c:	2316      	movs	r3, #22
 8004f7e:	6003      	str	r3, [r0, #0]
 8004f80:	2001      	movs	r0, #1
 8004f82:	e7e5      	b.n	8004f50 <_raise_r+0x12>
 8004f84:	2100      	movs	r1, #0
 8004f86:	0028      	movs	r0, r5
 8004f88:	6019      	str	r1, [r3, #0]
 8004f8a:	4790      	blx	r2
 8004f8c:	2000      	movs	r0, #0
 8004f8e:	e7df      	b.n	8004f50 <_raise_r+0x12>

08004f90 <raise>:
 8004f90:	b510      	push	{r4, lr}
 8004f92:	4b03      	ldr	r3, [pc, #12]	@ (8004fa0 <raise+0x10>)
 8004f94:	0001      	movs	r1, r0
 8004f96:	6818      	ldr	r0, [r3, #0]
 8004f98:	f7ff ffd1 	bl	8004f3e <_raise_r>
 8004f9c:	bd10      	pop	{r4, pc}
 8004f9e:	46c0      	nop			@ (mov r8, r8)
 8004fa0:	20000018 	.word	0x20000018

08004fa4 <_isatty_r>:
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	b570      	push	{r4, r5, r6, lr}
 8004fa8:	4d06      	ldr	r5, [pc, #24]	@ (8004fc4 <_isatty_r+0x20>)
 8004faa:	0004      	movs	r4, r0
 8004fac:	0008      	movs	r0, r1
 8004fae:	602b      	str	r3, [r5, #0]
 8004fb0:	f7fe fd7c 	bl	8003aac <_isatty>
 8004fb4:	1c43      	adds	r3, r0, #1
 8004fb6:	d103      	bne.n	8004fc0 <_isatty_r+0x1c>
 8004fb8:	682b      	ldr	r3, [r5, #0]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d000      	beq.n	8004fc0 <_isatty_r+0x1c>
 8004fbe:	6023      	str	r3, [r4, #0]
 8004fc0:	bd70      	pop	{r4, r5, r6, pc}
 8004fc2:	46c0      	nop			@ (mov r8, r8)
 8004fc4:	20000504 	.word	0x20000504

08004fc8 <_kill_r>:
 8004fc8:	2300      	movs	r3, #0
 8004fca:	b570      	push	{r4, r5, r6, lr}
 8004fcc:	4d06      	ldr	r5, [pc, #24]	@ (8004fe8 <_kill_r+0x20>)
 8004fce:	0004      	movs	r4, r0
 8004fd0:	0008      	movs	r0, r1
 8004fd2:	0011      	movs	r1, r2
 8004fd4:	602b      	str	r3, [r5, #0]
 8004fd6:	f7fe fd37 	bl	8003a48 <_kill>
 8004fda:	1c43      	adds	r3, r0, #1
 8004fdc:	d103      	bne.n	8004fe6 <_kill_r+0x1e>
 8004fde:	682b      	ldr	r3, [r5, #0]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d000      	beq.n	8004fe6 <_kill_r+0x1e>
 8004fe4:	6023      	str	r3, [r4, #0]
 8004fe6:	bd70      	pop	{r4, r5, r6, pc}
 8004fe8:	20000504 	.word	0x20000504

08004fec <_getpid_r>:
 8004fec:	b510      	push	{r4, lr}
 8004fee:	f7fe fd29 	bl	8003a44 <_getpid>
 8004ff2:	bd10      	pop	{r4, pc}

08004ff4 <_fstat_r>:
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	b570      	push	{r4, r5, r6, lr}
 8004ff8:	4d06      	ldr	r5, [pc, #24]	@ (8005014 <_fstat_r+0x20>)
 8004ffa:	0004      	movs	r4, r0
 8004ffc:	0008      	movs	r0, r1
 8004ffe:	0011      	movs	r1, r2
 8005000:	602b      	str	r3, [r5, #0]
 8005002:	f7fe fd4e 	bl	8003aa2 <_fstat>
 8005006:	1c43      	adds	r3, r0, #1
 8005008:	d103      	bne.n	8005012 <_fstat_r+0x1e>
 800500a:	682b      	ldr	r3, [r5, #0]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d000      	beq.n	8005012 <_fstat_r+0x1e>
 8005010:	6023      	str	r3, [r4, #0]
 8005012:	bd70      	pop	{r4, r5, r6, pc}
 8005014:	20000504 	.word	0x20000504

08005018 <_gettimeofday>:
 8005018:	2258      	movs	r2, #88	@ 0x58
 800501a:	2001      	movs	r0, #1
 800501c:	4b01      	ldr	r3, [pc, #4]	@ (8005024 <_gettimeofday+0xc>)
 800501e:	4240      	negs	r0, r0
 8005020:	601a      	str	r2, [r3, #0]
 8005022:	4770      	bx	lr
 8005024:	20000504 	.word	0x20000504

08005028 <__aeabi_lmul>:
 8005028:	b5f0      	push	{r4, r5, r6, r7, lr}
 800502a:	46ce      	mov	lr, r9
 800502c:	4699      	mov	r9, r3
 800502e:	0c03      	lsrs	r3, r0, #16
 8005030:	469c      	mov	ip, r3
 8005032:	0413      	lsls	r3, r2, #16
 8005034:	4647      	mov	r7, r8
 8005036:	0c1b      	lsrs	r3, r3, #16
 8005038:	001d      	movs	r5, r3
 800503a:	000e      	movs	r6, r1
 800503c:	4661      	mov	r1, ip
 800503e:	0404      	lsls	r4, r0, #16
 8005040:	0c24      	lsrs	r4, r4, #16
 8005042:	b580      	push	{r7, lr}
 8005044:	0007      	movs	r7, r0
 8005046:	0c10      	lsrs	r0, r2, #16
 8005048:	434b      	muls	r3, r1
 800504a:	4365      	muls	r5, r4
 800504c:	4341      	muls	r1, r0
 800504e:	4360      	muls	r0, r4
 8005050:	0c2c      	lsrs	r4, r5, #16
 8005052:	18c0      	adds	r0, r0, r3
 8005054:	1824      	adds	r4, r4, r0
 8005056:	468c      	mov	ip, r1
 8005058:	42a3      	cmp	r3, r4
 800505a:	d903      	bls.n	8005064 <__aeabi_lmul+0x3c>
 800505c:	2380      	movs	r3, #128	@ 0x80
 800505e:	025b      	lsls	r3, r3, #9
 8005060:	4698      	mov	r8, r3
 8005062:	44c4      	add	ip, r8
 8005064:	4649      	mov	r1, r9
 8005066:	4379      	muls	r1, r7
 8005068:	4356      	muls	r6, r2
 800506a:	0c23      	lsrs	r3, r4, #16
 800506c:	042d      	lsls	r5, r5, #16
 800506e:	0c2d      	lsrs	r5, r5, #16
 8005070:	1989      	adds	r1, r1, r6
 8005072:	4463      	add	r3, ip
 8005074:	0424      	lsls	r4, r4, #16
 8005076:	1960      	adds	r0, r4, r5
 8005078:	18c9      	adds	r1, r1, r3
 800507a:	bcc0      	pop	{r6, r7}
 800507c:	46b9      	mov	r9, r7
 800507e:	46b0      	mov	r8, r6
 8005080:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005082:	46c0      	nop			@ (mov r8, r8)

08005084 <__aeabi_f2uiz>:
 8005084:	219e      	movs	r1, #158	@ 0x9e
 8005086:	b510      	push	{r4, lr}
 8005088:	05c9      	lsls	r1, r1, #23
 800508a:	1c04      	adds	r4, r0, #0
 800508c:	f7fb f9da 	bl	8000444 <__aeabi_fcmpge>
 8005090:	2800      	cmp	r0, #0
 8005092:	d103      	bne.n	800509c <__aeabi_f2uiz+0x18>
 8005094:	1c20      	adds	r0, r4, #0
 8005096:	f000 fdaf 	bl	8005bf8 <__aeabi_f2iz>
 800509a:	bd10      	pop	{r4, pc}
 800509c:	219e      	movs	r1, #158	@ 0x9e
 800509e:	1c20      	adds	r0, r4, #0
 80050a0:	05c9      	lsls	r1, r1, #23
 80050a2:	f000 fb67 	bl	8005774 <__aeabi_fsub>
 80050a6:	f000 fda7 	bl	8005bf8 <__aeabi_f2iz>
 80050aa:	2380      	movs	r3, #128	@ 0x80
 80050ac:	061b      	lsls	r3, r3, #24
 80050ae:	469c      	mov	ip, r3
 80050b0:	4460      	add	r0, ip
 80050b2:	e7f2      	b.n	800509a <__aeabi_f2uiz+0x16>

080050b4 <__aeabi_fadd>:
 80050b4:	024a      	lsls	r2, r1, #9
 80050b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050b8:	0a53      	lsrs	r3, r2, #9
 80050ba:	46ce      	mov	lr, r9
 80050bc:	4699      	mov	r9, r3
 80050be:	004b      	lsls	r3, r1, #1
 80050c0:	0fc9      	lsrs	r1, r1, #31
 80050c2:	4647      	mov	r7, r8
 80050c4:	4688      	mov	r8, r1
 80050c6:	0046      	lsls	r6, r0, #1
 80050c8:	0245      	lsls	r5, r0, #9
 80050ca:	0e36      	lsrs	r6, r6, #24
 80050cc:	0e1b      	lsrs	r3, r3, #24
 80050ce:	b580      	push	{r7, lr}
 80050d0:	0fc4      	lsrs	r4, r0, #31
 80050d2:	0a6f      	lsrs	r7, r5, #9
 80050d4:	0992      	lsrs	r2, r2, #6
 80050d6:	09ad      	lsrs	r5, r5, #6
 80050d8:	1af1      	subs	r1, r6, r3
 80050da:	4544      	cmp	r4, r8
 80050dc:	d04b      	beq.n	8005176 <__aeabi_fadd+0xc2>
 80050de:	2900      	cmp	r1, #0
 80050e0:	dd38      	ble.n	8005154 <__aeabi_fadd+0xa0>
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d100      	bne.n	80050e8 <__aeabi_fadd+0x34>
 80050e6:	e074      	b.n	80051d2 <__aeabi_fadd+0x11e>
 80050e8:	2eff      	cmp	r6, #255	@ 0xff
 80050ea:	d100      	bne.n	80050ee <__aeabi_fadd+0x3a>
 80050ec:	e0be      	b.n	800526c <__aeabi_fadd+0x1b8>
 80050ee:	2380      	movs	r3, #128	@ 0x80
 80050f0:	04db      	lsls	r3, r3, #19
 80050f2:	431a      	orrs	r2, r3
 80050f4:	291b      	cmp	r1, #27
 80050f6:	dc00      	bgt.n	80050fa <__aeabi_fadd+0x46>
 80050f8:	e0fd      	b.n	80052f6 <__aeabi_fadd+0x242>
 80050fa:	3d01      	subs	r5, #1
 80050fc:	016b      	lsls	r3, r5, #5
 80050fe:	d400      	bmi.n	8005102 <__aeabi_fadd+0x4e>
 8005100:	e0af      	b.n	8005262 <__aeabi_fadd+0x1ae>
 8005102:	2501      	movs	r5, #1
 8005104:	426d      	negs	r5, r5
 8005106:	01ad      	lsls	r5, r5, #6
 8005108:	09af      	lsrs	r7, r5, #6
 800510a:	0038      	movs	r0, r7
 800510c:	f7fb f9a4 	bl	8000458 <__clzsi2>
 8005110:	003b      	movs	r3, r7
 8005112:	3805      	subs	r0, #5
 8005114:	4083      	lsls	r3, r0
 8005116:	4286      	cmp	r6, r0
 8005118:	dc00      	bgt.n	800511c <__aeabi_fadd+0x68>
 800511a:	e0d3      	b.n	80052c4 <__aeabi_fadd+0x210>
 800511c:	4db9      	ldr	r5, [pc, #740]	@ (8005404 <__aeabi_fadd+0x350>)
 800511e:	1a31      	subs	r1, r6, r0
 8005120:	401d      	ands	r5, r3
 8005122:	075a      	lsls	r2, r3, #29
 8005124:	d100      	bne.n	8005128 <__aeabi_fadd+0x74>
 8005126:	e09e      	b.n	8005266 <__aeabi_fadd+0x1b2>
 8005128:	220f      	movs	r2, #15
 800512a:	4013      	ands	r3, r2
 800512c:	2b04      	cmp	r3, #4
 800512e:	d100      	bne.n	8005132 <__aeabi_fadd+0x7e>
 8005130:	e099      	b.n	8005266 <__aeabi_fadd+0x1b2>
 8005132:	3504      	adds	r5, #4
 8005134:	016b      	lsls	r3, r5, #5
 8005136:	d400      	bmi.n	800513a <__aeabi_fadd+0x86>
 8005138:	e095      	b.n	8005266 <__aeabi_fadd+0x1b2>
 800513a:	1c48      	adds	r0, r1, #1
 800513c:	29fe      	cmp	r1, #254	@ 0xfe
 800513e:	d151      	bne.n	80051e4 <__aeabi_fadd+0x130>
 8005140:	20ff      	movs	r0, #255	@ 0xff
 8005142:	2300      	movs	r3, #0
 8005144:	05c0      	lsls	r0, r0, #23
 8005146:	4318      	orrs	r0, r3
 8005148:	07e4      	lsls	r4, r4, #31
 800514a:	4320      	orrs	r0, r4
 800514c:	bcc0      	pop	{r6, r7}
 800514e:	46b9      	mov	r9, r7
 8005150:	46b0      	mov	r8, r6
 8005152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005154:	2900      	cmp	r1, #0
 8005156:	d049      	beq.n	80051ec <__aeabi_fadd+0x138>
 8005158:	1b99      	subs	r1, r3, r6
 800515a:	2e00      	cmp	r6, #0
 800515c:	d172      	bne.n	8005244 <__aeabi_fadd+0x190>
 800515e:	2d00      	cmp	r5, #0
 8005160:	d100      	bne.n	8005164 <__aeabi_fadd+0xb0>
 8005162:	e133      	b.n	80053cc <__aeabi_fadd+0x318>
 8005164:	1e4c      	subs	r4, r1, #1
 8005166:	2901      	cmp	r1, #1
 8005168:	d100      	bne.n	800516c <__aeabi_fadd+0xb8>
 800516a:	e159      	b.n	8005420 <__aeabi_fadd+0x36c>
 800516c:	29ff      	cmp	r1, #255	@ 0xff
 800516e:	d100      	bne.n	8005172 <__aeabi_fadd+0xbe>
 8005170:	e14c      	b.n	800540c <__aeabi_fadd+0x358>
 8005172:	0021      	movs	r1, r4
 8005174:	e06c      	b.n	8005250 <__aeabi_fadd+0x19c>
 8005176:	2900      	cmp	r1, #0
 8005178:	dc00      	bgt.n	800517c <__aeabi_fadd+0xc8>
 800517a:	e081      	b.n	8005280 <__aeabi_fadd+0x1cc>
 800517c:	2b00      	cmp	r3, #0
 800517e:	d155      	bne.n	800522c <__aeabi_fadd+0x178>
 8005180:	2a00      	cmp	r2, #0
 8005182:	d070      	beq.n	8005266 <__aeabi_fadd+0x1b2>
 8005184:	1e4b      	subs	r3, r1, #1
 8005186:	2901      	cmp	r1, #1
 8005188:	d100      	bne.n	800518c <__aeabi_fadd+0xd8>
 800518a:	e12b      	b.n	80053e4 <__aeabi_fadd+0x330>
 800518c:	29ff      	cmp	r1, #255	@ 0xff
 800518e:	d06d      	beq.n	800526c <__aeabi_fadd+0x1b8>
 8005190:	2b1b      	cmp	r3, #27
 8005192:	dc50      	bgt.n	8005236 <__aeabi_fadd+0x182>
 8005194:	0019      	movs	r1, r3
 8005196:	2320      	movs	r3, #32
 8005198:	1a5b      	subs	r3, r3, r1
 800519a:	0010      	movs	r0, r2
 800519c:	409a      	lsls	r2, r3
 800519e:	40c8      	lsrs	r0, r1
 80051a0:	1e53      	subs	r3, r2, #1
 80051a2:	419a      	sbcs	r2, r3
 80051a4:	4302      	orrs	r2, r0
 80051a6:	18ad      	adds	r5, r5, r2
 80051a8:	2380      	movs	r3, #128	@ 0x80
 80051aa:	04db      	lsls	r3, r3, #19
 80051ac:	421d      	tst	r5, r3
 80051ae:	d100      	bne.n	80051b2 <__aeabi_fadd+0xfe>
 80051b0:	e0ad      	b.n	800530e <__aeabi_fadd+0x25a>
 80051b2:	1c71      	adds	r1, r6, #1
 80051b4:	2efe      	cmp	r6, #254	@ 0xfe
 80051b6:	d0c3      	beq.n	8005140 <__aeabi_fadd+0x8c>
 80051b8:	2001      	movs	r0, #1
 80051ba:	086a      	lsrs	r2, r5, #1
 80051bc:	4028      	ands	r0, r5
 80051be:	4d92      	ldr	r5, [pc, #584]	@ (8005408 <__aeabi_fadd+0x354>)
 80051c0:	4015      	ands	r5, r2
 80051c2:	4305      	orrs	r5, r0
 80051c4:	076a      	lsls	r2, r5, #29
 80051c6:	d000      	beq.n	80051ca <__aeabi_fadd+0x116>
 80051c8:	e08b      	b.n	80052e2 <__aeabi_fadd+0x22e>
 80051ca:	421d      	tst	r5, r3
 80051cc:	d1b5      	bne.n	800513a <__aeabi_fadd+0x86>
 80051ce:	08ef      	lsrs	r7, r5, #3
 80051d0:	e034      	b.n	800523c <__aeabi_fadd+0x188>
 80051d2:	2a00      	cmp	r2, #0
 80051d4:	d047      	beq.n	8005266 <__aeabi_fadd+0x1b2>
 80051d6:	1e4b      	subs	r3, r1, #1
 80051d8:	2901      	cmp	r1, #1
 80051da:	d066      	beq.n	80052aa <__aeabi_fadd+0x1f6>
 80051dc:	29ff      	cmp	r1, #255	@ 0xff
 80051de:	d045      	beq.n	800526c <__aeabi_fadd+0x1b8>
 80051e0:	0019      	movs	r1, r3
 80051e2:	e787      	b.n	80050f4 <__aeabi_fadd+0x40>
 80051e4:	b2c0      	uxtb	r0, r0
 80051e6:	01ab      	lsls	r3, r5, #6
 80051e8:	0a5b      	lsrs	r3, r3, #9
 80051ea:	e7ab      	b.n	8005144 <__aeabi_fadd+0x90>
 80051ec:	23fe      	movs	r3, #254	@ 0xfe
 80051ee:	469c      	mov	ip, r3
 80051f0:	1c70      	adds	r0, r6, #1
 80051f2:	0003      	movs	r3, r0
 80051f4:	4660      	mov	r0, ip
 80051f6:	4218      	tst	r0, r3
 80051f8:	d000      	beq.n	80051fc <__aeabi_fadd+0x148>
 80051fa:	e092      	b.n	8005322 <__aeabi_fadd+0x26e>
 80051fc:	2e00      	cmp	r6, #0
 80051fe:	d000      	beq.n	8005202 <__aeabi_fadd+0x14e>
 8005200:	e0e7      	b.n	80053d2 <__aeabi_fadd+0x31e>
 8005202:	2d00      	cmp	r5, #0
 8005204:	d100      	bne.n	8005208 <__aeabi_fadd+0x154>
 8005206:	e119      	b.n	800543c <__aeabi_fadd+0x388>
 8005208:	2a00      	cmp	r2, #0
 800520a:	d017      	beq.n	800523c <__aeabi_fadd+0x188>
 800520c:	2380      	movs	r3, #128	@ 0x80
 800520e:	1aaf      	subs	r7, r5, r2
 8005210:	04db      	lsls	r3, r3, #19
 8005212:	421f      	tst	r7, r3
 8005214:	d100      	bne.n	8005218 <__aeabi_fadd+0x164>
 8005216:	e142      	b.n	800549e <__aeabi_fadd+0x3ea>
 8005218:	4644      	mov	r4, r8
 800521a:	1b55      	subs	r5, r2, r5
 800521c:	d100      	bne.n	8005220 <__aeabi_fadd+0x16c>
 800521e:	e087      	b.n	8005330 <__aeabi_fadd+0x27c>
 8005220:	2001      	movs	r0, #1
 8005222:	421d      	tst	r5, r3
 8005224:	d1df      	bne.n	80051e6 <__aeabi_fadd+0x132>
 8005226:	2100      	movs	r1, #0
 8005228:	08ef      	lsrs	r7, r5, #3
 800522a:	e007      	b.n	800523c <__aeabi_fadd+0x188>
 800522c:	2eff      	cmp	r6, #255	@ 0xff
 800522e:	d01d      	beq.n	800526c <__aeabi_fadd+0x1b8>
 8005230:	291b      	cmp	r1, #27
 8005232:	dc00      	bgt.n	8005236 <__aeabi_fadd+0x182>
 8005234:	e094      	b.n	8005360 <__aeabi_fadd+0x2ac>
 8005236:	0031      	movs	r1, r6
 8005238:	3505      	adds	r5, #5
 800523a:	08ef      	lsrs	r7, r5, #3
 800523c:	027b      	lsls	r3, r7, #9
 800523e:	0a5b      	lsrs	r3, r3, #9
 8005240:	b2c8      	uxtb	r0, r1
 8005242:	e77f      	b.n	8005144 <__aeabi_fadd+0x90>
 8005244:	2bff      	cmp	r3, #255	@ 0xff
 8005246:	d100      	bne.n	800524a <__aeabi_fadd+0x196>
 8005248:	e0e0      	b.n	800540c <__aeabi_fadd+0x358>
 800524a:	2080      	movs	r0, #128	@ 0x80
 800524c:	04c0      	lsls	r0, r0, #19
 800524e:	4305      	orrs	r5, r0
 8005250:	291b      	cmp	r1, #27
 8005252:	dc00      	bgt.n	8005256 <__aeabi_fadd+0x1a2>
 8005254:	e088      	b.n	8005368 <__aeabi_fadd+0x2b4>
 8005256:	1e55      	subs	r5, r2, #1
 8005258:	4644      	mov	r4, r8
 800525a:	001e      	movs	r6, r3
 800525c:	0169      	lsls	r1, r5, #5
 800525e:	d500      	bpl.n	8005262 <__aeabi_fadd+0x1ae>
 8005260:	e74f      	b.n	8005102 <__aeabi_fadd+0x4e>
 8005262:	0031      	movs	r1, r6
 8005264:	3504      	adds	r5, #4
 8005266:	08ef      	lsrs	r7, r5, #3
 8005268:	29ff      	cmp	r1, #255	@ 0xff
 800526a:	d1e7      	bne.n	800523c <__aeabi_fadd+0x188>
 800526c:	2f00      	cmp	r7, #0
 800526e:	d100      	bne.n	8005272 <__aeabi_fadd+0x1be>
 8005270:	e766      	b.n	8005140 <__aeabi_fadd+0x8c>
 8005272:	2380      	movs	r3, #128	@ 0x80
 8005274:	03db      	lsls	r3, r3, #15
 8005276:	433b      	orrs	r3, r7
 8005278:	025b      	lsls	r3, r3, #9
 800527a:	20ff      	movs	r0, #255	@ 0xff
 800527c:	0a5b      	lsrs	r3, r3, #9
 800527e:	e761      	b.n	8005144 <__aeabi_fadd+0x90>
 8005280:	2900      	cmp	r1, #0
 8005282:	d058      	beq.n	8005336 <__aeabi_fadd+0x282>
 8005284:	1b99      	subs	r1, r3, r6
 8005286:	2e00      	cmp	r6, #0
 8005288:	d000      	beq.n	800528c <__aeabi_fadd+0x1d8>
 800528a:	e089      	b.n	80053a0 <__aeabi_fadd+0x2ec>
 800528c:	2d00      	cmp	r5, #0
 800528e:	d100      	bne.n	8005292 <__aeabi_fadd+0x1de>
 8005290:	e09d      	b.n	80053ce <__aeabi_fadd+0x31a>
 8005292:	1e4e      	subs	r6, r1, #1
 8005294:	2901      	cmp	r1, #1
 8005296:	d100      	bne.n	800529a <__aeabi_fadd+0x1e6>
 8005298:	e0a4      	b.n	80053e4 <__aeabi_fadd+0x330>
 800529a:	29ff      	cmp	r1, #255	@ 0xff
 800529c:	d100      	bne.n	80052a0 <__aeabi_fadd+0x1ec>
 800529e:	e0b6      	b.n	800540e <__aeabi_fadd+0x35a>
 80052a0:	2e1b      	cmp	r6, #27
 80052a2:	dd00      	ble.n	80052a6 <__aeabi_fadd+0x1f2>
 80052a4:	e0b8      	b.n	8005418 <__aeabi_fadd+0x364>
 80052a6:	0031      	movs	r1, r6
 80052a8:	e081      	b.n	80053ae <__aeabi_fadd+0x2fa>
 80052aa:	1aaa      	subs	r2, r5, r2
 80052ac:	0153      	lsls	r3, r2, #5
 80052ae:	d400      	bmi.n	80052b2 <__aeabi_fadd+0x1fe>
 80052b0:	e0af      	b.n	8005412 <__aeabi_fadd+0x35e>
 80052b2:	0197      	lsls	r7, r2, #6
 80052b4:	09bf      	lsrs	r7, r7, #6
 80052b6:	0038      	movs	r0, r7
 80052b8:	f7fb f8ce 	bl	8000458 <__clzsi2>
 80052bc:	003b      	movs	r3, r7
 80052be:	3805      	subs	r0, #5
 80052c0:	4083      	lsls	r3, r0
 80052c2:	2601      	movs	r6, #1
 80052c4:	001d      	movs	r5, r3
 80052c6:	1b81      	subs	r1, r0, r6
 80052c8:	2020      	movs	r0, #32
 80052ca:	3101      	adds	r1, #1
 80052cc:	40cd      	lsrs	r5, r1
 80052ce:	1a41      	subs	r1, r0, r1
 80052d0:	408b      	lsls	r3, r1
 80052d2:	1e59      	subs	r1, r3, #1
 80052d4:	418b      	sbcs	r3, r1
 80052d6:	431d      	orrs	r5, r3
 80052d8:	d02a      	beq.n	8005330 <__aeabi_fadd+0x27c>
 80052da:	2100      	movs	r1, #0
 80052dc:	076b      	lsls	r3, r5, #29
 80052de:	d100      	bne.n	80052e2 <__aeabi_fadd+0x22e>
 80052e0:	e0f0      	b.n	80054c4 <__aeabi_fadd+0x410>
 80052e2:	230f      	movs	r3, #15
 80052e4:	402b      	ands	r3, r5
 80052e6:	2b04      	cmp	r3, #4
 80052e8:	d000      	beq.n	80052ec <__aeabi_fadd+0x238>
 80052ea:	e722      	b.n	8005132 <__aeabi_fadd+0x7e>
 80052ec:	016b      	lsls	r3, r5, #5
 80052ee:	d500      	bpl.n	80052f2 <__aeabi_fadd+0x23e>
 80052f0:	e723      	b.n	800513a <__aeabi_fadd+0x86>
 80052f2:	08ef      	lsrs	r7, r5, #3
 80052f4:	e7a2      	b.n	800523c <__aeabi_fadd+0x188>
 80052f6:	2320      	movs	r3, #32
 80052f8:	1a5b      	subs	r3, r3, r1
 80052fa:	0010      	movs	r0, r2
 80052fc:	409a      	lsls	r2, r3
 80052fe:	40c8      	lsrs	r0, r1
 8005300:	1e53      	subs	r3, r2, #1
 8005302:	419a      	sbcs	r2, r3
 8005304:	4302      	orrs	r2, r0
 8005306:	1aad      	subs	r5, r5, r2
 8005308:	016b      	lsls	r3, r5, #5
 800530a:	d500      	bpl.n	800530e <__aeabi_fadd+0x25a>
 800530c:	e6fb      	b.n	8005106 <__aeabi_fadd+0x52>
 800530e:	076b      	lsls	r3, r5, #29
 8005310:	d100      	bne.n	8005314 <__aeabi_fadd+0x260>
 8005312:	e0d5      	b.n	80054c0 <__aeabi_fadd+0x40c>
 8005314:	230f      	movs	r3, #15
 8005316:	0031      	movs	r1, r6
 8005318:	402b      	ands	r3, r5
 800531a:	2b04      	cmp	r3, #4
 800531c:	d000      	beq.n	8005320 <__aeabi_fadd+0x26c>
 800531e:	e708      	b.n	8005132 <__aeabi_fadd+0x7e>
 8005320:	e7a1      	b.n	8005266 <__aeabi_fadd+0x1b2>
 8005322:	1aaf      	subs	r7, r5, r2
 8005324:	017b      	lsls	r3, r7, #5
 8005326:	d44e      	bmi.n	80053c6 <__aeabi_fadd+0x312>
 8005328:	2f00      	cmp	r7, #0
 800532a:	d000      	beq.n	800532e <__aeabi_fadd+0x27a>
 800532c:	e6ed      	b.n	800510a <__aeabi_fadd+0x56>
 800532e:	2400      	movs	r4, #0
 8005330:	2000      	movs	r0, #0
 8005332:	2300      	movs	r3, #0
 8005334:	e706      	b.n	8005144 <__aeabi_fadd+0x90>
 8005336:	23fe      	movs	r3, #254	@ 0xfe
 8005338:	1c71      	adds	r1, r6, #1
 800533a:	420b      	tst	r3, r1
 800533c:	d121      	bne.n	8005382 <__aeabi_fadd+0x2ce>
 800533e:	2e00      	cmp	r6, #0
 8005340:	d000      	beq.n	8005344 <__aeabi_fadd+0x290>
 8005342:	e081      	b.n	8005448 <__aeabi_fadd+0x394>
 8005344:	2d00      	cmp	r5, #0
 8005346:	d100      	bne.n	800534a <__aeabi_fadd+0x296>
 8005348:	e09f      	b.n	800548a <__aeabi_fadd+0x3d6>
 800534a:	2a00      	cmp	r2, #0
 800534c:	d100      	bne.n	8005350 <__aeabi_fadd+0x29c>
 800534e:	e0b2      	b.n	80054b6 <__aeabi_fadd+0x402>
 8005350:	18ab      	adds	r3, r5, r2
 8005352:	015a      	lsls	r2, r3, #5
 8005354:	d400      	bmi.n	8005358 <__aeabi_fadd+0x2a4>
 8005356:	e0b0      	b.n	80054ba <__aeabi_fadd+0x406>
 8005358:	019b      	lsls	r3, r3, #6
 800535a:	2001      	movs	r0, #1
 800535c:	0a5b      	lsrs	r3, r3, #9
 800535e:	e6f1      	b.n	8005144 <__aeabi_fadd+0x90>
 8005360:	2380      	movs	r3, #128	@ 0x80
 8005362:	04db      	lsls	r3, r3, #19
 8005364:	431a      	orrs	r2, r3
 8005366:	e716      	b.n	8005196 <__aeabi_fadd+0xe2>
 8005368:	2420      	movs	r4, #32
 800536a:	0028      	movs	r0, r5
 800536c:	40c8      	lsrs	r0, r1
 800536e:	1a61      	subs	r1, r4, r1
 8005370:	408d      	lsls	r5, r1
 8005372:	0029      	movs	r1, r5
 8005374:	1e4c      	subs	r4, r1, #1
 8005376:	41a1      	sbcs	r1, r4
 8005378:	4301      	orrs	r1, r0
 800537a:	4644      	mov	r4, r8
 800537c:	001e      	movs	r6, r3
 800537e:	1a55      	subs	r5, r2, r1
 8005380:	e7c2      	b.n	8005308 <__aeabi_fadd+0x254>
 8005382:	29ff      	cmp	r1, #255	@ 0xff
 8005384:	d100      	bne.n	8005388 <__aeabi_fadd+0x2d4>
 8005386:	e6db      	b.n	8005140 <__aeabi_fadd+0x8c>
 8005388:	18af      	adds	r7, r5, r2
 800538a:	087f      	lsrs	r7, r7, #1
 800538c:	077b      	lsls	r3, r7, #29
 800538e:	d005      	beq.n	800539c <__aeabi_fadd+0x2e8>
 8005390:	230f      	movs	r3, #15
 8005392:	1d3d      	adds	r5, r7, #4
 8005394:	403b      	ands	r3, r7
 8005396:	2b04      	cmp	r3, #4
 8005398:	d000      	beq.n	800539c <__aeabi_fadd+0x2e8>
 800539a:	e764      	b.n	8005266 <__aeabi_fadd+0x1b2>
 800539c:	08ff      	lsrs	r7, r7, #3
 800539e:	e74d      	b.n	800523c <__aeabi_fadd+0x188>
 80053a0:	2bff      	cmp	r3, #255	@ 0xff
 80053a2:	d034      	beq.n	800540e <__aeabi_fadd+0x35a>
 80053a4:	291b      	cmp	r1, #27
 80053a6:	dc37      	bgt.n	8005418 <__aeabi_fadd+0x364>
 80053a8:	2080      	movs	r0, #128	@ 0x80
 80053aa:	04c0      	lsls	r0, r0, #19
 80053ac:	4305      	orrs	r5, r0
 80053ae:	0028      	movs	r0, r5
 80053b0:	2620      	movs	r6, #32
 80053b2:	40c8      	lsrs	r0, r1
 80053b4:	1a71      	subs	r1, r6, r1
 80053b6:	408d      	lsls	r5, r1
 80053b8:	0029      	movs	r1, r5
 80053ba:	1e4d      	subs	r5, r1, #1
 80053bc:	41a9      	sbcs	r1, r5
 80053be:	4301      	orrs	r1, r0
 80053c0:	001e      	movs	r6, r3
 80053c2:	188d      	adds	r5, r1, r2
 80053c4:	e6f0      	b.n	80051a8 <__aeabi_fadd+0xf4>
 80053c6:	4644      	mov	r4, r8
 80053c8:	1b57      	subs	r7, r2, r5
 80053ca:	e69e      	b.n	800510a <__aeabi_fadd+0x56>
 80053cc:	4644      	mov	r4, r8
 80053ce:	0015      	movs	r5, r2
 80053d0:	e749      	b.n	8005266 <__aeabi_fadd+0x1b2>
 80053d2:	2d00      	cmp	r5, #0
 80053d4:	d146      	bne.n	8005464 <__aeabi_fadd+0x3b0>
 80053d6:	2a00      	cmp	r2, #0
 80053d8:	d166      	bne.n	80054a8 <__aeabi_fadd+0x3f4>
 80053da:	2380      	movs	r3, #128	@ 0x80
 80053dc:	2400      	movs	r4, #0
 80053de:	20ff      	movs	r0, #255	@ 0xff
 80053e0:	03db      	lsls	r3, r3, #15
 80053e2:	e6af      	b.n	8005144 <__aeabi_fadd+0x90>
 80053e4:	18aa      	adds	r2, r5, r2
 80053e6:	0153      	lsls	r3, r2, #5
 80053e8:	d513      	bpl.n	8005412 <__aeabi_fadd+0x35e>
 80053ea:	4f07      	ldr	r7, [pc, #28]	@ (8005408 <__aeabi_fadd+0x354>)
 80053ec:	0852      	lsrs	r2, r2, #1
 80053ee:	4017      	ands	r7, r2
 80053f0:	0753      	lsls	r3, r2, #29
 80053f2:	d044      	beq.n	800547e <__aeabi_fadd+0x3ca>
 80053f4:	230f      	movs	r3, #15
 80053f6:	4013      	ands	r3, r2
 80053f8:	2b04      	cmp	r3, #4
 80053fa:	d040      	beq.n	800547e <__aeabi_fadd+0x3ca>
 80053fc:	2102      	movs	r1, #2
 80053fe:	1d3d      	adds	r5, r7, #4
 8005400:	e731      	b.n	8005266 <__aeabi_fadd+0x1b2>
 8005402:	46c0      	nop			@ (mov r8, r8)
 8005404:	fbffffff 	.word	0xfbffffff
 8005408:	7dffffff 	.word	0x7dffffff
 800540c:	4644      	mov	r4, r8
 800540e:	464f      	mov	r7, r9
 8005410:	e72c      	b.n	800526c <__aeabi_fadd+0x1b8>
 8005412:	2101      	movs	r1, #1
 8005414:	08d7      	lsrs	r7, r2, #3
 8005416:	e711      	b.n	800523c <__aeabi_fadd+0x188>
 8005418:	3205      	adds	r2, #5
 800541a:	0019      	movs	r1, r3
 800541c:	08d7      	lsrs	r7, r2, #3
 800541e:	e70d      	b.n	800523c <__aeabi_fadd+0x188>
 8005420:	1b57      	subs	r7, r2, r5
 8005422:	017b      	lsls	r3, r7, #5
 8005424:	d537      	bpl.n	8005496 <__aeabi_fadd+0x3e2>
 8005426:	01bf      	lsls	r7, r7, #6
 8005428:	09bf      	lsrs	r7, r7, #6
 800542a:	0038      	movs	r0, r7
 800542c:	f7fb f814 	bl	8000458 <__clzsi2>
 8005430:	003b      	movs	r3, r7
 8005432:	3805      	subs	r0, #5
 8005434:	4083      	lsls	r3, r0
 8005436:	4644      	mov	r4, r8
 8005438:	3601      	adds	r6, #1
 800543a:	e743      	b.n	80052c4 <__aeabi_fadd+0x210>
 800543c:	2a00      	cmp	r2, #0
 800543e:	d100      	bne.n	8005442 <__aeabi_fadd+0x38e>
 8005440:	e775      	b.n	800532e <__aeabi_fadd+0x27a>
 8005442:	4644      	mov	r4, r8
 8005444:	464f      	mov	r7, r9
 8005446:	e6f9      	b.n	800523c <__aeabi_fadd+0x188>
 8005448:	2d00      	cmp	r5, #0
 800544a:	d0e0      	beq.n	800540e <__aeabi_fadd+0x35a>
 800544c:	2380      	movs	r3, #128	@ 0x80
 800544e:	03db      	lsls	r3, r3, #15
 8005450:	2a00      	cmp	r2, #0
 8005452:	d017      	beq.n	8005484 <__aeabi_fadd+0x3d0>
 8005454:	429f      	cmp	r7, r3
 8005456:	d200      	bcs.n	800545a <__aeabi_fadd+0x3a6>
 8005458:	e70b      	b.n	8005272 <__aeabi_fadd+0x1be>
 800545a:	4599      	cmp	r9, r3
 800545c:	d300      	bcc.n	8005460 <__aeabi_fadd+0x3ac>
 800545e:	e708      	b.n	8005272 <__aeabi_fadd+0x1be>
 8005460:	464f      	mov	r7, r9
 8005462:	e706      	b.n	8005272 <__aeabi_fadd+0x1be>
 8005464:	2380      	movs	r3, #128	@ 0x80
 8005466:	03db      	lsls	r3, r3, #15
 8005468:	2a00      	cmp	r2, #0
 800546a:	d00b      	beq.n	8005484 <__aeabi_fadd+0x3d0>
 800546c:	429f      	cmp	r7, r3
 800546e:	d200      	bcs.n	8005472 <__aeabi_fadd+0x3be>
 8005470:	e6ff      	b.n	8005272 <__aeabi_fadd+0x1be>
 8005472:	4599      	cmp	r9, r3
 8005474:	d300      	bcc.n	8005478 <__aeabi_fadd+0x3c4>
 8005476:	e6fc      	b.n	8005272 <__aeabi_fadd+0x1be>
 8005478:	4644      	mov	r4, r8
 800547a:	464f      	mov	r7, r9
 800547c:	e6f9      	b.n	8005272 <__aeabi_fadd+0x1be>
 800547e:	2102      	movs	r1, #2
 8005480:	08ff      	lsrs	r7, r7, #3
 8005482:	e6db      	b.n	800523c <__aeabi_fadd+0x188>
 8005484:	20ff      	movs	r0, #255	@ 0xff
 8005486:	433b      	orrs	r3, r7
 8005488:	e65c      	b.n	8005144 <__aeabi_fadd+0x90>
 800548a:	2a00      	cmp	r2, #0
 800548c:	d100      	bne.n	8005490 <__aeabi_fadd+0x3dc>
 800548e:	e74f      	b.n	8005330 <__aeabi_fadd+0x27c>
 8005490:	2100      	movs	r1, #0
 8005492:	08d7      	lsrs	r7, r2, #3
 8005494:	e6d2      	b.n	800523c <__aeabi_fadd+0x188>
 8005496:	4644      	mov	r4, r8
 8005498:	2101      	movs	r1, #1
 800549a:	08ff      	lsrs	r7, r7, #3
 800549c:	e6ce      	b.n	800523c <__aeabi_fadd+0x188>
 800549e:	2f00      	cmp	r7, #0
 80054a0:	d000      	beq.n	80054a4 <__aeabi_fadd+0x3f0>
 80054a2:	e77b      	b.n	800539c <__aeabi_fadd+0x2e8>
 80054a4:	2400      	movs	r4, #0
 80054a6:	e743      	b.n	8005330 <__aeabi_fadd+0x27c>
 80054a8:	2380      	movs	r3, #128	@ 0x80
 80054aa:	464a      	mov	r2, r9
 80054ac:	03db      	lsls	r3, r3, #15
 80054ae:	4644      	mov	r4, r8
 80054b0:	20ff      	movs	r0, #255	@ 0xff
 80054b2:	4313      	orrs	r3, r2
 80054b4:	e646      	b.n	8005144 <__aeabi_fadd+0x90>
 80054b6:	2100      	movs	r1, #0
 80054b8:	e6c0      	b.n	800523c <__aeabi_fadd+0x188>
 80054ba:	2100      	movs	r1, #0
 80054bc:	08df      	lsrs	r7, r3, #3
 80054be:	e6bd      	b.n	800523c <__aeabi_fadd+0x188>
 80054c0:	0031      	movs	r1, r6
 80054c2:	e6d0      	b.n	8005266 <__aeabi_fadd+0x1b2>
 80054c4:	2001      	movs	r0, #1
 80054c6:	016a      	lsls	r2, r5, #5
 80054c8:	d500      	bpl.n	80054cc <__aeabi_fadd+0x418>
 80054ca:	e68b      	b.n	80051e4 <__aeabi_fadd+0x130>
 80054cc:	002a      	movs	r2, r5
 80054ce:	e7df      	b.n	8005490 <__aeabi_fadd+0x3dc>

080054d0 <__aeabi_fmul>:
 80054d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054d2:	464f      	mov	r7, r9
 80054d4:	4646      	mov	r6, r8
 80054d6:	46d6      	mov	lr, sl
 80054d8:	0245      	lsls	r5, r0, #9
 80054da:	b5c0      	push	{r6, r7, lr}
 80054dc:	0046      	lsls	r6, r0, #1
 80054de:	1c0f      	adds	r7, r1, #0
 80054e0:	0a6d      	lsrs	r5, r5, #9
 80054e2:	0e36      	lsrs	r6, r6, #24
 80054e4:	0fc4      	lsrs	r4, r0, #31
 80054e6:	2e00      	cmp	r6, #0
 80054e8:	d100      	bne.n	80054ec <__aeabi_fmul+0x1c>
 80054ea:	e0cd      	b.n	8005688 <__aeabi_fmul+0x1b8>
 80054ec:	2eff      	cmp	r6, #255	@ 0xff
 80054ee:	d072      	beq.n	80055d6 <__aeabi_fmul+0x106>
 80054f0:	2380      	movs	r3, #128	@ 0x80
 80054f2:	00ed      	lsls	r5, r5, #3
 80054f4:	04db      	lsls	r3, r3, #19
 80054f6:	431d      	orrs	r5, r3
 80054f8:	2300      	movs	r3, #0
 80054fa:	4699      	mov	r9, r3
 80054fc:	469a      	mov	sl, r3
 80054fe:	3e7f      	subs	r6, #127	@ 0x7f
 8005500:	027b      	lsls	r3, r7, #9
 8005502:	0a5b      	lsrs	r3, r3, #9
 8005504:	4698      	mov	r8, r3
 8005506:	007b      	lsls	r3, r7, #1
 8005508:	0e1b      	lsrs	r3, r3, #24
 800550a:	0fff      	lsrs	r7, r7, #31
 800550c:	2b00      	cmp	r3, #0
 800550e:	d072      	beq.n	80055f6 <__aeabi_fmul+0x126>
 8005510:	2bff      	cmp	r3, #255	@ 0xff
 8005512:	d100      	bne.n	8005516 <__aeabi_fmul+0x46>
 8005514:	e0a9      	b.n	800566a <__aeabi_fmul+0x19a>
 8005516:	3b7f      	subs	r3, #127	@ 0x7f
 8005518:	18f6      	adds	r6, r6, r3
 800551a:	464b      	mov	r3, r9
 800551c:	2b0a      	cmp	r3, #10
 800551e:	dd00      	ble.n	8005522 <__aeabi_fmul+0x52>
 8005520:	e085      	b.n	800562e <__aeabi_fmul+0x15e>
 8005522:	4643      	mov	r3, r8
 8005524:	2280      	movs	r2, #128	@ 0x80
 8005526:	00db      	lsls	r3, r3, #3
 8005528:	04d2      	lsls	r2, r2, #19
 800552a:	431a      	orrs	r2, r3
 800552c:	464b      	mov	r3, r9
 800552e:	4690      	mov	r8, r2
 8005530:	407c      	eors	r4, r7
 8005532:	2200      	movs	r2, #0
 8005534:	2b02      	cmp	r3, #2
 8005536:	dd0f      	ble.n	8005558 <__aeabi_fmul+0x88>
 8005538:	4649      	mov	r1, r9
 800553a:	2301      	movs	r3, #1
 800553c:	408b      	lsls	r3, r1
 800553e:	21a6      	movs	r1, #166	@ 0xa6
 8005540:	00c9      	lsls	r1, r1, #3
 8005542:	420b      	tst	r3, r1
 8005544:	d000      	beq.n	8005548 <__aeabi_fmul+0x78>
 8005546:	e072      	b.n	800562e <__aeabi_fmul+0x15e>
 8005548:	2190      	movs	r1, #144	@ 0x90
 800554a:	0089      	lsls	r1, r1, #2
 800554c:	420b      	tst	r3, r1
 800554e:	d000      	beq.n	8005552 <__aeabi_fmul+0x82>
 8005550:	e0da      	b.n	8005708 <__aeabi_fmul+0x238>
 8005552:	2188      	movs	r1, #136	@ 0x88
 8005554:	4219      	tst	r1, r3
 8005556:	d167      	bne.n	8005628 <__aeabi_fmul+0x158>
 8005558:	0c28      	lsrs	r0, r5, #16
 800555a:	4642      	mov	r2, r8
 800555c:	042d      	lsls	r5, r5, #16
 800555e:	0c2d      	lsrs	r5, r5, #16
 8005560:	4643      	mov	r3, r8
 8005562:	0029      	movs	r1, r5
 8005564:	0412      	lsls	r2, r2, #16
 8005566:	0c1b      	lsrs	r3, r3, #16
 8005568:	0c12      	lsrs	r2, r2, #16
 800556a:	4351      	muls	r1, r2
 800556c:	435d      	muls	r5, r3
 800556e:	4342      	muls	r2, r0
 8005570:	4358      	muls	r0, r3
 8005572:	18ad      	adds	r5, r5, r2
 8005574:	0c0b      	lsrs	r3, r1, #16
 8005576:	195b      	adds	r3, r3, r5
 8005578:	429a      	cmp	r2, r3
 800557a:	d903      	bls.n	8005584 <__aeabi_fmul+0xb4>
 800557c:	2280      	movs	r2, #128	@ 0x80
 800557e:	0252      	lsls	r2, r2, #9
 8005580:	4694      	mov	ip, r2
 8005582:	4460      	add	r0, ip
 8005584:	0409      	lsls	r1, r1, #16
 8005586:	041a      	lsls	r2, r3, #16
 8005588:	0c09      	lsrs	r1, r1, #16
 800558a:	1852      	adds	r2, r2, r1
 800558c:	0195      	lsls	r5, r2, #6
 800558e:	1e69      	subs	r1, r5, #1
 8005590:	418d      	sbcs	r5, r1
 8005592:	0c1b      	lsrs	r3, r3, #16
 8005594:	0e92      	lsrs	r2, r2, #26
 8005596:	181b      	adds	r3, r3, r0
 8005598:	4315      	orrs	r5, r2
 800559a:	019b      	lsls	r3, r3, #6
 800559c:	431d      	orrs	r5, r3
 800559e:	011b      	lsls	r3, r3, #4
 80055a0:	d500      	bpl.n	80055a4 <__aeabi_fmul+0xd4>
 80055a2:	e0cf      	b.n	8005744 <__aeabi_fmul+0x274>
 80055a4:	0030      	movs	r0, r6
 80055a6:	307f      	adds	r0, #127	@ 0x7f
 80055a8:	2800      	cmp	r0, #0
 80055aa:	dc00      	bgt.n	80055ae <__aeabi_fmul+0xde>
 80055ac:	e0b1      	b.n	8005712 <__aeabi_fmul+0x242>
 80055ae:	076b      	lsls	r3, r5, #29
 80055b0:	d00b      	beq.n	80055ca <__aeabi_fmul+0xfa>
 80055b2:	230f      	movs	r3, #15
 80055b4:	0032      	movs	r2, r6
 80055b6:	402b      	ands	r3, r5
 80055b8:	2b04      	cmp	r3, #4
 80055ba:	d006      	beq.n	80055ca <__aeabi_fmul+0xfa>
 80055bc:	3504      	adds	r5, #4
 80055be:	012b      	lsls	r3, r5, #4
 80055c0:	d503      	bpl.n	80055ca <__aeabi_fmul+0xfa>
 80055c2:	3280      	adds	r2, #128	@ 0x80
 80055c4:	0010      	movs	r0, r2
 80055c6:	4b6a      	ldr	r3, [pc, #424]	@ (8005770 <__aeabi_fmul+0x2a0>)
 80055c8:	401d      	ands	r5, r3
 80055ca:	28fe      	cmp	r0, #254	@ 0xfe
 80055cc:	dc64      	bgt.n	8005698 <__aeabi_fmul+0x1c8>
 80055ce:	01ab      	lsls	r3, r5, #6
 80055d0:	0a5b      	lsrs	r3, r3, #9
 80055d2:	b2c0      	uxtb	r0, r0
 80055d4:	e01f      	b.n	8005616 <__aeabi_fmul+0x146>
 80055d6:	2d00      	cmp	r5, #0
 80055d8:	d000      	beq.n	80055dc <__aeabi_fmul+0x10c>
 80055da:	e08f      	b.n	80056fc <__aeabi_fmul+0x22c>
 80055dc:	2308      	movs	r3, #8
 80055de:	4699      	mov	r9, r3
 80055e0:	3b06      	subs	r3, #6
 80055e2:	469a      	mov	sl, r3
 80055e4:	027b      	lsls	r3, r7, #9
 80055e6:	0a5b      	lsrs	r3, r3, #9
 80055e8:	4698      	mov	r8, r3
 80055ea:	007b      	lsls	r3, r7, #1
 80055ec:	26ff      	movs	r6, #255	@ 0xff
 80055ee:	0e1b      	lsrs	r3, r3, #24
 80055f0:	0fff      	lsrs	r7, r7, #31
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d18c      	bne.n	8005510 <__aeabi_fmul+0x40>
 80055f6:	4643      	mov	r3, r8
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d15c      	bne.n	80056b6 <__aeabi_fmul+0x1e6>
 80055fc:	464a      	mov	r2, r9
 80055fe:	3301      	adds	r3, #1
 8005600:	431a      	orrs	r2, r3
 8005602:	4691      	mov	r9, r2
 8005604:	0013      	movs	r3, r2
 8005606:	2a0a      	cmp	r2, #10
 8005608:	dc11      	bgt.n	800562e <__aeabi_fmul+0x15e>
 800560a:	2201      	movs	r2, #1
 800560c:	407c      	eors	r4, r7
 800560e:	2b02      	cmp	r3, #2
 8005610:	dc92      	bgt.n	8005538 <__aeabi_fmul+0x68>
 8005612:	2000      	movs	r0, #0
 8005614:	2300      	movs	r3, #0
 8005616:	05c0      	lsls	r0, r0, #23
 8005618:	4318      	orrs	r0, r3
 800561a:	07e4      	lsls	r4, r4, #31
 800561c:	4320      	orrs	r0, r4
 800561e:	bce0      	pop	{r5, r6, r7}
 8005620:	46ba      	mov	sl, r7
 8005622:	46b1      	mov	r9, r6
 8005624:	46a8      	mov	r8, r5
 8005626:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005628:	003c      	movs	r4, r7
 800562a:	4645      	mov	r5, r8
 800562c:	4692      	mov	sl, r2
 800562e:	4653      	mov	r3, sl
 8005630:	2b02      	cmp	r3, #2
 8005632:	d031      	beq.n	8005698 <__aeabi_fmul+0x1c8>
 8005634:	2b03      	cmp	r3, #3
 8005636:	d011      	beq.n	800565c <__aeabi_fmul+0x18c>
 8005638:	2b01      	cmp	r3, #1
 800563a:	d0ea      	beq.n	8005612 <__aeabi_fmul+0x142>
 800563c:	0030      	movs	r0, r6
 800563e:	3080      	adds	r0, #128	@ 0x80
 8005640:	1c72      	adds	r2, r6, #1
 8005642:	2800      	cmp	r0, #0
 8005644:	dd66      	ble.n	8005714 <__aeabi_fmul+0x244>
 8005646:	076b      	lsls	r3, r5, #29
 8005648:	d0b9      	beq.n	80055be <__aeabi_fmul+0xee>
 800564a:	230f      	movs	r3, #15
 800564c:	402b      	ands	r3, r5
 800564e:	2b04      	cmp	r3, #4
 8005650:	d1b4      	bne.n	80055bc <__aeabi_fmul+0xec>
 8005652:	e7b4      	b.n	80055be <__aeabi_fmul+0xee>
 8005654:	2a0f      	cmp	r2, #15
 8005656:	d07a      	beq.n	800574e <__aeabi_fmul+0x27e>
 8005658:	003c      	movs	r4, r7
 800565a:	4645      	mov	r5, r8
 800565c:	2380      	movs	r3, #128	@ 0x80
 800565e:	03db      	lsls	r3, r3, #15
 8005660:	432b      	orrs	r3, r5
 8005662:	025b      	lsls	r3, r3, #9
 8005664:	20ff      	movs	r0, #255	@ 0xff
 8005666:	0a5b      	lsrs	r3, r3, #9
 8005668:	e7d5      	b.n	8005616 <__aeabi_fmul+0x146>
 800566a:	4643      	mov	r3, r8
 800566c:	36ff      	adds	r6, #255	@ 0xff
 800566e:	2b00      	cmp	r3, #0
 8005670:	d134      	bne.n	80056dc <__aeabi_fmul+0x20c>
 8005672:	464a      	mov	r2, r9
 8005674:	3302      	adds	r3, #2
 8005676:	4313      	orrs	r3, r2
 8005678:	2b0a      	cmp	r3, #10
 800567a:	dcd8      	bgt.n	800562e <__aeabi_fmul+0x15e>
 800567c:	407c      	eors	r4, r7
 800567e:	2a00      	cmp	r2, #0
 8005680:	d00a      	beq.n	8005698 <__aeabi_fmul+0x1c8>
 8005682:	4699      	mov	r9, r3
 8005684:	2202      	movs	r2, #2
 8005686:	e757      	b.n	8005538 <__aeabi_fmul+0x68>
 8005688:	2d00      	cmp	r5, #0
 800568a:	d108      	bne.n	800569e <__aeabi_fmul+0x1ce>
 800568c:	2304      	movs	r3, #4
 800568e:	4699      	mov	r9, r3
 8005690:	3b03      	subs	r3, #3
 8005692:	2600      	movs	r6, #0
 8005694:	469a      	mov	sl, r3
 8005696:	e733      	b.n	8005500 <__aeabi_fmul+0x30>
 8005698:	20ff      	movs	r0, #255	@ 0xff
 800569a:	2300      	movs	r3, #0
 800569c:	e7bb      	b.n	8005616 <__aeabi_fmul+0x146>
 800569e:	0028      	movs	r0, r5
 80056a0:	f7fa feda 	bl	8000458 <__clzsi2>
 80056a4:	2676      	movs	r6, #118	@ 0x76
 80056a6:	1f43      	subs	r3, r0, #5
 80056a8:	409d      	lsls	r5, r3
 80056aa:	2300      	movs	r3, #0
 80056ac:	4276      	negs	r6, r6
 80056ae:	4699      	mov	r9, r3
 80056b0:	469a      	mov	sl, r3
 80056b2:	1a36      	subs	r6, r6, r0
 80056b4:	e724      	b.n	8005500 <__aeabi_fmul+0x30>
 80056b6:	4640      	mov	r0, r8
 80056b8:	f7fa fece 	bl	8000458 <__clzsi2>
 80056bc:	464b      	mov	r3, r9
 80056be:	1a36      	subs	r6, r6, r0
 80056c0:	3e76      	subs	r6, #118	@ 0x76
 80056c2:	2b0a      	cmp	r3, #10
 80056c4:	dcb3      	bgt.n	800562e <__aeabi_fmul+0x15e>
 80056c6:	4643      	mov	r3, r8
 80056c8:	3805      	subs	r0, #5
 80056ca:	4083      	lsls	r3, r0
 80056cc:	4698      	mov	r8, r3
 80056ce:	464b      	mov	r3, r9
 80056d0:	2200      	movs	r2, #0
 80056d2:	407c      	eors	r4, r7
 80056d4:	2b02      	cmp	r3, #2
 80056d6:	dd00      	ble.n	80056da <__aeabi_fmul+0x20a>
 80056d8:	e72e      	b.n	8005538 <__aeabi_fmul+0x68>
 80056da:	e73d      	b.n	8005558 <__aeabi_fmul+0x88>
 80056dc:	2303      	movs	r3, #3
 80056de:	464a      	mov	r2, r9
 80056e0:	431a      	orrs	r2, r3
 80056e2:	0013      	movs	r3, r2
 80056e4:	2a0a      	cmp	r2, #10
 80056e6:	dcb5      	bgt.n	8005654 <__aeabi_fmul+0x184>
 80056e8:	2201      	movs	r2, #1
 80056ea:	409a      	lsls	r2, r3
 80056ec:	2188      	movs	r1, #136	@ 0x88
 80056ee:	0013      	movs	r3, r2
 80056f0:	407c      	eors	r4, r7
 80056f2:	2203      	movs	r2, #3
 80056f4:	4219      	tst	r1, r3
 80056f6:	d100      	bne.n	80056fa <__aeabi_fmul+0x22a>
 80056f8:	e72e      	b.n	8005558 <__aeabi_fmul+0x88>
 80056fa:	e795      	b.n	8005628 <__aeabi_fmul+0x158>
 80056fc:	230c      	movs	r3, #12
 80056fe:	4699      	mov	r9, r3
 8005700:	3b09      	subs	r3, #9
 8005702:	26ff      	movs	r6, #255	@ 0xff
 8005704:	469a      	mov	sl, r3
 8005706:	e6fb      	b.n	8005500 <__aeabi_fmul+0x30>
 8005708:	2380      	movs	r3, #128	@ 0x80
 800570a:	2400      	movs	r4, #0
 800570c:	20ff      	movs	r0, #255	@ 0xff
 800570e:	03db      	lsls	r3, r3, #15
 8005710:	e781      	b.n	8005616 <__aeabi_fmul+0x146>
 8005712:	0032      	movs	r2, r6
 8005714:	2301      	movs	r3, #1
 8005716:	1a1b      	subs	r3, r3, r0
 8005718:	2b1b      	cmp	r3, #27
 800571a:	dd00      	ble.n	800571e <__aeabi_fmul+0x24e>
 800571c:	e779      	b.n	8005612 <__aeabi_fmul+0x142>
 800571e:	329e      	adds	r2, #158	@ 0x9e
 8005720:	0029      	movs	r1, r5
 8005722:	4095      	lsls	r5, r2
 8005724:	40d9      	lsrs	r1, r3
 8005726:	1e6a      	subs	r2, r5, #1
 8005728:	4195      	sbcs	r5, r2
 800572a:	430d      	orrs	r5, r1
 800572c:	076b      	lsls	r3, r5, #29
 800572e:	d004      	beq.n	800573a <__aeabi_fmul+0x26a>
 8005730:	230f      	movs	r3, #15
 8005732:	402b      	ands	r3, r5
 8005734:	2b04      	cmp	r3, #4
 8005736:	d000      	beq.n	800573a <__aeabi_fmul+0x26a>
 8005738:	3504      	adds	r5, #4
 800573a:	016b      	lsls	r3, r5, #5
 800573c:	d513      	bpl.n	8005766 <__aeabi_fmul+0x296>
 800573e:	2001      	movs	r0, #1
 8005740:	2300      	movs	r3, #0
 8005742:	e768      	b.n	8005616 <__aeabi_fmul+0x146>
 8005744:	2301      	movs	r3, #1
 8005746:	086a      	lsrs	r2, r5, #1
 8005748:	401d      	ands	r5, r3
 800574a:	4315      	orrs	r5, r2
 800574c:	e776      	b.n	800563c <__aeabi_fmul+0x16c>
 800574e:	2380      	movs	r3, #128	@ 0x80
 8005750:	03db      	lsls	r3, r3, #15
 8005752:	421d      	tst	r5, r3
 8005754:	d082      	beq.n	800565c <__aeabi_fmul+0x18c>
 8005756:	4642      	mov	r2, r8
 8005758:	421a      	tst	r2, r3
 800575a:	d000      	beq.n	800575e <__aeabi_fmul+0x28e>
 800575c:	e77e      	b.n	800565c <__aeabi_fmul+0x18c>
 800575e:	003c      	movs	r4, r7
 8005760:	20ff      	movs	r0, #255	@ 0xff
 8005762:	4313      	orrs	r3, r2
 8005764:	e757      	b.n	8005616 <__aeabi_fmul+0x146>
 8005766:	01ab      	lsls	r3, r5, #6
 8005768:	2000      	movs	r0, #0
 800576a:	0a5b      	lsrs	r3, r3, #9
 800576c:	e753      	b.n	8005616 <__aeabi_fmul+0x146>
 800576e:	46c0      	nop			@ (mov r8, r8)
 8005770:	f7ffffff 	.word	0xf7ffffff

08005774 <__aeabi_fsub>:
 8005774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005776:	4647      	mov	r7, r8
 8005778:	46ce      	mov	lr, r9
 800577a:	024b      	lsls	r3, r1, #9
 800577c:	0046      	lsls	r6, r0, #1
 800577e:	b580      	push	{r7, lr}
 8005780:	0fc4      	lsrs	r4, r0, #31
 8005782:	0247      	lsls	r7, r0, #9
 8005784:	0a58      	lsrs	r0, r3, #9
 8005786:	4684      	mov	ip, r0
 8005788:	0048      	lsls	r0, r1, #1
 800578a:	0a7a      	lsrs	r2, r7, #9
 800578c:	0e36      	lsrs	r6, r6, #24
 800578e:	09bf      	lsrs	r7, r7, #6
 8005790:	0e00      	lsrs	r0, r0, #24
 8005792:	0fcd      	lsrs	r5, r1, #31
 8005794:	099b      	lsrs	r3, r3, #6
 8005796:	28ff      	cmp	r0, #255	@ 0xff
 8005798:	d06d      	beq.n	8005876 <__aeabi_fsub+0x102>
 800579a:	2101      	movs	r1, #1
 800579c:	404d      	eors	r5, r1
 800579e:	1a31      	subs	r1, r6, r0
 80057a0:	42ac      	cmp	r4, r5
 80057a2:	d03a      	beq.n	800581a <__aeabi_fsub+0xa6>
 80057a4:	2900      	cmp	r1, #0
 80057a6:	dc00      	bgt.n	80057aa <__aeabi_fsub+0x36>
 80057a8:	e19c      	b.n	8005ae4 <__aeabi_fsub+0x370>
 80057aa:	2800      	cmp	r0, #0
 80057ac:	d100      	bne.n	80057b0 <__aeabi_fsub+0x3c>
 80057ae:	e09e      	b.n	80058ee <__aeabi_fsub+0x17a>
 80057b0:	2eff      	cmp	r6, #255	@ 0xff
 80057b2:	d100      	bne.n	80057b6 <__aeabi_fsub+0x42>
 80057b4:	e088      	b.n	80058c8 <__aeabi_fsub+0x154>
 80057b6:	2280      	movs	r2, #128	@ 0x80
 80057b8:	04d2      	lsls	r2, r2, #19
 80057ba:	4313      	orrs	r3, r2
 80057bc:	291b      	cmp	r1, #27
 80057be:	dc00      	bgt.n	80057c2 <__aeabi_fsub+0x4e>
 80057c0:	e0f6      	b.n	80059b0 <__aeabi_fsub+0x23c>
 80057c2:	3f01      	subs	r7, #1
 80057c4:	017a      	lsls	r2, r7, #5
 80057c6:	d400      	bmi.n	80057ca <__aeabi_fsub+0x56>
 80057c8:	e079      	b.n	80058be <__aeabi_fsub+0x14a>
 80057ca:	2701      	movs	r7, #1
 80057cc:	427f      	negs	r7, r7
 80057ce:	01bf      	lsls	r7, r7, #6
 80057d0:	09bb      	lsrs	r3, r7, #6
 80057d2:	4698      	mov	r8, r3
 80057d4:	4640      	mov	r0, r8
 80057d6:	f7fa fe3f 	bl	8000458 <__clzsi2>
 80057da:	4643      	mov	r3, r8
 80057dc:	3805      	subs	r0, #5
 80057de:	4083      	lsls	r3, r0
 80057e0:	4286      	cmp	r6, r0
 80057e2:	dc00      	bgt.n	80057e6 <__aeabi_fsub+0x72>
 80057e4:	e0cc      	b.n	8005980 <__aeabi_fsub+0x20c>
 80057e6:	4fb4      	ldr	r7, [pc, #720]	@ (8005ab8 <__aeabi_fsub+0x344>)
 80057e8:	1a31      	subs	r1, r6, r0
 80057ea:	401f      	ands	r7, r3
 80057ec:	075a      	lsls	r2, r3, #29
 80057ee:	d068      	beq.n	80058c2 <__aeabi_fsub+0x14e>
 80057f0:	220f      	movs	r2, #15
 80057f2:	4013      	ands	r3, r2
 80057f4:	2b04      	cmp	r3, #4
 80057f6:	d064      	beq.n	80058c2 <__aeabi_fsub+0x14e>
 80057f8:	3704      	adds	r7, #4
 80057fa:	017b      	lsls	r3, r7, #5
 80057fc:	d561      	bpl.n	80058c2 <__aeabi_fsub+0x14e>
 80057fe:	1c48      	adds	r0, r1, #1
 8005800:	29fe      	cmp	r1, #254	@ 0xfe
 8005802:	d000      	beq.n	8005806 <__aeabi_fsub+0x92>
 8005804:	e081      	b.n	800590a <__aeabi_fsub+0x196>
 8005806:	20ff      	movs	r0, #255	@ 0xff
 8005808:	2300      	movs	r3, #0
 800580a:	05c0      	lsls	r0, r0, #23
 800580c:	4318      	orrs	r0, r3
 800580e:	07e4      	lsls	r4, r4, #31
 8005810:	4320      	orrs	r0, r4
 8005812:	bcc0      	pop	{r6, r7}
 8005814:	46b9      	mov	r9, r7
 8005816:	46b0      	mov	r8, r6
 8005818:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800581a:	2900      	cmp	r1, #0
 800581c:	dc00      	bgt.n	8005820 <__aeabi_fsub+0xac>
 800581e:	e179      	b.n	8005b14 <__aeabi_fsub+0x3a0>
 8005820:	2800      	cmp	r0, #0
 8005822:	d176      	bne.n	8005912 <__aeabi_fsub+0x19e>
 8005824:	2b00      	cmp	r3, #0
 8005826:	d04c      	beq.n	80058c2 <__aeabi_fsub+0x14e>
 8005828:	1e48      	subs	r0, r1, #1
 800582a:	2901      	cmp	r1, #1
 800582c:	d100      	bne.n	8005830 <__aeabi_fsub+0xbc>
 800582e:	e147      	b.n	8005ac0 <__aeabi_fsub+0x34c>
 8005830:	29ff      	cmp	r1, #255	@ 0xff
 8005832:	d049      	beq.n	80058c8 <__aeabi_fsub+0x154>
 8005834:	281b      	cmp	r0, #27
 8005836:	dc71      	bgt.n	800591c <__aeabi_fsub+0x1a8>
 8005838:	0001      	movs	r1, r0
 800583a:	001a      	movs	r2, r3
 800583c:	2020      	movs	r0, #32
 800583e:	40ca      	lsrs	r2, r1
 8005840:	1a41      	subs	r1, r0, r1
 8005842:	408b      	lsls	r3, r1
 8005844:	1e59      	subs	r1, r3, #1
 8005846:	418b      	sbcs	r3, r1
 8005848:	4313      	orrs	r3, r2
 800584a:	18ff      	adds	r7, r7, r3
 800584c:	2380      	movs	r3, #128	@ 0x80
 800584e:	04db      	lsls	r3, r3, #19
 8005850:	421f      	tst	r7, r3
 8005852:	d100      	bne.n	8005856 <__aeabi_fsub+0xe2>
 8005854:	e0b8      	b.n	80059c8 <__aeabi_fsub+0x254>
 8005856:	1c71      	adds	r1, r6, #1
 8005858:	2efe      	cmp	r6, #254	@ 0xfe
 800585a:	d0d4      	beq.n	8005806 <__aeabi_fsub+0x92>
 800585c:	2201      	movs	r2, #1
 800585e:	4897      	ldr	r0, [pc, #604]	@ (8005abc <__aeabi_fsub+0x348>)
 8005860:	403a      	ands	r2, r7
 8005862:	087f      	lsrs	r7, r7, #1
 8005864:	4007      	ands	r7, r0
 8005866:	4317      	orrs	r7, r2
 8005868:	077a      	lsls	r2, r7, #29
 800586a:	d000      	beq.n	800586e <__aeabi_fsub+0xfa>
 800586c:	e096      	b.n	800599c <__aeabi_fsub+0x228>
 800586e:	421f      	tst	r7, r3
 8005870:	d1c5      	bne.n	80057fe <__aeabi_fsub+0x8a>
 8005872:	08fa      	lsrs	r2, r7, #3
 8005874:	e055      	b.n	8005922 <__aeabi_fsub+0x1ae>
 8005876:	0031      	movs	r1, r6
 8005878:	39ff      	subs	r1, #255	@ 0xff
 800587a:	4689      	mov	r9, r1
 800587c:	2b00      	cmp	r3, #0
 800587e:	d12c      	bne.n	80058da <__aeabi_fsub+0x166>
 8005880:	2101      	movs	r1, #1
 8005882:	404d      	eors	r5, r1
 8005884:	42ac      	cmp	r4, r5
 8005886:	d100      	bne.n	800588a <__aeabi_fsub+0x116>
 8005888:	e0b4      	b.n	80059f4 <__aeabi_fsub+0x280>
 800588a:	4649      	mov	r1, r9
 800588c:	2900      	cmp	r1, #0
 800588e:	d04c      	beq.n	800592a <__aeabi_fsub+0x1b6>
 8005890:	2e00      	cmp	r6, #0
 8005892:	d000      	beq.n	8005896 <__aeabi_fsub+0x122>
 8005894:	e0f9      	b.n	8005a8a <__aeabi_fsub+0x316>
 8005896:	21ff      	movs	r1, #255	@ 0xff
 8005898:	2f00      	cmp	r7, #0
 800589a:	d100      	bne.n	800589e <__aeabi_fsub+0x12a>
 800589c:	e108      	b.n	8005ab0 <__aeabi_fsub+0x33c>
 800589e:	1e4a      	subs	r2, r1, #1
 80058a0:	2901      	cmp	r1, #1
 80058a2:	d100      	bne.n	80058a6 <__aeabi_fsub+0x132>
 80058a4:	e156      	b.n	8005b54 <__aeabi_fsub+0x3e0>
 80058a6:	29ff      	cmp	r1, #255	@ 0xff
 80058a8:	d100      	bne.n	80058ac <__aeabi_fsub+0x138>
 80058aa:	e142      	b.n	8005b32 <__aeabi_fsub+0x3be>
 80058ac:	2a1b      	cmp	r2, #27
 80058ae:	dc00      	bgt.n	80058b2 <__aeabi_fsub+0x13e>
 80058b0:	e124      	b.n	8005afc <__aeabi_fsub+0x388>
 80058b2:	1e5f      	subs	r7, r3, #1
 80058b4:	002c      	movs	r4, r5
 80058b6:	0006      	movs	r6, r0
 80058b8:	017a      	lsls	r2, r7, #5
 80058ba:	d500      	bpl.n	80058be <__aeabi_fsub+0x14a>
 80058bc:	e785      	b.n	80057ca <__aeabi_fsub+0x56>
 80058be:	0031      	movs	r1, r6
 80058c0:	3704      	adds	r7, #4
 80058c2:	08fa      	lsrs	r2, r7, #3
 80058c4:	29ff      	cmp	r1, #255	@ 0xff
 80058c6:	d12c      	bne.n	8005922 <__aeabi_fsub+0x1ae>
 80058c8:	2a00      	cmp	r2, #0
 80058ca:	d09c      	beq.n	8005806 <__aeabi_fsub+0x92>
 80058cc:	2380      	movs	r3, #128	@ 0x80
 80058ce:	03db      	lsls	r3, r3, #15
 80058d0:	4313      	orrs	r3, r2
 80058d2:	025b      	lsls	r3, r3, #9
 80058d4:	20ff      	movs	r0, #255	@ 0xff
 80058d6:	0a5b      	lsrs	r3, r3, #9
 80058d8:	e797      	b.n	800580a <__aeabi_fsub+0x96>
 80058da:	42ac      	cmp	r4, r5
 80058dc:	d100      	bne.n	80058e0 <__aeabi_fsub+0x16c>
 80058de:	e0a7      	b.n	8005a30 <__aeabi_fsub+0x2bc>
 80058e0:	2900      	cmp	r1, #0
 80058e2:	d022      	beq.n	800592a <__aeabi_fsub+0x1b6>
 80058e4:	2e00      	cmp	r6, #0
 80058e6:	d0d6      	beq.n	8005896 <__aeabi_fsub+0x122>
 80058e8:	4662      	mov	r2, ip
 80058ea:	002c      	movs	r4, r5
 80058ec:	e7ee      	b.n	80058cc <__aeabi_fsub+0x158>
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d0e7      	beq.n	80058c2 <__aeabi_fsub+0x14e>
 80058f2:	1e48      	subs	r0, r1, #1
 80058f4:	2901      	cmp	r1, #1
 80058f6:	d036      	beq.n	8005966 <__aeabi_fsub+0x1f2>
 80058f8:	29ff      	cmp	r1, #255	@ 0xff
 80058fa:	d0e5      	beq.n	80058c8 <__aeabi_fsub+0x154>
 80058fc:	0001      	movs	r1, r0
 80058fe:	e75d      	b.n	80057bc <__aeabi_fsub+0x48>
 8005900:	2001      	movs	r0, #1
 8005902:	003b      	movs	r3, r7
 8005904:	017a      	lsls	r2, r7, #5
 8005906:	d400      	bmi.n	800590a <__aeabi_fsub+0x196>
 8005908:	e157      	b.n	8005bba <__aeabi_fsub+0x446>
 800590a:	b2c0      	uxtb	r0, r0
 800590c:	01bb      	lsls	r3, r7, #6
 800590e:	0a5b      	lsrs	r3, r3, #9
 8005910:	e77b      	b.n	800580a <__aeabi_fsub+0x96>
 8005912:	2eff      	cmp	r6, #255	@ 0xff
 8005914:	d0d8      	beq.n	80058c8 <__aeabi_fsub+0x154>
 8005916:	291b      	cmp	r1, #27
 8005918:	dc00      	bgt.n	800591c <__aeabi_fsub+0x1a8>
 800591a:	e09f      	b.n	8005a5c <__aeabi_fsub+0x2e8>
 800591c:	0031      	movs	r1, r6
 800591e:	3705      	adds	r7, #5
 8005920:	08fa      	lsrs	r2, r7, #3
 8005922:	0253      	lsls	r3, r2, #9
 8005924:	0a5b      	lsrs	r3, r3, #9
 8005926:	b2c8      	uxtb	r0, r1
 8005928:	e76f      	b.n	800580a <__aeabi_fsub+0x96>
 800592a:	20fe      	movs	r0, #254	@ 0xfe
 800592c:	1c71      	adds	r1, r6, #1
 800592e:	4208      	tst	r0, r1
 8005930:	d154      	bne.n	80059dc <__aeabi_fsub+0x268>
 8005932:	2e00      	cmp	r6, #0
 8005934:	d000      	beq.n	8005938 <__aeabi_fsub+0x1c4>
 8005936:	e0b1      	b.n	8005a9c <__aeabi_fsub+0x328>
 8005938:	2f00      	cmp	r7, #0
 800593a:	d100      	bne.n	800593e <__aeabi_fsub+0x1ca>
 800593c:	e102      	b.n	8005b44 <__aeabi_fsub+0x3d0>
 800593e:	2b00      	cmp	r3, #0
 8005940:	d100      	bne.n	8005944 <__aeabi_fsub+0x1d0>
 8005942:	e0f9      	b.n	8005b38 <__aeabi_fsub+0x3c4>
 8005944:	2180      	movs	r1, #128	@ 0x80
 8005946:	1afa      	subs	r2, r7, r3
 8005948:	04c9      	lsls	r1, r1, #19
 800594a:	420a      	tst	r2, r1
 800594c:	d100      	bne.n	8005950 <__aeabi_fsub+0x1dc>
 800594e:	e13b      	b.n	8005bc8 <__aeabi_fsub+0x454>
 8005950:	2401      	movs	r4, #1
 8005952:	1bdf      	subs	r7, r3, r7
 8005954:	402c      	ands	r4, r5
 8005956:	2f00      	cmp	r7, #0
 8005958:	d049      	beq.n	80059ee <__aeabi_fsub+0x27a>
 800595a:	2001      	movs	r0, #1
 800595c:	420f      	tst	r7, r1
 800595e:	d1d5      	bne.n	800590c <__aeabi_fsub+0x198>
 8005960:	2100      	movs	r1, #0
 8005962:	08fa      	lsrs	r2, r7, #3
 8005964:	e7dd      	b.n	8005922 <__aeabi_fsub+0x1ae>
 8005966:	1aff      	subs	r7, r7, r3
 8005968:	017b      	lsls	r3, r7, #5
 800596a:	d400      	bmi.n	800596e <__aeabi_fsub+0x1fa>
 800596c:	e0de      	b.n	8005b2c <__aeabi_fsub+0x3b8>
 800596e:	01bd      	lsls	r5, r7, #6
 8005970:	09ad      	lsrs	r5, r5, #6
 8005972:	0028      	movs	r0, r5
 8005974:	f7fa fd70 	bl	8000458 <__clzsi2>
 8005978:	002b      	movs	r3, r5
 800597a:	3805      	subs	r0, #5
 800597c:	4083      	lsls	r3, r0
 800597e:	2601      	movs	r6, #1
 8005980:	2220      	movs	r2, #32
 8005982:	1b81      	subs	r1, r0, r6
 8005984:	3101      	adds	r1, #1
 8005986:	1a52      	subs	r2, r2, r1
 8005988:	001f      	movs	r7, r3
 800598a:	4093      	lsls	r3, r2
 800598c:	40cf      	lsrs	r7, r1
 800598e:	1e5a      	subs	r2, r3, #1
 8005990:	4193      	sbcs	r3, r2
 8005992:	431f      	orrs	r7, r3
 8005994:	d02b      	beq.n	80059ee <__aeabi_fsub+0x27a>
 8005996:	2100      	movs	r1, #0
 8005998:	077b      	lsls	r3, r7, #29
 800599a:	d0b1      	beq.n	8005900 <__aeabi_fsub+0x18c>
 800599c:	230f      	movs	r3, #15
 800599e:	403b      	ands	r3, r7
 80059a0:	2b04      	cmp	r3, #4
 80059a2:	d000      	beq.n	80059a6 <__aeabi_fsub+0x232>
 80059a4:	e728      	b.n	80057f8 <__aeabi_fsub+0x84>
 80059a6:	017b      	lsls	r3, r7, #5
 80059a8:	d500      	bpl.n	80059ac <__aeabi_fsub+0x238>
 80059aa:	e728      	b.n	80057fe <__aeabi_fsub+0x8a>
 80059ac:	08fa      	lsrs	r2, r7, #3
 80059ae:	e7b8      	b.n	8005922 <__aeabi_fsub+0x1ae>
 80059b0:	001a      	movs	r2, r3
 80059b2:	2020      	movs	r0, #32
 80059b4:	40ca      	lsrs	r2, r1
 80059b6:	1a41      	subs	r1, r0, r1
 80059b8:	408b      	lsls	r3, r1
 80059ba:	1e59      	subs	r1, r3, #1
 80059bc:	418b      	sbcs	r3, r1
 80059be:	4313      	orrs	r3, r2
 80059c0:	1aff      	subs	r7, r7, r3
 80059c2:	017b      	lsls	r3, r7, #5
 80059c4:	d500      	bpl.n	80059c8 <__aeabi_fsub+0x254>
 80059c6:	e702      	b.n	80057ce <__aeabi_fsub+0x5a>
 80059c8:	077b      	lsls	r3, r7, #29
 80059ca:	d100      	bne.n	80059ce <__aeabi_fsub+0x25a>
 80059cc:	e10d      	b.n	8005bea <__aeabi_fsub+0x476>
 80059ce:	230f      	movs	r3, #15
 80059d0:	0031      	movs	r1, r6
 80059d2:	403b      	ands	r3, r7
 80059d4:	2b04      	cmp	r3, #4
 80059d6:	d000      	beq.n	80059da <__aeabi_fsub+0x266>
 80059d8:	e70e      	b.n	80057f8 <__aeabi_fsub+0x84>
 80059da:	e772      	b.n	80058c2 <__aeabi_fsub+0x14e>
 80059dc:	1afa      	subs	r2, r7, r3
 80059de:	4690      	mov	r8, r2
 80059e0:	0152      	lsls	r2, r2, #5
 80059e2:	d456      	bmi.n	8005a92 <__aeabi_fsub+0x31e>
 80059e4:	4643      	mov	r3, r8
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d000      	beq.n	80059ec <__aeabi_fsub+0x278>
 80059ea:	e6f3      	b.n	80057d4 <__aeabi_fsub+0x60>
 80059ec:	2400      	movs	r4, #0
 80059ee:	2000      	movs	r0, #0
 80059f0:	2300      	movs	r3, #0
 80059f2:	e70a      	b.n	800580a <__aeabi_fsub+0x96>
 80059f4:	4649      	mov	r1, r9
 80059f6:	2900      	cmp	r1, #0
 80059f8:	d01c      	beq.n	8005a34 <__aeabi_fsub+0x2c0>
 80059fa:	2e00      	cmp	r6, #0
 80059fc:	d000      	beq.n	8005a00 <__aeabi_fsub+0x28c>
 80059fe:	e702      	b.n	8005806 <__aeabi_fsub+0x92>
 8005a00:	21ff      	movs	r1, #255	@ 0xff
 8005a02:	2f00      	cmp	r7, #0
 8005a04:	d055      	beq.n	8005ab2 <__aeabi_fsub+0x33e>
 8005a06:	1e4a      	subs	r2, r1, #1
 8005a08:	2901      	cmp	r1, #1
 8005a0a:	d059      	beq.n	8005ac0 <__aeabi_fsub+0x34c>
 8005a0c:	29ff      	cmp	r1, #255	@ 0xff
 8005a0e:	d100      	bne.n	8005a12 <__aeabi_fsub+0x29e>
 8005a10:	e090      	b.n	8005b34 <__aeabi_fsub+0x3c0>
 8005a12:	2a1b      	cmp	r2, #27
 8005a14:	dd00      	ble.n	8005a18 <__aeabi_fsub+0x2a4>
 8005a16:	e091      	b.n	8005b3c <__aeabi_fsub+0x3c8>
 8005a18:	0011      	movs	r1, r2
 8005a1a:	003a      	movs	r2, r7
 8005a1c:	2520      	movs	r5, #32
 8005a1e:	40ca      	lsrs	r2, r1
 8005a20:	1a69      	subs	r1, r5, r1
 8005a22:	408f      	lsls	r7, r1
 8005a24:	1e79      	subs	r1, r7, #1
 8005a26:	418f      	sbcs	r7, r1
 8005a28:	4317      	orrs	r7, r2
 8005a2a:	0006      	movs	r6, r0
 8005a2c:	18ff      	adds	r7, r7, r3
 8005a2e:	e70d      	b.n	800584c <__aeabi_fsub+0xd8>
 8005a30:	2900      	cmp	r1, #0
 8005a32:	d126      	bne.n	8005a82 <__aeabi_fsub+0x30e>
 8005a34:	20fe      	movs	r0, #254	@ 0xfe
 8005a36:	1c71      	adds	r1, r6, #1
 8005a38:	4208      	tst	r0, r1
 8005a3a:	d113      	bne.n	8005a64 <__aeabi_fsub+0x2f0>
 8005a3c:	2e00      	cmp	r6, #0
 8005a3e:	d000      	beq.n	8005a42 <__aeabi_fsub+0x2ce>
 8005a40:	e096      	b.n	8005b70 <__aeabi_fsub+0x3fc>
 8005a42:	2f00      	cmp	r7, #0
 8005a44:	d100      	bne.n	8005a48 <__aeabi_fsub+0x2d4>
 8005a46:	e0b4      	b.n	8005bb2 <__aeabi_fsub+0x43e>
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d075      	beq.n	8005b38 <__aeabi_fsub+0x3c4>
 8005a4c:	18fb      	adds	r3, r7, r3
 8005a4e:	015a      	lsls	r2, r3, #5
 8005a50:	d400      	bmi.n	8005a54 <__aeabi_fsub+0x2e0>
 8005a52:	e0b2      	b.n	8005bba <__aeabi_fsub+0x446>
 8005a54:	019b      	lsls	r3, r3, #6
 8005a56:	0a5b      	lsrs	r3, r3, #9
 8005a58:	38fd      	subs	r0, #253	@ 0xfd
 8005a5a:	e6d6      	b.n	800580a <__aeabi_fsub+0x96>
 8005a5c:	2280      	movs	r2, #128	@ 0x80
 8005a5e:	04d2      	lsls	r2, r2, #19
 8005a60:	4313      	orrs	r3, r2
 8005a62:	e6ea      	b.n	800583a <__aeabi_fsub+0xc6>
 8005a64:	29ff      	cmp	r1, #255	@ 0xff
 8005a66:	d100      	bne.n	8005a6a <__aeabi_fsub+0x2f6>
 8005a68:	e6cd      	b.n	8005806 <__aeabi_fsub+0x92>
 8005a6a:	18fa      	adds	r2, r7, r3
 8005a6c:	0852      	lsrs	r2, r2, #1
 8005a6e:	0753      	lsls	r3, r2, #29
 8005a70:	d005      	beq.n	8005a7e <__aeabi_fsub+0x30a>
 8005a72:	230f      	movs	r3, #15
 8005a74:	1d17      	adds	r7, r2, #4
 8005a76:	4013      	ands	r3, r2
 8005a78:	2b04      	cmp	r3, #4
 8005a7a:	d000      	beq.n	8005a7e <__aeabi_fsub+0x30a>
 8005a7c:	e721      	b.n	80058c2 <__aeabi_fsub+0x14e>
 8005a7e:	08d2      	lsrs	r2, r2, #3
 8005a80:	e74f      	b.n	8005922 <__aeabi_fsub+0x1ae>
 8005a82:	2e00      	cmp	r6, #0
 8005a84:	d0bc      	beq.n	8005a00 <__aeabi_fsub+0x28c>
 8005a86:	4662      	mov	r2, ip
 8005a88:	e720      	b.n	80058cc <__aeabi_fsub+0x158>
 8005a8a:	002c      	movs	r4, r5
 8005a8c:	20ff      	movs	r0, #255	@ 0xff
 8005a8e:	2300      	movs	r3, #0
 8005a90:	e6bb      	b.n	800580a <__aeabi_fsub+0x96>
 8005a92:	2401      	movs	r4, #1
 8005a94:	1bdb      	subs	r3, r3, r7
 8005a96:	4698      	mov	r8, r3
 8005a98:	402c      	ands	r4, r5
 8005a9a:	e69b      	b.n	80057d4 <__aeabi_fsub+0x60>
 8005a9c:	2f00      	cmp	r7, #0
 8005a9e:	d175      	bne.n	8005b8c <__aeabi_fsub+0x418>
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d000      	beq.n	8005aa6 <__aeabi_fsub+0x332>
 8005aa4:	e096      	b.n	8005bd4 <__aeabi_fsub+0x460>
 8005aa6:	2380      	movs	r3, #128	@ 0x80
 8005aa8:	2400      	movs	r4, #0
 8005aaa:	20ff      	movs	r0, #255	@ 0xff
 8005aac:	03db      	lsls	r3, r3, #15
 8005aae:	e6ac      	b.n	800580a <__aeabi_fsub+0x96>
 8005ab0:	002c      	movs	r4, r5
 8005ab2:	001f      	movs	r7, r3
 8005ab4:	e705      	b.n	80058c2 <__aeabi_fsub+0x14e>
 8005ab6:	46c0      	nop			@ (mov r8, r8)
 8005ab8:	fbffffff 	.word	0xfbffffff
 8005abc:	7dffffff 	.word	0x7dffffff
 8005ac0:	18fb      	adds	r3, r7, r3
 8005ac2:	015a      	lsls	r2, r3, #5
 8005ac4:	d400      	bmi.n	8005ac8 <__aeabi_fsub+0x354>
 8005ac6:	e08d      	b.n	8005be4 <__aeabi_fsub+0x470>
 8005ac8:	4a4a      	ldr	r2, [pc, #296]	@ (8005bf4 <__aeabi_fsub+0x480>)
 8005aca:	085b      	lsrs	r3, r3, #1
 8005acc:	401a      	ands	r2, r3
 8005ace:	0759      	lsls	r1, r3, #29
 8005ad0:	d100      	bne.n	8005ad4 <__aeabi_fsub+0x360>
 8005ad2:	e08c      	b.n	8005bee <__aeabi_fsub+0x47a>
 8005ad4:	210f      	movs	r1, #15
 8005ad6:	400b      	ands	r3, r1
 8005ad8:	390d      	subs	r1, #13
 8005ada:	2b04      	cmp	r3, #4
 8005adc:	d0cf      	beq.n	8005a7e <__aeabi_fsub+0x30a>
 8005ade:	2102      	movs	r1, #2
 8005ae0:	1d17      	adds	r7, r2, #4
 8005ae2:	e6ee      	b.n	80058c2 <__aeabi_fsub+0x14e>
 8005ae4:	2900      	cmp	r1, #0
 8005ae6:	d100      	bne.n	8005aea <__aeabi_fsub+0x376>
 8005ae8:	e71f      	b.n	800592a <__aeabi_fsub+0x1b6>
 8005aea:	1b82      	subs	r2, r0, r6
 8005aec:	0011      	movs	r1, r2
 8005aee:	2e00      	cmp	r6, #0
 8005af0:	d100      	bne.n	8005af4 <__aeabi_fsub+0x380>
 8005af2:	e6d1      	b.n	8005898 <__aeabi_fsub+0x124>
 8005af4:	2180      	movs	r1, #128	@ 0x80
 8005af6:	04c9      	lsls	r1, r1, #19
 8005af8:	430f      	orrs	r7, r1
 8005afa:	e6d7      	b.n	80058ac <__aeabi_fsub+0x138>
 8005afc:	0039      	movs	r1, r7
 8005afe:	2420      	movs	r4, #32
 8005b00:	40d1      	lsrs	r1, r2
 8005b02:	1aa2      	subs	r2, r4, r2
 8005b04:	4097      	lsls	r7, r2
 8005b06:	1e7a      	subs	r2, r7, #1
 8005b08:	4197      	sbcs	r7, r2
 8005b0a:	430f      	orrs	r7, r1
 8005b0c:	002c      	movs	r4, r5
 8005b0e:	0006      	movs	r6, r0
 8005b10:	1bdf      	subs	r7, r3, r7
 8005b12:	e756      	b.n	80059c2 <__aeabi_fsub+0x24e>
 8005b14:	2900      	cmp	r1, #0
 8005b16:	d08d      	beq.n	8005a34 <__aeabi_fsub+0x2c0>
 8005b18:	1b81      	subs	r1, r0, r6
 8005b1a:	2e00      	cmp	r6, #0
 8005b1c:	d100      	bne.n	8005b20 <__aeabi_fsub+0x3ac>
 8005b1e:	e770      	b.n	8005a02 <__aeabi_fsub+0x28e>
 8005b20:	291b      	cmp	r1, #27
 8005b22:	dc0b      	bgt.n	8005b3c <__aeabi_fsub+0x3c8>
 8005b24:	2280      	movs	r2, #128	@ 0x80
 8005b26:	04d2      	lsls	r2, r2, #19
 8005b28:	4317      	orrs	r7, r2
 8005b2a:	e776      	b.n	8005a1a <__aeabi_fsub+0x2a6>
 8005b2c:	2101      	movs	r1, #1
 8005b2e:	08fa      	lsrs	r2, r7, #3
 8005b30:	e6f7      	b.n	8005922 <__aeabi_fsub+0x1ae>
 8005b32:	002c      	movs	r4, r5
 8005b34:	4662      	mov	r2, ip
 8005b36:	e6c7      	b.n	80058c8 <__aeabi_fsub+0x154>
 8005b38:	2100      	movs	r1, #0
 8005b3a:	e6f2      	b.n	8005922 <__aeabi_fsub+0x1ae>
 8005b3c:	3305      	adds	r3, #5
 8005b3e:	0001      	movs	r1, r0
 8005b40:	08da      	lsrs	r2, r3, #3
 8005b42:	e6ee      	b.n	8005922 <__aeabi_fsub+0x1ae>
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d100      	bne.n	8005b4a <__aeabi_fsub+0x3d6>
 8005b48:	e750      	b.n	80059ec <__aeabi_fsub+0x278>
 8005b4a:	2401      	movs	r4, #1
 8005b4c:	2100      	movs	r1, #0
 8005b4e:	4662      	mov	r2, ip
 8005b50:	402c      	ands	r4, r5
 8005b52:	e6e6      	b.n	8005922 <__aeabi_fsub+0x1ae>
 8005b54:	1bda      	subs	r2, r3, r7
 8005b56:	0153      	lsls	r3, r2, #5
 8005b58:	d532      	bpl.n	8005bc0 <__aeabi_fsub+0x44c>
 8005b5a:	0192      	lsls	r2, r2, #6
 8005b5c:	0994      	lsrs	r4, r2, #6
 8005b5e:	0020      	movs	r0, r4
 8005b60:	f7fa fc7a 	bl	8000458 <__clzsi2>
 8005b64:	0023      	movs	r3, r4
 8005b66:	3805      	subs	r0, #5
 8005b68:	4083      	lsls	r3, r0
 8005b6a:	002c      	movs	r4, r5
 8005b6c:	2601      	movs	r6, #1
 8005b6e:	e707      	b.n	8005980 <__aeabi_fsub+0x20c>
 8005b70:	2f00      	cmp	r7, #0
 8005b72:	d0df      	beq.n	8005b34 <__aeabi_fsub+0x3c0>
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d017      	beq.n	8005ba8 <__aeabi_fsub+0x434>
 8005b78:	2380      	movs	r3, #128	@ 0x80
 8005b7a:	03db      	lsls	r3, r3, #15
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d200      	bcs.n	8005b82 <__aeabi_fsub+0x40e>
 8005b80:	e6a4      	b.n	80058cc <__aeabi_fsub+0x158>
 8005b82:	459c      	cmp	ip, r3
 8005b84:	d300      	bcc.n	8005b88 <__aeabi_fsub+0x414>
 8005b86:	e6a1      	b.n	80058cc <__aeabi_fsub+0x158>
 8005b88:	4662      	mov	r2, ip
 8005b8a:	e69f      	b.n	80058cc <__aeabi_fsub+0x158>
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d00b      	beq.n	8005ba8 <__aeabi_fsub+0x434>
 8005b90:	2380      	movs	r3, #128	@ 0x80
 8005b92:	03db      	lsls	r3, r3, #15
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d200      	bcs.n	8005b9a <__aeabi_fsub+0x426>
 8005b98:	e698      	b.n	80058cc <__aeabi_fsub+0x158>
 8005b9a:	459c      	cmp	ip, r3
 8005b9c:	d300      	bcc.n	8005ba0 <__aeabi_fsub+0x42c>
 8005b9e:	e695      	b.n	80058cc <__aeabi_fsub+0x158>
 8005ba0:	2401      	movs	r4, #1
 8005ba2:	4662      	mov	r2, ip
 8005ba4:	402c      	ands	r4, r5
 8005ba6:	e691      	b.n	80058cc <__aeabi_fsub+0x158>
 8005ba8:	2380      	movs	r3, #128	@ 0x80
 8005baa:	03db      	lsls	r3, r3, #15
 8005bac:	20ff      	movs	r0, #255	@ 0xff
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	e62b      	b.n	800580a <__aeabi_fsub+0x96>
 8005bb2:	2000      	movs	r0, #0
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d100      	bne.n	8005bba <__aeabi_fsub+0x446>
 8005bb8:	e627      	b.n	800580a <__aeabi_fsub+0x96>
 8005bba:	2100      	movs	r1, #0
 8005bbc:	08da      	lsrs	r2, r3, #3
 8005bbe:	e6b0      	b.n	8005922 <__aeabi_fsub+0x1ae>
 8005bc0:	002c      	movs	r4, r5
 8005bc2:	2101      	movs	r1, #1
 8005bc4:	08d2      	lsrs	r2, r2, #3
 8005bc6:	e6ac      	b.n	8005922 <__aeabi_fsub+0x1ae>
 8005bc8:	2a00      	cmp	r2, #0
 8005bca:	d100      	bne.n	8005bce <__aeabi_fsub+0x45a>
 8005bcc:	e70e      	b.n	80059ec <__aeabi_fsub+0x278>
 8005bce:	2100      	movs	r1, #0
 8005bd0:	08d2      	lsrs	r2, r2, #3
 8005bd2:	e6a6      	b.n	8005922 <__aeabi_fsub+0x1ae>
 8005bd4:	2380      	movs	r3, #128	@ 0x80
 8005bd6:	4662      	mov	r2, ip
 8005bd8:	2401      	movs	r4, #1
 8005bda:	03db      	lsls	r3, r3, #15
 8005bdc:	20ff      	movs	r0, #255	@ 0xff
 8005bde:	4313      	orrs	r3, r2
 8005be0:	402c      	ands	r4, r5
 8005be2:	e612      	b.n	800580a <__aeabi_fsub+0x96>
 8005be4:	2101      	movs	r1, #1
 8005be6:	08da      	lsrs	r2, r3, #3
 8005be8:	e69b      	b.n	8005922 <__aeabi_fsub+0x1ae>
 8005bea:	0031      	movs	r1, r6
 8005bec:	e669      	b.n	80058c2 <__aeabi_fsub+0x14e>
 8005bee:	2102      	movs	r1, #2
 8005bf0:	08d2      	lsrs	r2, r2, #3
 8005bf2:	e696      	b.n	8005922 <__aeabi_fsub+0x1ae>
 8005bf4:	7dffffff 	.word	0x7dffffff

08005bf8 <__aeabi_f2iz>:
 8005bf8:	0241      	lsls	r1, r0, #9
 8005bfa:	0042      	lsls	r2, r0, #1
 8005bfc:	0fc3      	lsrs	r3, r0, #31
 8005bfe:	0a49      	lsrs	r1, r1, #9
 8005c00:	2000      	movs	r0, #0
 8005c02:	0e12      	lsrs	r2, r2, #24
 8005c04:	2a7e      	cmp	r2, #126	@ 0x7e
 8005c06:	dd03      	ble.n	8005c10 <__aeabi_f2iz+0x18>
 8005c08:	2a9d      	cmp	r2, #157	@ 0x9d
 8005c0a:	dd02      	ble.n	8005c12 <__aeabi_f2iz+0x1a>
 8005c0c:	4a09      	ldr	r2, [pc, #36]	@ (8005c34 <__aeabi_f2iz+0x3c>)
 8005c0e:	1898      	adds	r0, r3, r2
 8005c10:	4770      	bx	lr
 8005c12:	2080      	movs	r0, #128	@ 0x80
 8005c14:	0400      	lsls	r0, r0, #16
 8005c16:	4301      	orrs	r1, r0
 8005c18:	2a95      	cmp	r2, #149	@ 0x95
 8005c1a:	dc07      	bgt.n	8005c2c <__aeabi_f2iz+0x34>
 8005c1c:	2096      	movs	r0, #150	@ 0x96
 8005c1e:	1a82      	subs	r2, r0, r2
 8005c20:	40d1      	lsrs	r1, r2
 8005c22:	4248      	negs	r0, r1
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d1f3      	bne.n	8005c10 <__aeabi_f2iz+0x18>
 8005c28:	0008      	movs	r0, r1
 8005c2a:	e7f1      	b.n	8005c10 <__aeabi_f2iz+0x18>
 8005c2c:	3a96      	subs	r2, #150	@ 0x96
 8005c2e:	4091      	lsls	r1, r2
 8005c30:	e7f7      	b.n	8005c22 <__aeabi_f2iz+0x2a>
 8005c32:	46c0      	nop			@ (mov r8, r8)
 8005c34:	7fffffff 	.word	0x7fffffff

08005c38 <__aeabi_i2f>:
 8005c38:	b570      	push	{r4, r5, r6, lr}
 8005c3a:	2800      	cmp	r0, #0
 8005c3c:	d012      	beq.n	8005c64 <__aeabi_i2f+0x2c>
 8005c3e:	17c3      	asrs	r3, r0, #31
 8005c40:	18c5      	adds	r5, r0, r3
 8005c42:	405d      	eors	r5, r3
 8005c44:	0fc4      	lsrs	r4, r0, #31
 8005c46:	0028      	movs	r0, r5
 8005c48:	f7fa fc06 	bl	8000458 <__clzsi2>
 8005c4c:	239e      	movs	r3, #158	@ 0x9e
 8005c4e:	1a1b      	subs	r3, r3, r0
 8005c50:	2b96      	cmp	r3, #150	@ 0x96
 8005c52:	dc0f      	bgt.n	8005c74 <__aeabi_i2f+0x3c>
 8005c54:	2808      	cmp	r0, #8
 8005c56:	d038      	beq.n	8005cca <__aeabi_i2f+0x92>
 8005c58:	3808      	subs	r0, #8
 8005c5a:	4085      	lsls	r5, r0
 8005c5c:	026d      	lsls	r5, r5, #9
 8005c5e:	0a6d      	lsrs	r5, r5, #9
 8005c60:	b2d8      	uxtb	r0, r3
 8005c62:	e002      	b.n	8005c6a <__aeabi_i2f+0x32>
 8005c64:	2400      	movs	r4, #0
 8005c66:	2000      	movs	r0, #0
 8005c68:	2500      	movs	r5, #0
 8005c6a:	05c0      	lsls	r0, r0, #23
 8005c6c:	4328      	orrs	r0, r5
 8005c6e:	07e4      	lsls	r4, r4, #31
 8005c70:	4320      	orrs	r0, r4
 8005c72:	bd70      	pop	{r4, r5, r6, pc}
 8005c74:	2b99      	cmp	r3, #153	@ 0x99
 8005c76:	dc14      	bgt.n	8005ca2 <__aeabi_i2f+0x6a>
 8005c78:	1f42      	subs	r2, r0, #5
 8005c7a:	4095      	lsls	r5, r2
 8005c7c:	002a      	movs	r2, r5
 8005c7e:	4915      	ldr	r1, [pc, #84]	@ (8005cd4 <__aeabi_i2f+0x9c>)
 8005c80:	4011      	ands	r1, r2
 8005c82:	0755      	lsls	r5, r2, #29
 8005c84:	d01c      	beq.n	8005cc0 <__aeabi_i2f+0x88>
 8005c86:	250f      	movs	r5, #15
 8005c88:	402a      	ands	r2, r5
 8005c8a:	2a04      	cmp	r2, #4
 8005c8c:	d018      	beq.n	8005cc0 <__aeabi_i2f+0x88>
 8005c8e:	3104      	adds	r1, #4
 8005c90:	08ca      	lsrs	r2, r1, #3
 8005c92:	0149      	lsls	r1, r1, #5
 8005c94:	d515      	bpl.n	8005cc2 <__aeabi_i2f+0x8a>
 8005c96:	239f      	movs	r3, #159	@ 0x9f
 8005c98:	0252      	lsls	r2, r2, #9
 8005c9a:	1a18      	subs	r0, r3, r0
 8005c9c:	0a55      	lsrs	r5, r2, #9
 8005c9e:	b2c0      	uxtb	r0, r0
 8005ca0:	e7e3      	b.n	8005c6a <__aeabi_i2f+0x32>
 8005ca2:	0002      	movs	r2, r0
 8005ca4:	0029      	movs	r1, r5
 8005ca6:	321b      	adds	r2, #27
 8005ca8:	4091      	lsls	r1, r2
 8005caa:	1e4a      	subs	r2, r1, #1
 8005cac:	4191      	sbcs	r1, r2
 8005cae:	2205      	movs	r2, #5
 8005cb0:	1a12      	subs	r2, r2, r0
 8005cb2:	40d5      	lsrs	r5, r2
 8005cb4:	002a      	movs	r2, r5
 8005cb6:	430a      	orrs	r2, r1
 8005cb8:	4906      	ldr	r1, [pc, #24]	@ (8005cd4 <__aeabi_i2f+0x9c>)
 8005cba:	4011      	ands	r1, r2
 8005cbc:	0755      	lsls	r5, r2, #29
 8005cbe:	d1e2      	bne.n	8005c86 <__aeabi_i2f+0x4e>
 8005cc0:	08ca      	lsrs	r2, r1, #3
 8005cc2:	0252      	lsls	r2, r2, #9
 8005cc4:	0a55      	lsrs	r5, r2, #9
 8005cc6:	b2d8      	uxtb	r0, r3
 8005cc8:	e7cf      	b.n	8005c6a <__aeabi_i2f+0x32>
 8005cca:	026d      	lsls	r5, r5, #9
 8005ccc:	0a6d      	lsrs	r5, r5, #9
 8005cce:	308e      	adds	r0, #142	@ 0x8e
 8005cd0:	e7cb      	b.n	8005c6a <__aeabi_i2f+0x32>
 8005cd2:	46c0      	nop			@ (mov r8, r8)
 8005cd4:	fbffffff 	.word	0xfbffffff

08005cd8 <__eqsf2>:
 8005cd8:	b570      	push	{r4, r5, r6, lr}
 8005cda:	0042      	lsls	r2, r0, #1
 8005cdc:	024e      	lsls	r6, r1, #9
 8005cde:	004c      	lsls	r4, r1, #1
 8005ce0:	0245      	lsls	r5, r0, #9
 8005ce2:	0a6d      	lsrs	r5, r5, #9
 8005ce4:	0e12      	lsrs	r2, r2, #24
 8005ce6:	0fc3      	lsrs	r3, r0, #31
 8005ce8:	0a76      	lsrs	r6, r6, #9
 8005cea:	0e24      	lsrs	r4, r4, #24
 8005cec:	0fc9      	lsrs	r1, r1, #31
 8005cee:	2aff      	cmp	r2, #255	@ 0xff
 8005cf0:	d010      	beq.n	8005d14 <__eqsf2+0x3c>
 8005cf2:	2cff      	cmp	r4, #255	@ 0xff
 8005cf4:	d00c      	beq.n	8005d10 <__eqsf2+0x38>
 8005cf6:	2001      	movs	r0, #1
 8005cf8:	42a2      	cmp	r2, r4
 8005cfa:	d10a      	bne.n	8005d12 <__eqsf2+0x3a>
 8005cfc:	42b5      	cmp	r5, r6
 8005cfe:	d108      	bne.n	8005d12 <__eqsf2+0x3a>
 8005d00:	428b      	cmp	r3, r1
 8005d02:	d00f      	beq.n	8005d24 <__eqsf2+0x4c>
 8005d04:	2a00      	cmp	r2, #0
 8005d06:	d104      	bne.n	8005d12 <__eqsf2+0x3a>
 8005d08:	0028      	movs	r0, r5
 8005d0a:	1e43      	subs	r3, r0, #1
 8005d0c:	4198      	sbcs	r0, r3
 8005d0e:	e000      	b.n	8005d12 <__eqsf2+0x3a>
 8005d10:	2001      	movs	r0, #1
 8005d12:	bd70      	pop	{r4, r5, r6, pc}
 8005d14:	2001      	movs	r0, #1
 8005d16:	2cff      	cmp	r4, #255	@ 0xff
 8005d18:	d1fb      	bne.n	8005d12 <__eqsf2+0x3a>
 8005d1a:	4335      	orrs	r5, r6
 8005d1c:	d1f9      	bne.n	8005d12 <__eqsf2+0x3a>
 8005d1e:	404b      	eors	r3, r1
 8005d20:	0018      	movs	r0, r3
 8005d22:	e7f6      	b.n	8005d12 <__eqsf2+0x3a>
 8005d24:	2000      	movs	r0, #0
 8005d26:	e7f4      	b.n	8005d12 <__eqsf2+0x3a>

08005d28 <__gesf2>:
 8005d28:	b530      	push	{r4, r5, lr}
 8005d2a:	0042      	lsls	r2, r0, #1
 8005d2c:	0244      	lsls	r4, r0, #9
 8005d2e:	024d      	lsls	r5, r1, #9
 8005d30:	0fc3      	lsrs	r3, r0, #31
 8005d32:	0048      	lsls	r0, r1, #1
 8005d34:	0a64      	lsrs	r4, r4, #9
 8005d36:	0e12      	lsrs	r2, r2, #24
 8005d38:	0a6d      	lsrs	r5, r5, #9
 8005d3a:	0e00      	lsrs	r0, r0, #24
 8005d3c:	0fc9      	lsrs	r1, r1, #31
 8005d3e:	2aff      	cmp	r2, #255	@ 0xff
 8005d40:	d018      	beq.n	8005d74 <__gesf2+0x4c>
 8005d42:	28ff      	cmp	r0, #255	@ 0xff
 8005d44:	d00a      	beq.n	8005d5c <__gesf2+0x34>
 8005d46:	2a00      	cmp	r2, #0
 8005d48:	d11e      	bne.n	8005d88 <__gesf2+0x60>
 8005d4a:	2800      	cmp	r0, #0
 8005d4c:	d10a      	bne.n	8005d64 <__gesf2+0x3c>
 8005d4e:	2d00      	cmp	r5, #0
 8005d50:	d029      	beq.n	8005da6 <__gesf2+0x7e>
 8005d52:	2c00      	cmp	r4, #0
 8005d54:	d12d      	bne.n	8005db2 <__gesf2+0x8a>
 8005d56:	0048      	lsls	r0, r1, #1
 8005d58:	3801      	subs	r0, #1
 8005d5a:	bd30      	pop	{r4, r5, pc}
 8005d5c:	2d00      	cmp	r5, #0
 8005d5e:	d125      	bne.n	8005dac <__gesf2+0x84>
 8005d60:	2a00      	cmp	r2, #0
 8005d62:	d101      	bne.n	8005d68 <__gesf2+0x40>
 8005d64:	2c00      	cmp	r4, #0
 8005d66:	d0f6      	beq.n	8005d56 <__gesf2+0x2e>
 8005d68:	428b      	cmp	r3, r1
 8005d6a:	d019      	beq.n	8005da0 <__gesf2+0x78>
 8005d6c:	2001      	movs	r0, #1
 8005d6e:	425b      	negs	r3, r3
 8005d70:	4318      	orrs	r0, r3
 8005d72:	e7f2      	b.n	8005d5a <__gesf2+0x32>
 8005d74:	2c00      	cmp	r4, #0
 8005d76:	d119      	bne.n	8005dac <__gesf2+0x84>
 8005d78:	28ff      	cmp	r0, #255	@ 0xff
 8005d7a:	d1f7      	bne.n	8005d6c <__gesf2+0x44>
 8005d7c:	2d00      	cmp	r5, #0
 8005d7e:	d115      	bne.n	8005dac <__gesf2+0x84>
 8005d80:	2000      	movs	r0, #0
 8005d82:	428b      	cmp	r3, r1
 8005d84:	d1f2      	bne.n	8005d6c <__gesf2+0x44>
 8005d86:	e7e8      	b.n	8005d5a <__gesf2+0x32>
 8005d88:	2800      	cmp	r0, #0
 8005d8a:	d0ef      	beq.n	8005d6c <__gesf2+0x44>
 8005d8c:	428b      	cmp	r3, r1
 8005d8e:	d1ed      	bne.n	8005d6c <__gesf2+0x44>
 8005d90:	4282      	cmp	r2, r0
 8005d92:	dceb      	bgt.n	8005d6c <__gesf2+0x44>
 8005d94:	db04      	blt.n	8005da0 <__gesf2+0x78>
 8005d96:	42ac      	cmp	r4, r5
 8005d98:	d8e8      	bhi.n	8005d6c <__gesf2+0x44>
 8005d9a:	2000      	movs	r0, #0
 8005d9c:	42ac      	cmp	r4, r5
 8005d9e:	d2dc      	bcs.n	8005d5a <__gesf2+0x32>
 8005da0:	0058      	lsls	r0, r3, #1
 8005da2:	3801      	subs	r0, #1
 8005da4:	e7d9      	b.n	8005d5a <__gesf2+0x32>
 8005da6:	2c00      	cmp	r4, #0
 8005da8:	d0d7      	beq.n	8005d5a <__gesf2+0x32>
 8005daa:	e7df      	b.n	8005d6c <__gesf2+0x44>
 8005dac:	2002      	movs	r0, #2
 8005dae:	4240      	negs	r0, r0
 8005db0:	e7d3      	b.n	8005d5a <__gesf2+0x32>
 8005db2:	428b      	cmp	r3, r1
 8005db4:	d1da      	bne.n	8005d6c <__gesf2+0x44>
 8005db6:	e7ee      	b.n	8005d96 <__gesf2+0x6e>

08005db8 <__lesf2>:
 8005db8:	b530      	push	{r4, r5, lr}
 8005dba:	0042      	lsls	r2, r0, #1
 8005dbc:	0244      	lsls	r4, r0, #9
 8005dbe:	024d      	lsls	r5, r1, #9
 8005dc0:	0fc3      	lsrs	r3, r0, #31
 8005dc2:	0048      	lsls	r0, r1, #1
 8005dc4:	0a64      	lsrs	r4, r4, #9
 8005dc6:	0e12      	lsrs	r2, r2, #24
 8005dc8:	0a6d      	lsrs	r5, r5, #9
 8005dca:	0e00      	lsrs	r0, r0, #24
 8005dcc:	0fc9      	lsrs	r1, r1, #31
 8005dce:	2aff      	cmp	r2, #255	@ 0xff
 8005dd0:	d017      	beq.n	8005e02 <__lesf2+0x4a>
 8005dd2:	28ff      	cmp	r0, #255	@ 0xff
 8005dd4:	d00a      	beq.n	8005dec <__lesf2+0x34>
 8005dd6:	2a00      	cmp	r2, #0
 8005dd8:	d11b      	bne.n	8005e12 <__lesf2+0x5a>
 8005dda:	2800      	cmp	r0, #0
 8005ddc:	d10a      	bne.n	8005df4 <__lesf2+0x3c>
 8005dde:	2d00      	cmp	r5, #0
 8005de0:	d01d      	beq.n	8005e1e <__lesf2+0x66>
 8005de2:	2c00      	cmp	r4, #0
 8005de4:	d12d      	bne.n	8005e42 <__lesf2+0x8a>
 8005de6:	0048      	lsls	r0, r1, #1
 8005de8:	3801      	subs	r0, #1
 8005dea:	e011      	b.n	8005e10 <__lesf2+0x58>
 8005dec:	2d00      	cmp	r5, #0
 8005dee:	d10e      	bne.n	8005e0e <__lesf2+0x56>
 8005df0:	2a00      	cmp	r2, #0
 8005df2:	d101      	bne.n	8005df8 <__lesf2+0x40>
 8005df4:	2c00      	cmp	r4, #0
 8005df6:	d0f6      	beq.n	8005de6 <__lesf2+0x2e>
 8005df8:	428b      	cmp	r3, r1
 8005dfa:	d10c      	bne.n	8005e16 <__lesf2+0x5e>
 8005dfc:	0058      	lsls	r0, r3, #1
 8005dfe:	3801      	subs	r0, #1
 8005e00:	e006      	b.n	8005e10 <__lesf2+0x58>
 8005e02:	2c00      	cmp	r4, #0
 8005e04:	d103      	bne.n	8005e0e <__lesf2+0x56>
 8005e06:	28ff      	cmp	r0, #255	@ 0xff
 8005e08:	d105      	bne.n	8005e16 <__lesf2+0x5e>
 8005e0a:	2d00      	cmp	r5, #0
 8005e0c:	d015      	beq.n	8005e3a <__lesf2+0x82>
 8005e0e:	2002      	movs	r0, #2
 8005e10:	bd30      	pop	{r4, r5, pc}
 8005e12:	2800      	cmp	r0, #0
 8005e14:	d106      	bne.n	8005e24 <__lesf2+0x6c>
 8005e16:	2001      	movs	r0, #1
 8005e18:	425b      	negs	r3, r3
 8005e1a:	4318      	orrs	r0, r3
 8005e1c:	e7f8      	b.n	8005e10 <__lesf2+0x58>
 8005e1e:	2c00      	cmp	r4, #0
 8005e20:	d0f6      	beq.n	8005e10 <__lesf2+0x58>
 8005e22:	e7f8      	b.n	8005e16 <__lesf2+0x5e>
 8005e24:	428b      	cmp	r3, r1
 8005e26:	d1f6      	bne.n	8005e16 <__lesf2+0x5e>
 8005e28:	4282      	cmp	r2, r0
 8005e2a:	dcf4      	bgt.n	8005e16 <__lesf2+0x5e>
 8005e2c:	dbe6      	blt.n	8005dfc <__lesf2+0x44>
 8005e2e:	42ac      	cmp	r4, r5
 8005e30:	d8f1      	bhi.n	8005e16 <__lesf2+0x5e>
 8005e32:	2000      	movs	r0, #0
 8005e34:	42ac      	cmp	r4, r5
 8005e36:	d2eb      	bcs.n	8005e10 <__lesf2+0x58>
 8005e38:	e7e0      	b.n	8005dfc <__lesf2+0x44>
 8005e3a:	2000      	movs	r0, #0
 8005e3c:	428b      	cmp	r3, r1
 8005e3e:	d1ea      	bne.n	8005e16 <__lesf2+0x5e>
 8005e40:	e7e6      	b.n	8005e10 <__lesf2+0x58>
 8005e42:	428b      	cmp	r3, r1
 8005e44:	d1e7      	bne.n	8005e16 <__lesf2+0x5e>
 8005e46:	e7f2      	b.n	8005e2e <__lesf2+0x76>

08005e48 <_init>:
 8005e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e4a:	46c0      	nop			@ (mov r8, r8)
 8005e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e4e:	bc08      	pop	{r3}
 8005e50:	469e      	mov	lr, r3
 8005e52:	4770      	bx	lr

08005e54 <_fini>:
 8005e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e56:	46c0      	nop			@ (mov r8, r8)
 8005e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e5a:	bc08      	pop	{r3}
 8005e5c:	469e      	mov	lr, r3
 8005e5e:	4770      	bx	lr
