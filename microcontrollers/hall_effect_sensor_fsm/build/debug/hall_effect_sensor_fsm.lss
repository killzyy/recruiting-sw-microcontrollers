
build/debug/hall_effect_sensor_fsm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007668  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000400  08007728  08007728  00008728  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b28  08007b28  00009068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08007b28  08007b28  00009068  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08007b28  08007b28  00009068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b28  08007b28  00008b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007b2c  08007b2c  00008b2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08007b30  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000488  20000068  08007b98  00009068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004f0  08007b98  000094f0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00009068  2**0
                  CONTENTS, READONLY
 12 .comment      00000038  00000000  00000000  00009090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011593  00000000  00000000  000090c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000286c  00000000  00000000  0001a65b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 000066f3  00000000  00000000  0001cec7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000a40  00000000  00000000  000235c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000008e3  00000000  00000000  00024000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cfe4  00000000  00000000  000248e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00003837  00000000  00000000  000318c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001910  00000000  00000000  00035100  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  00036a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <strlen>:
 80000c0:	2300      	movs	r3, #0
 80000c2:	5cc2      	ldrb	r2, [r0, r3]
 80000c4:	3301      	adds	r3, #1
 80000c6:	2a00      	cmp	r2, #0
 80000c8:	d1fb      	bne.n	80000c2 <strlen+0x2>
 80000ca:	1e58      	subs	r0, r3, #1
 80000cc:	4770      	bx	lr
	...

080000d0 <__gnu_thumb1_case_shi>:
 80000d0:	b403      	push	{r0, r1}
 80000d2:	4671      	mov	r1, lr
 80000d4:	0849      	lsrs	r1, r1, #1
 80000d6:	0040      	lsls	r0, r0, #1
 80000d8:	0049      	lsls	r1, r1, #1
 80000da:	5e09      	ldrsh	r1, [r1, r0]
 80000dc:	0049      	lsls	r1, r1, #1
 80000de:	448e      	add	lr, r1
 80000e0:	bc03      	pop	{r0, r1}
 80000e2:	4770      	bx	lr

080000e4 <__udivsi3>:
 80000e4:	2200      	movs	r2, #0
 80000e6:	0843      	lsrs	r3, r0, #1
 80000e8:	428b      	cmp	r3, r1
 80000ea:	d374      	bcc.n	80001d6 <__udivsi3+0xf2>
 80000ec:	0903      	lsrs	r3, r0, #4
 80000ee:	428b      	cmp	r3, r1
 80000f0:	d35f      	bcc.n	80001b2 <__udivsi3+0xce>
 80000f2:	0a03      	lsrs	r3, r0, #8
 80000f4:	428b      	cmp	r3, r1
 80000f6:	d344      	bcc.n	8000182 <__udivsi3+0x9e>
 80000f8:	0b03      	lsrs	r3, r0, #12
 80000fa:	428b      	cmp	r3, r1
 80000fc:	d328      	bcc.n	8000150 <__udivsi3+0x6c>
 80000fe:	0c03      	lsrs	r3, r0, #16
 8000100:	428b      	cmp	r3, r1
 8000102:	d30d      	bcc.n	8000120 <__udivsi3+0x3c>
 8000104:	22ff      	movs	r2, #255	@ 0xff
 8000106:	0209      	lsls	r1, r1, #8
 8000108:	ba12      	rev	r2, r2
 800010a:	0c03      	lsrs	r3, r0, #16
 800010c:	428b      	cmp	r3, r1
 800010e:	d302      	bcc.n	8000116 <__udivsi3+0x32>
 8000110:	1212      	asrs	r2, r2, #8
 8000112:	0209      	lsls	r1, r1, #8
 8000114:	d065      	beq.n	80001e2 <__udivsi3+0xfe>
 8000116:	0b03      	lsrs	r3, r0, #12
 8000118:	428b      	cmp	r3, r1
 800011a:	d319      	bcc.n	8000150 <__udivsi3+0x6c>
 800011c:	e000      	b.n	8000120 <__udivsi3+0x3c>
 800011e:	0a09      	lsrs	r1, r1, #8
 8000120:	0bc3      	lsrs	r3, r0, #15
 8000122:	428b      	cmp	r3, r1
 8000124:	d301      	bcc.n	800012a <__udivsi3+0x46>
 8000126:	03cb      	lsls	r3, r1, #15
 8000128:	1ac0      	subs	r0, r0, r3
 800012a:	4152      	adcs	r2, r2
 800012c:	0b83      	lsrs	r3, r0, #14
 800012e:	428b      	cmp	r3, r1
 8000130:	d301      	bcc.n	8000136 <__udivsi3+0x52>
 8000132:	038b      	lsls	r3, r1, #14
 8000134:	1ac0      	subs	r0, r0, r3
 8000136:	4152      	adcs	r2, r2
 8000138:	0b43      	lsrs	r3, r0, #13
 800013a:	428b      	cmp	r3, r1
 800013c:	d301      	bcc.n	8000142 <__udivsi3+0x5e>
 800013e:	034b      	lsls	r3, r1, #13
 8000140:	1ac0      	subs	r0, r0, r3
 8000142:	4152      	adcs	r2, r2
 8000144:	0b03      	lsrs	r3, r0, #12
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x6a>
 800014a:	030b      	lsls	r3, r1, #12
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0ac3      	lsrs	r3, r0, #11
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x76>
 8000156:	02cb      	lsls	r3, r1, #11
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0a83      	lsrs	r3, r0, #10
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x82>
 8000162:	028b      	lsls	r3, r1, #10
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0a43      	lsrs	r3, r0, #9
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x8e>
 800016e:	024b      	lsls	r3, r1, #9
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0a03      	lsrs	r3, r0, #8
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x9a>
 800017a:	020b      	lsls	r3, r1, #8
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	d2cd      	bcs.n	800011e <__udivsi3+0x3a>
 8000182:	09c3      	lsrs	r3, r0, #7
 8000184:	428b      	cmp	r3, r1
 8000186:	d301      	bcc.n	800018c <__udivsi3+0xa8>
 8000188:	01cb      	lsls	r3, r1, #7
 800018a:	1ac0      	subs	r0, r0, r3
 800018c:	4152      	adcs	r2, r2
 800018e:	0983      	lsrs	r3, r0, #6
 8000190:	428b      	cmp	r3, r1
 8000192:	d301      	bcc.n	8000198 <__udivsi3+0xb4>
 8000194:	018b      	lsls	r3, r1, #6
 8000196:	1ac0      	subs	r0, r0, r3
 8000198:	4152      	adcs	r2, r2
 800019a:	0943      	lsrs	r3, r0, #5
 800019c:	428b      	cmp	r3, r1
 800019e:	d301      	bcc.n	80001a4 <__udivsi3+0xc0>
 80001a0:	014b      	lsls	r3, r1, #5
 80001a2:	1ac0      	subs	r0, r0, r3
 80001a4:	4152      	adcs	r2, r2
 80001a6:	0903      	lsrs	r3, r0, #4
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xcc>
 80001ac:	010b      	lsls	r3, r1, #4
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	08c3      	lsrs	r3, r0, #3
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xd8>
 80001b8:	00cb      	lsls	r3, r1, #3
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0883      	lsrs	r3, r0, #2
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xe4>
 80001c4:	008b      	lsls	r3, r1, #2
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0843      	lsrs	r3, r0, #1
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xf0>
 80001d0:	004b      	lsls	r3, r1, #1
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	1a41      	subs	r1, r0, r1
 80001d8:	d200      	bcs.n	80001dc <__udivsi3+0xf8>
 80001da:	4601      	mov	r1, r0
 80001dc:	4152      	adcs	r2, r2
 80001de:	4610      	mov	r0, r2
 80001e0:	4770      	bx	lr
 80001e2:	e7ff      	b.n	80001e4 <__udivsi3+0x100>
 80001e4:	b501      	push	{r0, lr}
 80001e6:	2000      	movs	r0, #0
 80001e8:	f000 f8f0 	bl	80003cc <__aeabi_idiv0>
 80001ec:	bd02      	pop	{r1, pc}
 80001ee:	46c0      	nop			@ (mov r8, r8)

080001f0 <__aeabi_uidivmod>:
 80001f0:	2900      	cmp	r1, #0
 80001f2:	d0f7      	beq.n	80001e4 <__udivsi3+0x100>
 80001f4:	e776      	b.n	80000e4 <__udivsi3>
 80001f6:	4770      	bx	lr

080001f8 <__divsi3>:
 80001f8:	4603      	mov	r3, r0
 80001fa:	430b      	orrs	r3, r1
 80001fc:	d47f      	bmi.n	80002fe <__divsi3+0x106>
 80001fe:	2200      	movs	r2, #0
 8000200:	0843      	lsrs	r3, r0, #1
 8000202:	428b      	cmp	r3, r1
 8000204:	d374      	bcc.n	80002f0 <__divsi3+0xf8>
 8000206:	0903      	lsrs	r3, r0, #4
 8000208:	428b      	cmp	r3, r1
 800020a:	d35f      	bcc.n	80002cc <__divsi3+0xd4>
 800020c:	0a03      	lsrs	r3, r0, #8
 800020e:	428b      	cmp	r3, r1
 8000210:	d344      	bcc.n	800029c <__divsi3+0xa4>
 8000212:	0b03      	lsrs	r3, r0, #12
 8000214:	428b      	cmp	r3, r1
 8000216:	d328      	bcc.n	800026a <__divsi3+0x72>
 8000218:	0c03      	lsrs	r3, r0, #16
 800021a:	428b      	cmp	r3, r1
 800021c:	d30d      	bcc.n	800023a <__divsi3+0x42>
 800021e:	22ff      	movs	r2, #255	@ 0xff
 8000220:	0209      	lsls	r1, r1, #8
 8000222:	ba12      	rev	r2, r2
 8000224:	0c03      	lsrs	r3, r0, #16
 8000226:	428b      	cmp	r3, r1
 8000228:	d302      	bcc.n	8000230 <__divsi3+0x38>
 800022a:	1212      	asrs	r2, r2, #8
 800022c:	0209      	lsls	r1, r1, #8
 800022e:	d065      	beq.n	80002fc <__divsi3+0x104>
 8000230:	0b03      	lsrs	r3, r0, #12
 8000232:	428b      	cmp	r3, r1
 8000234:	d319      	bcc.n	800026a <__divsi3+0x72>
 8000236:	e000      	b.n	800023a <__divsi3+0x42>
 8000238:	0a09      	lsrs	r1, r1, #8
 800023a:	0bc3      	lsrs	r3, r0, #15
 800023c:	428b      	cmp	r3, r1
 800023e:	d301      	bcc.n	8000244 <__divsi3+0x4c>
 8000240:	03cb      	lsls	r3, r1, #15
 8000242:	1ac0      	subs	r0, r0, r3
 8000244:	4152      	adcs	r2, r2
 8000246:	0b83      	lsrs	r3, r0, #14
 8000248:	428b      	cmp	r3, r1
 800024a:	d301      	bcc.n	8000250 <__divsi3+0x58>
 800024c:	038b      	lsls	r3, r1, #14
 800024e:	1ac0      	subs	r0, r0, r3
 8000250:	4152      	adcs	r2, r2
 8000252:	0b43      	lsrs	r3, r0, #13
 8000254:	428b      	cmp	r3, r1
 8000256:	d301      	bcc.n	800025c <__divsi3+0x64>
 8000258:	034b      	lsls	r3, r1, #13
 800025a:	1ac0      	subs	r0, r0, r3
 800025c:	4152      	adcs	r2, r2
 800025e:	0b03      	lsrs	r3, r0, #12
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x70>
 8000264:	030b      	lsls	r3, r1, #12
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0ac3      	lsrs	r3, r0, #11
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x7c>
 8000270:	02cb      	lsls	r3, r1, #11
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0a83      	lsrs	r3, r0, #10
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x88>
 800027c:	028b      	lsls	r3, r1, #10
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0a43      	lsrs	r3, r0, #9
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x94>
 8000288:	024b      	lsls	r3, r1, #9
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0a03      	lsrs	r3, r0, #8
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0xa0>
 8000294:	020b      	lsls	r3, r1, #8
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	d2cd      	bcs.n	8000238 <__divsi3+0x40>
 800029c:	09c3      	lsrs	r3, r0, #7
 800029e:	428b      	cmp	r3, r1
 80002a0:	d301      	bcc.n	80002a6 <__divsi3+0xae>
 80002a2:	01cb      	lsls	r3, r1, #7
 80002a4:	1ac0      	subs	r0, r0, r3
 80002a6:	4152      	adcs	r2, r2
 80002a8:	0983      	lsrs	r3, r0, #6
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d301      	bcc.n	80002b2 <__divsi3+0xba>
 80002ae:	018b      	lsls	r3, r1, #6
 80002b0:	1ac0      	subs	r0, r0, r3
 80002b2:	4152      	adcs	r2, r2
 80002b4:	0943      	lsrs	r3, r0, #5
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d301      	bcc.n	80002be <__divsi3+0xc6>
 80002ba:	014b      	lsls	r3, r1, #5
 80002bc:	1ac0      	subs	r0, r0, r3
 80002be:	4152      	adcs	r2, r2
 80002c0:	0903      	lsrs	r3, r0, #4
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xd2>
 80002c6:	010b      	lsls	r3, r1, #4
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	08c3      	lsrs	r3, r0, #3
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xde>
 80002d2:	00cb      	lsls	r3, r1, #3
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0883      	lsrs	r3, r0, #2
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xea>
 80002de:	008b      	lsls	r3, r1, #2
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0843      	lsrs	r3, r0, #1
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xf6>
 80002ea:	004b      	lsls	r3, r1, #1
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	1a41      	subs	r1, r0, r1
 80002f2:	d200      	bcs.n	80002f6 <__divsi3+0xfe>
 80002f4:	4601      	mov	r1, r0
 80002f6:	4152      	adcs	r2, r2
 80002f8:	4610      	mov	r0, r2
 80002fa:	4770      	bx	lr
 80002fc:	e05d      	b.n	80003ba <__divsi3+0x1c2>
 80002fe:	0fca      	lsrs	r2, r1, #31
 8000300:	d000      	beq.n	8000304 <__divsi3+0x10c>
 8000302:	4249      	negs	r1, r1
 8000304:	1003      	asrs	r3, r0, #32
 8000306:	d300      	bcc.n	800030a <__divsi3+0x112>
 8000308:	4240      	negs	r0, r0
 800030a:	4053      	eors	r3, r2
 800030c:	2200      	movs	r2, #0
 800030e:	469c      	mov	ip, r3
 8000310:	0903      	lsrs	r3, r0, #4
 8000312:	428b      	cmp	r3, r1
 8000314:	d32d      	bcc.n	8000372 <__divsi3+0x17a>
 8000316:	0a03      	lsrs	r3, r0, #8
 8000318:	428b      	cmp	r3, r1
 800031a:	d312      	bcc.n	8000342 <__divsi3+0x14a>
 800031c:	22fc      	movs	r2, #252	@ 0xfc
 800031e:	0189      	lsls	r1, r1, #6
 8000320:	ba12      	rev	r2, r2
 8000322:	0a03      	lsrs	r3, r0, #8
 8000324:	428b      	cmp	r3, r1
 8000326:	d30c      	bcc.n	8000342 <__divsi3+0x14a>
 8000328:	0189      	lsls	r1, r1, #6
 800032a:	1192      	asrs	r2, r2, #6
 800032c:	428b      	cmp	r3, r1
 800032e:	d308      	bcc.n	8000342 <__divsi3+0x14a>
 8000330:	0189      	lsls	r1, r1, #6
 8000332:	1192      	asrs	r2, r2, #6
 8000334:	428b      	cmp	r3, r1
 8000336:	d304      	bcc.n	8000342 <__divsi3+0x14a>
 8000338:	0189      	lsls	r1, r1, #6
 800033a:	d03a      	beq.n	80003b2 <__divsi3+0x1ba>
 800033c:	1192      	asrs	r2, r2, #6
 800033e:	e000      	b.n	8000342 <__divsi3+0x14a>
 8000340:	0989      	lsrs	r1, r1, #6
 8000342:	09c3      	lsrs	r3, r0, #7
 8000344:	428b      	cmp	r3, r1
 8000346:	d301      	bcc.n	800034c <__divsi3+0x154>
 8000348:	01cb      	lsls	r3, r1, #7
 800034a:	1ac0      	subs	r0, r0, r3
 800034c:	4152      	adcs	r2, r2
 800034e:	0983      	lsrs	r3, r0, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d301      	bcc.n	8000358 <__divsi3+0x160>
 8000354:	018b      	lsls	r3, r1, #6
 8000356:	1ac0      	subs	r0, r0, r3
 8000358:	4152      	adcs	r2, r2
 800035a:	0943      	lsrs	r3, r0, #5
 800035c:	428b      	cmp	r3, r1
 800035e:	d301      	bcc.n	8000364 <__divsi3+0x16c>
 8000360:	014b      	lsls	r3, r1, #5
 8000362:	1ac0      	subs	r0, r0, r3
 8000364:	4152      	adcs	r2, r2
 8000366:	0903      	lsrs	r3, r0, #4
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x178>
 800036c:	010b      	lsls	r3, r1, #4
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	08c3      	lsrs	r3, r0, #3
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x184>
 8000378:	00cb      	lsls	r3, r1, #3
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0883      	lsrs	r3, r0, #2
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x190>
 8000384:	008b      	lsls	r3, r1, #2
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	d2d9      	bcs.n	8000340 <__divsi3+0x148>
 800038c:	0843      	lsrs	r3, r0, #1
 800038e:	428b      	cmp	r3, r1
 8000390:	d301      	bcc.n	8000396 <__divsi3+0x19e>
 8000392:	004b      	lsls	r3, r1, #1
 8000394:	1ac0      	subs	r0, r0, r3
 8000396:	4152      	adcs	r2, r2
 8000398:	1a41      	subs	r1, r0, r1
 800039a:	d200      	bcs.n	800039e <__divsi3+0x1a6>
 800039c:	4601      	mov	r1, r0
 800039e:	4663      	mov	r3, ip
 80003a0:	4152      	adcs	r2, r2
 80003a2:	105b      	asrs	r3, r3, #1
 80003a4:	4610      	mov	r0, r2
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x1b4>
 80003a8:	4240      	negs	r0, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d500      	bpl.n	80003b0 <__divsi3+0x1b8>
 80003ae:	4249      	negs	r1, r1
 80003b0:	4770      	bx	lr
 80003b2:	4663      	mov	r3, ip
 80003b4:	105b      	asrs	r3, r3, #1
 80003b6:	d300      	bcc.n	80003ba <__divsi3+0x1c2>
 80003b8:	4240      	negs	r0, r0
 80003ba:	b501      	push	{r0, lr}
 80003bc:	2000      	movs	r0, #0
 80003be:	f000 f805 	bl	80003cc <__aeabi_idiv0>
 80003c2:	bd02      	pop	{r1, pc}

080003c4 <__aeabi_idivmod>:
 80003c4:	2900      	cmp	r1, #0
 80003c6:	d0f8      	beq.n	80003ba <__divsi3+0x1c2>
 80003c8:	e716      	b.n	80001f8 <__divsi3>
 80003ca:	4770      	bx	lr

080003cc <__aeabi_idiv0>:
 80003cc:	4770      	bx	lr
 80003ce:	46c0      	nop			@ (mov r8, r8)

080003d0 <__aeabi_cdrcmple>:
 80003d0:	4684      	mov	ip, r0
 80003d2:	0010      	movs	r0, r2
 80003d4:	4662      	mov	r2, ip
 80003d6:	468c      	mov	ip, r1
 80003d8:	0019      	movs	r1, r3
 80003da:	4663      	mov	r3, ip
 80003dc:	e000      	b.n	80003e0 <__aeabi_cdcmpeq>
 80003de:	46c0      	nop			@ (mov r8, r8)

080003e0 <__aeabi_cdcmpeq>:
 80003e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80003e2:	f006 f99b 	bl	800671c <__ledf2>
 80003e6:	2800      	cmp	r0, #0
 80003e8:	d401      	bmi.n	80003ee <__aeabi_cdcmpeq+0xe>
 80003ea:	2100      	movs	r1, #0
 80003ec:	42c8      	cmn	r0, r1
 80003ee:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080003f0 <__aeabi_dcmpeq>:
 80003f0:	b510      	push	{r4, lr}
 80003f2:	f006 f8dd 	bl	80065b0 <__eqdf2>
 80003f6:	4240      	negs	r0, r0
 80003f8:	3001      	adds	r0, #1
 80003fa:	bd10      	pop	{r4, pc}

080003fc <__aeabi_dcmplt>:
 80003fc:	b510      	push	{r4, lr}
 80003fe:	f006 f98d 	bl	800671c <__ledf2>
 8000402:	2800      	cmp	r0, #0
 8000404:	db01      	blt.n	800040a <__aeabi_dcmplt+0xe>
 8000406:	2000      	movs	r0, #0
 8000408:	bd10      	pop	{r4, pc}
 800040a:	2001      	movs	r0, #1
 800040c:	bd10      	pop	{r4, pc}
 800040e:	46c0      	nop			@ (mov r8, r8)

08000410 <__aeabi_dcmple>:
 8000410:	b510      	push	{r4, lr}
 8000412:	f006 f983 	bl	800671c <__ledf2>
 8000416:	2800      	cmp	r0, #0
 8000418:	dd01      	ble.n	800041e <__aeabi_dcmple+0xe>
 800041a:	2000      	movs	r0, #0
 800041c:	bd10      	pop	{r4, pc}
 800041e:	2001      	movs	r0, #1
 8000420:	bd10      	pop	{r4, pc}
 8000422:	46c0      	nop			@ (mov r8, r8)

08000424 <__aeabi_dcmpgt>:
 8000424:	b510      	push	{r4, lr}
 8000426:	f006 f909 	bl	800663c <__gedf2>
 800042a:	2800      	cmp	r0, #0
 800042c:	dc01      	bgt.n	8000432 <__aeabi_dcmpgt+0xe>
 800042e:	2000      	movs	r0, #0
 8000430:	bd10      	pop	{r4, pc}
 8000432:	2001      	movs	r0, #1
 8000434:	bd10      	pop	{r4, pc}
 8000436:	46c0      	nop			@ (mov r8, r8)

08000438 <__aeabi_dcmpge>:
 8000438:	b510      	push	{r4, lr}
 800043a:	f006 f8ff 	bl	800663c <__gedf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	da01      	bge.n	8000446 <__aeabi_dcmpge+0xe>
 8000442:	2000      	movs	r0, #0
 8000444:	bd10      	pop	{r4, pc}
 8000446:	2001      	movs	r0, #1
 8000448:	bd10      	pop	{r4, pc}
 800044a:	46c0      	nop			@ (mov r8, r8)

0800044c <__clzsi2>:
 800044c:	211c      	movs	r1, #28
 800044e:	2301      	movs	r3, #1
 8000450:	041b      	lsls	r3, r3, #16
 8000452:	4298      	cmp	r0, r3
 8000454:	d301      	bcc.n	800045a <__clzsi2+0xe>
 8000456:	0c00      	lsrs	r0, r0, #16
 8000458:	3910      	subs	r1, #16
 800045a:	0a1b      	lsrs	r3, r3, #8
 800045c:	4298      	cmp	r0, r3
 800045e:	d301      	bcc.n	8000464 <__clzsi2+0x18>
 8000460:	0a00      	lsrs	r0, r0, #8
 8000462:	3908      	subs	r1, #8
 8000464:	091b      	lsrs	r3, r3, #4
 8000466:	4298      	cmp	r0, r3
 8000468:	d301      	bcc.n	800046e <__clzsi2+0x22>
 800046a:	0900      	lsrs	r0, r0, #4
 800046c:	3904      	subs	r1, #4
 800046e:	a202      	add	r2, pc, #8	@ (adr r2, 8000478 <__clzsi2+0x2c>)
 8000470:	5c10      	ldrb	r0, [r2, r0]
 8000472:	1840      	adds	r0, r0, r1
 8000474:	4770      	bx	lr
 8000476:	46c0      	nop			@ (mov r8, r8)
 8000478:	02020304 	.word	0x02020304
 800047c:	01010101 	.word	0x01010101
	...

08000488 <__do_global_dtors_aux>:
 8000488:	b510      	push	{r4, lr}
 800048a:	4c06      	ldr	r4, [pc, #24]	@ (80004a4 <__do_global_dtors_aux+0x1c>)
 800048c:	7823      	ldrb	r3, [r4, #0]
 800048e:	2b00      	cmp	r3, #0
 8000490:	d107      	bne.n	80004a2 <__do_global_dtors_aux+0x1a>
 8000492:	4b05      	ldr	r3, [pc, #20]	@ (80004a8 <__do_global_dtors_aux+0x20>)
 8000494:	2b00      	cmp	r3, #0
 8000496:	d002      	beq.n	800049e <__do_global_dtors_aux+0x16>
 8000498:	4804      	ldr	r0, [pc, #16]	@ (80004ac <__do_global_dtors_aux+0x24>)
 800049a:	e000      	b.n	800049e <__do_global_dtors_aux+0x16>
 800049c:	bf00      	nop
 800049e:	2301      	movs	r3, #1
 80004a0:	7023      	strb	r3, [r4, #0]
 80004a2:	bd10      	pop	{r4, pc}
 80004a4:	20000068 	.word	0x20000068
 80004a8:	00000000 	.word	0x00000000
 80004ac:	08007710 	.word	0x08007710

080004b0 <frame_dummy>:
 80004b0:	4b04      	ldr	r3, [pc, #16]	@ (80004c4 <frame_dummy+0x14>)
 80004b2:	b510      	push	{r4, lr}
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d003      	beq.n	80004c0 <frame_dummy+0x10>
 80004b8:	4903      	ldr	r1, [pc, #12]	@ (80004c8 <frame_dummy+0x18>)
 80004ba:	4804      	ldr	r0, [pc, #16]	@ (80004cc <frame_dummy+0x1c>)
 80004bc:	e000      	b.n	80004c0 <frame_dummy+0x10>
 80004be:	bf00      	nop
 80004c0:	bd10      	pop	{r4, pc}
 80004c2:	46c0      	nop			@ (mov r8, r8)
 80004c4:	00000000 	.word	0x00000000
 80004c8:	2000006c 	.word	0x2000006c
 80004cc:	08007710 	.word	0x08007710

080004d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004d0:	b510      	push	{r4, lr}
 80004d2:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d4:	ac03      	add	r4, sp, #12
 80004d6:	2214      	movs	r2, #20
 80004d8:	2100      	movs	r1, #0
 80004da:	0020      	movs	r0, r4
 80004dc:	f002 fae0 	bl	8002aa0 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004e0:	4b10      	ldr	r3, [pc, #64]	@ (8000524 <MX_GPIO_Init+0x54>)
 80004e2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80004e4:	2204      	movs	r2, #4
 80004e6:	4311      	orrs	r1, r2
 80004e8:	6359      	str	r1, [r3, #52]	@ 0x34
 80004ea:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80004ec:	400a      	ands	r2, r1
 80004ee:	9200      	str	r2, [sp, #0]
 80004f0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004f2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80004f4:	2220      	movs	r2, #32
 80004f6:	4311      	orrs	r1, r2
 80004f8:	6359      	str	r1, [r3, #52]	@ 0x34
 80004fa:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80004fc:	400a      	ands	r2, r1
 80004fe:	9201      	str	r2, [sp, #4]
 8000500:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000502:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000504:	2201      	movs	r2, #1
 8000506:	4311      	orrs	r1, r2
 8000508:	6359      	str	r1, [r3, #52]	@ 0x34
 800050a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800050c:	4013      	ands	r3, r2
 800050e:	9302      	str	r3, [sp, #8]
 8000510:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin : HALL_DIGITAL_Pin */
  GPIO_InitStruct.Pin = HALL_DIGITAL_Pin;
 8000512:	9203      	str	r2, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000514:	9205      	str	r2, [sp, #20]
  HAL_GPIO_Init(HALL_DIGITAL_GPIO_Port, &GPIO_InitStruct);
 8000516:	20a0      	movs	r0, #160	@ 0xa0
 8000518:	0021      	movs	r1, r4
 800051a:	05c0      	lsls	r0, r0, #23
 800051c:	f001 f884 	bl	8001628 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000520:	b008      	add	sp, #32
 8000522:	bd10      	pop	{r4, pc}
 8000524:	40021000 	.word	0x40021000

08000528 <MX_DMA_Init>:
{
 8000528:	b500      	push	{lr}
 800052a:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 800052c:	4a09      	ldr	r2, [pc, #36]	@ (8000554 <MX_DMA_Init+0x2c>)
 800052e:	6b91      	ldr	r1, [r2, #56]	@ 0x38
 8000530:	2301      	movs	r3, #1
 8000532:	4319      	orrs	r1, r3
 8000534:	6391      	str	r1, [r2, #56]	@ 0x38
 8000536:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8000538:	4013      	ands	r3, r2
 800053a:	9301      	str	r3, [sp, #4]
 800053c:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800053e:	2200      	movs	r2, #0
 8000540:	2100      	movs	r1, #0
 8000542:	2009      	movs	r0, #9
 8000544:	f000 febc 	bl	80012c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000548:	2009      	movs	r0, #9
 800054a:	f000 febd 	bl	80012c8 <HAL_NVIC_EnableIRQ>
}
 800054e:	b003      	add	sp, #12
 8000550:	bd00      	pop	{pc}
 8000552:	46c0      	nop			@ (mov r8, r8)
 8000554:	40021000 	.word	0x40021000

08000558 <toMilliVolt>:
{
 8000558:	b510      	push	{r4, lr}
  return (val * 5000) / 4095;
 800055a:	4b03      	ldr	r3, [pc, #12]	@ (8000568 <toMilliVolt+0x10>)
 800055c:	4358      	muls	r0, r3
 800055e:	4903      	ldr	r1, [pc, #12]	@ (800056c <toMilliVolt+0x14>)
 8000560:	f7ff fe4a 	bl	80001f8 <__divsi3>
 8000564:	b280      	uxth	r0, r0
}
 8000566:	bd10      	pop	{r4, pc}
 8000568:	00001388 	.word	0x00001388
 800056c:	00000fff 	.word	0x00000fff

08000570 <gaussian_noise>:
{
 8000570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000572:	b085      	sub	sp, #20
 8000574:	9000      	str	r0, [sp, #0]
 8000576:	9101      	str	r1, [sp, #4]
 8000578:	9202      	str	r2, [sp, #8]
 800057a:	9303      	str	r3, [sp, #12]
  double u1 = ((double)rand() + 1) / ((double)RAND_MAX + 1);
 800057c:	f002 f98e 	bl	800289c <rand>
 8000580:	f007 f898 	bl	80076b4 <__aeabi_i2d>
 8000584:	2200      	movs	r2, #0
 8000586:	4b20      	ldr	r3, [pc, #128]	@ (8000608 <gaussian_noise+0x98>)
 8000588:	f005 f8da 	bl	8005740 <__aeabi_dadd>
 800058c:	2200      	movs	r2, #0
 800058e:	23f8      	movs	r3, #248	@ 0xf8
 8000590:	059b      	lsls	r3, r3, #22
 8000592:	f006 f931 	bl	80067f8 <__aeabi_dmul>
 8000596:	0004      	movs	r4, r0
 8000598:	000d      	movs	r5, r1
  double u2 = ((double)rand() + 1) / ((double)RAND_MAX + 1);
 800059a:	f002 f97f 	bl	800289c <rand>
 800059e:	f007 f889 	bl	80076b4 <__aeabi_i2d>
 80005a2:	2200      	movs	r2, #0
 80005a4:	4b18      	ldr	r3, [pc, #96]	@ (8000608 <gaussian_noise+0x98>)
 80005a6:	f005 f8cb 	bl	8005740 <__aeabi_dadd>
 80005aa:	2200      	movs	r2, #0
 80005ac:	23f8      	movs	r3, #248	@ 0xf8
 80005ae:	059b      	lsls	r3, r3, #22
 80005b0:	f006 f922 	bl	80067f8 <__aeabi_dmul>
 80005b4:	0006      	movs	r6, r0
 80005b6:	000f      	movs	r7, r1
  double z0 = sqrt(-2.0f * log(u1)) * cos(2 * M_PI * u2);
 80005b8:	0020      	movs	r0, r4
 80005ba:	0029      	movs	r1, r5
 80005bc:	f003 fbb4 	bl	8003d28 <log>
 80005c0:	2200      	movs	r2, #0
 80005c2:	23c0      	movs	r3, #192	@ 0xc0
 80005c4:	061b      	lsls	r3, r3, #24
 80005c6:	f006 f917 	bl	80067f8 <__aeabi_dmul>
 80005ca:	f003 fbe3 	bl	8003d94 <sqrt>
 80005ce:	0004      	movs	r4, r0
 80005d0:	000d      	movs	r5, r1
 80005d2:	4a0e      	ldr	r2, [pc, #56]	@ (800060c <gaussian_noise+0x9c>)
 80005d4:	4b0e      	ldr	r3, [pc, #56]	@ (8000610 <gaussian_noise+0xa0>)
 80005d6:	0030      	movs	r0, r6
 80005d8:	0039      	movs	r1, r7
 80005da:	f006 f90d 	bl	80067f8 <__aeabi_dmul>
 80005de:	f003 fc01 	bl	8003de4 <cos>
 80005e2:	0002      	movs	r2, r0
 80005e4:	000b      	movs	r3, r1
 80005e6:	0020      	movs	r0, r4
 80005e8:	0029      	movs	r1, r5
 80005ea:	f006 f905 	bl	80067f8 <__aeabi_dmul>
  double noise = z0 * stddev + mean;
 80005ee:	9a02      	ldr	r2, [sp, #8]
 80005f0:	9b03      	ldr	r3, [sp, #12]
 80005f2:	f006 f901 	bl	80067f8 <__aeabi_dmul>
 80005f6:	9a00      	ldr	r2, [sp, #0]
 80005f8:	9b01      	ldr	r3, [sp, #4]
 80005fa:	f005 f8a1 	bl	8005740 <__aeabi_dadd>
  return lround(noise);
 80005fe:	f003 fb47 	bl	8003c90 <lround>
}
 8000602:	b005      	add	sp, #20
 8000604:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000606:	46c0      	nop			@ (mov r8, r8)
 8000608:	3ff00000 	.word	0x3ff00000
 800060c:	54442d18 	.word	0x54442d18
 8000610:	401921fb 	.word	0x401921fb

08000614 <correct>:
  if (val < 0) { return (uint16_t)0; }
 8000614:	2800      	cmp	r0, #0
 8000616:	db04      	blt.n	8000622 <correct+0xe>
  if (val > 5000) { return (uint16_t)5000; }
 8000618:	4b04      	ldr	r3, [pc, #16]	@ (800062c <correct+0x18>)
 800061a:	4298      	cmp	r0, r3
 800061c:	dc03      	bgt.n	8000626 <correct+0x12>
  return val;
 800061e:	b280      	uxth	r0, r0
}
 8000620:	4770      	bx	lr
  if (val < 0) { return (uint16_t)0; }
 8000622:	2000      	movs	r0, #0
 8000624:	e7fc      	b.n	8000620 <correct+0xc>
  if (val > 5000) { return (uint16_t)5000; }
 8000626:	4801      	ldr	r0, [pc, #4]	@ (800062c <correct+0x18>)
 8000628:	e7fa      	b.n	8000620 <correct+0xc>
 800062a:	46c0      	nop			@ (mov r8, r8)
 800062c:	00001388 	.word	0x00001388

08000630 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000632:	46ce      	mov	lr, r9
 8000634:	4647      	mov	r7, r8
 8000636:	b580      	push	{r7, lr}
 8000638:	b093      	sub	sp, #76	@ 0x4c
  if (hadc->Instance == ADC1)
 800063a:	6802      	ldr	r2, [r0, #0]
 800063c:	4b27      	ldr	r3, [pc, #156]	@ (80006dc <HAL_ADC_ConvCpltCallback+0xac>)
 800063e:	429a      	cmp	r2, r3
 8000640:	d004      	beq.n	800064c <HAL_ADC_ConvCpltCallback+0x1c>
    // molto meno fluido, è comunque possibile utilizzare i valori interi e modificare lo script
    // di Python per far avvenire tutto nel mondo dei numeri interi, ma non consiglio :P
    snprintf(msg, ADC_BUF_LEN, "%u,%u,%u\r\n", noisy_val, filter_out, digital_val);
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
  }
}
 8000642:	b013      	add	sp, #76	@ 0x4c
 8000644:	bcc0      	pop	{r6, r7}
 8000646:	46b9      	mov	r9, r7
 8000648:	46b0      	mov	r8, r6
 800064a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint16_t analog_val = adc_buf[0];
 800064c:	4b24      	ldr	r3, [pc, #144]	@ (80006e0 <HAL_ADC_ConvCpltCallback+0xb0>)
 800064e:	8818      	ldrh	r0, [r3, #0]
    uint16_t analog_mv = toMilliVolt(analog_val);
 8000650:	f7ff ff82 	bl	8000558 <toMilliVolt>
 8000654:	0004      	movs	r4, r0
    uint16_t noisy_val = correct(analog_mv + gaussian_noise(0.0, 66.7));
 8000656:	4a23      	ldr	r2, [pc, #140]	@ (80006e4 <HAL_ADC_ConvCpltCallback+0xb4>)
 8000658:	4b23      	ldr	r3, [pc, #140]	@ (80006e8 <HAL_ADC_ConvCpltCallback+0xb8>)
 800065a:	2000      	movs	r0, #0
 800065c:	2100      	movs	r1, #0
 800065e:	f7ff ff87 	bl	8000570 <gaussian_noise>
 8000662:	1820      	adds	r0, r4, r0
 8000664:	f7ff ffd6 	bl	8000614 <correct>
 8000668:	0005      	movs	r5, r0
    GPIO_PinState digital_val = HAL_GPIO_ReadPin(HALL_DIGITAL_GPIO_Port, HALL_DIGITAL_Pin);
 800066a:	20a0      	movs	r0, #160	@ 0xa0
 800066c:	2101      	movs	r1, #1
 800066e:	05c0      	lsls	r0, r0, #23
 8000670:	f001 f8b8 	bl	80017e4 <HAL_GPIO_ReadPin>
 8000674:	4680      	mov	r8, r0
    sum += noisy_val - filter_buf[counter];
 8000676:	4f1d      	ldr	r7, [pc, #116]	@ (80006ec <HAL_ADC_ConvCpltCallback+0xbc>)
 8000678:	883c      	ldrh	r4, [r7, #0]
 800067a:	4b1d      	ldr	r3, [pc, #116]	@ (80006f0 <HAL_ADC_ConvCpltCallback+0xc0>)
 800067c:	0062      	lsls	r2, r4, #1
 800067e:	4691      	mov	r9, r2
 8000680:	001e      	movs	r6, r3
 8000682:	5ad0      	ldrh	r0, [r2, r3]
 8000684:	1a28      	subs	r0, r5, r0
 8000686:	4b1b      	ldr	r3, [pc, #108]	@ (80006f4 <HAL_ADC_ConvCpltCallback+0xc4>)
 8000688:	681a      	ldr	r2, [r3, #0]
 800068a:	1880      	adds	r0, r0, r2
 800068c:	6018      	str	r0, [r3, #0]
    filter_out = sum / FILTER_LEN;
 800068e:	2196      	movs	r1, #150	@ 0x96
 8000690:	f7ff fd28 	bl	80000e4 <__udivsi3>
 8000694:	4b18      	ldr	r3, [pc, #96]	@ (80006f8 <HAL_ADC_ConvCpltCallback+0xc8>)
 8000696:	8018      	strh	r0, [r3, #0]
    filter_buf[counter] = noisy_val;
 8000698:	464b      	mov	r3, r9
 800069a:	539d      	strh	r5, [r3, r6]
    counter++;
 800069c:	3401      	adds	r4, #1
 800069e:	b2a2      	uxth	r2, r4
 80006a0:	803a      	strh	r2, [r7, #0]
    if (counter == FILTER_LEN) { counter = 0; }
 80006a2:	2a96      	cmp	r2, #150	@ 0x96
 80006a4:	d016      	beq.n	80006d4 <HAL_ADC_ConvCpltCallback+0xa4>
    snprintf(msg, ADC_BUF_LEN, "%u,%u,%u\r\n", noisy_val, filter_out, digital_val);
 80006a6:	4a15      	ldr	r2, [pc, #84]	@ (80006fc <HAL_ADC_ConvCpltCallback+0xcc>)
 80006a8:	ac02      	add	r4, sp, #8
 80006aa:	4643      	mov	r3, r8
 80006ac:	9301      	str	r3, [sp, #4]
 80006ae:	0401      	lsls	r1, r0, #16
 80006b0:	0c09      	lsrs	r1, r1, #16
 80006b2:	9100      	str	r1, [sp, #0]
 80006b4:	002b      	movs	r3, r5
 80006b6:	2140      	movs	r1, #64	@ 0x40
 80006b8:	0020      	movs	r0, r4
 80006ba:	f002 f88d 	bl	80027d8 <sniprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80006be:	0020      	movs	r0, r4
 80006c0:	f7ff fcfe 	bl	80000c0 <strlen>
 80006c4:	2301      	movs	r3, #1
 80006c6:	b282      	uxth	r2, r0
 80006c8:	480d      	ldr	r0, [pc, #52]	@ (8000700 <HAL_ADC_ConvCpltCallback+0xd0>)
 80006ca:	425b      	negs	r3, r3
 80006cc:	0021      	movs	r1, r4
 80006ce:	f001 fe24 	bl	800231a <HAL_UART_Transmit>
}
 80006d2:	e7b6      	b.n	8000642 <HAL_ADC_ConvCpltCallback+0x12>
    if (counter == FILTER_LEN) { counter = 0; }
 80006d4:	2200      	movs	r2, #0
 80006d6:	803a      	strh	r2, [r7, #0]
 80006d8:	e7e5      	b.n	80006a6 <HAL_ADC_ConvCpltCallback+0x76>
 80006da:	46c0      	nop			@ (mov r8, r8)
 80006dc:	40012400 	.word	0x40012400
 80006e0:	200001bc 	.word	0x200001bc
 80006e4:	cccccccd 	.word	0xcccccccd
 80006e8:	4050accc 	.word	0x4050accc
 80006ec:	20000088 	.word	0x20000088
 80006f0:	2000008c 	.word	0x2000008c
 80006f4:	20000084 	.word	0x20000084
 80006f8:	200001b8 	.word	0x200001b8
 80006fc:	08007728 	.word	0x08007728
 8000700:	2000023c 	.word	0x2000023c

08000704 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000704:	b510      	push	{r4, lr}
 8000706:	b082      	sub	sp, #8
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000708:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
    char msg[] = "[ERROR]";
 800070a:	4b07      	ldr	r3, [pc, #28]	@ (8000728 <Error_Handler+0x24>)
 800070c:	466a      	mov	r2, sp
 800070e:	cb03      	ldmia	r3!, {r0, r1}
 8000710:	c203      	stmia	r2!, {r0, r1}
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000712:	4668      	mov	r0, sp
 8000714:	f7ff fcd4 	bl	80000c0 <strlen>
 8000718:	2301      	movs	r3, #1
 800071a:	b282      	uxth	r2, r0
 800071c:	4803      	ldr	r0, [pc, #12]	@ (800072c <Error_Handler+0x28>)
 800071e:	425b      	negs	r3, r3
 8000720:	4669      	mov	r1, sp
 8000722:	f001 fdfa 	bl	800231a <HAL_UART_Transmit>
  while (1)
 8000726:	e7f0      	b.n	800070a <Error_Handler+0x6>
 8000728:	08007734 	.word	0x08007734
 800072c:	2000023c 	.word	0x2000023c

08000730 <MX_ADC1_Init>:
{
 8000730:	b500      	push	{lr}
 8000732:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8000734:	220c      	movs	r2, #12
 8000736:	2100      	movs	r1, #0
 8000738:	a801      	add	r0, sp, #4
 800073a:	f002 f9b1 	bl	8002aa0 <memset>
  hadc1.Instance = ADC1;
 800073e:	4818      	ldr	r0, [pc, #96]	@ (80007a0 <MX_ADC1_Init+0x70>)
 8000740:	4b18      	ldr	r3, [pc, #96]	@ (80007a4 <MX_ADC1_Init+0x74>)
 8000742:	6003      	str	r3, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000744:	2380      	movs	r3, #128	@ 0x80
 8000746:	05db      	lsls	r3, r3, #23
 8000748:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800074a:	2300      	movs	r3, #0
 800074c:	6083      	str	r3, [r0, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800074e:	60c3      	str	r3, [r0, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_SEQ_FIXED;
 8000750:	2280      	movs	r2, #128	@ 0x80
 8000752:	0612      	lsls	r2, r2, #24
 8000754:	6102      	str	r2, [r0, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000756:	2204      	movs	r2, #4
 8000758:	6142      	str	r2, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800075a:	7603      	strb	r3, [r0, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800075c:	7643      	strb	r3, [r0, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800075e:	3a03      	subs	r2, #3
 8000760:	7682      	strb	r2, [r0, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000762:	61c2      	str	r2, [r0, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000764:	6243      	str	r3, [r0, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000766:	6283      	str	r3, [r0, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000768:	212c      	movs	r1, #44	@ 0x2c
 800076a:	5442      	strb	r2, [r0, r1]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800076c:	6303      	str	r3, [r0, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 800076e:	6343      	str	r3, [r0, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000770:	323b      	adds	r2, #59	@ 0x3b
 8000772:	5483      	strb	r3, [r0, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000774:	64c3      	str	r3, [r0, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000776:	f000 f8dd 	bl	8000934 <HAL_ADC_Init>
 800077a:	2800      	cmp	r0, #0
 800077c:	d10b      	bne.n	8000796 <MX_ADC1_Init+0x66>
  sConfig.Channel = ADC_CHANNEL_1;
 800077e:	a901      	add	r1, sp, #4
 8000780:	4b09      	ldr	r3, [pc, #36]	@ (80007a8 <MX_ADC1_Init+0x78>)
 8000782:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000784:	2301      	movs	r3, #1
 8000786:	604b      	str	r3, [r1, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000788:	4805      	ldr	r0, [pc, #20]	@ (80007a0 <MX_ADC1_Init+0x70>)
 800078a:	f000 fa47 	bl	8000c1c <HAL_ADC_ConfigChannel>
 800078e:	2800      	cmp	r0, #0
 8000790:	d103      	bne.n	800079a <MX_ADC1_Init+0x6a>
}
 8000792:	b005      	add	sp, #20
 8000794:	bd00      	pop	{pc}
    Error_Handler();
 8000796:	f7ff ffb5 	bl	8000704 <Error_Handler>
    Error_Handler();
 800079a:	f7ff ffb3 	bl	8000704 <Error_Handler>
 800079e:	46c0      	nop			@ (mov r8, r8)
 80007a0:	2000032c 	.word	0x2000032c
 80007a4:	40012400 	.word	0x40012400
 80007a8:	04000002 	.word	0x04000002

080007ac <MX_USART2_UART_Init>:
{
 80007ac:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 80007ae:	480c      	ldr	r0, [pc, #48]	@ (80007e0 <MX_USART2_UART_Init+0x34>)
 80007b0:	4b0c      	ldr	r3, [pc, #48]	@ (80007e4 <MX_USART2_UART_Init+0x38>)
 80007b2:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 80007b4:	23e1      	movs	r3, #225	@ 0xe1
 80007b6:	025b      	lsls	r3, r3, #9
 80007b8:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ba:	2300      	movs	r3, #0
 80007bc:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007be:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007c0:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007c2:	220c      	movs	r2, #12
 80007c4:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007c6:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c8:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ca:	6203      	str	r3, [r0, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007cc:	6243      	str	r3, [r0, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007ce:	6283      	str	r3, [r0, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007d0:	f001 fe8a 	bl	80024e8 <HAL_UART_Init>
 80007d4:	2800      	cmp	r0, #0
 80007d6:	d100      	bne.n	80007da <MX_USART2_UART_Init+0x2e>
}
 80007d8:	bd10      	pop	{r4, pc}
    Error_Handler();
 80007da:	f7ff ff93 	bl	8000704 <Error_Handler>
 80007de:	46c0      	nop			@ (mov r8, r8)
 80007e0:	2000023c 	.word	0x2000023c
 80007e4:	40004400 	.word	0x40004400

080007e8 <SystemClock_Config>:
{
 80007e8:	b510      	push	{r4, lr}
 80007ea:	b08c      	sub	sp, #48	@ 0x30
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ec:	ac05      	add	r4, sp, #20
 80007ee:	221c      	movs	r2, #28
 80007f0:	2100      	movs	r1, #0
 80007f2:	0020      	movs	r0, r4
 80007f4:	f002 f954 	bl	8002aa0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f8:	2214      	movs	r2, #20
 80007fa:	2100      	movs	r1, #0
 80007fc:	4668      	mov	r0, sp
 80007fe:	f002 f94f 	bl	8002aa0 <memset>
  __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_1);
 8000802:	4912      	ldr	r1, [pc, #72]	@ (800084c <SystemClock_Config+0x64>)
 8000804:	680b      	ldr	r3, [r1, #0]
 8000806:	2207      	movs	r2, #7
 8000808:	4393      	bics	r3, r2
 800080a:	3a06      	subs	r2, #6
 800080c:	4313      	orrs	r3, r2
 800080e:	600b      	str	r3, [r1, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000810:	9205      	str	r2, [sp, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000812:	2380      	movs	r3, #128	@ 0x80
 8000814:	025b      	lsls	r3, r3, #9
 8000816:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000818:	0020      	movs	r0, r4
 800081a:	f001 f897 	bl	800194c <HAL_RCC_OscConfig>
 800081e:	2800      	cmp	r0, #0
 8000820:	d10f      	bne.n	8000842 <SystemClock_Config+0x5a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000822:	4668      	mov	r0, sp
 8000824:	2307      	movs	r3, #7
 8000826:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000828:	3b06      	subs	r3, #6
 800082a:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800082c:	2300      	movs	r3, #0
 800082e:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000830:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000832:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000834:	2101      	movs	r1, #1
 8000836:	f001 fa15 	bl	8001c64 <HAL_RCC_ClockConfig>
 800083a:	2800      	cmp	r0, #0
 800083c:	d103      	bne.n	8000846 <SystemClock_Config+0x5e>
}
 800083e:	b00c      	add	sp, #48	@ 0x30
 8000840:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000842:	f7ff ff5f 	bl	8000704 <Error_Handler>
    Error_Handler();
 8000846:	f7ff ff5d 	bl	8000704 <Error_Handler>
 800084a:	46c0      	nop			@ (mov r8, r8)
 800084c:	40022000 	.word	0x40022000

08000850 <main>:
{
 8000850:	b510      	push	{r4, lr}
  HAL_Init();
 8000852:	f000 f851 	bl	80008f8 <HAL_Init>
  SystemClock_Config();
 8000856:	f7ff ffc7 	bl	80007e8 <SystemClock_Config>
  MX_GPIO_Init();
 800085a:	f7ff fe39 	bl	80004d0 <MX_GPIO_Init>
  MX_DMA_Init();
 800085e:	f7ff fe63 	bl	8000528 <MX_DMA_Init>
  MX_ADC1_Init();
 8000862:	f7ff ff65 	bl	8000730 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000866:	f7ff ffa1 	bl	80007ac <MX_USART2_UART_Init>
  srand(time(NULL));
 800086a:	2000      	movs	r0, #0
 800086c:	f002 f94a 	bl	8002b04 <time>
 8000870:	f001 ffe6 	bl	8002840 <srand>
  HAL_ADCEx_Calibration_Start(&hadc1);
 8000874:	4c08      	ldr	r4, [pc, #32]	@ (8000898 <main+0x48>)
 8000876:	0020      	movs	r0, r4
 8000878:	f000 fc18 	bl	80010ac <HAL_ADCEx_Calibration_Start>
  BSP_LED_Init(LED_GREEN);
 800087c:	2000      	movs	r0, #0
 800087e:	f001 fe81 	bl	8002584 <BSP_LED_Init>
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000882:	2101      	movs	r1, #1
 8000884:	2000      	movs	r0, #0
 8000886:	f001 febf 	bl	8002608 <BSP_PB_Init>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, ADC_BUF_LEN);
 800088a:	4904      	ldr	r1, [pc, #16]	@ (800089c <main+0x4c>)
 800088c:	2240      	movs	r2, #64	@ 0x40
 800088e:	0020      	movs	r0, r4
 8000890:	f000 fb68 	bl	8000f64 <HAL_ADC_Start_DMA>
  while (1)
 8000894:	e7fe      	b.n	8000894 <main+0x44>
 8000896:	46c0      	nop			@ (mov r8, r8)
 8000898:	2000032c 	.word	0x2000032c
 800089c:	200001bc 	.word	0x200001bc

080008a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008a0:	b510      	push	{r4, lr}
 80008a2:	0004      	movs	r4, r0
  HAL_StatusTypeDef  status = HAL_OK;

  if ((uint32_t)uwTickFreq != 0UL)
 80008a4:	4b11      	ldr	r3, [pc, #68]	@ (80008ec <HAL_InitTick+0x4c>)
 80008a6:	7819      	ldrb	r1, [r3, #0]
 80008a8:	2900      	cmp	r1, #0
 80008aa:	d101      	bne.n	80008b0 <HAL_InitTick+0x10>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 80008ac:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80008ae:	bd10      	pop	{r4, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 80008b0:	20fa      	movs	r0, #250	@ 0xfa
 80008b2:	0080      	lsls	r0, r0, #2
 80008b4:	f7ff fc16 	bl	80000e4 <__udivsi3>
 80008b8:	0001      	movs	r1, r0
 80008ba:	4b0d      	ldr	r3, [pc, #52]	@ (80008f0 <HAL_InitTick+0x50>)
 80008bc:	6818      	ldr	r0, [r3, #0]
 80008be:	f7ff fc11 	bl	80000e4 <__udivsi3>
 80008c2:	f000 fd0d 	bl	80012e0 <HAL_SYSTICK_Config>
 80008c6:	2800      	cmp	r0, #0
 80008c8:	d10d      	bne.n	80008e6 <HAL_InitTick+0x46>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008ca:	2c03      	cmp	r4, #3
 80008cc:	d901      	bls.n	80008d2 <HAL_InitTick+0x32>
        status = HAL_ERROR;
 80008ce:	2001      	movs	r0, #1
 80008d0:	e7ed      	b.n	80008ae <HAL_InitTick+0xe>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008d2:	3001      	adds	r0, #1
 80008d4:	2200      	movs	r2, #0
 80008d6:	0021      	movs	r1, r4
 80008d8:	4240      	negs	r0, r0
 80008da:	f000 fcf1 	bl	80012c0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008de:	4b05      	ldr	r3, [pc, #20]	@ (80008f4 <HAL_InitTick+0x54>)
 80008e0:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 80008e2:	2000      	movs	r0, #0
 80008e4:	e7e3      	b.n	80008ae <HAL_InitTick+0xe>
      status = HAL_ERROR;
 80008e6:	2001      	movs	r0, #1
 80008e8:	e7e1      	b.n	80008ae <HAL_InitTick+0xe>
 80008ea:	46c0      	nop			@ (mov r8, r8)
 80008ec:	20000000 	.word	0x20000000
 80008f0:	20000008 	.word	0x20000008
 80008f4:	20000004 	.word	0x20000004

080008f8 <HAL_Init>:
{
 80008f8:	b510      	push	{r4, lr}
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008fa:	2003      	movs	r0, #3
 80008fc:	f7ff ffd0 	bl	80008a0 <HAL_InitTick>
 8000900:	1e04      	subs	r4, r0, #0
 8000902:	d002      	beq.n	800090a <HAL_Init+0x12>
    status = HAL_ERROR;
 8000904:	2401      	movs	r4, #1
}
 8000906:	0020      	movs	r0, r4
 8000908:	bd10      	pop	{r4, pc}
    HAL_MspInit();
 800090a:	f000 ff79 	bl	8001800 <HAL_MspInit>
 800090e:	e7fa      	b.n	8000906 <HAL_Init+0xe>

08000910 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000910:	4b03      	ldr	r3, [pc, #12]	@ (8000920 <HAL_IncTick+0x10>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	4a03      	ldr	r2, [pc, #12]	@ (8000924 <HAL_IncTick+0x14>)
 8000916:	6811      	ldr	r1, [r2, #0]
 8000918:	185b      	adds	r3, r3, r1
 800091a:	6013      	str	r3, [r2, #0]
}
 800091c:	4770      	bx	lr
 800091e:	46c0      	nop			@ (mov r8, r8)
 8000920:	20000000 	.word	0x20000000
 8000924:	20000390 	.word	0x20000390

08000928 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000928:	4b01      	ldr	r3, [pc, #4]	@ (8000930 <HAL_GetTick+0x8>)
 800092a:	6818      	ldr	r0, [r3, #0]
}
 800092c:	4770      	bx	lr
 800092e:	46c0      	nop			@ (mov r8, r8)
 8000930:	20000390 	.word	0x20000390

08000934 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000934:	b530      	push	{r4, r5, lr}
 8000936:	b083      	sub	sp, #12
 8000938:	0004      	movs	r4, r0
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800093a:	2300      	movs	r3, #0
 800093c:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 800093e:	2800      	cmp	r0, #0
 8000940:	d100      	bne.n	8000944 <HAL_ADC_Init+0x10>
 8000942:	e105      	b.n	8000b50 <HAL_ADC_Init+0x21c>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000944:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8000946:	2b00      	cmp	r3, #0
 8000948:	d012      	beq.n	8000970 <HAL_ADC_Init+0x3c>

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800094a:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800094c:	689a      	ldr	r2, [r3, #8]
 800094e:	00d2      	lsls	r2, r2, #3
 8000950:	d41b      	bmi.n	800098a <HAL_ADC_Init+0x56>
  MODIFY_REG(ADCx->CR,
 8000952:	6899      	ldr	r1, [r3, #8]
 8000954:	4a7f      	ldr	r2, [pc, #508]	@ (8000b54 <HAL_ADC_Init+0x220>)
 8000956:	4011      	ands	r1, r2
 8000958:	2280      	movs	r2, #128	@ 0x80
 800095a:	0552      	lsls	r2, r2, #21
 800095c:	430a      	orrs	r2, r1
 800095e:	609a      	str	r2, [r3, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000960:	4b7d      	ldr	r3, [pc, #500]	@ (8000b58 <HAL_ADC_Init+0x224>)
 8000962:	6818      	ldr	r0, [r3, #0]
 8000964:	497d      	ldr	r1, [pc, #500]	@ (8000b5c <HAL_ADC_Init+0x228>)
 8000966:	f7ff fbbd 	bl	80000e4 <__udivsi3>
 800096a:	0040      	lsls	r0, r0, #1
 800096c:	9001      	str	r0, [sp, #4]
    while (wait_loop_index != 0UL)
 800096e:	e009      	b.n	8000984 <HAL_ADC_Init+0x50>
    HAL_ADC_MspInit(hadc);
 8000970:	f000 ff5e 	bl	8001830 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8000974:	2300      	movs	r3, #0
 8000976:	65e3      	str	r3, [r4, #92]	@ 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8000978:	2254      	movs	r2, #84	@ 0x54
 800097a:	54a3      	strb	r3, [r4, r2]
 800097c:	e7e5      	b.n	800094a <HAL_ADC_Init+0x16>
    {
      wait_loop_index--;
 800097e:	9b01      	ldr	r3, [sp, #4]
 8000980:	3b01      	subs	r3, #1
 8000982:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8000984:	9b01      	ldr	r3, [sp, #4]
 8000986:	2b00      	cmp	r3, #0
 8000988:	d1f9      	bne.n	800097e <HAL_ADC_Init+0x4a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800098a:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800098c:	689a      	ldr	r2, [r3, #8]
 800098e:	00d2      	lsls	r2, r2, #3
 8000990:	d500      	bpl.n	8000994 <HAL_ADC_Init+0x60>
 8000992:	e09d      	b.n	8000ad0 <HAL_ADC_Init+0x19c>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000994:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8000996:	2110      	movs	r1, #16
 8000998:	430a      	orrs	r2, r1
 800099a:	65a2      	str	r2, [r4, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800099c:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800099e:	390f      	subs	r1, #15
 80009a0:	430a      	orrs	r2, r1
 80009a2:	65e2      	str	r2, [r4, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80009a4:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80009a6:	689a      	ldr	r2, [r3, #8]
 80009a8:	2104      	movs	r1, #4
 80009aa:	000d      	movs	r5, r1
 80009ac:	4015      	ands	r5, r2
 80009ae:	4211      	tst	r1, r2
 80009b0:	d000      	beq.n	80009b4 <HAL_ADC_Init+0x80>
 80009b2:	2501      	movs	r5, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80009b4:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 80009b6:	06d2      	lsls	r2, r2, #27
 80009b8:	d500      	bpl.n	80009bc <HAL_ADC_Init+0x88>
 80009ba:	e0c2      	b.n	8000b42 <HAL_ADC_Init+0x20e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80009bc:	2d00      	cmp	r5, #0
 80009be:	d000      	beq.n	80009c2 <HAL_ADC_Init+0x8e>
 80009c0:	e0bf      	b.n	8000b42 <HAL_ADC_Init+0x20e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80009c2:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 80009c4:	4966      	ldr	r1, [pc, #408]	@ (8000b60 <HAL_ADC_Init+0x22c>)
 80009c6:	400a      	ands	r2, r1
 80009c8:	3106      	adds	r1, #6
 80009ca:	31ff      	adds	r1, #255	@ 0xff
 80009cc:	430a      	orrs	r2, r1
 80009ce:	65a2      	str	r2, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80009d0:	689a      	ldr	r2, [r3, #8]
 80009d2:	07d2      	lsls	r2, r2, #31
 80009d4:	d452      	bmi.n	8000a7c <HAL_ADC_Init+0x148>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths: temperature sensor, Vref             */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80009d6:	68a2      	ldr	r2, [r4, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80009d8:	7e21      	ldrb	r1, [r4, #24]
 80009da:	0389      	lsls	r1, r1, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80009dc:	430a      	orrs	r2, r1
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80009de:	7e61      	ldrb	r1, [r4, #25]
 80009e0:	03c9      	lsls	r1, r1, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80009e2:	430a      	orrs	r2, r1
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80009e4:	7ea5      	ldrb	r5, [r4, #26]
 80009e6:	0369      	lsls	r1, r5, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80009e8:	430a      	orrs	r2, r1
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80009ea:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80009ec:	2900      	cmp	r1, #0
 80009ee:	d001      	beq.n	80009f4 <HAL_ADC_Init+0xc0>
 80009f0:	2180      	movs	r1, #128	@ 0x80
 80009f2:	0149      	lsls	r1, r1, #5
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80009f4:	430a      	orrs	r2, r1
                   hadc->Init.DataAlign                                           |
 80009f6:	68e1      	ldr	r1, [r4, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80009f8:	430a      	orrs	r2, r1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80009fa:	6921      	ldr	r1, [r4, #16]
 80009fc:	2900      	cmp	r1, #0
 80009fe:	db69      	blt.n	8000ad4 <HAL_ADC_Init+0x1a0>
 8000a00:	2180      	movs	r1, #128	@ 0x80
 8000a02:	0389      	lsls	r1, r1, #14
                   hadc->Init.DataAlign                                           |
 8000a04:	430a      	orrs	r2, r1
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000a06:	212c      	movs	r1, #44	@ 0x2c
 8000a08:	5c61      	ldrb	r1, [r4, r1]
 8000a0a:	0049      	lsls	r1, r1, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000a0c:	430a      	orrs	r2, r1

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000a0e:	2120      	movs	r1, #32
 8000a10:	5c61      	ldrb	r1, [r4, r1]
 8000a12:	2901      	cmp	r1, #1
 8000a14:	d061      	beq.n	8000ada <HAL_ADC_Init+0x1a6>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000a16:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8000a18:	2900      	cmp	r1, #0
 8000a1a:	d005      	beq.n	8000a28 <HAL_ADC_Init+0xf4>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000a1c:	25e0      	movs	r5, #224	@ 0xe0
 8000a1e:	006d      	lsls	r5, r5, #1
 8000a20:	4029      	ands	r1, r5
                     hadc->Init.ExternalTrigConvEdge);
 8000a22:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000a24:	4329      	orrs	r1, r5
 8000a26:	430a      	orrs	r2, r1
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000a28:	68d9      	ldr	r1, [r3, #12]
 8000a2a:	4d4e      	ldr	r5, [pc, #312]	@ (8000b64 <HAL_ADC_Init+0x230>)
 8000a2c:	4029      	ands	r1, r5
 8000a2e:	430a      	orrs	r2, r1
 8000a30:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000a32:	6863      	ldr	r3, [r4, #4]
 8000a34:	0f9b      	lsrs	r3, r3, #30
 8000a36:	079b      	lsls	r3, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8000a38:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000a3a:	431a      	orrs	r2, r3
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8000a3c:	213c      	movs	r1, #60	@ 0x3c
 8000a3e:	5c61      	ldrb	r1, [r4, r1]
 8000a40:	2901      	cmp	r1, #1
 8000a42:	d059      	beq.n	8000af8 <HAL_ADC_Init+0x1c4>
                     hadc->Init.Oversampling.RightBitShift |
                     hadc->Init.Oversampling.TriggeredMode
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8000a44:	6821      	ldr	r1, [r4, #0]
 8000a46:	690b      	ldr	r3, [r1, #16]
 8000a48:	4d47      	ldr	r5, [pc, #284]	@ (8000b68 <HAL_ADC_Init+0x234>)
 8000a4a:	402b      	ands	r3, r5
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	610b      	str	r3, [r1, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000a50:	6863      	ldr	r3, [r4, #4]
 8000a52:	22c0      	movs	r2, #192	@ 0xc0
 8000a54:	0612      	lsls	r2, r2, #24
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d010      	beq.n	8000a7c <HAL_ADC_Init+0x148>
 8000a5a:	2280      	movs	r2, #128	@ 0x80
 8000a5c:	05d2      	lsls	r2, r2, #23
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d00c      	beq.n	8000a7c <HAL_ADC_Init+0x148>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000a62:	2280      	movs	r2, #128	@ 0x80
 8000a64:	0612      	lsls	r2, r2, #24
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d008      	beq.n	8000a7c <HAL_ADC_Init+0x148>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8000a6a:	4940      	ldr	r1, [pc, #256]	@ (8000b6c <HAL_ADC_Init+0x238>)
 8000a6c:	680a      	ldr	r2, [r1, #0]
 8000a6e:	4d40      	ldr	r5, [pc, #256]	@ (8000b70 <HAL_ADC_Init+0x23c>)
 8000a70:	402a      	ands	r2, r5
 8000a72:	25f0      	movs	r5, #240	@ 0xf0
 8000a74:	03ad      	lsls	r5, r5, #14
 8000a76:	402b      	ands	r3, r5
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8000a7c:	6821      	ldr	r1, [r4, #0]
 8000a7e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
  MODIFY_REG(ADCx->SMPR,
 8000a80:	694a      	ldr	r2, [r1, #20]
 8000a82:	2507      	movs	r5, #7
 8000a84:	43aa      	bics	r2, r5
 8000a86:	4313      	orrs	r3, r2
 8000a88:	614b      	str	r3, [r1, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8000a8a:	6821      	ldr	r1, [r4, #0]
 8000a8c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8000a8e:	694b      	ldr	r3, [r1, #20]
 8000a90:	3569      	adds	r5, #105	@ 0x69
 8000a92:	43ab      	bics	r3, r5
 8000a94:	0112      	lsls	r2, r2, #4
 8000a96:	4313      	orrs	r3, r2
 8000a98:	614b      	str	r3, [r1, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8000a9a:	6923      	ldr	r3, [r4, #16]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d135      	bne.n	8000b0c <HAL_ADC_Init+0x1d8>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8000aa0:	6822      	ldr	r2, [r4, #0]
 8000aa2:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8000aa4:	3b10      	subs	r3, #16
 8000aa6:	430b      	orrs	r3, r1
 8000aa8:	6293      	str	r3, [r2, #40]	@ 0x28
    {
      /* Nothing to do */
    }
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000aaa:	6823      	ldr	r3, [r4, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000aac:	695a      	ldr	r2, [r3, #20]
 8000aae:	2307      	movs	r3, #7
 8000ab0:	4013      	ands	r3, r2
        == hadc->Init.SamplingTimeCommon1)
 8000ab2:	6b62      	ldr	r2, [r4, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	d03b      	beq.n	8000b30 <HAL_ADC_Init+0x1fc>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000ab8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8000aba:	2212      	movs	r2, #18
 8000abc:	4393      	bics	r3, r2
 8000abe:	3a02      	subs	r2, #2
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	65a3      	str	r3, [r4, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ac4:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8000ac6:	3a0f      	subs	r2, #15
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	65e3      	str	r3, [r4, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8000acc:	2001      	movs	r0, #1
 8000ace:	e03d      	b.n	8000b4c <HAL_ADC_Init+0x218>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ad0:	2000      	movs	r0, #0
 8000ad2:	e768      	b.n	80009a6 <HAL_ADC_Init+0x72>
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000ad4:	0049      	lsls	r1, r1, #1
 8000ad6:	0849      	lsrs	r1, r1, #1
 8000ad8:	e794      	b.n	8000a04 <HAL_ADC_Init+0xd0>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8000ada:	2d00      	cmp	r5, #0
 8000adc:	d103      	bne.n	8000ae6 <HAL_ADC_Init+0x1b2>
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000ade:	2180      	movs	r1, #128	@ 0x80
 8000ae0:	0249      	lsls	r1, r1, #9
 8000ae2:	430a      	orrs	r2, r1
 8000ae4:	e797      	b.n	8000a16 <HAL_ADC_Init+0xe2>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ae6:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8000ae8:	2520      	movs	r5, #32
 8000aea:	4329      	orrs	r1, r5
 8000aec:	65a1      	str	r1, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000aee:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8000af0:	3d1f      	subs	r5, #31
 8000af2:	4329      	orrs	r1, r5
 8000af4:	65e1      	str	r1, [r4, #92]	@ 0x5c
 8000af6:	e78e      	b.n	8000a16 <HAL_ADC_Init+0xe2>
                     hadc->Init.Oversampling.Ratio         |
 8000af8:	6c21      	ldr	r1, [r4, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000afa:	430b      	orrs	r3, r1
                     hadc->Init.Oversampling.RightBitShift |
 8000afc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 8000afe:	430b      	orrs	r3, r1
                     hadc->Init.Oversampling.TriggeredMode
 8000b00:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8000b02:	430b      	orrs	r3, r1
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8000b04:	4313      	orrs	r3, r2
 8000b06:	2201      	movs	r2, #1
 8000b08:	431a      	orrs	r2, r3
 8000b0a:	e79b      	b.n	8000a44 <HAL_ADC_Init+0x110>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000b0c:	2280      	movs	r2, #128	@ 0x80
 8000b0e:	0392      	lsls	r2, r2, #14
 8000b10:	4293      	cmp	r3, r2
 8000b12:	d1ca      	bne.n	8000aaa <HAL_ADC_Init+0x176>
      MODIFY_REG(hadc->Instance->CHSELR,
 8000b14:	6821      	ldr	r1, [r4, #0]
 8000b16:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8000b18:	69e3      	ldr	r3, [r4, #28]
 8000b1a:	3b01      	subs	r3, #1
 8000b1c:	009b      	lsls	r3, r3, #2
 8000b1e:	221c      	movs	r2, #28
 8000b20:	401a      	ands	r2, r3
 8000b22:	2310      	movs	r3, #16
 8000b24:	425b      	negs	r3, r3
 8000b26:	4093      	lsls	r3, r2
 8000b28:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8000b2a:	4313      	orrs	r3, r2
 8000b2c:	628b      	str	r3, [r1, #40]	@ 0x28
 8000b2e:	e7bc      	b.n	8000aaa <HAL_ADC_Init+0x176>
      ADC_CLEAR_ERRORCODE(hadc);
 8000b30:	2300      	movs	r3, #0
 8000b32:	65e3      	str	r3, [r4, #92]	@ 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 8000b34:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8000b36:	2203      	movs	r2, #3
 8000b38:	4393      	bics	r3, r2
 8000b3a:	3a02      	subs	r2, #2
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8000b40:	e004      	b.n	8000b4c <HAL_ADC_Init+0x218>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b42:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8000b44:	2210      	movs	r2, #16
 8000b46:	4313      	orrs	r3, r2
 8000b48:	65a3      	str	r3, [r4, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8000b4a:	2001      	movs	r0, #1
  }

  /* Return function status */
  return tmp_hal_status;
}
 8000b4c:	b003      	add	sp, #12
 8000b4e:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8000b50:	2001      	movs	r0, #1
 8000b52:	e7fb      	b.n	8000b4c <HAL_ADC_Init+0x218>
 8000b54:	6fffffe8 	.word	0x6fffffe8
 8000b58:	20000008 	.word	0x20000008
 8000b5c:	00030d40 	.word	0x00030d40
 8000b60:	fffffefd 	.word	0xfffffefd
 8000b64:	ffde0201 	.word	0xffde0201
 8000b68:	1ffffc02 	.word	0x1ffffc02
 8000b6c:	40012708 	.word	0x40012708
 8000b70:	ffc3ffff 	.word	0xffc3ffff

08000b74 <HAL_ADC_ConvHalfCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000b74:	4770      	bx	lr

08000b76 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8000b76:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000b78:	6a80      	ldr	r0, [r0, #40]	@ 0x28

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8000b7a:	f7ff fffb 	bl	8000b74 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000b7e:	bd10      	pop	{r4, pc}

08000b80 <HAL_ADC_ErrorCallback>:
}
 8000b80:	4770      	bx	lr

08000b82 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8000b82:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000b84:	6a80      	ldr	r0, [r0, #40]	@ 0x28

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000b86:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8000b88:	2240      	movs	r2, #64	@ 0x40
 8000b8a:	4313      	orrs	r3, r2
 8000b8c:	6583      	str	r3, [r0, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8000b8e:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8000b90:	3a3c      	subs	r2, #60	@ 0x3c
 8000b92:	4313      	orrs	r3, r2
 8000b94:	65c3      	str	r3, [r0, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8000b96:	f7ff fff3 	bl	8000b80 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000b9a:	bd10      	pop	{r4, pc}

08000b9c <ADC_DMAConvCplt>:
{
 8000b9c:	b510      	push	{r4, lr}
 8000b9e:	0003      	movs	r3, r0
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000ba0:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8000ba2:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8000ba4:	2150      	movs	r1, #80	@ 0x50
 8000ba6:	4211      	tst	r1, r2
 8000ba8:	d12a      	bne.n	8000c00 <ADC_DMAConvCplt+0x64>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000baa:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8000bac:	2380      	movs	r3, #128	@ 0x80
 8000bae:	009b      	lsls	r3, r3, #2
 8000bb0:	4313      	orrs	r3, r2
 8000bb2:	6583      	str	r3, [r0, #88]	@ 0x58
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8000bb4:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8000bb6:	68d9      	ldr	r1, [r3, #12]
 8000bb8:	22c0      	movs	r2, #192	@ 0xc0
 8000bba:	0112      	lsls	r2, r2, #4
 8000bbc:	4211      	tst	r1, r2
 8000bbe:	d113      	bne.n	8000be8 <ADC_DMAConvCplt+0x4c>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8000bc0:	7e82      	ldrb	r2, [r0, #26]
 8000bc2:	2a00      	cmp	r2, #0
 8000bc4:	d110      	bne.n	8000be8 <ADC_DMAConvCplt+0x4c>
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	0712      	lsls	r2, r2, #28
 8000bca:	d50d      	bpl.n	8000be8 <ADC_DMAConvCplt+0x4c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000bcc:	689a      	ldr	r2, [r3, #8]
 8000bce:	0752      	lsls	r2, r2, #29
 8000bd0:	d40d      	bmi.n	8000bee <ADC_DMAConvCplt+0x52>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000bd2:	685a      	ldr	r2, [r3, #4]
 8000bd4:	210c      	movs	r1, #12
 8000bd6:	438a      	bics	r2, r1
 8000bd8:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 8000bda:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8000bdc:	4a0e      	ldr	r2, [pc, #56]	@ (8000c18 <ADC_DMAConvCplt+0x7c>)
 8000bde:	4013      	ands	r3, r2
 8000be0:	3204      	adds	r2, #4
 8000be2:	32ff      	adds	r2, #255	@ 0xff
 8000be4:	4313      	orrs	r3, r2
 8000be6:	6583      	str	r3, [r0, #88]	@ 0x58
    HAL_ADC_ConvCpltCallback(hadc);
 8000be8:	f7ff fd22 	bl	8000630 <HAL_ADC_ConvCpltCallback>
}
 8000bec:	bd10      	pop	{r4, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000bee:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8000bf0:	2220      	movs	r2, #32
 8000bf2:	4313      	orrs	r3, r2
 8000bf4:	6583      	str	r3, [r0, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bf6:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8000bf8:	3a1f      	subs	r2, #31
 8000bfa:	4313      	orrs	r3, r2
 8000bfc:	65c3      	str	r3, [r0, #92]	@ 0x5c
 8000bfe:	e7f3      	b.n	8000be8 <ADC_DMAConvCplt+0x4c>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8000c00:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8000c02:	06d2      	lsls	r2, r2, #27
 8000c04:	d404      	bmi.n	8000c10 <ADC_DMAConvCplt+0x74>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8000c06:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8000c08:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8000c0a:	0018      	movs	r0, r3
 8000c0c:	4790      	blx	r2
}
 8000c0e:	e7ed      	b.n	8000bec <ADC_DMAConvCplt+0x50>
      HAL_ADC_ErrorCallback(hadc);
 8000c10:	f7ff ffb6 	bl	8000b80 <HAL_ADC_ErrorCallback>
 8000c14:	e7ea      	b.n	8000bec <ADC_DMAConvCplt+0x50>
 8000c16:	46c0      	nop			@ (mov r8, r8)
 8000c18:	fffffefe 	.word	0xfffffefe

08000c1c <HAL_ADC_ConfigChannel>:
{
 8000c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	9301      	str	r3, [sp, #4]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8000c26:	6905      	ldr	r5, [r0, #16]
  __HAL_LOCK(hadc);
 8000c28:	3354      	adds	r3, #84	@ 0x54
 8000c2a:	5cc3      	ldrb	r3, [r0, r3]
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d100      	bne.n	8000c32 <HAL_ADC_ConfigChannel+0x16>
 8000c30:	e121      	b.n	8000e76 <HAL_ADC_ConfigChannel+0x25a>
 8000c32:	2354      	movs	r3, #84	@ 0x54
 8000c34:	2201      	movs	r2, #1
 8000c36:	54c2      	strb	r2, [r0, r3]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000c38:	6800      	ldr	r0, [r0, #0]
 8000c3a:	6883      	ldr	r3, [r0, #8]
 8000c3c:	3203      	adds	r2, #3
 8000c3e:	0016      	movs	r6, r2
 8000c40:	401e      	ands	r6, r3
 8000c42:	421a      	tst	r2, r3
 8000c44:	d009      	beq.n	8000c5a <HAL_ADC_ConfigChannel+0x3e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c46:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8000c48:	321c      	adds	r2, #28
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	65a3      	str	r3, [r4, #88]	@ 0x58
    tmp_hal_status = HAL_ERROR;
 8000c4e:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8000c50:	2354      	movs	r3, #84	@ 0x54
 8000c52:	2200      	movs	r2, #0
 8000c54:	54e2      	strb	r2, [r4, r3]
}
 8000c56:	b003      	add	sp, #12
 8000c58:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (sConfig->Rank != ADC_RANK_NONE)
 8000c5a:	684b      	ldr	r3, [r1, #4]
 8000c5c:	2b02      	cmp	r3, #2
 8000c5e:	d100      	bne.n	8000c62 <HAL_ADC_ConfigChannel+0x46>
 8000c60:	e0d5      	b.n	8000e0e <HAL_ADC_ConfigChannel+0x1f2>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8000c62:	2280      	movs	r2, #128	@ 0x80
 8000c64:	0612      	lsls	r2, r2, #24
 8000c66:	4295      	cmp	r5, r2
 8000c68:	d025      	beq.n	8000cb6 <HAL_ADC_ConfigChannel+0x9a>
 8000c6a:	4a84      	ldr	r2, [pc, #528]	@ (8000e7c <HAL_ADC_ConfigChannel+0x260>)
 8000c6c:	4295      	cmp	r5, r2
 8000c6e:	d022      	beq.n	8000cb6 <HAL_ADC_ConfigChannel+0x9a>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8000c70:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8000c72:	271f      	movs	r7, #31
 8000c74:	401f      	ands	r7, r3
 8000c76:	250f      	movs	r5, #15
 8000c78:	40bd      	lsls	r5, r7
 8000c7a:	43aa      	bics	r2, r5
 8000c7c:	680b      	ldr	r3, [r1, #0]
 8000c7e:	025d      	lsls	r5, r3, #9
 8000c80:	d12f      	bne.n	8000ce2 <HAL_ADC_ConfigChannel+0xc6>
 8000c82:	0e9b      	lsrs	r3, r3, #26
 8000c84:	261f      	movs	r6, #31
 8000c86:	401e      	ands	r6, r3
 8000c88:	40be      	lsls	r6, r7
 8000c8a:	4332      	orrs	r2, r6
 8000c8c:	6622      	str	r2, [r4, #96]	@ 0x60
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8000c8e:	684d      	ldr	r5, [r1, #4]
 8000c90:	08ab      	lsrs	r3, r5, #2
 8000c92:	3301      	adds	r3, #1
 8000c94:	69e2      	ldr	r2, [r4, #28]
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d813      	bhi.n	8000cc2 <HAL_ADC_ConfigChannel+0xa6>
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8000c9a:	680e      	ldr	r6, [r1, #0]
  MODIFY_REG(ADCx->CHSELR,
 8000c9c:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8000c9e:	231f      	movs	r3, #31
 8000ca0:	401d      	ands	r5, r3
 8000ca2:	3b10      	subs	r3, #16
 8000ca4:	001f      	movs	r7, r3
 8000ca6:	40af      	lsls	r7, r5
 8000ca8:	43ba      	bics	r2, r7
 8000caa:	0eb6      	lsrs	r6, r6, #26
 8000cac:	4033      	ands	r3, r6
 8000cae:	40ab      	lsls	r3, r5
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	6283      	str	r3, [r0, #40]	@ 0x28
}
 8000cb4:	e005      	b.n	8000cc2 <HAL_ADC_ConfigChannel+0xa6>
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8000cb6:	680b      	ldr	r3, [r1, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000cb8:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8000cba:	025b      	lsls	r3, r3, #9
 8000cbc:	0a5b      	lsrs	r3, r3, #9
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	6283      	str	r3, [r0, #40]	@ 0x28
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8000cc2:	6820      	ldr	r0, [r4, #0]
 8000cc4:	680b      	ldr	r3, [r1, #0]
 8000cc6:	688d      	ldr	r5, [r1, #8]
  MODIFY_REG(ADCx->SMPR,
 8000cc8:	6942      	ldr	r2, [r0, #20]
 8000cca:	021b      	lsls	r3, r3, #8
 8000ccc:	439a      	bics	r2, r3
 8000cce:	402b      	ands	r3, r5
 8000cd0:	4d6b      	ldr	r5, [pc, #428]	@ (8000e80 <HAL_ADC_ConfigChannel+0x264>)
 8000cd2:	402b      	ands	r3, r5
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	6143      	str	r3, [r0, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000cd8:	680b      	ldr	r3, [r1, #0]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	db5f      	blt.n	8000d9e <HAL_ADC_ConfigChannel+0x182>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cde:	2000      	movs	r0, #0
 8000ce0:	e7b6      	b.n	8000c50 <HAL_ADC_ConfigChannel+0x34>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8000ce2:	07dd      	lsls	r5, r3, #31
 8000ce4:	d4d0      	bmi.n	8000c88 <HAL_ADC_ConfigChannel+0x6c>
 8000ce6:	079d      	lsls	r5, r3, #30
 8000ce8:	d42f      	bmi.n	8000d4a <HAL_ADC_ConfigChannel+0x12e>
 8000cea:	075d      	lsls	r5, r3, #29
 8000cec:	d42f      	bmi.n	8000d4e <HAL_ADC_ConfigChannel+0x132>
 8000cee:	071d      	lsls	r5, r3, #28
 8000cf0:	d42f      	bmi.n	8000d52 <HAL_ADC_ConfigChannel+0x136>
 8000cf2:	06dd      	lsls	r5, r3, #27
 8000cf4:	d42f      	bmi.n	8000d56 <HAL_ADC_ConfigChannel+0x13a>
 8000cf6:	069d      	lsls	r5, r3, #26
 8000cf8:	d42f      	bmi.n	8000d5a <HAL_ADC_ConfigChannel+0x13e>
 8000cfa:	065d      	lsls	r5, r3, #25
 8000cfc:	d42f      	bmi.n	8000d5e <HAL_ADC_ConfigChannel+0x142>
 8000cfe:	061d      	lsls	r5, r3, #24
 8000d00:	d42f      	bmi.n	8000d62 <HAL_ADC_ConfigChannel+0x146>
 8000d02:	05dd      	lsls	r5, r3, #23
 8000d04:	d42f      	bmi.n	8000d66 <HAL_ADC_ConfigChannel+0x14a>
 8000d06:	059d      	lsls	r5, r3, #22
 8000d08:	d42f      	bmi.n	8000d6a <HAL_ADC_ConfigChannel+0x14e>
 8000d0a:	055d      	lsls	r5, r3, #21
 8000d0c:	d42f      	bmi.n	8000d6e <HAL_ADC_ConfigChannel+0x152>
 8000d0e:	051d      	lsls	r5, r3, #20
 8000d10:	d42f      	bmi.n	8000d72 <HAL_ADC_ConfigChannel+0x156>
 8000d12:	04dd      	lsls	r5, r3, #19
 8000d14:	d42f      	bmi.n	8000d76 <HAL_ADC_ConfigChannel+0x15a>
 8000d16:	049d      	lsls	r5, r3, #18
 8000d18:	d42f      	bmi.n	8000d7a <HAL_ADC_ConfigChannel+0x15e>
 8000d1a:	045d      	lsls	r5, r3, #17
 8000d1c:	d42f      	bmi.n	8000d7e <HAL_ADC_ConfigChannel+0x162>
 8000d1e:	041d      	lsls	r5, r3, #16
 8000d20:	d42f      	bmi.n	8000d82 <HAL_ADC_ConfigChannel+0x166>
 8000d22:	03dd      	lsls	r5, r3, #15
 8000d24:	d42f      	bmi.n	8000d86 <HAL_ADC_ConfigChannel+0x16a>
 8000d26:	039d      	lsls	r5, r3, #14
 8000d28:	d42f      	bmi.n	8000d8a <HAL_ADC_ConfigChannel+0x16e>
 8000d2a:	035d      	lsls	r5, r3, #13
 8000d2c:	d42f      	bmi.n	8000d8e <HAL_ADC_ConfigChannel+0x172>
 8000d2e:	031d      	lsls	r5, r3, #12
 8000d30:	d42f      	bmi.n	8000d92 <HAL_ADC_ConfigChannel+0x176>
 8000d32:	02dd      	lsls	r5, r3, #11
 8000d34:	d42f      	bmi.n	8000d96 <HAL_ADC_ConfigChannel+0x17a>
 8000d36:	029d      	lsls	r5, r3, #10
 8000d38:	d42f      	bmi.n	8000d9a <HAL_ADC_ConfigChannel+0x17e>
 8000d3a:	2580      	movs	r5, #128	@ 0x80
 8000d3c:	03ed      	lsls	r5, r5, #15
 8000d3e:	001e      	movs	r6, r3
 8000d40:	402e      	ands	r6, r5
 8000d42:	422b      	tst	r3, r5
 8000d44:	d0a0      	beq.n	8000c88 <HAL_ADC_ConfigChannel+0x6c>
 8000d46:	2616      	movs	r6, #22
 8000d48:	e79e      	b.n	8000c88 <HAL_ADC_ConfigChannel+0x6c>
 8000d4a:	2601      	movs	r6, #1
 8000d4c:	e79c      	b.n	8000c88 <HAL_ADC_ConfigChannel+0x6c>
 8000d4e:	2602      	movs	r6, #2
 8000d50:	e79a      	b.n	8000c88 <HAL_ADC_ConfigChannel+0x6c>
 8000d52:	2603      	movs	r6, #3
 8000d54:	e798      	b.n	8000c88 <HAL_ADC_ConfigChannel+0x6c>
 8000d56:	2604      	movs	r6, #4
 8000d58:	e796      	b.n	8000c88 <HAL_ADC_ConfigChannel+0x6c>
 8000d5a:	2605      	movs	r6, #5
 8000d5c:	e794      	b.n	8000c88 <HAL_ADC_ConfigChannel+0x6c>
 8000d5e:	2606      	movs	r6, #6
 8000d60:	e792      	b.n	8000c88 <HAL_ADC_ConfigChannel+0x6c>
 8000d62:	2607      	movs	r6, #7
 8000d64:	e790      	b.n	8000c88 <HAL_ADC_ConfigChannel+0x6c>
 8000d66:	2608      	movs	r6, #8
 8000d68:	e78e      	b.n	8000c88 <HAL_ADC_ConfigChannel+0x6c>
 8000d6a:	2609      	movs	r6, #9
 8000d6c:	e78c      	b.n	8000c88 <HAL_ADC_ConfigChannel+0x6c>
 8000d6e:	260a      	movs	r6, #10
 8000d70:	e78a      	b.n	8000c88 <HAL_ADC_ConfigChannel+0x6c>
 8000d72:	260b      	movs	r6, #11
 8000d74:	e788      	b.n	8000c88 <HAL_ADC_ConfigChannel+0x6c>
 8000d76:	260c      	movs	r6, #12
 8000d78:	e786      	b.n	8000c88 <HAL_ADC_ConfigChannel+0x6c>
 8000d7a:	260d      	movs	r6, #13
 8000d7c:	e784      	b.n	8000c88 <HAL_ADC_ConfigChannel+0x6c>
 8000d7e:	260e      	movs	r6, #14
 8000d80:	e782      	b.n	8000c88 <HAL_ADC_ConfigChannel+0x6c>
 8000d82:	260f      	movs	r6, #15
 8000d84:	e780      	b.n	8000c88 <HAL_ADC_ConfigChannel+0x6c>
 8000d86:	2610      	movs	r6, #16
 8000d88:	e77e      	b.n	8000c88 <HAL_ADC_ConfigChannel+0x6c>
 8000d8a:	2611      	movs	r6, #17
 8000d8c:	e77c      	b.n	8000c88 <HAL_ADC_ConfigChannel+0x6c>
 8000d8e:	2612      	movs	r6, #18
 8000d90:	e77a      	b.n	8000c88 <HAL_ADC_ConfigChannel+0x6c>
 8000d92:	2613      	movs	r6, #19
 8000d94:	e778      	b.n	8000c88 <HAL_ADC_ConfigChannel+0x6c>
 8000d96:	2614      	movs	r6, #20
 8000d98:	e776      	b.n	8000c88 <HAL_ADC_ConfigChannel+0x6c>
 8000d9a:	2615      	movs	r6, #21
 8000d9c:	e774      	b.n	8000c88 <HAL_ADC_ConfigChannel+0x6c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 8000d9e:	4a39      	ldr	r2, [pc, #228]	@ (8000e84 <HAL_ADC_ConfigChannel+0x268>)
 8000da0:	6811      	ldr	r1, [r2, #0]
 8000da2:	22c0      	movs	r2, #192	@ 0xc0
 8000da4:	0412      	lsls	r2, r2, #16
 8000da6:	400a      	ands	r2, r1
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8000da8:	4837      	ldr	r0, [pc, #220]	@ (8000e88 <HAL_ADC_ConfigChannel+0x26c>)
 8000daa:	4283      	cmp	r3, r0
 8000dac:	d004      	beq.n	8000db8 <HAL_ADC_ConfigChannel+0x19c>
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8000dae:	4837      	ldr	r0, [pc, #220]	@ (8000e8c <HAL_ADC_ConfigChannel+0x270>)
 8000db0:	4283      	cmp	r3, r0
 8000db2:	d01f      	beq.n	8000df4 <HAL_ADC_ConfigChannel+0x1d8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000db4:	2000      	movs	r0, #0
 8000db6:	e74b      	b.n	8000c50 <HAL_ADC_ConfigChannel+0x34>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8000db8:	0208      	lsls	r0, r1, #8
 8000dba:	d4f8      	bmi.n	8000dae <HAL_ADC_ConfigChannel+0x192>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8000dbc:	2380      	movs	r3, #128	@ 0x80
 8000dbe:	041b      	lsls	r3, r3, #16
 8000dc0:	4313      	orrs	r3, r2
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 8000dc2:	4930      	ldr	r1, [pc, #192]	@ (8000e84 <HAL_ADC_ConfigChannel+0x268>)
 8000dc4:	680a      	ldr	r2, [r1, #0]
 8000dc6:	4832      	ldr	r0, [pc, #200]	@ (8000e90 <HAL_ADC_ConfigChannel+0x274>)
 8000dc8:	4002      	ands	r2, r0
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	600b      	str	r3, [r1, #0]
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8000dce:	4b31      	ldr	r3, [pc, #196]	@ (8000e94 <HAL_ADC_ConfigChannel+0x278>)
 8000dd0:	6818      	ldr	r0, [r3, #0]
 8000dd2:	4931      	ldr	r1, [pc, #196]	@ (8000e98 <HAL_ADC_ConfigChannel+0x27c>)
 8000dd4:	f7ff f986 	bl	80000e4 <__udivsi3>
 8000dd8:	0043      	lsls	r3, r0, #1
 8000dda:	181b      	adds	r3, r3, r0
 8000ddc:	009b      	lsls	r3, r3, #2
 8000dde:	3301      	adds	r3, #1
 8000de0:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 8000de2:	e002      	b.n	8000dea <HAL_ADC_ConfigChannel+0x1ce>
            wait_loop_index--;
 8000de4:	9b01      	ldr	r3, [sp, #4]
 8000de6:	3b01      	subs	r3, #1
 8000de8:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 8000dea:	9b01      	ldr	r3, [sp, #4]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d1f9      	bne.n	8000de4 <HAL_ADC_ConfigChannel+0x1c8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000df0:	2000      	movs	r0, #0
 8000df2:	e72d      	b.n	8000c50 <HAL_ADC_ConfigChannel+0x34>
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8000df4:	0249      	lsls	r1, r1, #9
 8000df6:	d43c      	bmi.n	8000e72 <HAL_ADC_ConfigChannel+0x256>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8000df8:	2380      	movs	r3, #128	@ 0x80
 8000dfa:	03db      	lsls	r3, r3, #15
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	4921      	ldr	r1, [pc, #132]	@ (8000e84 <HAL_ADC_ConfigChannel+0x268>)
 8000e00:	680a      	ldr	r2, [r1, #0]
 8000e02:	4823      	ldr	r0, [pc, #140]	@ (8000e90 <HAL_ADC_ConfigChannel+0x274>)
 8000e04:	4002      	ands	r2, r0
 8000e06:	4313      	orrs	r3, r2
 8000e08:	600b      	str	r3, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e0a:	2000      	movs	r0, #0
}
 8000e0c:	e720      	b.n	8000c50 <HAL_ADC_ConfigChannel+0x34>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8000e0e:	2380      	movs	r3, #128	@ 0x80
 8000e10:	061b      	lsls	r3, r3, #24
 8000e12:	429d      	cmp	r5, r3
 8000e14:	d002      	beq.n	8000e1c <HAL_ADC_ConfigChannel+0x200>
 8000e16:	4b19      	ldr	r3, [pc, #100]	@ (8000e7c <HAL_ADC_ConfigChannel+0x260>)
 8000e18:	429d      	cmp	r5, r3
 8000e1a:	d105      	bne.n	8000e28 <HAL_ADC_ConfigChannel+0x20c>
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 8000e1c:	680b      	ldr	r3, [r1, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000e1e:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8000e20:	025b      	lsls	r3, r3, #9
 8000e22:	0a5b      	lsrs	r3, r3, #9
 8000e24:	439a      	bics	r2, r3
 8000e26:	6282      	str	r2, [r0, #40]	@ 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000e28:	680b      	ldr	r3, [r1, #0]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	db01      	blt.n	8000e32 <HAL_ADC_ConfigChannel+0x216>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e2e:	2000      	movs	r0, #0
 8000e30:	e70e      	b.n	8000c50 <HAL_ADC_ConfigChannel+0x34>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 8000e32:	4a14      	ldr	r2, [pc, #80]	@ (8000e84 <HAL_ADC_ConfigChannel+0x268>)
 8000e34:	6812      	ldr	r2, [r2, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000e36:	4914      	ldr	r1, [pc, #80]	@ (8000e88 <HAL_ADC_ConfigChannel+0x26c>)
 8000e38:	428b      	cmp	r3, r1
 8000e3a:	d004      	beq.n	8000e46 <HAL_ADC_ConfigChannel+0x22a>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8000e3c:	4913      	ldr	r1, [pc, #76]	@ (8000e8c <HAL_ADC_ConfigChannel+0x270>)
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d00c      	beq.n	8000e5c <HAL_ADC_ConfigChannel+0x240>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e42:	2000      	movs	r0, #0
 8000e44:	e704      	b.n	8000c50 <HAL_ADC_ConfigChannel+0x34>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8000e46:	2380      	movs	r3, #128	@ 0x80
 8000e48:	03db      	lsls	r3, r3, #15
 8000e4a:	401a      	ands	r2, r3
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 8000e4c:	490d      	ldr	r1, [pc, #52]	@ (8000e84 <HAL_ADC_ConfigChannel+0x268>)
 8000e4e:	680b      	ldr	r3, [r1, #0]
 8000e50:	480f      	ldr	r0, [pc, #60]	@ (8000e90 <HAL_ADC_ConfigChannel+0x274>)
 8000e52:	4003      	ands	r3, r0
 8000e54:	431a      	orrs	r2, r3
 8000e56:	600a      	str	r2, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e58:	2000      	movs	r0, #0
}
 8000e5a:	e6f9      	b.n	8000c50 <HAL_ADC_ConfigChannel+0x34>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8000e5c:	2380      	movs	r3, #128	@ 0x80
 8000e5e:	041b      	lsls	r3, r3, #16
 8000e60:	401a      	ands	r2, r3
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 8000e62:	4908      	ldr	r1, [pc, #32]	@ (8000e84 <HAL_ADC_ConfigChannel+0x268>)
 8000e64:	680b      	ldr	r3, [r1, #0]
 8000e66:	480a      	ldr	r0, [pc, #40]	@ (8000e90 <HAL_ADC_ConfigChannel+0x274>)
 8000e68:	4003      	ands	r3, r0
 8000e6a:	431a      	orrs	r2, r3
 8000e6c:	600a      	str	r2, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e6e:	2000      	movs	r0, #0
}
 8000e70:	e6ee      	b.n	8000c50 <HAL_ADC_ConfigChannel+0x34>
 8000e72:	2000      	movs	r0, #0
 8000e74:	e6ec      	b.n	8000c50 <HAL_ADC_ConfigChannel+0x34>
  __HAL_LOCK(hadc);
 8000e76:	2002      	movs	r0, #2
 8000e78:	e6ed      	b.n	8000c56 <HAL_ADC_ConfigChannel+0x3a>
 8000e7a:	46c0      	nop			@ (mov r8, r8)
 8000e7c:	80000004 	.word	0x80000004
 8000e80:	7fffff00 	.word	0x7fffff00
 8000e84:	40012708 	.word	0x40012708
 8000e88:	a4000200 	.word	0xa4000200
 8000e8c:	a8000400 	.word	0xa8000400
 8000e90:	ff3fffff 	.word	0xff3fffff
 8000e94:	20000008 	.word	0x20000008
 8000e98:	00030d40 	.word	0x00030d40

08000e9c <ADC_Enable>:
{
 8000e9c:	b530      	push	{r4, r5, lr}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	9301      	str	r3, [sp, #4]
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000ea6:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000ea8:	689a      	ldr	r2, [r3, #8]
 8000eaa:	07d2      	lsls	r2, r2, #31
 8000eac:	d44d      	bmi.n	8000f4a <ADC_Enable+0xae>
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8000eae:	6899      	ldr	r1, [r3, #8]
 8000eb0:	4a27      	ldr	r2, [pc, #156]	@ (8000f50 <ADC_Enable+0xb4>)
 8000eb2:	4211      	tst	r1, r2
 8000eb4:	d117      	bne.n	8000ee6 <ADC_Enable+0x4a>
  MODIFY_REG(ADCx->CR,
 8000eb6:	689a      	ldr	r2, [r3, #8]
 8000eb8:	4926      	ldr	r1, [pc, #152]	@ (8000f54 <ADC_Enable+0xb8>)
 8000eba:	400a      	ands	r2, r1
 8000ebc:	2101      	movs	r1, #1
 8000ebe:	430a      	orrs	r2, r1
 8000ec0:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 8000ec2:	4b25      	ldr	r3, [pc, #148]	@ (8000f58 <ADC_Enable+0xbc>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8000ec6:	021b      	lsls	r3, r3, #8
 8000ec8:	d517      	bpl.n	8000efa <ADC_Enable+0x5e>
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000eca:	4b24      	ldr	r3, [pc, #144]	@ (8000f5c <ADC_Enable+0xc0>)
 8000ecc:	6818      	ldr	r0, [r3, #0]
 8000ece:	4924      	ldr	r1, [pc, #144]	@ (8000f60 <ADC_Enable+0xc4>)
 8000ed0:	f7ff f908 	bl	80000e4 <__udivsi3>
 8000ed4:	3001      	adds	r0, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8000ed6:	9001      	str	r0, [sp, #4]
      while (wait_loop_index != 0UL)
 8000ed8:	9b01      	ldr	r3, [sp, #4]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d00d      	beq.n	8000efa <ADC_Enable+0x5e>
        wait_loop_index--;
 8000ede:	9b01      	ldr	r3, [sp, #4]
 8000ee0:	3b01      	subs	r3, #1
 8000ee2:	9301      	str	r3, [sp, #4]
 8000ee4:	e7f8      	b.n	8000ed8 <ADC_Enable+0x3c>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ee6:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8000ee8:	2210      	movs	r2, #16
 8000eea:	4313      	orrs	r3, r2
 8000eec:	6583      	str	r3, [r0, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000eee:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8000ef0:	3a0f      	subs	r2, #15
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	65c3      	str	r3, [r0, #92]	@ 0x5c
      return HAL_ERROR;
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	e028      	b.n	8000f4c <ADC_Enable+0xb0>
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000efa:	7e63      	ldrb	r3, [r4, #25]
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	d101      	bne.n	8000f04 <ADC_Enable+0x68>
  return HAL_OK;
 8000f00:	2000      	movs	r0, #0
 8000f02:	e023      	b.n	8000f4c <ADC_Enable+0xb0>
      tickstart = HAL_GetTick();
 8000f04:	f7ff fd10 	bl	8000928 <HAL_GetTick>
 8000f08:	0005      	movs	r5, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8000f0a:	e004      	b.n	8000f16 <ADC_Enable+0x7a>
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000f0c:	f7ff fd0c 	bl	8000928 <HAL_GetTick>
 8000f10:	1b40      	subs	r0, r0, r5
 8000f12:	2802      	cmp	r0, #2
 8000f14:	d80d      	bhi.n	8000f32 <ADC_Enable+0x96>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8000f16:	6823      	ldr	r3, [r4, #0]
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	07d2      	lsls	r2, r2, #31
 8000f1c:	d413      	bmi.n	8000f46 <ADC_Enable+0xaa>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000f1e:	689a      	ldr	r2, [r3, #8]
 8000f20:	07d2      	lsls	r2, r2, #31
 8000f22:	d4f3      	bmi.n	8000f0c <ADC_Enable+0x70>
  MODIFY_REG(ADCx->CR,
 8000f24:	689a      	ldr	r2, [r3, #8]
 8000f26:	490b      	ldr	r1, [pc, #44]	@ (8000f54 <ADC_Enable+0xb8>)
 8000f28:	400a      	ands	r2, r1
 8000f2a:	2101      	movs	r1, #1
 8000f2c:	430a      	orrs	r2, r1
 8000f2e:	609a      	str	r2, [r3, #8]
}
 8000f30:	e7ec      	b.n	8000f0c <ADC_Enable+0x70>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f32:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8000f34:	2210      	movs	r2, #16
 8000f36:	4313      	orrs	r3, r2
 8000f38:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f3a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8000f3c:	3a0f      	subs	r2, #15
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	65e3      	str	r3, [r4, #92]	@ 0x5c
          return HAL_ERROR;
 8000f42:	2001      	movs	r0, #1
 8000f44:	e002      	b.n	8000f4c <ADC_Enable+0xb0>
  return HAL_OK;
 8000f46:	2000      	movs	r0, #0
 8000f48:	e000      	b.n	8000f4c <ADC_Enable+0xb0>
 8000f4a:	2000      	movs	r0, #0
}
 8000f4c:	b003      	add	sp, #12
 8000f4e:	bd30      	pop	{r4, r5, pc}
 8000f50:	80000017 	.word	0x80000017
 8000f54:	7fffffe8 	.word	0x7fffffe8
 8000f58:	40012708 	.word	0x40012708
 8000f5c:	20000008 	.word	0x20000008
 8000f60:	00030d40 	.word	0x00030d40

08000f64 <HAL_ADC_Start_DMA>:
{
 8000f64:	b570      	push	{r4, r5, r6, lr}
 8000f66:	0004      	movs	r4, r0
 8000f68:	000d      	movs	r5, r1
 8000f6a:	0016      	movs	r6, r2
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000f6c:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000f6e:	6893      	ldr	r3, [r2, #8]
 8000f70:	075b      	lsls	r3, r3, #29
 8000f72:	d447      	bmi.n	8001004 <HAL_ADC_Start_DMA+0xa0>
    __HAL_LOCK(hadc);
 8000f74:	2354      	movs	r3, #84	@ 0x54
 8000f76:	5cc3      	ldrb	r3, [r0, r3]
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d045      	beq.n	8001008 <HAL_ADC_Start_DMA+0xa4>
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	2154      	movs	r1, #84	@ 0x54
 8000f80:	5443      	strb	r3, [r0, r1]
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8000f82:	68d1      	ldr	r1, [r2, #12]
 8000f84:	420b      	tst	r3, r1
 8000f86:	d10d      	bne.n	8000fa4 <HAL_ADC_Start_DMA+0x40>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000f88:	6893      	ldr	r3, [r2, #8]
 8000f8a:	07db      	lsls	r3, r3, #31
 8000f8c:	d505      	bpl.n	8000f9a <HAL_ADC_Start_DMA+0x36>
  MODIFY_REG(ADCx->CR,
 8000f8e:	6893      	ldr	r3, [r2, #8]
 8000f90:	491e      	ldr	r1, [pc, #120]	@ (800100c <HAL_ADC_Start_DMA+0xa8>)
 8000f92:	400b      	ands	r3, r1
 8000f94:	2102      	movs	r1, #2
 8000f96:	430b      	orrs	r3, r1
 8000f98:	6093      	str	r3, [r2, #8]
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8000f9a:	6822      	ldr	r2, [r4, #0]
 8000f9c:	68d3      	ldr	r3, [r2, #12]
 8000f9e:	2101      	movs	r1, #1
 8000fa0:	430b      	orrs	r3, r1
 8000fa2:	60d3      	str	r3, [r2, #12]
    tmp_hal_status = ADC_Enable(hadc);
 8000fa4:	0020      	movs	r0, r4
 8000fa6:	f7ff ff79 	bl	8000e9c <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8000faa:	2800      	cmp	r0, #0
 8000fac:	d12b      	bne.n	8001006 <HAL_ADC_Start_DMA+0xa2>
      ADC_STATE_CLR_SET(hadc->State,
 8000fae:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8000fb0:	4b17      	ldr	r3, [pc, #92]	@ (8001010 <HAL_ADC_Start_DMA+0xac>)
 8000fb2:	401a      	ands	r2, r3
 8000fb4:	2380      	movs	r3, #128	@ 0x80
 8000fb6:	005b      	lsls	r3, r3, #1
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	65a3      	str	r3, [r4, #88]	@ 0x58
      ADC_CLEAR_ERRORCODE(hadc);
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	65e3      	str	r3, [r4, #92]	@ 0x5c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000fc0:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8000fc2:	4914      	ldr	r1, [pc, #80]	@ (8001014 <HAL_ADC_Start_DMA+0xb0>)
 8000fc4:	62d1      	str	r1, [r2, #44]	@ 0x2c
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000fc6:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8000fc8:	4913      	ldr	r1, [pc, #76]	@ (8001018 <HAL_ADC_Start_DMA+0xb4>)
 8000fca:	6311      	str	r1, [r2, #48]	@ 0x30
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000fcc:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8000fce:	4913      	ldr	r1, [pc, #76]	@ (800101c <HAL_ADC_Start_DMA+0xb8>)
 8000fd0:	6351      	str	r1, [r2, #52]	@ 0x34
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000fd2:	6822      	ldr	r2, [r4, #0]
 8000fd4:	211c      	movs	r1, #28
 8000fd6:	6011      	str	r1, [r2, #0]
      __HAL_UNLOCK(hadc);
 8000fd8:	2254      	movs	r2, #84	@ 0x54
 8000fda:	54a3      	strb	r3, [r4, r2]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000fdc:	6822      	ldr	r2, [r4, #0]
 8000fde:	6853      	ldr	r3, [r2, #4]
 8000fe0:	390c      	subs	r1, #12
 8000fe2:	430b      	orrs	r3, r1
 8000fe4:	6053      	str	r3, [r2, #4]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000fe6:	6821      	ldr	r1, [r4, #0]
 8000fe8:	3140      	adds	r1, #64	@ 0x40
 8000fea:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8000fec:	0033      	movs	r3, r6
 8000fee:	002a      	movs	r2, r5
 8000ff0:	f000 fa26 	bl	8001440 <HAL_DMA_Start_IT>
      LL_ADC_REG_StartConversion(hadc->Instance);
 8000ff4:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8000ff6:	6893      	ldr	r3, [r2, #8]
 8000ff8:	4904      	ldr	r1, [pc, #16]	@ (800100c <HAL_ADC_Start_DMA+0xa8>)
 8000ffa:	400b      	ands	r3, r1
 8000ffc:	2104      	movs	r1, #4
 8000ffe:	430b      	orrs	r3, r1
 8001000:	6093      	str	r3, [r2, #8]
}
 8001002:	e000      	b.n	8001006 <HAL_ADC_Start_DMA+0xa2>
    tmp_hal_status = HAL_BUSY;
 8001004:	2002      	movs	r0, #2
}
 8001006:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LOCK(hadc);
 8001008:	2002      	movs	r0, #2
 800100a:	e7fc      	b.n	8001006 <HAL_ADC_Start_DMA+0xa2>
 800100c:	7fffffe8 	.word	0x7fffffe8
 8001010:	fffff0fe 	.word	0xfffff0fe
 8001014:	08000b9d 	.word	0x08000b9d
 8001018:	08000b77 	.word	0x08000b77
 800101c:	08000b83 	.word	0x08000b83

08001020 <ADC_Disable>:
{
 8001020:	b570      	push	{r4, r5, r6, lr}
 8001022:	0004      	movs	r4, r0
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001024:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001026:	689a      	ldr	r2, [r3, #8]
 8001028:	2102      	movs	r1, #2
 800102a:	0008      	movs	r0, r1
 800102c:	4010      	ands	r0, r2
 800102e:	4211      	tst	r1, r2
 8001030:	d000      	beq.n	8001034 <ADC_Disable+0x14>
 8001032:	2001      	movs	r0, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001034:	689a      	ldr	r2, [r3, #8]
 8001036:	07d2      	lsls	r2, r2, #31
 8001038:	d531      	bpl.n	800109e <ADC_Disable+0x7e>
      && (tmp_adc_is_disable_on_going == 0UL)
 800103a:	2800      	cmp	r0, #0
 800103c:	d131      	bne.n	80010a2 <ADC_Disable+0x82>
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800103e:	6899      	ldr	r1, [r3, #8]
 8001040:	2205      	movs	r2, #5
 8001042:	400a      	ands	r2, r1
 8001044:	2a01      	cmp	r2, #1
 8001046:	d009      	beq.n	800105c <ADC_Disable+0x3c>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001048:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800104a:	2210      	movs	r2, #16
 800104c:	4313      	orrs	r3, r2
 800104e:	65a3      	str	r3, [r4, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001050:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8001052:	3a0f      	subs	r2, #15
 8001054:	4313      	orrs	r3, r2
 8001056:	65e3      	str	r3, [r4, #92]	@ 0x5c
      return HAL_ERROR;
 8001058:	2001      	movs	r0, #1
 800105a:	e021      	b.n	80010a0 <ADC_Disable+0x80>
  MODIFY_REG(ADCx->CR,
 800105c:	689a      	ldr	r2, [r3, #8]
 800105e:	4912      	ldr	r1, [pc, #72]	@ (80010a8 <ADC_Disable+0x88>)
 8001060:	400a      	ands	r2, r1
 8001062:	2102      	movs	r1, #2
 8001064:	430a      	orrs	r2, r1
 8001066:	609a      	str	r2, [r3, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8001068:	6823      	ldr	r3, [r4, #0]
 800106a:	2203      	movs	r2, #3
 800106c:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800106e:	f7ff fc5b 	bl	8000928 <HAL_GetTick>
 8001072:	0005      	movs	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001074:	6823      	ldr	r3, [r4, #0]
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	07db      	lsls	r3, r3, #31
 800107a:	d50e      	bpl.n	800109a <ADC_Disable+0x7a>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800107c:	f7ff fc54 	bl	8000928 <HAL_GetTick>
 8001080:	1b40      	subs	r0, r0, r5
 8001082:	2802      	cmp	r0, #2
 8001084:	d9f6      	bls.n	8001074 <ADC_Disable+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001086:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001088:	2210      	movs	r2, #16
 800108a:	4313      	orrs	r3, r2
 800108c:	65a3      	str	r3, [r4, #88]	@ 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800108e:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8001090:	3a0f      	subs	r2, #15
 8001092:	4313      	orrs	r3, r2
 8001094:	65e3      	str	r3, [r4, #92]	@ 0x5c
        return HAL_ERROR;
 8001096:	2001      	movs	r0, #1
 8001098:	e002      	b.n	80010a0 <ADC_Disable+0x80>
  return HAL_OK;
 800109a:	2000      	movs	r0, #0
 800109c:	e000      	b.n	80010a0 <ADC_Disable+0x80>
 800109e:	2000      	movs	r0, #0
}
 80010a0:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 80010a2:	2000      	movs	r0, #0
 80010a4:	e7fc      	b.n	80010a0 <ADC_Disable+0x80>
 80010a6:	46c0      	nop			@ (mov r8, r8)
 80010a8:	7fffffe8 	.word	0x7fffffe8

080010ac <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 80010ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010ae:	b083      	sub	sp, #12
 80010b0:	0004      	movs	r4, r0
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80010b2:	2300      	movs	r3, #0
 80010b4:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80010b6:	3354      	adds	r3, #84	@ 0x54
 80010b8:	5cc3      	ldrb	r3, [r0, r3]
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d100      	bne.n	80010c0 <HAL_ADCEx_Calibration_Start+0x14>
 80010be:	e0a6      	b.n	800120e <HAL_ADCEx_Calibration_Start+0x162>
 80010c0:	2601      	movs	r6, #1
 80010c2:	2354      	movs	r3, #84	@ 0x54
 80010c4:	54c6      	strb	r6, [r0, r3]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80010c6:	f7ff ffab 	bl	8001020 <ADC_Disable>
 80010ca:	0005      	movs	r5, r0

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80010cc:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80010ce:	689a      	ldr	r2, [r3, #8]
 80010d0:	0031      	movs	r1, r6
 80010d2:	4011      	ands	r1, r2
 80010d4:	4216      	tst	r6, r2
 80010d6:	d009      	beq.n	80010ec <HAL_ADCEx_Calibration_Start+0x40>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010d8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80010da:	2210      	movs	r2, #16
 80010dc:	4313      	orrs	r3, r2
 80010de:	65a3      	str	r3, [r4, #88]	@ 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80010e0:	2354      	movs	r3, #84	@ 0x54
 80010e2:	2200      	movs	r2, #0
 80010e4:	54e2      	strb	r2, [r4, r3]

  /* Return function status */
  return tmp_hal_status;
}
 80010e6:	0028      	movs	r0, r5
 80010e8:	b003      	add	sp, #12
 80010ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ADC_STATE_CLR_SET(hadc->State,
 80010ec:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 80010ee:	4849      	ldr	r0, [pc, #292]	@ (8001214 <HAL_ADCEx_Calibration_Start+0x168>)
 80010f0:	4002      	ands	r2, r0
 80010f2:	3006      	adds	r0, #6
 80010f4:	30ff      	adds	r0, #255	@ 0xff
 80010f6:	4302      	orrs	r2, r0
 80010f8:	65a2      	str	r2, [r4, #88]	@ 0x58
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80010fa:	68de      	ldr	r6, [r3, #12]
 80010fc:	4a46      	ldr	r2, [pc, #280]	@ (8001218 <HAL_ADCEx_Calibration_Start+0x16c>)
 80010fe:	4016      	ands	r6, r2
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8001100:	68da      	ldr	r2, [r3, #12]
 8001102:	4846      	ldr	r0, [pc, #280]	@ (800121c <HAL_ADCEx_Calibration_Start+0x170>)
 8001104:	4002      	ands	r2, r0
 8001106:	60da      	str	r2, [r3, #12]
  uint32_t calibration_factor_accumulated = 0;
 8001108:	0008      	movs	r0, r1
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800110a:	e006      	b.n	800111a <HAL_ADCEx_Calibration_Start+0x6e>
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 800110c:	22b4      	movs	r2, #180	@ 0xb4
 800110e:	589a      	ldr	r2, [r3, r2]
 8001110:	237f      	movs	r3, #127	@ 0x7f
 8001112:	4013      	ands	r3, r2
      calibration_factor_accumulated += (LL_ADC_GetCalibrationFactor(hadc->Instance) + 1UL);
 8001114:	3301      	adds	r3, #1
 8001116:	18c0      	adds	r0, r0, r3
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8001118:	3101      	adds	r1, #1
 800111a:	2907      	cmp	r1, #7
 800111c:	d81d      	bhi.n	800115a <HAL_ADCEx_Calibration_Start+0xae>
      LL_ADC_StartCalibration(hadc->Instance);
 800111e:	6827      	ldr	r7, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8001120:	68ba      	ldr	r2, [r7, #8]
 8001122:	4b3f      	ldr	r3, [pc, #252]	@ (8001220 <HAL_ADCEx_Calibration_Start+0x174>)
 8001124:	401a      	ands	r2, r3
 8001126:	3318      	adds	r3, #24
 8001128:	4313      	orrs	r3, r2
 800112a:	60bb      	str	r3, [r7, #8]
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800112c:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800112e:	689a      	ldr	r2, [r3, #8]
 8001130:	2a00      	cmp	r2, #0
 8001132:	daeb      	bge.n	800110c <HAL_ADCEx_Calibration_Start+0x60>
        wait_loop_index++;
 8001134:	9b01      	ldr	r3, [sp, #4]
 8001136:	3301      	adds	r3, #1
 8001138:	9301      	str	r3, [sp, #4]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800113a:	9a01      	ldr	r2, [sp, #4]
 800113c:	23ae      	movs	r3, #174	@ 0xae
 800113e:	029b      	lsls	r3, r3, #10
 8001140:	429a      	cmp	r2, r3
 8001142:	d3f3      	bcc.n	800112c <HAL_ADCEx_Calibration_Start+0x80>
          ADC_STATE_CLR_SET(hadc->State,
 8001144:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001146:	2212      	movs	r2, #18
 8001148:	4393      	bics	r3, r2
 800114a:	3a02      	subs	r2, #2
 800114c:	4313      	orrs	r3, r2
 800114e:	65a3      	str	r3, [r4, #88]	@ 0x58
          __HAL_UNLOCK(hadc);
 8001150:	2354      	movs	r3, #84	@ 0x54
 8001152:	2200      	movs	r2, #0
 8001154:	54e2      	strb	r2, [r4, r3]
          return HAL_ERROR;
 8001156:	2501      	movs	r5, #1
 8001158:	e7c5      	b.n	80010e6 <HAL_ADCEx_Calibration_Start+0x3a>
    calibration_factor_accumulated += (calibration_index / 2UL);
 800115a:	084b      	lsrs	r3, r1, #1
 800115c:	1818      	adds	r0, r3, r0
    calibration_factor_accumulated /= calibration_index;
 800115e:	f7fe ffc1 	bl	80000e4 <__udivsi3>
    LL_ADC_Enable(hadc->Instance);
 8001162:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8001164:	6893      	ldr	r3, [r2, #8]
 8001166:	492e      	ldr	r1, [pc, #184]	@ (8001220 <HAL_ADCEx_Calibration_Start+0x174>)
 8001168:	400b      	ands	r3, r1
 800116a:	2101      	movs	r1, #1
 800116c:	430b      	orrs	r3, r1
 800116e:	6093      	str	r3, [r2, #8]
    if (LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 8001170:	6822      	ldr	r2, [r4, #0]
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 8001172:	6911      	ldr	r1, [r2, #16]
 8001174:	2380      	movs	r3, #128	@ 0x80
 8001176:	05db      	lsls	r3, r3, #23
 8001178:	4299      	cmp	r1, r3
 800117a:	d217      	bcs.n	80011ac <HAL_ADCEx_Calibration_Start+0x100>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 800117c:	4b29      	ldr	r3, [pc, #164]	@ (8001224 <HAL_ADCEx_Calibration_Start+0x178>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	21f0      	movs	r1, #240	@ 0xf0
 8001182:	0389      	lsls	r1, r1, #14
 8001184:	400b      	ands	r3, r1
      if (adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 8001186:	21e0      	movs	r1, #224	@ 0xe0
 8001188:	0349      	lsls	r1, r1, #13
 800118a:	428b      	cmp	r3, r1
 800118c:	d30e      	bcc.n	80011ac <HAL_ADCEx_Calibration_Start+0x100>
        delay_cpu_cycles = (1UL << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3UL));
 800118e:	0c9b      	lsrs	r3, r3, #18
 8001190:	3b03      	subs	r3, #3
 8001192:	2101      	movs	r1, #1
 8001194:	4099      	lsls	r1, r3
 8001196:	9100      	str	r1, [sp, #0]
        delay_cpu_cycles >>= 1UL;
 8001198:	9b00      	ldr	r3, [sp, #0]
 800119a:	085b      	lsrs	r3, r3, #1
 800119c:	9300      	str	r3, [sp, #0]
        while (delay_cpu_cycles != 0UL)
 800119e:	e002      	b.n	80011a6 <HAL_ADCEx_Calibration_Start+0xfa>
          delay_cpu_cycles--;
 80011a0:	9b00      	ldr	r3, [sp, #0]
 80011a2:	3b01      	subs	r3, #1
 80011a4:	9300      	str	r3, [sp, #0]
        while (delay_cpu_cycles != 0UL)
 80011a6:	9b00      	ldr	r3, [sp, #0]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d1f9      	bne.n	80011a0 <HAL_ADCEx_Calibration_Start+0xf4>
  MODIFY_REG(ADCx->CALFACT,
 80011ac:	21b4      	movs	r1, #180	@ 0xb4
 80011ae:	5853      	ldr	r3, [r2, r1]
 80011b0:	277f      	movs	r7, #127	@ 0x7f
 80011b2:	43bb      	bics	r3, r7
 80011b4:	4318      	orrs	r0, r3
 80011b6:	5050      	str	r0, [r2, r1]
    LL_ADC_Disable(hadc->Instance);
 80011b8:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80011ba:	6893      	ldr	r3, [r2, #8]
 80011bc:	4918      	ldr	r1, [pc, #96]	@ (8001220 <HAL_ADCEx_Calibration_Start+0x174>)
 80011be:	400b      	ands	r3, r1
 80011c0:	2102      	movs	r1, #2
 80011c2:	430b      	orrs	r3, r1
 80011c4:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 80011c6:	f7ff fbaf 	bl	8000928 <HAL_GetTick>
 80011ca:	0007      	movs	r7, r0
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80011cc:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80011ce:	689a      	ldr	r2, [r3, #8]
 80011d0:	07d2      	lsls	r2, r2, #31
 80011d2:	d409      	bmi.n	80011e8 <HAL_ADCEx_Calibration_Start+0x13c>
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 80011d4:	68da      	ldr	r2, [r3, #12]
 80011d6:	4332      	orrs	r2, r6
 80011d8:	60da      	str	r2, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 80011da:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80011dc:	2203      	movs	r2, #3
 80011de:	4393      	bics	r3, r2
 80011e0:	3a02      	subs	r2, #2
 80011e2:	4313      	orrs	r3, r2
 80011e4:	65a3      	str	r3, [r4, #88]	@ 0x58
 80011e6:	e77b      	b.n	80010e0 <HAL_ADCEx_Calibration_Start+0x34>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80011e8:	f7ff fb9e 	bl	8000928 <HAL_GetTick>
 80011ec:	1bc0      	subs	r0, r0, r7
 80011ee:	2802      	cmp	r0, #2
 80011f0:	d9ec      	bls.n	80011cc <HAL_ADCEx_Calibration_Start+0x120>
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80011f2:	6823      	ldr	r3, [r4, #0]
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	07db      	lsls	r3, r3, #31
 80011f8:	d5e8      	bpl.n	80011cc <HAL_ADCEx_Calibration_Start+0x120>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011fa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80011fc:	2210      	movs	r2, #16
 80011fe:	4313      	orrs	r3, r2
 8001200:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001202:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8001204:	3a0f      	subs	r2, #15
 8001206:	4313      	orrs	r3, r2
 8001208:	65e3      	str	r3, [r4, #92]	@ 0x5c
          return HAL_ERROR;
 800120a:	2501      	movs	r5, #1
 800120c:	e76b      	b.n	80010e6 <HAL_ADCEx_Calibration_Start+0x3a>
  __HAL_LOCK(hadc);
 800120e:	2502      	movs	r5, #2
 8001210:	e769      	b.n	80010e6 <HAL_ADCEx_Calibration_Start+0x3a>
 8001212:	46c0      	nop			@ (mov r8, r8)
 8001214:	fffffefd 	.word	0xfffffefd
 8001218:	00008003 	.word	0x00008003
 800121c:	ffff7ffc 	.word	0xffff7ffc
 8001220:	7fffffe8 	.word	0x7fffffe8
 8001224:	40012708 	.word	0x40012708

08001228 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001228:	b570      	push	{r4, r5, r6, lr}
  if ((int32_t)(IRQn) >= 0)
 800122a:	2800      	cmp	r0, #0
 800122c:	db11      	blt.n	8001252 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800122e:	0883      	lsrs	r3, r0, #2
 8001230:	4d13      	ldr	r5, [pc, #76]	@ (8001280 <__NVIC_SetPriority+0x58>)
 8001232:	33c0      	adds	r3, #192	@ 0xc0
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	595c      	ldr	r4, [r3, r5]
 8001238:	2203      	movs	r2, #3
 800123a:	4010      	ands	r0, r2
 800123c:	00c0      	lsls	r0, r0, #3
 800123e:	32fc      	adds	r2, #252	@ 0xfc
 8001240:	0016      	movs	r6, r2
 8001242:	4086      	lsls	r6, r0
 8001244:	43b4      	bics	r4, r6
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001246:	0189      	lsls	r1, r1, #6
 8001248:	400a      	ands	r2, r1
 800124a:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800124c:	4322      	orrs	r2, r4
 800124e:	515a      	str	r2, [r3, r5]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001250:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001252:	230f      	movs	r3, #15
 8001254:	4003      	ands	r3, r0
 8001256:	3b08      	subs	r3, #8
 8001258:	089b      	lsrs	r3, r3, #2
 800125a:	3306      	adds	r3, #6
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	4a09      	ldr	r2, [pc, #36]	@ (8001284 <__NVIC_SetPriority+0x5c>)
 8001260:	4694      	mov	ip, r2
 8001262:	4463      	add	r3, ip
 8001264:	685c      	ldr	r4, [r3, #4]
 8001266:	2203      	movs	r2, #3
 8001268:	4010      	ands	r0, r2
 800126a:	00c0      	lsls	r0, r0, #3
 800126c:	32fc      	adds	r2, #252	@ 0xfc
 800126e:	0015      	movs	r5, r2
 8001270:	4085      	lsls	r5, r0
 8001272:	43ac      	bics	r4, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001274:	0189      	lsls	r1, r1, #6
 8001276:	400a      	ands	r2, r1
 8001278:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800127a:	4322      	orrs	r2, r4
 800127c:	605a      	str	r2, [r3, #4]
}
 800127e:	e7e7      	b.n	8001250 <__NVIC_SetPriority+0x28>
 8001280:	e000e100 	.word	0xe000e100
 8001284:	e000ed00 	.word	0xe000ed00

08001288 <SysTick_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001288:	3801      	subs	r0, #1
 800128a:	2380      	movs	r3, #128	@ 0x80
 800128c:	045b      	lsls	r3, r3, #17
 800128e:	4298      	cmp	r0, r3
 8001290:	d20f      	bcs.n	80012b2 <SysTick_Config+0x2a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001292:	4a09      	ldr	r2, [pc, #36]	@ (80012b8 <SysTick_Config+0x30>)
 8001294:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001296:	4809      	ldr	r0, [pc, #36]	@ (80012bc <SysTick_Config+0x34>)
 8001298:	6a03      	ldr	r3, [r0, #32]
 800129a:	021b      	lsls	r3, r3, #8
 800129c:	0a1b      	lsrs	r3, r3, #8
 800129e:	21c0      	movs	r1, #192	@ 0xc0
 80012a0:	0609      	lsls	r1, r1, #24
 80012a2:	430b      	orrs	r3, r1
 80012a4:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012a6:	2300      	movs	r3, #0
 80012a8:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012aa:	3307      	adds	r3, #7
 80012ac:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012ae:	2000      	movs	r0, #0
}
 80012b0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80012b2:	2001      	movs	r0, #1
 80012b4:	e7fc      	b.n	80012b0 <SysTick_Config+0x28>
 80012b6:	46c0      	nop			@ (mov r8, r8)
 80012b8:	e000e010 	.word	0xe000e010
 80012bc:	e000ed00 	.word	0xe000ed00

080012c0 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012c0:	b510      	push	{r4, lr}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80012c2:	f7ff ffb1 	bl	8001228 <__NVIC_SetPriority>
}
 80012c6:	bd10      	pop	{r4, pc}

080012c8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80012c8:	2800      	cmp	r0, #0
 80012ca:	db05      	blt.n	80012d8 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012cc:	221f      	movs	r2, #31
 80012ce:	4002      	ands	r2, r0
 80012d0:	2301      	movs	r3, #1
 80012d2:	4093      	lsls	r3, r2
 80012d4:	4a01      	ldr	r2, [pc, #4]	@ (80012dc <HAL_NVIC_EnableIRQ+0x14>)
 80012d6:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80012d8:	4770      	bx	lr
 80012da:	46c0      	nop			@ (mov r8, r8)
 80012dc:	e000e100 	.word	0xe000e100

080012e0 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012e0:	b510      	push	{r4, lr}
  return SysTick_Config(TicksNumb);
 80012e2:	f7ff ffd1 	bl	8001288 <SysTick_Config>
}
 80012e6:	bd10      	pop	{r4, pc}

080012e8 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80012e8:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80012ea:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 80012ec:	6cc5      	ldr	r5, [r0, #76]	@ 0x4c
 80012ee:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80012f0:	6d04      	ldr	r4, [r0, #80]	@ 0x50
 80012f2:	2c00      	cmp	r4, #0
 80012f4:	d002      	beq.n	80012fc <DMA_SetConfig+0x14>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80012f6:	6d44      	ldr	r4, [r0, #84]	@ 0x54
 80012f8:	6d85      	ldr	r5, [r0, #88]	@ 0x58
 80012fa:	6065      	str	r5, [r4, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 80012fc:	4f0b      	ldr	r7, [pc, #44]	@ (800132c <DMA_SetConfig+0x44>)
 80012fe:	687c      	ldr	r4, [r7, #4]
 8001300:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 8001302:	261c      	movs	r6, #28
 8001304:	402e      	ands	r6, r5
 8001306:	2501      	movs	r5, #1
 8001308:	40b5      	lsls	r5, r6
 800130a:	432c      	orrs	r4, r5
 800130c:	607c      	str	r4, [r7, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800130e:	6804      	ldr	r4, [r0, #0]
 8001310:	6063      	str	r3, [r4, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001312:	6883      	ldr	r3, [r0, #8]
 8001314:	2b10      	cmp	r3, #16
 8001316:	d004      	beq.n	8001322 <DMA_SetConfig+0x3a>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001318:	6803      	ldr	r3, [r0, #0]
 800131a:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800131c:	6803      	ldr	r3, [r0, #0]
 800131e:	60da      	str	r2, [r3, #12]
  }
}
 8001320:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = DstAddress;
 8001322:	6803      	ldr	r3, [r0, #0]
 8001324:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001326:	6803      	ldr	r3, [r0, #0]
 8001328:	60d9      	str	r1, [r3, #12]
 800132a:	e7f9      	b.n	8001320 <DMA_SetConfig+0x38>
 800132c:	40020000 	.word	0x40020000

08001330 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001330:	b510      	push	{r4, lr}
 8001332:	0004      	movs	r4, r0
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001334:	6803      	ldr	r3, [r0, #0]
 8001336:	20ff      	movs	r0, #255	@ 0xff
 8001338:	4018      	ands	r0, r3
 800133a:	3808      	subs	r0, #8
 800133c:	2114      	movs	r1, #20
 800133e:	f7fe fed1 	bl	80000e4 <__udivsi3>
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
                                                             ((hdma->ChannelIndex >> 2U) * \
 8001342:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001344:	089b      	lsrs	r3, r3, #2
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 8001346:	4a06      	ldr	r2, [pc, #24]	@ (8001360 <DMA_CalcDMAMUXChannelBaseAndMask+0x30>)
 8001348:	4694      	mov	ip, r2
 800134a:	4463      	add	r3, ip
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	6463      	str	r3, [r4, #68]	@ 0x44
                                                              ((uint32_t)DMAMUX1_Channel1 - \
                                                               (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001350:	4b04      	ldr	r3, [pc, #16]	@ (8001364 <DMA_CalcDMAMUXChannelBaseAndMask+0x34>)
 8001352:	64a3      	str	r3, [r4, #72]	@ 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8001354:	231c      	movs	r3, #28
 8001356:	4018      	ands	r0, r3
 8001358:	3b1b      	subs	r3, #27
 800135a:	4083      	lsls	r3, r0
 800135c:	64e3      	str	r3, [r4, #76]	@ 0x4c
}
 800135e:	bd10      	pop	{r4, pc}
 8001360:	10008200 	.word	0x10008200
 8001364:	40020880 	.word	0x40020880

08001368 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001368:	6842      	ldr	r2, [r0, #4]
 800136a:	23ff      	movs	r3, #255	@ 0xff
 800136c:	4013      	ands	r3, r2

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 800136e:	4a06      	ldr	r2, [pc, #24]	@ (8001388 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x20>)
 8001370:	189a      	adds	r2, r3, r2
 8001372:	0092      	lsls	r2, r2, #2
 8001374:	6502      	str	r2, [r0, #80]	@ 0x50
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001376:	4a05      	ldr	r2, [pc, #20]	@ (800138c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 8001378:	6542      	str	r2, [r0, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800137a:	3b01      	subs	r3, #1
 800137c:	2203      	movs	r2, #3
 800137e:	401a      	ands	r2, r3
 8001380:	2301      	movs	r3, #1
 8001382:	4093      	lsls	r3, r2
 8001384:	6583      	str	r3, [r0, #88]	@ 0x58
}
 8001386:	4770      	bx	lr
 8001388:	1000823f 	.word	0x1000823f
 800138c:	40020940 	.word	0x40020940

08001390 <HAL_DMA_Init>:
{
 8001390:	b570      	push	{r4, r5, r6, lr}
 8001392:	1e04      	subs	r4, r0, #0
  if (hdma == NULL)
 8001394:	d04d      	beq.n	8001432 <HAL_DMA_Init+0xa2>
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8001396:	6805      	ldr	r5, [r0, #0]
 8001398:	4b27      	ldr	r3, [pc, #156]	@ (8001438 <HAL_DMA_Init+0xa8>)
 800139a:	18e8      	adds	r0, r5, r3
 800139c:	2114      	movs	r1, #20
 800139e:	f7fe fea1 	bl	80000e4 <__udivsi3>
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 80013a2:	0080      	lsls	r0, r0, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 80013a4:	6420      	str	r0, [r4, #64]	@ 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 80013a6:	2325      	movs	r3, #37	@ 0x25
 80013a8:	2202      	movs	r2, #2
 80013aa:	54e2      	strb	r2, [r4, r3]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80013ac:	682b      	ldr	r3, [r5, #0]
 80013ae:	4a23      	ldr	r2, [pc, #140]	@ (800143c <HAL_DMA_Init+0xac>)
 80013b0:	4013      	ands	r3, r2
 80013b2:	602b      	str	r3, [r5, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80013b4:	6821      	ldr	r1, [r4, #0]
 80013b6:	680a      	ldr	r2, [r1, #0]
 80013b8:	68a3      	ldr	r3, [r4, #8]
 80013ba:	68e0      	ldr	r0, [r4, #12]
 80013bc:	4303      	orrs	r3, r0
 80013be:	6920      	ldr	r0, [r4, #16]
 80013c0:	4303      	orrs	r3, r0
 80013c2:	6960      	ldr	r0, [r4, #20]
 80013c4:	4303      	orrs	r3, r0
 80013c6:	69a0      	ldr	r0, [r4, #24]
 80013c8:	4303      	orrs	r3, r0
 80013ca:	69e0      	ldr	r0, [r4, #28]
 80013cc:	4303      	orrs	r3, r0
 80013ce:	6a20      	ldr	r0, [r4, #32]
 80013d0:	4303      	orrs	r3, r0
 80013d2:	4313      	orrs	r3, r2
 80013d4:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80013d6:	0020      	movs	r0, r4
 80013d8:	f7ff ffaa 	bl	8001330 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80013dc:	68a2      	ldr	r2, [r4, #8]
 80013de:	2380      	movs	r3, #128	@ 0x80
 80013e0:	01db      	lsls	r3, r3, #7
 80013e2:	429a      	cmp	r2, r3
 80013e4:	d018      	beq.n	8001418 <HAL_DMA_Init+0x88>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80013e6:	6861      	ldr	r1, [r4, #4]
 80013e8:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80013ea:	23ff      	movs	r3, #255	@ 0xff
 80013ec:	400b      	ands	r3, r1
 80013ee:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80013f0:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80013f2:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 80013f4:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request > 0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80013f6:	6863      	ldr	r3, [r4, #4]
 80013f8:	3b01      	subs	r3, #1
 80013fa:	2b03      	cmp	r3, #3
 80013fc:	d90f      	bls.n	800141e <HAL_DMA_Init+0x8e>
    hdma->DMAmuxRequestGen = 0U;
 80013fe:	2300      	movs	r3, #0
 8001400:	6523      	str	r3, [r4, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8001402:	6563      	str	r3, [r4, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001404:	65a3      	str	r3, [r4, #88]	@ 0x58
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001406:	2300      	movs	r3, #0
 8001408:	63e3      	str	r3, [r4, #60]	@ 0x3c
  hdma->State  = HAL_DMA_STATE_READY;
 800140a:	2225      	movs	r2, #37	@ 0x25
 800140c:	2101      	movs	r1, #1
 800140e:	54a1      	strb	r1, [r4, r2]
  __HAL_UNLOCK(hdma);
 8001410:	3a01      	subs	r2, #1
 8001412:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8001414:	2000      	movs	r0, #0
}
 8001416:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001418:	2300      	movs	r3, #0
 800141a:	6063      	str	r3, [r4, #4]
 800141c:	e7e3      	b.n	80013e6 <HAL_DMA_Init+0x56>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800141e:	0020      	movs	r0, r4
 8001420:	f7ff ffa2 	bl	8001368 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001424:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800142a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800142c:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800142e:	605a      	str	r2, [r3, #4]
 8001430:	e7e9      	b.n	8001406 <HAL_DMA_Init+0x76>
    return HAL_ERROR;
 8001432:	2001      	movs	r0, #1
 8001434:	e7ef      	b.n	8001416 <HAL_DMA_Init+0x86>
 8001436:	46c0      	nop			@ (mov r8, r8)
 8001438:	bffdfff8 	.word	0xbffdfff8
 800143c:	ffff800f 	.word	0xffff800f

08001440 <HAL_DMA_Start_IT>:
{
 8001440:	b570      	push	{r4, r5, r6, lr}
 8001442:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 8001444:	2024      	movs	r0, #36	@ 0x24
 8001446:	5c20      	ldrb	r0, [r4, r0]
 8001448:	2801      	cmp	r0, #1
 800144a:	d046      	beq.n	80014da <HAL_DMA_Start_IT+0x9a>
 800144c:	2024      	movs	r0, #36	@ 0x24
 800144e:	2501      	movs	r5, #1
 8001450:	5425      	strb	r5, [r4, r0]
  if (HAL_DMA_STATE_READY == hdma->State)
 8001452:	3001      	adds	r0, #1
 8001454:	5c20      	ldrb	r0, [r4, r0]
 8001456:	2801      	cmp	r0, #1
 8001458:	d007      	beq.n	800146a <HAL_DMA_Start_IT+0x2a>
    __HAL_UNLOCK(hdma);
 800145a:	2324      	movs	r3, #36	@ 0x24
 800145c:	2200      	movs	r2, #0
 800145e:	54e2      	strb	r2, [r4, r3]
    status = HAL_BUSY;
 8001460:	2002      	movs	r0, #2
  __HAL_UNLOCK(hdma);
 8001462:	2324      	movs	r3, #36	@ 0x24
 8001464:	2200      	movs	r2, #0
 8001466:	54e2      	strb	r2, [r4, r3]
}
 8001468:	bd70      	pop	{r4, r5, r6, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 800146a:	3024      	adds	r0, #36	@ 0x24
 800146c:	3501      	adds	r5, #1
 800146e:	5425      	strb	r5, [r4, r0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001470:	2000      	movs	r0, #0
 8001472:	63e0      	str	r0, [r4, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 8001474:	6825      	ldr	r5, [r4, #0]
 8001476:	6828      	ldr	r0, [r5, #0]
 8001478:	2601      	movs	r6, #1
 800147a:	43b0      	bics	r0, r6
 800147c:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800147e:	0020      	movs	r0, r4
 8001480:	f7ff ff32 	bl	80012e8 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8001484:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001486:	2b00      	cmp	r3, #0
 8001488:	d01c      	beq.n	80014c4 <HAL_DMA_Start_IT+0x84>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800148a:	6822      	ldr	r2, [r4, #0]
 800148c:	6813      	ldr	r3, [r2, #0]
 800148e:	210e      	movs	r1, #14
 8001490:	430b      	orrs	r3, r1
 8001492:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001494:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8001496:	6813      	ldr	r3, [r2, #0]
 8001498:	03db      	lsls	r3, r3, #15
 800149a:	d504      	bpl.n	80014a6 <HAL_DMA_Start_IT+0x66>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800149c:	6811      	ldr	r1, [r2, #0]
 800149e:	2380      	movs	r3, #128	@ 0x80
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	430b      	orrs	r3, r1
 80014a4:	6013      	str	r3, [r2, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 80014a6:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d004      	beq.n	80014b6 <HAL_DMA_Start_IT+0x76>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80014ac:	6819      	ldr	r1, [r3, #0]
 80014ae:	2280      	movs	r2, #128	@ 0x80
 80014b0:	0052      	lsls	r2, r2, #1
 80014b2:	430a      	orrs	r2, r1
 80014b4:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 80014b6:	6822      	ldr	r2, [r4, #0]
 80014b8:	6813      	ldr	r3, [r2, #0]
 80014ba:	2101      	movs	r1, #1
 80014bc:	430b      	orrs	r3, r1
 80014be:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80014c0:	2000      	movs	r0, #0
 80014c2:	e7ce      	b.n	8001462 <HAL_DMA_Start_IT+0x22>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80014c4:	6822      	ldr	r2, [r4, #0]
 80014c6:	6813      	ldr	r3, [r2, #0]
 80014c8:	2104      	movs	r1, #4
 80014ca:	438b      	bics	r3, r1
 80014cc:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80014ce:	6822      	ldr	r2, [r4, #0]
 80014d0:	6813      	ldr	r3, [r2, #0]
 80014d2:	3106      	adds	r1, #6
 80014d4:	430b      	orrs	r3, r1
 80014d6:	6013      	str	r3, [r2, #0]
 80014d8:	e7dc      	b.n	8001494 <HAL_DMA_Start_IT+0x54>
  __HAL_LOCK(hdma);
 80014da:	2002      	movs	r0, #2
 80014dc:	e7c4      	b.n	8001468 <HAL_DMA_Start_IT+0x28>
	...

080014e0 <HAL_DMA_IRQHandler>:
{
 80014e0:	b570      	push	{r4, r5, r6, lr}
  uint32_t flag_it = DMA1->ISR;
 80014e2:	4b31      	ldr	r3, [pc, #196]	@ (80015a8 <HAL_DMA_IRQHandler+0xc8>)
 80014e4:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80014e6:	6804      	ldr	r4, [r0, #0]
 80014e8:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80014ea:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 80014ec:	231c      	movs	r3, #28
 80014ee:	4013      	ands	r3, r2
 80014f0:	2204      	movs	r2, #4
 80014f2:	409a      	lsls	r2, r3
 80014f4:	4211      	tst	r1, r2
 80014f6:	d016      	beq.n	8001526 <HAL_DMA_IRQHandler+0x46>
 80014f8:	076a      	lsls	r2, r5, #29
 80014fa:	d514      	bpl.n	8001526 <HAL_DMA_IRQHandler+0x46>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80014fc:	6823      	ldr	r3, [r4, #0]
 80014fe:	069b      	lsls	r3, r3, #26
 8001500:	d403      	bmi.n	800150a <HAL_DMA_IRQHandler+0x2a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001502:	6823      	ldr	r3, [r4, #0]
 8001504:	2204      	movs	r2, #4
 8001506:	4393      	bics	r3, r2
 8001508:	6023      	str	r3, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 800150a:	4c27      	ldr	r4, [pc, #156]	@ (80015a8 <HAL_DMA_IRQHandler+0xc8>)
 800150c:	6863      	ldr	r3, [r4, #4]
 800150e:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8001510:	211c      	movs	r1, #28
 8001512:	4011      	ands	r1, r2
 8001514:	2204      	movs	r2, #4
 8001516:	408a      	lsls	r2, r1
 8001518:	4313      	orrs	r3, r2
 800151a:	6063      	str	r3, [r4, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 800151c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800151e:	2b00      	cmp	r3, #0
 8001520:	d000      	beq.n	8001524 <HAL_DMA_IRQHandler+0x44>
      hdma->XferHalfCpltCallback(hdma);
 8001522:	4798      	blx	r3
}
 8001524:	bd70      	pop	{r4, r5, r6, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8001526:	2202      	movs	r2, #2
 8001528:	409a      	lsls	r2, r3
 800152a:	4211      	tst	r1, r2
 800152c:	d01c      	beq.n	8001568 <HAL_DMA_IRQHandler+0x88>
 800152e:	07aa      	lsls	r2, r5, #30
 8001530:	d51a      	bpl.n	8001568 <HAL_DMA_IRQHandler+0x88>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001532:	6823      	ldr	r3, [r4, #0]
 8001534:	069b      	lsls	r3, r3, #26
 8001536:	d406      	bmi.n	8001546 <HAL_DMA_IRQHandler+0x66>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001538:	6823      	ldr	r3, [r4, #0]
 800153a:	220a      	movs	r2, #10
 800153c:	4393      	bics	r3, r2
 800153e:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001540:	2325      	movs	r3, #37	@ 0x25
 8001542:	3a09      	subs	r2, #9
 8001544:	54c2      	strb	r2, [r0, r3]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 8001546:	4c18      	ldr	r4, [pc, #96]	@ (80015a8 <HAL_DMA_IRQHandler+0xc8>)
 8001548:	6863      	ldr	r3, [r4, #4]
 800154a:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 800154c:	211c      	movs	r1, #28
 800154e:	4011      	ands	r1, r2
 8001550:	2202      	movs	r2, #2
 8001552:	408a      	lsls	r2, r1
 8001554:	4313      	orrs	r3, r2
 8001556:	6063      	str	r3, [r4, #4]
    __HAL_UNLOCK(hdma);
 8001558:	2324      	movs	r3, #36	@ 0x24
 800155a:	2200      	movs	r2, #0
 800155c:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferCpltCallback != NULL)
 800155e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001560:	2b00      	cmp	r3, #0
 8001562:	d0df      	beq.n	8001524 <HAL_DMA_IRQHandler+0x44>
      hdma->XferCpltCallback(hdma);
 8001564:	4798      	blx	r3
 8001566:	e7dd      	b.n	8001524 <HAL_DMA_IRQHandler+0x44>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001568:	2208      	movs	r2, #8
 800156a:	409a      	lsls	r2, r3
 800156c:	4211      	tst	r1, r2
 800156e:	d0d9      	beq.n	8001524 <HAL_DMA_IRQHandler+0x44>
 8001570:	072d      	lsls	r5, r5, #28
 8001572:	d5d7      	bpl.n	8001524 <HAL_DMA_IRQHandler+0x44>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001574:	6823      	ldr	r3, [r4, #0]
 8001576:	220e      	movs	r2, #14
 8001578:	4393      	bics	r3, r2
 800157a:	6023      	str	r3, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 800157c:	4c0a      	ldr	r4, [pc, #40]	@ (80015a8 <HAL_DMA_IRQHandler+0xc8>)
 800157e:	6862      	ldr	r2, [r4, #4]
 8001580:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8001582:	211c      	movs	r1, #28
 8001584:	4019      	ands	r1, r3
 8001586:	2301      	movs	r3, #1
 8001588:	001d      	movs	r5, r3
 800158a:	408d      	lsls	r5, r1
 800158c:	432a      	orrs	r2, r5
 800158e:	6062      	str	r2, [r4, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001590:	63c3      	str	r3, [r0, #60]	@ 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8001592:	2225      	movs	r2, #37	@ 0x25
 8001594:	5483      	strb	r3, [r0, r2]
    __HAL_UNLOCK(hdma);
 8001596:	3323      	adds	r3, #35	@ 0x23
 8001598:	2200      	movs	r2, #0
 800159a:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferErrorCallback != NULL)
 800159c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d0c0      	beq.n	8001524 <HAL_DMA_IRQHandler+0x44>
      hdma->XferErrorCallback(hdma);
 80015a2:	4798      	blx	r3
  return;
 80015a4:	e7be      	b.n	8001524 <HAL_DMA_IRQHandler+0x44>
 80015a6:	46c0      	nop			@ (mov r8, r8)
 80015a8:	40020000 	.word	0x40020000

080015ac <HAL_EXTI_RegisterCallback>:
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
  HAL_StatusTypeDef status = HAL_OK;

  switch (CallbackID)
 80015ac:	2901      	cmp	r1, #1
 80015ae:	d007      	beq.n	80015c0 <HAL_EXTI_RegisterCallback+0x14>
 80015b0:	2902      	cmp	r1, #2
 80015b2:	d008      	beq.n	80015c6 <HAL_EXTI_RegisterCallback+0x1a>
 80015b4:	2900      	cmp	r1, #0
 80015b6:	d109      	bne.n	80015cc <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 80015b8:	6042      	str	r2, [r0, #4]
      hexti->FallingCallback = pPendingCbfn;
 80015ba:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80015bc:	0008      	movs	r0, r1
      status = HAL_ERROR;
      break;
  }

  return status;
}
 80015be:	4770      	bx	lr
      hexti->RisingCallback = pPendingCbfn;
 80015c0:	6042      	str	r2, [r0, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015c2:	2000      	movs	r0, #0
      break;
 80015c4:	e7fb      	b.n	80015be <HAL_EXTI_RegisterCallback+0x12>
      hexti->FallingCallback = pPendingCbfn;
 80015c6:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80015c8:	2000      	movs	r0, #0
      break;
 80015ca:	e7f8      	b.n	80015be <HAL_EXTI_RegisterCallback+0x12>
  switch (CallbackID)
 80015cc:	2001      	movs	r0, #1
 80015ce:	e7f6      	b.n	80015be <HAL_EXTI_RegisterCallback+0x12>

080015d0 <HAL_EXTI_GetHandle>:
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80015d0:	2800      	cmp	r0, #0
 80015d2:	d002      	beq.n	80015da <HAL_EXTI_GetHandle+0xa>
    return HAL_ERROR;
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80015d4:	6001      	str	r1, [r0, #0]

    return HAL_OK;
 80015d6:	2000      	movs	r0, #0
  }
}
 80015d8:	4770      	bx	lr
    return HAL_ERROR;
 80015da:	2001      	movs	r0, #1
 80015dc:	e7fc      	b.n	80015d8 <HAL_EXTI_GetHandle+0x8>
	...

080015e0 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 80015e0:	b570      	push	{r4, r5, r6, lr}
 80015e2:	0006      	movs	r6, r0
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80015e4:	6802      	ldr	r2, [r0, #0]
 80015e6:	0c14      	lsrs	r4, r2, #16
 80015e8:	2501      	movs	r5, #1
 80015ea:	402c      	ands	r4, r5
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 80015ec:	231f      	movs	r3, #31
 80015ee:	4013      	ands	r3, r2
 80015f0:	409d      	lsls	r5, r3

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 80015f2:	0164      	lsls	r4, r4, #5
 80015f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001620 <HAL_EXTI_IRQHandler+0x40>)
 80015f6:	18e3      	adds	r3, r4, r3
  regval = (*regaddr & maskline);
 80015f8:	681a      	ldr	r2, [r3, #0]

  if (regval != 0U)
 80015fa:	4215      	tst	r5, r2
 80015fc:	d004      	beq.n	8001608 <HAL_EXTI_IRQHandler+0x28>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80015fe:	601d      	str	r5, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 8001600:	6843      	ldr	r3, [r0, #4]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d000      	beq.n	8001608 <HAL_EXTI_IRQHandler+0x28>
    {
      hexti->RisingCallback();
 8001606:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 8001608:	4b06      	ldr	r3, [pc, #24]	@ (8001624 <HAL_EXTI_IRQHandler+0x44>)
 800160a:	469c      	mov	ip, r3
 800160c:	4464      	add	r4, ip
  regval = (*regaddr & maskline);
 800160e:	6823      	ldr	r3, [r4, #0]

  if (regval != 0U)
 8001610:	421d      	tst	r5, r3
 8001612:	d004      	beq.n	800161e <HAL_EXTI_IRQHandler+0x3e>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001614:	6025      	str	r5, [r4, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 8001616:	68b3      	ldr	r3, [r6, #8]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d000      	beq.n	800161e <HAL_EXTI_IRQHandler+0x3e>
    {
      hexti->FallingCallback();
 800161c:	4798      	blx	r3
    }
  }
}
 800161e:	bd70      	pop	{r4, r5, r6, pc}
 8001620:	4002180c 	.word	0x4002180c
 8001624:	40021810 	.word	0x40021810

08001628 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001628:	b5f0      	push	{r4, r5, r6, r7, lr}
 800162a:	46d6      	mov	lr, sl
 800162c:	464f      	mov	r7, r9
 800162e:	4646      	mov	r6, r8
 8001630:	b5c0      	push	{r6, r7, lr}
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001632:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001634:	e03b      	b.n	80016ae <HAL_GPIO_Init+0x86>
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        tmp = EXTI->EXTICR[position >> 2U];
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001636:	2505      	movs	r5, #5
 8001638:	e000      	b.n	800163c <HAL_GPIO_Init+0x14>
 800163a:	2500      	movs	r5, #0
 800163c:	40a5      	lsls	r5, r4
 800163e:	002c      	movs	r4, r5
 8001640:	433c      	orrs	r4, r7
        EXTI->EXTICR[position >> 2U] = tmp;
 8001642:	4d63      	ldr	r5, [pc, #396]	@ (80017d0 <HAL_GPIO_Init+0x1a8>)
 8001644:	3218      	adds	r2, #24
 8001646:	0092      	lsls	r2, r2, #2
 8001648:	5154      	str	r4, [r2, r5]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 800164a:	2280      	movs	r2, #128	@ 0x80
 800164c:	58af      	ldr	r7, [r5, r2]
        tmp &= ~((uint32_t)iocurrent);
 800164e:	464a      	mov	r2, r9
 8001650:	43d2      	mvns	r2, r2
 8001652:	003d      	movs	r5, r7
 8001654:	464c      	mov	r4, r9
 8001656:	43a5      	bics	r5, r4
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001658:	684c      	ldr	r4, [r1, #4]
 800165a:	03e4      	lsls	r4, r4, #15
 800165c:	d502      	bpl.n	8001664 <HAL_GPIO_Init+0x3c>
        {
          tmp |= iocurrent;
 800165e:	003d      	movs	r5, r7
 8001660:	464c      	mov	r4, r9
 8001662:	4325      	orrs	r5, r4
        }
        EXTI->IMR1 = tmp;
 8001664:	4c5a      	ldr	r4, [pc, #360]	@ (80017d0 <HAL_GPIO_Init+0x1a8>)
 8001666:	2780      	movs	r7, #128	@ 0x80
 8001668:	51e5      	str	r5, [r4, r7]

        tmp = EXTI->EMR1;
 800166a:	2584      	movs	r5, #132	@ 0x84
 800166c:	5967      	ldr	r7, [r4, r5]
        tmp &= ~((uint32_t)iocurrent);
 800166e:	003d      	movs	r5, r7
 8001670:	4015      	ands	r5, r2
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001672:	684c      	ldr	r4, [r1, #4]
 8001674:	03a4      	lsls	r4, r4, #14
 8001676:	d502      	bpl.n	800167e <HAL_GPIO_Init+0x56>
        {
          tmp |= iocurrent;
 8001678:	003d      	movs	r5, r7
 800167a:	464c      	mov	r4, r9
 800167c:	4325      	orrs	r5, r4
        }
        EXTI->EMR1 = tmp;
 800167e:	4c54      	ldr	r4, [pc, #336]	@ (80017d0 <HAL_GPIO_Init+0x1a8>)
 8001680:	2784      	movs	r7, #132	@ 0x84
 8001682:	51e5      	str	r5, [r4, r7]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001684:	6827      	ldr	r7, [r4, #0]
        tmp &= ~((uint32_t)iocurrent);
 8001686:	003d      	movs	r5, r7
 8001688:	4015      	ands	r5, r2
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800168a:	684c      	ldr	r4, [r1, #4]
 800168c:	02e4      	lsls	r4, r4, #11
 800168e:	d502      	bpl.n	8001696 <HAL_GPIO_Init+0x6e>
        {
          tmp |= iocurrent;
 8001690:	003d      	movs	r5, r7
 8001692:	464c      	mov	r4, r9
 8001694:	4325      	orrs	r5, r4
        }
        EXTI->RTSR1 = tmp;
 8001696:	4c4e      	ldr	r4, [pc, #312]	@ (80017d0 <HAL_GPIO_Init+0x1a8>)
 8001698:	6025      	str	r5, [r4, #0]

        tmp = EXTI->FTSR1;
 800169a:	6865      	ldr	r5, [r4, #4]
        tmp &= ~((uint32_t)iocurrent);
 800169c:	402a      	ands	r2, r5
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800169e:	684c      	ldr	r4, [r1, #4]
 80016a0:	02a4      	lsls	r4, r4, #10
 80016a2:	d501      	bpl.n	80016a8 <HAL_GPIO_Init+0x80>
        {
          tmp |= iocurrent;
 80016a4:	464a      	mov	r2, r9
 80016a6:	432a      	orrs	r2, r5
        }
        EXTI->FTSR1 = tmp;
 80016a8:	4c49      	ldr	r4, [pc, #292]	@ (80017d0 <HAL_GPIO_Init+0x1a8>)
 80016aa:	6062      	str	r2, [r4, #4]
      }
    }

    position++;
 80016ac:	3301      	adds	r3, #1
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80016ae:	680c      	ldr	r4, [r1, #0]
 80016b0:	0022      	movs	r2, r4
 80016b2:	40da      	lsrs	r2, r3
 80016b4:	d100      	bne.n	80016b8 <HAL_GPIO_Init+0x90>
 80016b6:	e086      	b.n	80017c6 <HAL_GPIO_Init+0x19e>
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80016b8:	2201      	movs	r2, #1
 80016ba:	409a      	lsls	r2, r3
 80016bc:	0026      	movs	r6, r4
 80016be:	4016      	ands	r6, r2
 80016c0:	46b1      	mov	r9, r6
    if (iocurrent != 0U)
 80016c2:	4214      	tst	r4, r2
 80016c4:	d0f2      	beq.n	80016ac <HAL_GPIO_Init+0x84>
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016c6:	684c      	ldr	r4, [r1, #4]
 80016c8:	2c02      	cmp	r4, #2
 80016ca:	d001      	beq.n	80016d0 <HAL_GPIO_Init+0xa8>
 80016cc:	2c12      	cmp	r4, #18
 80016ce:	d118      	bne.n	8001702 <HAL_GPIO_Init+0xda>
        tmp = GPIOx->AFR[position >> 3U];
 80016d0:	08dd      	lsrs	r5, r3, #3
 80016d2:	3508      	adds	r5, #8
 80016d4:	00ad      	lsls	r5, r5, #2
 80016d6:	582c      	ldr	r4, [r5, r0]
 80016d8:	46a4      	mov	ip, r4
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 80016da:	2707      	movs	r7, #7
 80016dc:	401f      	ands	r7, r3
 80016de:	00bf      	lsls	r7, r7, #2
 80016e0:	240f      	movs	r4, #15
 80016e2:	46a2      	mov	sl, r4
 80016e4:	0026      	movs	r6, r4
 80016e6:	40be      	lsls	r6, r7
 80016e8:	46b0      	mov	r8, r6
 80016ea:	4666      	mov	r6, ip
 80016ec:	4644      	mov	r4, r8
 80016ee:	43a6      	bics	r6, r4
 80016f0:	46b4      	mov	ip, r6
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80016f2:	690c      	ldr	r4, [r1, #16]
 80016f4:	4656      	mov	r6, sl
 80016f6:	4026      	ands	r6, r4
 80016f8:	0034      	movs	r4, r6
 80016fa:	40bc      	lsls	r4, r7
 80016fc:	4666      	mov	r6, ip
 80016fe:	4334      	orrs	r4, r6
        GPIOx->AFR[position >> 3U] = tmp;
 8001700:	502c      	str	r4, [r5, r0]
      tmp = GPIOx->MODER;
 8001702:	6804      	ldr	r4, [r0, #0]
 8001704:	46a4      	mov	ip, r4
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8001706:	005d      	lsls	r5, r3, #1
 8001708:	2403      	movs	r4, #3
 800170a:	46a2      	mov	sl, r4
 800170c:	0027      	movs	r7, r4
 800170e:	40af      	lsls	r7, r5
 8001710:	46b8      	mov	r8, r7
 8001712:	43ff      	mvns	r7, r7
 8001714:	4666      	mov	r6, ip
 8001716:	4644      	mov	r4, r8
 8001718:	43a6      	bics	r6, r4
 800171a:	46b4      	mov	ip, r6
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 800171c:	684c      	ldr	r4, [r1, #4]
 800171e:	4656      	mov	r6, sl
 8001720:	4026      	ands	r6, r4
 8001722:	0034      	movs	r4, r6
 8001724:	40ac      	lsls	r4, r5
 8001726:	4666      	mov	r6, ip
 8001728:	4334      	orrs	r4, r6
      GPIOx->MODER = tmp;
 800172a:	6004      	str	r4, [r0, #0]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800172c:	684c      	ldr	r4, [r1, #4]
 800172e:	1e66      	subs	r6, r4, #1
 8001730:	2e01      	cmp	r6, #1
 8001732:	d903      	bls.n	800173c <HAL_GPIO_Init+0x114>
 8001734:	2c11      	cmp	r4, #17
 8001736:	d001      	beq.n	800173c <HAL_GPIO_Init+0x114>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001738:	2c12      	cmp	r4, #18
 800173a:	d112      	bne.n	8001762 <HAL_GPIO_Init+0x13a>
        tmp = GPIOx->OSPEEDR;
 800173c:	6884      	ldr	r4, [r0, #8]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800173e:	403c      	ands	r4, r7
 8001740:	46a4      	mov	ip, r4
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001742:	68cc      	ldr	r4, [r1, #12]
 8001744:	40ac      	lsls	r4, r5
 8001746:	4666      	mov	r6, ip
 8001748:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = tmp;
 800174a:	6084      	str	r4, [r0, #8]
        tmp = GPIOx->OTYPER;
 800174c:	6844      	ldr	r4, [r0, #4]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 800174e:	4394      	bics	r4, r2
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001750:	684a      	ldr	r2, [r1, #4]
 8001752:	0912      	lsrs	r2, r2, #4
 8001754:	4694      	mov	ip, r2
 8001756:	2201      	movs	r2, #1
 8001758:	4666      	mov	r6, ip
 800175a:	4032      	ands	r2, r6
 800175c:	409a      	lsls	r2, r3
 800175e:	4322      	orrs	r2, r4
        GPIOx->OTYPER = tmp;
 8001760:	6042      	str	r2, [r0, #4]
      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001762:	684a      	ldr	r2, [r1, #4]
 8001764:	2a03      	cmp	r2, #3
 8001766:	d005      	beq.n	8001774 <HAL_GPIO_Init+0x14c>
        tmp = GPIOx->PUPDR;
 8001768:	68c4      	ldr	r4, [r0, #12]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 800176a:	403c      	ands	r4, r7
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 800176c:	688a      	ldr	r2, [r1, #8]
 800176e:	40aa      	lsls	r2, r5
 8001770:	4322      	orrs	r2, r4
        GPIOx->PUPDR = tmp;
 8001772:	60c2      	str	r2, [r0, #12]
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001774:	684a      	ldr	r2, [r1, #4]
 8001776:	00d2      	lsls	r2, r2, #3
 8001778:	d598      	bpl.n	80016ac <HAL_GPIO_Init+0x84>
        tmp = EXTI->EXTICR[position >> 2U];
 800177a:	089a      	lsrs	r2, r3, #2
 800177c:	0014      	movs	r4, r2
 800177e:	3418      	adds	r4, #24
 8001780:	00a4      	lsls	r4, r4, #2
 8001782:	4d13      	ldr	r5, [pc, #76]	@ (80017d0 <HAL_GPIO_Init+0x1a8>)
 8001784:	5967      	ldr	r7, [r4, r5]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001786:	2403      	movs	r4, #3
 8001788:	401c      	ands	r4, r3
 800178a:	00e4      	lsls	r4, r4, #3
 800178c:	250f      	movs	r5, #15
 800178e:	40a5      	lsls	r5, r4
 8001790:	43af      	bics	r7, r5
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001792:	25a0      	movs	r5, #160	@ 0xa0
 8001794:	05ed      	lsls	r5, r5, #23
 8001796:	42a8      	cmp	r0, r5
 8001798:	d100      	bne.n	800179c <HAL_GPIO_Init+0x174>
 800179a:	e74e      	b.n	800163a <HAL_GPIO_Init+0x12>
 800179c:	4d0d      	ldr	r5, [pc, #52]	@ (80017d4 <HAL_GPIO_Init+0x1ac>)
 800179e:	42a8      	cmp	r0, r5
 80017a0:	d00b      	beq.n	80017ba <HAL_GPIO_Init+0x192>
 80017a2:	4d0d      	ldr	r5, [pc, #52]	@ (80017d8 <HAL_GPIO_Init+0x1b0>)
 80017a4:	42a8      	cmp	r0, r5
 80017a6:	d00a      	beq.n	80017be <HAL_GPIO_Init+0x196>
 80017a8:	4d0c      	ldr	r5, [pc, #48]	@ (80017dc <HAL_GPIO_Init+0x1b4>)
 80017aa:	42a8      	cmp	r0, r5
 80017ac:	d009      	beq.n	80017c2 <HAL_GPIO_Init+0x19a>
 80017ae:	4d0c      	ldr	r5, [pc, #48]	@ (80017e0 <HAL_GPIO_Init+0x1b8>)
 80017b0:	42a8      	cmp	r0, r5
 80017b2:	d100      	bne.n	80017b6 <HAL_GPIO_Init+0x18e>
 80017b4:	e73f      	b.n	8001636 <HAL_GPIO_Init+0xe>
 80017b6:	2506      	movs	r5, #6
 80017b8:	e740      	b.n	800163c <HAL_GPIO_Init+0x14>
 80017ba:	2501      	movs	r5, #1
 80017bc:	e73e      	b.n	800163c <HAL_GPIO_Init+0x14>
 80017be:	2502      	movs	r5, #2
 80017c0:	e73c      	b.n	800163c <HAL_GPIO_Init+0x14>
 80017c2:	2503      	movs	r5, #3
 80017c4:	e73a      	b.n	800163c <HAL_GPIO_Init+0x14>
  }
}
 80017c6:	bce0      	pop	{r5, r6, r7}
 80017c8:	46ba      	mov	sl, r7
 80017ca:	46b1      	mov	r9, r6
 80017cc:	46a8      	mov	r8, r5
 80017ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017d0:	40021800 	.word	0x40021800
 80017d4:	50000400 	.word	0x50000400
 80017d8:	50000800 	.word	0x50000800
 80017dc:	50000c00 	.word	0x50000c00
 80017e0:	50001400 	.word	0x50001400

080017e4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 80017e4:	6903      	ldr	r3, [r0, #16]
 80017e6:	420b      	tst	r3, r1
 80017e8:	d001      	beq.n	80017ee <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 80017ea:	2001      	movs	r0, #1
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80017ec:	4770      	bx	lr
    bitstatus = GPIO_PIN_RESET;
 80017ee:	2000      	movs	r0, #0
 80017f0:	e7fc      	b.n	80017ec <HAL_GPIO_ReadPin+0x8>

080017f2 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017f2:	2a00      	cmp	r2, #0
 80017f4:	d001      	beq.n	80017fa <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017f6:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017f8:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017fa:	6281      	str	r1, [r0, #40]	@ 0x28
}
 80017fc:	e7fc      	b.n	80017f8 <HAL_GPIO_WritePin+0x6>
	...

08001800 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001800:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001802:	4b0a      	ldr	r3, [pc, #40]	@ (800182c <HAL_MspInit+0x2c>)
 8001804:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8001806:	2201      	movs	r2, #1
 8001808:	4311      	orrs	r1, r2
 800180a:	6419      	str	r1, [r3, #64]	@ 0x40
 800180c:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800180e:	400a      	ands	r2, r1
 8001810:	9200      	str	r2, [sp, #0]
 8001812:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001814:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001816:	2180      	movs	r1, #128	@ 0x80
 8001818:	0549      	lsls	r1, r1, #21
 800181a:	430a      	orrs	r2, r1
 800181c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800181e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001820:	400b      	ands	r3, r1
 8001822:	9301      	str	r3, [sp, #4]
 8001824:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001826:	b002      	add	sp, #8
 8001828:	4770      	bx	lr
 800182a:	46c0      	nop			@ (mov r8, r8)
 800182c:	40021000 	.word	0x40021000

08001830 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001830:	b530      	push	{r4, r5, lr}
 8001832:	b08f      	sub	sp, #60	@ 0x3c
 8001834:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001836:	2214      	movs	r2, #20
 8001838:	2100      	movs	r1, #0
 800183a:	a809      	add	r0, sp, #36	@ 0x24
 800183c:	f001 f930 	bl	8002aa0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001840:	221c      	movs	r2, #28
 8001842:	2100      	movs	r1, #0
 8001844:	a802      	add	r0, sp, #8
 8001846:	f001 f92b 	bl	8002aa0 <memset>
  if(hadc->Instance==ADC1)
 800184a:	6822      	ldr	r2, [r4, #0]
 800184c:	4b23      	ldr	r3, [pc, #140]	@ (80018dc <HAL_ADC_MspInit+0xac>)
 800184e:	429a      	cmp	r2, r3
 8001850:	d001      	beq.n	8001856 <HAL_ADC_MspInit+0x26>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001852:	b00f      	add	sp, #60	@ 0x3c
 8001854:	bd30      	pop	{r4, r5, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001856:	2320      	movs	r3, #32
 8001858:	9302      	str	r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800185a:	a802      	add	r0, sp, #8
 800185c:	f000 faf0 	bl	8001e40 <HAL_RCCEx_PeriphCLKConfig>
 8001860:	2800      	cmp	r0, #0
 8001862:	d135      	bne.n	80018d0 <HAL_ADC_MspInit+0xa0>
    __HAL_RCC_ADC_CLK_ENABLE();
 8001864:	4b1e      	ldr	r3, [pc, #120]	@ (80018e0 <HAL_ADC_MspInit+0xb0>)
 8001866:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001868:	2180      	movs	r1, #128	@ 0x80
 800186a:	0349      	lsls	r1, r1, #13
 800186c:	430a      	orrs	r2, r1
 800186e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001870:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001872:	400a      	ands	r2, r1
 8001874:	9200      	str	r2, [sp, #0]
 8001876:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001878:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800187a:	2201      	movs	r2, #1
 800187c:	4311      	orrs	r1, r2
 800187e:	6359      	str	r1, [r3, #52]	@ 0x34
 8001880:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001882:	401a      	ands	r2, r3
 8001884:	9201      	str	r2, [sp, #4]
 8001886:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = HAL_ANALOG_Pin;
 8001888:	a909      	add	r1, sp, #36	@ 0x24
 800188a:	2302      	movs	r3, #2
 800188c:	9309      	str	r3, [sp, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800188e:	3301      	adds	r3, #1
 8001890:	604b      	str	r3, [r1, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001892:	2500      	movs	r5, #0
 8001894:	608d      	str	r5, [r1, #8]
    HAL_GPIO_Init(HAL_ANALOG_GPIO_Port, &GPIO_InitStruct);
 8001896:	20a0      	movs	r0, #160	@ 0xa0
 8001898:	05c0      	lsls	r0, r0, #23
 800189a:	f7ff fec5 	bl	8001628 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 800189e:	4811      	ldr	r0, [pc, #68]	@ (80018e4 <HAL_ADC_MspInit+0xb4>)
 80018a0:	4b11      	ldr	r3, [pc, #68]	@ (80018e8 <HAL_ADC_MspInit+0xb8>)
 80018a2:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80018a4:	2305      	movs	r3, #5
 80018a6:	6043      	str	r3, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018a8:	6085      	str	r5, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80018aa:	60c5      	str	r5, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80018ac:	337b      	adds	r3, #123	@ 0x7b
 80018ae:	6103      	str	r3, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80018b0:	3380      	adds	r3, #128	@ 0x80
 80018b2:	6143      	str	r3, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80018b4:	2380      	movs	r3, #128	@ 0x80
 80018b6:	00db      	lsls	r3, r3, #3
 80018b8:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80018ba:	2320      	movs	r3, #32
 80018bc:	61c3      	str	r3, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80018be:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80018c0:	f7ff fd66 	bl	8001390 <HAL_DMA_Init>
 80018c4:	2800      	cmp	r0, #0
 80018c6:	d106      	bne.n	80018d6 <HAL_ADC_MspInit+0xa6>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80018c8:	4b06      	ldr	r3, [pc, #24]	@ (80018e4 <HAL_ADC_MspInit+0xb4>)
 80018ca:	6523      	str	r3, [r4, #80]	@ 0x50
 80018cc:	629c      	str	r4, [r3, #40]	@ 0x28
}
 80018ce:	e7c0      	b.n	8001852 <HAL_ADC_MspInit+0x22>
      Error_Handler();
 80018d0:	f7fe ff18 	bl	8000704 <Error_Handler>
 80018d4:	e7c6      	b.n	8001864 <HAL_ADC_MspInit+0x34>
      Error_Handler();
 80018d6:	f7fe ff15 	bl	8000704 <Error_Handler>
 80018da:	e7f5      	b.n	80018c8 <HAL_ADC_MspInit+0x98>
 80018dc:	40012400 	.word	0x40012400
 80018e0:	40021000 	.word	0x40021000
 80018e4:	200002d0 	.word	0x200002d0
 80018e8:	40020008 	.word	0x40020008

080018ec <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018ec:	b510      	push	{r4, lr}
 80018ee:	b088      	sub	sp, #32
 80018f0:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f2:	2214      	movs	r2, #20
 80018f4:	2100      	movs	r1, #0
 80018f6:	a803      	add	r0, sp, #12
 80018f8:	f001 f8d2 	bl	8002aa0 <memset>
  if(huart->Instance==USART2)
 80018fc:	6822      	ldr	r2, [r4, #0]
 80018fe:	4b11      	ldr	r3, [pc, #68]	@ (8001944 <HAL_UART_MspInit+0x58>)
 8001900:	429a      	cmp	r2, r3
 8001902:	d001      	beq.n	8001908 <HAL_UART_MspInit+0x1c>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001904:	b008      	add	sp, #32
 8001906:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8001908:	4b0f      	ldr	r3, [pc, #60]	@ (8001948 <HAL_UART_MspInit+0x5c>)
 800190a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800190c:	2180      	movs	r1, #128	@ 0x80
 800190e:	0289      	lsls	r1, r1, #10
 8001910:	430a      	orrs	r2, r1
 8001912:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001914:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001916:	400a      	ands	r2, r1
 8001918:	9201      	str	r2, [sp, #4]
 800191a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800191c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800191e:	2201      	movs	r2, #1
 8001920:	4311      	orrs	r1, r2
 8001922:	6359      	str	r1, [r3, #52]	@ 0x34
 8001924:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001926:	4013      	ands	r3, r2
 8001928:	9302      	str	r3, [sp, #8]
 800192a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800192c:	a903      	add	r1, sp, #12
 800192e:	230c      	movs	r3, #12
 8001930:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001932:	3b0a      	subs	r3, #10
 8001934:	604b      	str	r3, [r1, #4]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001936:	610a      	str	r2, [r1, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001938:	20a0      	movs	r0, #160	@ 0xa0
 800193a:	05c0      	lsls	r0, r0, #23
 800193c:	f7ff fe74 	bl	8001628 <HAL_GPIO_Init>
}
 8001940:	e7e0      	b.n	8001904 <HAL_UART_MspInit+0x18>
 8001942:	46c0      	nop			@ (mov r8, r8)
 8001944:	40004400 	.word	0x40004400
 8001948:	40021000 	.word	0x40021000

0800194c <HAL_RCC_OscConfig>:
            must adjust the number of CPU wait states in their application (SystemClock_Config() API)
            before calling the HAL_RCC_OscConfig() API to update the HSI48 clock division factor.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800194c:	b570      	push	{r4, r5, r6, lr}
 800194e:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001950:	d100      	bne.n	8001954 <HAL_RCC_OscConfig+0x8>
 8001952:	e139      	b.n	8001bc8 <HAL_RCC_OscConfig+0x27c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001954:	6803      	ldr	r3, [r0, #0]
 8001956:	07db      	lsls	r3, r3, #31
 8001958:	d52c      	bpl.n	80019b4 <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800195a:	4ba1      	ldr	r3, [pc, #644]	@ (8001be0 <HAL_RCC_OscConfig+0x294>)
 800195c:	689a      	ldr	r2, [r3, #8]
 800195e:	2338      	movs	r3, #56	@ 0x38
 8001960:	4013      	ands	r3, r2

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8001962:	2b08      	cmp	r3, #8
 8001964:	d022      	beq.n	80019ac <HAL_RCC_OscConfig+0x60>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001966:	6843      	ldr	r3, [r0, #4]
 8001968:	2280      	movs	r2, #128	@ 0x80
 800196a:	0252      	lsls	r2, r2, #9
 800196c:	4293      	cmp	r3, r2
 800196e:	d02e      	beq.n	80019ce <HAL_RCC_OscConfig+0x82>
 8001970:	22a0      	movs	r2, #160	@ 0xa0
 8001972:	02d2      	lsls	r2, r2, #11
 8001974:	4293      	cmp	r3, r2
 8001976:	d031      	beq.n	80019dc <HAL_RCC_OscConfig+0x90>
 8001978:	4b99      	ldr	r3, [pc, #612]	@ (8001be0 <HAL_RCC_OscConfig+0x294>)
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	4999      	ldr	r1, [pc, #612]	@ (8001be4 <HAL_RCC_OscConfig+0x298>)
 800197e:	400a      	ands	r2, r1
 8001980:	601a      	str	r2, [r3, #0]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	4998      	ldr	r1, [pc, #608]	@ (8001be8 <HAL_RCC_OscConfig+0x29c>)
 8001986:	400a      	ands	r2, r1
 8001988:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800198a:	6863      	ldr	r3, [r4, #4]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d031      	beq.n	80019f4 <HAL_RCC_OscConfig+0xa8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001990:	f7fe ffca 	bl	8000928 <HAL_GetTick>
 8001994:	0005      	movs	r5, r0

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001996:	4b92      	ldr	r3, [pc, #584]	@ (8001be0 <HAL_RCC_OscConfig+0x294>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	039b      	lsls	r3, r3, #14
 800199c:	d40a      	bmi.n	80019b4 <HAL_RCC_OscConfig+0x68>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800199e:	f7fe ffc3 	bl	8000928 <HAL_GetTick>
 80019a2:	1b40      	subs	r0, r0, r5
 80019a4:	2864      	cmp	r0, #100	@ 0x64
 80019a6:	d9f6      	bls.n	8001996 <HAL_RCC_OscConfig+0x4a>
          {
            return HAL_TIMEOUT;
 80019a8:	2003      	movs	r0, #3
 80019aa:	e10e      	b.n	8001bca <HAL_RCC_OscConfig+0x27e>
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80019ac:	6843      	ldr	r3, [r0, #4]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d100      	bne.n	80019b4 <HAL_RCC_OscConfig+0x68>
 80019b2:	e10b      	b.n	8001bcc <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019b4:	6823      	ldr	r3, [r4, #0]
 80019b6:	079b      	lsls	r3, r3, #30
 80019b8:	d547      	bpl.n	8001a4a <HAL_RCC_OscConfig+0xfe>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019ba:	4b89      	ldr	r3, [pc, #548]	@ (8001be0 <HAL_RCC_OscConfig+0x294>)
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	2238      	movs	r2, #56	@ 0x38

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80019c0:	421a      	tst	r2, r3
 80019c2:	d161      	bne.n	8001a88 <HAL_RCC_OscConfig+0x13c>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80019c4:	68e3      	ldr	r3, [r4, #12]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d122      	bne.n	8001a10 <HAL_RCC_OscConfig+0xc4>
      {
        return HAL_ERROR;
 80019ca:	2001      	movs	r0, #1
 80019cc:	e0fd      	b.n	8001bca <HAL_RCC_OscConfig+0x27e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019ce:	4a84      	ldr	r2, [pc, #528]	@ (8001be0 <HAL_RCC_OscConfig+0x294>)
 80019d0:	6811      	ldr	r1, [r2, #0]
 80019d2:	2380      	movs	r3, #128	@ 0x80
 80019d4:	025b      	lsls	r3, r3, #9
 80019d6:	430b      	orrs	r3, r1
 80019d8:	6013      	str	r3, [r2, #0]
 80019da:	e7d6      	b.n	800198a <HAL_RCC_OscConfig+0x3e>
 80019dc:	4b80      	ldr	r3, [pc, #512]	@ (8001be0 <HAL_RCC_OscConfig+0x294>)
 80019de:	6819      	ldr	r1, [r3, #0]
 80019e0:	2280      	movs	r2, #128	@ 0x80
 80019e2:	02d2      	lsls	r2, r2, #11
 80019e4:	430a      	orrs	r2, r1
 80019e6:	601a      	str	r2, [r3, #0]
 80019e8:	6819      	ldr	r1, [r3, #0]
 80019ea:	2280      	movs	r2, #128	@ 0x80
 80019ec:	0252      	lsls	r2, r2, #9
 80019ee:	430a      	orrs	r2, r1
 80019f0:	601a      	str	r2, [r3, #0]
 80019f2:	e7ca      	b.n	800198a <HAL_RCC_OscConfig+0x3e>
        tickstart = HAL_GetTick();
 80019f4:	f7fe ff98 	bl	8000928 <HAL_GetTick>
 80019f8:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019fa:	4b79      	ldr	r3, [pc, #484]	@ (8001be0 <HAL_RCC_OscConfig+0x294>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	039b      	lsls	r3, r3, #14
 8001a00:	d5d8      	bpl.n	80019b4 <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001a02:	f7fe ff91 	bl	8000928 <HAL_GetTick>
 8001a06:	1b40      	subs	r0, r0, r5
 8001a08:	2864      	cmp	r0, #100	@ 0x64
 8001a0a:	d9f6      	bls.n	80019fa <HAL_RCC_OscConfig+0xae>
            return HAL_TIMEOUT;
 8001a0c:	2003      	movs	r0, #3
 8001a0e:	e0dc      	b.n	8001bca <HAL_RCC_OscConfig+0x27e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a10:	4b73      	ldr	r3, [pc, #460]	@ (8001be0 <HAL_RCC_OscConfig+0x294>)
 8001a12:	685a      	ldr	r2, [r3, #4]
 8001a14:	4975      	ldr	r1, [pc, #468]	@ (8001bec <HAL_RCC_OscConfig+0x2a0>)
 8001a16:	400a      	ands	r2, r1
 8001a18:	6961      	ldr	r1, [r4, #20]
 8001a1a:	0209      	lsls	r1, r1, #8
 8001a1c:	430a      	orrs	r2, r1
 8001a1e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	4973      	ldr	r1, [pc, #460]	@ (8001bf0 <HAL_RCC_OscConfig+0x2a4>)
 8001a24:	400a      	ands	r2, r1
 8001a26:	6921      	ldr	r1, [r4, #16]
 8001a28:	430a      	orrs	r2, r1
 8001a2a:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	0adb      	lsrs	r3, r3, #11
 8001a30:	2207      	movs	r2, #7
 8001a32:	401a      	ands	r2, r3
 8001a34:	4b6f      	ldr	r3, [pc, #444]	@ (8001bf4 <HAL_RCC_OscConfig+0x2a8>)
 8001a36:	40d3      	lsrs	r3, r2
 8001a38:	4a6f      	ldr	r2, [pc, #444]	@ (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a3a:	6013      	str	r3, [r2, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001a3c:	4b6f      	ldr	r3, [pc, #444]	@ (8001bfc <HAL_RCC_OscConfig+0x2b0>)
 8001a3e:	6818      	ldr	r0, [r3, #0]
 8001a40:	f7fe ff2e 	bl	80008a0 <HAL_InitTick>
 8001a44:	2800      	cmp	r0, #0
 8001a46:	d000      	beq.n	8001a4a <HAL_RCC_OscConfig+0xfe>
 8001a48:	e0c2      	b.n	8001bd0 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a4a:	6823      	ldr	r3, [r4, #0]
 8001a4c:	071b      	lsls	r3, r3, #28
 8001a4e:	d557      	bpl.n	8001b00 <HAL_RCC_OscConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001a50:	4b63      	ldr	r3, [pc, #396]	@ (8001be0 <HAL_RCC_OscConfig+0x294>)
 8001a52:	689a      	ldr	r2, [r3, #8]
 8001a54:	2338      	movs	r3, #56	@ 0x38
 8001a56:	4013      	ands	r3, r2
 8001a58:	2b18      	cmp	r3, #24
 8001a5a:	d04e      	beq.n	8001afa <HAL_RCC_OscConfig+0x1ae>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a5c:	69a3      	ldr	r3, [r4, #24]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d077      	beq.n	8001b52 <HAL_RCC_OscConfig+0x206>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001a62:	4a5f      	ldr	r2, [pc, #380]	@ (8001be0 <HAL_RCC_OscConfig+0x294>)
 8001a64:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 8001a66:	2101      	movs	r1, #1
 8001a68:	430b      	orrs	r3, r1
 8001a6a:	6613      	str	r3, [r2, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a6c:	f7fe ff5c 	bl	8000928 <HAL_GetTick>
 8001a70:	0005      	movs	r5, r0

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001a72:	4b5b      	ldr	r3, [pc, #364]	@ (8001be0 <HAL_RCC_OscConfig+0x294>)
 8001a74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a76:	079b      	lsls	r3, r3, #30
 8001a78:	d442      	bmi.n	8001b00 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001a7a:	f7fe ff55 	bl	8000928 <HAL_GetTick>
 8001a7e:	1b40      	subs	r0, r0, r5
 8001a80:	2802      	cmp	r0, #2
 8001a82:	d9f6      	bls.n	8001a72 <HAL_RCC_OscConfig+0x126>
          {
            return HAL_TIMEOUT;
 8001a84:	2003      	movs	r0, #3
 8001a86:	e0a0      	b.n	8001bca <HAL_RCC_OscConfig+0x27e>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a88:	68e3      	ldr	r3, [r4, #12]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d022      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x188>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001a8e:	4a54      	ldr	r2, [pc, #336]	@ (8001be0 <HAL_RCC_OscConfig+0x294>)
 8001a90:	6813      	ldr	r3, [r2, #0]
 8001a92:	4957      	ldr	r1, [pc, #348]	@ (8001bf0 <HAL_RCC_OscConfig+0x2a4>)
 8001a94:	400b      	ands	r3, r1
 8001a96:	6921      	ldr	r1, [r4, #16]
 8001a98:	430b      	orrs	r3, r1
 8001a9a:	6013      	str	r3, [r2, #0]
        __HAL_RCC_HSI_ENABLE();
 8001a9c:	6811      	ldr	r1, [r2, #0]
 8001a9e:	2380      	movs	r3, #128	@ 0x80
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	430b      	orrs	r3, r1
 8001aa4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001aa6:	f7fe ff3f 	bl	8000928 <HAL_GetTick>
 8001aaa:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001aac:	4b4c      	ldr	r3, [pc, #304]	@ (8001be0 <HAL_RCC_OscConfig+0x294>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	055b      	lsls	r3, r3, #21
 8001ab2:	d406      	bmi.n	8001ac2 <HAL_RCC_OscConfig+0x176>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001ab4:	f7fe ff38 	bl	8000928 <HAL_GetTick>
 8001ab8:	1b40      	subs	r0, r0, r5
 8001aba:	2802      	cmp	r0, #2
 8001abc:	d9f6      	bls.n	8001aac <HAL_RCC_OscConfig+0x160>
            return HAL_TIMEOUT;
 8001abe:	2003      	movs	r0, #3
 8001ac0:	e083      	b.n	8001bca <HAL_RCC_OscConfig+0x27e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ac2:	4947      	ldr	r1, [pc, #284]	@ (8001be0 <HAL_RCC_OscConfig+0x294>)
 8001ac4:	684b      	ldr	r3, [r1, #4]
 8001ac6:	4a49      	ldr	r2, [pc, #292]	@ (8001bec <HAL_RCC_OscConfig+0x2a0>)
 8001ac8:	4013      	ands	r3, r2
 8001aca:	6962      	ldr	r2, [r4, #20]
 8001acc:	0212      	lsls	r2, r2, #8
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	604b      	str	r3, [r1, #4]
 8001ad2:	e7ba      	b.n	8001a4a <HAL_RCC_OscConfig+0xfe>
        __HAL_RCC_HSI_DISABLE();
 8001ad4:	4a42      	ldr	r2, [pc, #264]	@ (8001be0 <HAL_RCC_OscConfig+0x294>)
 8001ad6:	6813      	ldr	r3, [r2, #0]
 8001ad8:	4949      	ldr	r1, [pc, #292]	@ (8001c00 <HAL_RCC_OscConfig+0x2b4>)
 8001ada:	400b      	ands	r3, r1
 8001adc:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001ade:	f7fe ff23 	bl	8000928 <HAL_GetTick>
 8001ae2:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ae4:	4b3e      	ldr	r3, [pc, #248]	@ (8001be0 <HAL_RCC_OscConfig+0x294>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	055b      	lsls	r3, r3, #21
 8001aea:	d5ae      	bpl.n	8001a4a <HAL_RCC_OscConfig+0xfe>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001aec:	f7fe ff1c 	bl	8000928 <HAL_GetTick>
 8001af0:	1b40      	subs	r0, r0, r5
 8001af2:	2802      	cmp	r0, #2
 8001af4:	d9f6      	bls.n	8001ae4 <HAL_RCC_OscConfig+0x198>
            return HAL_TIMEOUT;
 8001af6:	2003      	movs	r0, #3
 8001af8:	e067      	b.n	8001bca <HAL_RCC_OscConfig+0x27e>
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8001afa:	69a3      	ldr	r3, [r4, #24]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d069      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b00:	6823      	ldr	r3, [r4, #0]
 8001b02:	075b      	lsls	r3, r3, #29
 8001b04:	d568      	bpl.n	8001bd8 <HAL_RCC_OscConfig+0x28c>

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001b06:	4b36      	ldr	r3, [pc, #216]	@ (8001be0 <HAL_RCC_OscConfig+0x294>)
 8001b08:	689a      	ldr	r2, [r3, #8]
 8001b0a:	2338      	movs	r3, #56	@ 0x38
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	2b20      	cmp	r3, #32
 8001b10:	d032      	beq.n	8001b78 <HAL_RCC_OscConfig+0x22c>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b12:	68a3      	ldr	r3, [r4, #8]
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d034      	beq.n	8001b82 <HAL_RCC_OscConfig+0x236>
 8001b18:	2b05      	cmp	r3, #5
 8001b1a:	d038      	beq.n	8001b8e <HAL_RCC_OscConfig+0x242>
 8001b1c:	4b30      	ldr	r3, [pc, #192]	@ (8001be0 <HAL_RCC_OscConfig+0x294>)
 8001b1e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001b20:	2101      	movs	r1, #1
 8001b22:	438a      	bics	r2, r1
 8001b24:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001b26:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001b28:	3103      	adds	r1, #3
 8001b2a:	438a      	bics	r2, r1
 8001b2c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b2e:	68a3      	ldr	r3, [r4, #8]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d038      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b34:	f7fe fef8 	bl	8000928 <HAL_GetTick>
 8001b38:	0004      	movs	r4, r0

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001b3a:	4b29      	ldr	r3, [pc, #164]	@ (8001be0 <HAL_RCC_OscConfig+0x294>)
 8001b3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b3e:	079b      	lsls	r3, r3, #30
 8001b40:	d42f      	bmi.n	8001ba2 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b42:	f7fe fef1 	bl	8000928 <HAL_GetTick>
 8001b46:	1b00      	subs	r0, r0, r4
 8001b48:	4b2e      	ldr	r3, [pc, #184]	@ (8001c04 <HAL_RCC_OscConfig+0x2b8>)
 8001b4a:	4298      	cmp	r0, r3
 8001b4c:	d9f5      	bls.n	8001b3a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001b4e:	2003      	movs	r0, #3
 8001b50:	e03b      	b.n	8001bca <HAL_RCC_OscConfig+0x27e>
        __HAL_RCC_LSI_DISABLE();
 8001b52:	4a23      	ldr	r2, [pc, #140]	@ (8001be0 <HAL_RCC_OscConfig+0x294>)
 8001b54:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 8001b56:	2101      	movs	r1, #1
 8001b58:	438b      	bics	r3, r1
 8001b5a:	6613      	str	r3, [r2, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8001b5c:	f7fe fee4 	bl	8000928 <HAL_GetTick>
 8001b60:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001b62:	4b1f      	ldr	r3, [pc, #124]	@ (8001be0 <HAL_RCC_OscConfig+0x294>)
 8001b64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b66:	079b      	lsls	r3, r3, #30
 8001b68:	d5ca      	bpl.n	8001b00 <HAL_RCC_OscConfig+0x1b4>
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001b6a:	f7fe fedd 	bl	8000928 <HAL_GetTick>
 8001b6e:	1b40      	subs	r0, r0, r5
 8001b70:	2802      	cmp	r0, #2
 8001b72:	d9f6      	bls.n	8001b62 <HAL_RCC_OscConfig+0x216>
            return HAL_TIMEOUT;
 8001b74:	2003      	movs	r0, #3
 8001b76:	e028      	b.n	8001bca <HAL_RCC_OscConfig+0x27e>
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8001b78:	68a3      	ldr	r3, [r4, #8]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d02e      	beq.n	8001bdc <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 8001b7e:	2000      	movs	r0, #0
 8001b80:	e023      	b.n	8001bca <HAL_RCC_OscConfig+0x27e>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b82:	4a17      	ldr	r2, [pc, #92]	@ (8001be0 <HAL_RCC_OscConfig+0x294>)
 8001b84:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 8001b86:	2101      	movs	r1, #1
 8001b88:	430b      	orrs	r3, r1
 8001b8a:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001b8c:	e7cf      	b.n	8001b2e <HAL_RCC_OscConfig+0x1e2>
 8001b8e:	4b14      	ldr	r3, [pc, #80]	@ (8001be0 <HAL_RCC_OscConfig+0x294>)
 8001b90:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001b92:	2104      	movs	r1, #4
 8001b94:	430a      	orrs	r2, r1
 8001b96:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001b98:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001b9a:	3903      	subs	r1, #3
 8001b9c:	430a      	orrs	r2, r1
 8001b9e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001ba0:	e7c5      	b.n	8001b2e <HAL_RCC_OscConfig+0x1e2>
  return HAL_OK;
 8001ba2:	2000      	movs	r0, #0
 8001ba4:	e011      	b.n	8001bca <HAL_RCC_OscConfig+0x27e>
        tickstart = HAL_GetTick();
 8001ba6:	f7fe febf 	bl	8000928 <HAL_GetTick>
 8001baa:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001bac:	4b0c      	ldr	r3, [pc, #48]	@ (8001be0 <HAL_RCC_OscConfig+0x294>)
 8001bae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bb0:	079b      	lsls	r3, r3, #30
 8001bb2:	d507      	bpl.n	8001bc4 <HAL_RCC_OscConfig+0x278>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bb4:	f7fe feb8 	bl	8000928 <HAL_GetTick>
 8001bb8:	1b00      	subs	r0, r0, r4
 8001bba:	4b12      	ldr	r3, [pc, #72]	@ (8001c04 <HAL_RCC_OscConfig+0x2b8>)
 8001bbc:	4298      	cmp	r0, r3
 8001bbe:	d9f5      	bls.n	8001bac <HAL_RCC_OscConfig+0x260>
            return HAL_TIMEOUT;
 8001bc0:	2003      	movs	r0, #3
 8001bc2:	e002      	b.n	8001bca <HAL_RCC_OscConfig+0x27e>
  return HAL_OK;
 8001bc4:	2000      	movs	r0, #0
 8001bc6:	e000      	b.n	8001bca <HAL_RCC_OscConfig+0x27e>
    return HAL_ERROR;
 8001bc8:	2001      	movs	r0, #1
}
 8001bca:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001bcc:	2001      	movs	r0, #1
 8001bce:	e7fc      	b.n	8001bca <HAL_RCC_OscConfig+0x27e>
          return HAL_ERROR;
 8001bd0:	2001      	movs	r0, #1
 8001bd2:	e7fa      	b.n	8001bca <HAL_RCC_OscConfig+0x27e>
        return HAL_ERROR;
 8001bd4:	2001      	movs	r0, #1
 8001bd6:	e7f8      	b.n	8001bca <HAL_RCC_OscConfig+0x27e>
  return HAL_OK;
 8001bd8:	2000      	movs	r0, #0
 8001bda:	e7f6      	b.n	8001bca <HAL_RCC_OscConfig+0x27e>
        return HAL_ERROR;
 8001bdc:	2001      	movs	r0, #1
 8001bde:	e7f4      	b.n	8001bca <HAL_RCC_OscConfig+0x27e>
 8001be0:	40021000 	.word	0x40021000
 8001be4:	fffeffff 	.word	0xfffeffff
 8001be8:	fffbffff 	.word	0xfffbffff
 8001bec:	ffff80ff 	.word	0xffff80ff
 8001bf0:	ffffc7ff 	.word	0xffffc7ff
 8001bf4:	02dc6c00 	.word	0x02dc6c00
 8001bf8:	20000008 	.word	0x20000008
 8001bfc:	20000004 	.word	0x20000004
 8001c00:	fffffeff 	.word	0xfffffeff
 8001c04:	00001388 	.word	0x00001388

08001c08 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001c08:	4b14      	ldr	r3, [pc, #80]	@ (8001c5c <HAL_RCC_GetSysClockFreq+0x54>)
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	2238      	movs	r2, #56	@ 0x38
 8001c0e:	421a      	tst	r2, r3
 8001c10:	d107      	bne.n	8001c22 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001c12:	4b12      	ldr	r3, [pc, #72]	@ (8001c5c <HAL_RCC_GetSysClockFreq+0x54>)
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	0ad2      	lsrs	r2, r2, #11
 8001c18:	2307      	movs	r3, #7
 8001c1a:	4013      	ands	r3, r2

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001c1c:	4810      	ldr	r0, [pc, #64]	@ (8001c60 <HAL_RCC_GetSysClockFreq+0x58>)
 8001c1e:	40d8      	lsrs	r0, r3
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
}
 8001c20:	4770      	bx	lr
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001c22:	4b0e      	ldr	r3, [pc, #56]	@ (8001c5c <HAL_RCC_GetSysClockFreq+0x54>)
 8001c24:	689a      	ldr	r2, [r3, #8]
 8001c26:	2338      	movs	r3, #56	@ 0x38
 8001c28:	4013      	ands	r3, r2
 8001c2a:	2b08      	cmp	r3, #8
 8001c2c:	d010      	beq.n	8001c50 <HAL_RCC_GetSysClockFreq+0x48>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001c2e:	4b0b      	ldr	r3, [pc, #44]	@ (8001c5c <HAL_RCC_GetSysClockFreq+0x54>)
 8001c30:	689a      	ldr	r2, [r3, #8]
 8001c32:	2338      	movs	r3, #56	@ 0x38
 8001c34:	4013      	ands	r3, r2
 8001c36:	2b20      	cmp	r3, #32
 8001c38:	d00c      	beq.n	8001c54 <HAL_RCC_GetSysClockFreq+0x4c>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001c3a:	4b08      	ldr	r3, [pc, #32]	@ (8001c5c <HAL_RCC_GetSysClockFreq+0x54>)
 8001c3c:	689a      	ldr	r2, [r3, #8]
 8001c3e:	2338      	movs	r3, #56	@ 0x38
 8001c40:	4013      	ands	r3, r2
 8001c42:	2b18      	cmp	r3, #24
 8001c44:	d001      	beq.n	8001c4a <HAL_RCC_GetSysClockFreq+0x42>
    sysclockfreq = 0U;
 8001c46:	2000      	movs	r0, #0
  return sysclockfreq;
 8001c48:	e7ea      	b.n	8001c20 <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = LSI_VALUE;
 8001c4a:	20fa      	movs	r0, #250	@ 0xfa
 8001c4c:	01c0      	lsls	r0, r0, #7
 8001c4e:	e7e7      	b.n	8001c20 <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = HSE_VALUE;
 8001c50:	4803      	ldr	r0, [pc, #12]	@ (8001c60 <HAL_RCC_GetSysClockFreq+0x58>)
 8001c52:	e7e5      	b.n	8001c20 <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = LSE_VALUE;
 8001c54:	2080      	movs	r0, #128	@ 0x80
 8001c56:	0200      	lsls	r0, r0, #8
 8001c58:	e7e2      	b.n	8001c20 <HAL_RCC_GetSysClockFreq+0x18>
 8001c5a:	46c0      	nop			@ (mov r8, r8)
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	02dc6c00 	.word	0x02dc6c00

08001c64 <HAL_RCC_ClockConfig>:
{
 8001c64:	b570      	push	{r4, r5, r6, lr}
 8001c66:	0004      	movs	r4, r0
 8001c68:	000d      	movs	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8001c6a:	2800      	cmp	r0, #0
 8001c6c:	d100      	bne.n	8001c70 <HAL_RCC_ClockConfig+0xc>
 8001c6e:	e0a4      	b.n	8001dba <HAL_RCC_ClockConfig+0x156>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c70:	4b54      	ldr	r3, [pc, #336]	@ (8001dc4 <HAL_RCC_ClockConfig+0x160>)
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	2307      	movs	r3, #7
 8001c76:	4013      	ands	r3, r2
 8001c78:	428b      	cmp	r3, r1
 8001c7a:	d321      	bcc.n	8001cc0 <HAL_RCC_ClockConfig+0x5c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c7c:	6823      	ldr	r3, [r4, #0]
 8001c7e:	079a      	lsls	r2, r3, #30
 8001c80:	d510      	bpl.n	8001ca4 <HAL_RCC_ClockConfig+0x40>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c82:	075b      	lsls	r3, r3, #29
 8001c84:	d507      	bpl.n	8001c96 <HAL_RCC_ClockConfig+0x32>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001c86:	4950      	ldr	r1, [pc, #320]	@ (8001dc8 <HAL_RCC_ClockConfig+0x164>)
 8001c88:	688a      	ldr	r2, [r1, #8]
 8001c8a:	4b50      	ldr	r3, [pc, #320]	@ (8001dcc <HAL_RCC_ClockConfig+0x168>)
 8001c8c:	401a      	ands	r2, r3
 8001c8e:	23b0      	movs	r3, #176	@ 0xb0
 8001c90:	011b      	lsls	r3, r3, #4
 8001c92:	4313      	orrs	r3, r2
 8001c94:	608b      	str	r3, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c96:	4a4c      	ldr	r2, [pc, #304]	@ (8001dc8 <HAL_RCC_ClockConfig+0x164>)
 8001c98:	6893      	ldr	r3, [r2, #8]
 8001c9a:	494d      	ldr	r1, [pc, #308]	@ (8001dd0 <HAL_RCC_ClockConfig+0x16c>)
 8001c9c:	400b      	ands	r3, r1
 8001c9e:	68e1      	ldr	r1, [r4, #12]
 8001ca0:	430b      	orrs	r3, r1
 8001ca2:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ca4:	6823      	ldr	r3, [r4, #0]
 8001ca6:	07db      	lsls	r3, r3, #31
 8001ca8:	d54c      	bpl.n	8001d44 <HAL_RCC_ClockConfig+0xe0>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001caa:	6863      	ldr	r3, [r4, #4]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d01e      	beq.n	8001cee <HAL_RCC_ClockConfig+0x8a>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d139      	bne.n	8001d28 <HAL_RCC_ClockConfig+0xc4>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cb4:	4a44      	ldr	r2, [pc, #272]	@ (8001dc8 <HAL_RCC_ClockConfig+0x164>)
 8001cb6:	6812      	ldr	r2, [r2, #0]
 8001cb8:	0552      	lsls	r2, r2, #21
 8001cba:	d41c      	bmi.n	8001cf6 <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 8001cbc:	2001      	movs	r0, #1
 8001cbe:	e064      	b.n	8001d8a <HAL_RCC_ClockConfig+0x126>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cc0:	4a40      	ldr	r2, [pc, #256]	@ (8001dc4 <HAL_RCC_ClockConfig+0x160>)
 8001cc2:	6813      	ldr	r3, [r2, #0]
 8001cc4:	2107      	movs	r1, #7
 8001cc6:	438b      	bics	r3, r1
 8001cc8:	432b      	orrs	r3, r5
 8001cca:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001ccc:	f7fe fe2c 	bl	8000928 <HAL_GetTick>
 8001cd0:	0006      	movs	r6, r0
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001cd2:	4b3c      	ldr	r3, [pc, #240]	@ (8001dc4 <HAL_RCC_ClockConfig+0x160>)
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	2307      	movs	r3, #7
 8001cd8:	4013      	ands	r3, r2
 8001cda:	42ab      	cmp	r3, r5
 8001cdc:	d0ce      	beq.n	8001c7c <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001cde:	f7fe fe23 	bl	8000928 <HAL_GetTick>
 8001ce2:	1b80      	subs	r0, r0, r6
 8001ce4:	4a3b      	ldr	r2, [pc, #236]	@ (8001dd4 <HAL_RCC_ClockConfig+0x170>)
 8001ce6:	4290      	cmp	r0, r2
 8001ce8:	d9f3      	bls.n	8001cd2 <HAL_RCC_ClockConfig+0x6e>
        return HAL_TIMEOUT;
 8001cea:	2003      	movs	r0, #3
 8001cec:	e04d      	b.n	8001d8a <HAL_RCC_ClockConfig+0x126>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cee:	4a36      	ldr	r2, [pc, #216]	@ (8001dc8 <HAL_RCC_ClockConfig+0x164>)
 8001cf0:	6812      	ldr	r2, [r2, #0]
 8001cf2:	0392      	lsls	r2, r2, #14
 8001cf4:	d563      	bpl.n	8001dbe <HAL_RCC_ClockConfig+0x15a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001cf6:	4934      	ldr	r1, [pc, #208]	@ (8001dc8 <HAL_RCC_ClockConfig+0x164>)
 8001cf8:	688a      	ldr	r2, [r1, #8]
 8001cfa:	2007      	movs	r0, #7
 8001cfc:	4382      	bics	r2, r0
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8001d02:	f7fe fe11 	bl	8000928 <HAL_GetTick>
 8001d06:	0006      	movs	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d08:	4b2f      	ldr	r3, [pc, #188]	@ (8001dc8 <HAL_RCC_ClockConfig+0x164>)
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	2238      	movs	r2, #56	@ 0x38
 8001d0e:	401a      	ands	r2, r3
 8001d10:	6863      	ldr	r3, [r4, #4]
 8001d12:	00db      	lsls	r3, r3, #3
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d015      	beq.n	8001d44 <HAL_RCC_ClockConfig+0xe0>
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001d18:	f7fe fe06 	bl	8000928 <HAL_GetTick>
 8001d1c:	1b80      	subs	r0, r0, r6
 8001d1e:	4b2d      	ldr	r3, [pc, #180]	@ (8001dd4 <HAL_RCC_ClockConfig+0x170>)
 8001d20:	4298      	cmp	r0, r3
 8001d22:	d9f1      	bls.n	8001d08 <HAL_RCC_ClockConfig+0xa4>
        return HAL_TIMEOUT;
 8001d24:	2003      	movs	r0, #3
 8001d26:	e030      	b.n	8001d8a <HAL_RCC_ClockConfig+0x126>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001d28:	2b03      	cmp	r3, #3
 8001d2a:	d005      	beq.n	8001d38 <HAL_RCC_ClockConfig+0xd4>
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001d2c:	4a26      	ldr	r2, [pc, #152]	@ (8001dc8 <HAL_RCC_ClockConfig+0x164>)
 8001d2e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001d30:	0792      	lsls	r2, r2, #30
 8001d32:	d4e0      	bmi.n	8001cf6 <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 8001d34:	2001      	movs	r0, #1
 8001d36:	e028      	b.n	8001d8a <HAL_RCC_ClockConfig+0x126>
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001d38:	4a23      	ldr	r2, [pc, #140]	@ (8001dc8 <HAL_RCC_ClockConfig+0x164>)
 8001d3a:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 8001d3c:	0792      	lsls	r2, r2, #30
 8001d3e:	d4da      	bmi.n	8001cf6 <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 8001d40:	2001      	movs	r0, #1
 8001d42:	e022      	b.n	8001d8a <HAL_RCC_ClockConfig+0x126>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d44:	4b1f      	ldr	r3, [pc, #124]	@ (8001dc4 <HAL_RCC_ClockConfig+0x160>)
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	2307      	movs	r3, #7
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	42ab      	cmp	r3, r5
 8001d4e:	d81d      	bhi.n	8001d8c <HAL_RCC_ClockConfig+0x128>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d50:	6823      	ldr	r3, [r4, #0]
 8001d52:	075b      	lsls	r3, r3, #29
 8001d54:	d506      	bpl.n	8001d64 <HAL_RCC_ClockConfig+0x100>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001d56:	4a1c      	ldr	r2, [pc, #112]	@ (8001dc8 <HAL_RCC_ClockConfig+0x164>)
 8001d58:	6893      	ldr	r3, [r2, #8]
 8001d5a:	491f      	ldr	r1, [pc, #124]	@ (8001dd8 <HAL_RCC_ClockConfig+0x174>)
 8001d5c:	400b      	ands	r3, r1
 8001d5e:	6921      	ldr	r1, [r4, #16]
 8001d60:	430b      	orrs	r3, r1
 8001d62:	6093      	str	r3, [r2, #8]
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001d64:	f7ff ff50 	bl	8001c08 <HAL_RCC_GetSysClockFreq>
 8001d68:	4b17      	ldr	r3, [pc, #92]	@ (8001dc8 <HAL_RCC_ClockConfig+0x164>)
 8001d6a:	689a      	ldr	r2, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001d6c:	0a12      	lsrs	r2, r2, #8
 8001d6e:	230f      	movs	r3, #15
 8001d70:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001d72:	4a1a      	ldr	r2, [pc, #104]	@ (8001ddc <HAL_RCC_ClockConfig+0x178>)
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	589a      	ldr	r2, [r3, r2]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001d78:	231f      	movs	r3, #31
 8001d7a:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001d7c:	40d8      	lsrs	r0, r3
 8001d7e:	4b18      	ldr	r3, [pc, #96]	@ (8001de0 <HAL_RCC_ClockConfig+0x17c>)
 8001d80:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8001d82:	4b18      	ldr	r3, [pc, #96]	@ (8001de4 <HAL_RCC_ClockConfig+0x180>)
 8001d84:	6818      	ldr	r0, [r3, #0]
 8001d86:	f7fe fd8b 	bl	80008a0 <HAL_InitTick>
}
 8001d8a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d8c:	4a0d      	ldr	r2, [pc, #52]	@ (8001dc4 <HAL_RCC_ClockConfig+0x160>)
 8001d8e:	6813      	ldr	r3, [r2, #0]
 8001d90:	2107      	movs	r1, #7
 8001d92:	438b      	bics	r3, r1
 8001d94:	432b      	orrs	r3, r5
 8001d96:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001d98:	f7fe fdc6 	bl	8000928 <HAL_GetTick>
 8001d9c:	0006      	movs	r6, r0
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d9e:	4b09      	ldr	r3, [pc, #36]	@ (8001dc4 <HAL_RCC_ClockConfig+0x160>)
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	2307      	movs	r3, #7
 8001da4:	4013      	ands	r3, r2
 8001da6:	42ab      	cmp	r3, r5
 8001da8:	d0d2      	beq.n	8001d50 <HAL_RCC_ClockConfig+0xec>
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001daa:	f7fe fdbd 	bl	8000928 <HAL_GetTick>
 8001dae:	1b80      	subs	r0, r0, r6
 8001db0:	4b08      	ldr	r3, [pc, #32]	@ (8001dd4 <HAL_RCC_ClockConfig+0x170>)
 8001db2:	4298      	cmp	r0, r3
 8001db4:	d9f3      	bls.n	8001d9e <HAL_RCC_ClockConfig+0x13a>
        return HAL_TIMEOUT;
 8001db6:	2003      	movs	r0, #3
 8001db8:	e7e7      	b.n	8001d8a <HAL_RCC_ClockConfig+0x126>
    return HAL_ERROR;
 8001dba:	2001      	movs	r0, #1
 8001dbc:	e7e5      	b.n	8001d8a <HAL_RCC_ClockConfig+0x126>
        return HAL_ERROR;
 8001dbe:	2001      	movs	r0, #1
 8001dc0:	e7e3      	b.n	8001d8a <HAL_RCC_ClockConfig+0x126>
 8001dc2:	46c0      	nop			@ (mov r8, r8)
 8001dc4:	40022000 	.word	0x40022000
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	ffff84ff 	.word	0xffff84ff
 8001dd0:	fffff0ff 	.word	0xfffff0ff
 8001dd4:	00001388 	.word	0x00001388
 8001dd8:	ffff8fff 	.word	0xffff8fff
 8001ddc:	08007784 	.word	0x08007784
 8001de0:	20000008 	.word	0x20000008
 8001de4:	20000004 	.word	0x20000004

08001de8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001de8:	b510      	push	{r4, lr}
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001dea:	f7ff ff0d 	bl	8001c08 <HAL_RCC_GetSysClockFreq>
 8001dee:	4b07      	ldr	r3, [pc, #28]	@ (8001e0c <HAL_RCC_GetHCLKFreq+0x24>)
 8001df0:	689a      	ldr	r2, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001df2:	0a12      	lsrs	r2, r2, #8
 8001df4:	230f      	movs	r3, #15
 8001df6:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001df8:	4a05      	ldr	r2, [pc, #20]	@ (8001e10 <HAL_RCC_GetHCLKFreq+0x28>)
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	589a      	ldr	r2, [r3, r2]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001dfe:	231f      	movs	r3, #31
 8001e00:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001e02:	40d8      	lsrs	r0, r3
 8001e04:	4b03      	ldr	r3, [pc, #12]	@ (8001e14 <HAL_RCC_GetHCLKFreq+0x2c>)
 8001e06:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 8001e08:	bd10      	pop	{r4, pc}
 8001e0a:	46c0      	nop			@ (mov r8, r8)
 8001e0c:	40021000 	.word	0x40021000
 8001e10:	08007784 	.word	0x08007784
 8001e14:	20000008 	.word	0x20000008

08001e18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e18:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8001e1a:	f7ff ffe5 	bl	8001de8 <HAL_RCC_GetHCLKFreq>
 8001e1e:	4b06      	ldr	r3, [pc, #24]	@ (8001e38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e20:	689a      	ldr	r2, [r3, #8]
 8001e22:	0b12      	lsrs	r2, r2, #12
 8001e24:	2307      	movs	r3, #7
 8001e26:	4013      	ands	r3, r2
 8001e28:	4a04      	ldr	r2, [pc, #16]	@ (8001e3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	589a      	ldr	r2, [r3, r2]
 8001e2e:	231f      	movs	r3, #31
 8001e30:	4013      	ands	r3, r2
 8001e32:	40d8      	lsrs	r0, r3
}
 8001e34:	bd10      	pop	{r4, pc}
 8001e36:	46c0      	nop			@ (mov r8, r8)
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	08007764 	.word	0x08007764

08001e40 <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e40:	b570      	push	{r4, r5, r6, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e46:	6803      	ldr	r3, [r0, #0]
 8001e48:	065b      	lsls	r3, r3, #25
 8001e4a:	d550      	bpl.n	8001eee <HAL_RCCEx_PeriphCLKConfig+0xae>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e4c:	4b42      	ldr	r3, [pc, #264]	@ (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8001e4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e50:	00db      	lsls	r3, r3, #3
 8001e52:	d435      	bmi.n	8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e54:	4b40      	ldr	r3, [pc, #256]	@ (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8001e56:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001e58:	2180      	movs	r1, #128	@ 0x80
 8001e5a:	0549      	lsls	r1, r1, #21
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001e60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e62:	400b      	ands	r3, r1
 8001e64:	9301      	str	r3, [sp, #4]
 8001e66:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001e68:	2501      	movs	r5, #1
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8001e6a:	4b3b      	ldr	r3, [pc, #236]	@ (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8001e6c:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8001e6e:	22c0      	movs	r2, #192	@ 0xc0
 8001e70:	0092      	lsls	r2, r2, #2
 8001e72:	000b      	movs	r3, r1
 8001e74:	4013      	ands	r3, r2

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001e76:	4211      	tst	r1, r2
 8001e78:	d035      	beq.n	8001ee6 <HAL_RCCEx_PeriphCLKConfig+0xa6>
 8001e7a:	69a2      	ldr	r2, [r4, #24]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d00d      	beq.n	8001e9c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8001e80:	4a35      	ldr	r2, [pc, #212]	@ (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8001e82:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 8001e84:	4935      	ldr	r1, [pc, #212]	@ (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 8001e86:	400b      	ands	r3, r1
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e88:	6dd0      	ldr	r0, [r2, #92]	@ 0x5c
 8001e8a:	2180      	movs	r1, #128	@ 0x80
 8001e8c:	0249      	lsls	r1, r1, #9
 8001e8e:	4301      	orrs	r1, r0
 8001e90:	65d1      	str	r1, [r2, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e92:	6dd1      	ldr	r1, [r2, #92]	@ 0x5c
 8001e94:	4832      	ldr	r0, [pc, #200]	@ (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8001e96:	4001      	ands	r1, r0
 8001e98:	65d1      	str	r1, [r2, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8001e9a:	65d3      	str	r3, [r2, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8001e9c:	07db      	lsls	r3, r3, #31
 8001e9e:	d411      	bmi.n	8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x84>
    }

    if (ret == HAL_OK)
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ea0:	4a2d      	ldr	r2, [pc, #180]	@ (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8001ea2:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 8001ea4:	492d      	ldr	r1, [pc, #180]	@ (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 8001ea6:	400b      	ands	r3, r1
 8001ea8:	69a1      	ldr	r1, [r4, #24]
 8001eaa:	430b      	orrs	r3, r1
 8001eac:	65d3      	str	r3, [r2, #92]	@ 0x5c
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001eae:	2000      	movs	r0, #0
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001eb0:	2d01      	cmp	r5, #1
 8001eb2:	d11d      	bne.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0xb0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eb4:	4a28      	ldr	r2, [pc, #160]	@ (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8001eb6:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8001eb8:	492a      	ldr	r1, [pc, #168]	@ (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8001eba:	400b      	ands	r3, r1
 8001ebc:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001ebe:	e017      	b.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0xb0>
    FlagStatus       pwrclkchanged = RESET;
 8001ec0:	2500      	movs	r5, #0
 8001ec2:	e7d2      	b.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x2a>
      tickstart = HAL_GetTick();
 8001ec4:	f7fe fd30 	bl	8000928 <HAL_GetTick>
 8001ec8:	0006      	movs	r6, r0
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001eca:	4b23      	ldr	r3, [pc, #140]	@ (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8001ecc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ece:	079b      	lsls	r3, r3, #30
 8001ed0:	d407      	bmi.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ed2:	f7fe fd29 	bl	8000928 <HAL_GetTick>
 8001ed6:	1b80      	subs	r0, r0, r6
 8001ed8:	4b23      	ldr	r3, [pc, #140]	@ (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8001eda:	4298      	cmp	r0, r3
 8001edc:	d9f5      	bls.n	8001eca <HAL_RCCEx_PeriphCLKConfig+0x8a>
          ret = HAL_TIMEOUT;
 8001ede:	2003      	movs	r0, #3
 8001ee0:	e002      	b.n	8001ee8 <HAL_RCCEx_PeriphCLKConfig+0xa8>
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001ee2:	2000      	movs	r0, #0
 8001ee4:	e000      	b.n	8001ee8 <HAL_RCCEx_PeriphCLKConfig+0xa8>
 8001ee6:	2000      	movs	r0, #0
    if (ret == HAL_OK)
 8001ee8:	2800      	cmp	r0, #0
 8001eea:	d1e1      	bne.n	8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x70>
 8001eec:	e7d8      	b.n	8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x60>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001eee:	2000      	movs	r0, #0
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001ef0:	6823      	ldr	r3, [r4, #0]
 8001ef2:	07db      	lsls	r3, r3, #31
 8001ef4:	d506      	bpl.n	8001f04 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001ef6:	4a18      	ldr	r2, [pc, #96]	@ (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8001ef8:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8001efa:	2103      	movs	r1, #3
 8001efc:	438b      	bics	r3, r1
 8001efe:	68a1      	ldr	r1, [r4, #8]
 8001f00:	430b      	orrs	r3, r1
 8001f02:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f04:	6823      	ldr	r3, [r4, #0]
 8001f06:	079b      	lsls	r3, r3, #30
 8001f08:	d506      	bpl.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f0a:	4a13      	ldr	r2, [pc, #76]	@ (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8001f0c:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8001f0e:	4917      	ldr	r1, [pc, #92]	@ (8001f6c <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8001f10:	400b      	ands	r3, r1
 8001f12:	68e1      	ldr	r1, [r4, #12]
 8001f14:	430b      	orrs	r3, r1
 8001f16:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001f18:	6823      	ldr	r3, [r4, #0]
 8001f1a:	069b      	lsls	r3, r3, #26
 8001f1c:	d506      	bpl.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001f1e:	4a0e      	ldr	r2, [pc, #56]	@ (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8001f20:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	089b      	lsrs	r3, r3, #2
 8001f26:	6961      	ldr	r1, [r4, #20]
 8001f28:	430b      	orrs	r3, r1
 8001f2a:	6553      	str	r3, [r2, #84]	@ 0x54
    __HAL_RCC_FDCAN1_CONFIG(PeriphClkInit->Fdcan1ClockSelection);

  }
#endif /* FDCAN1 */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001f2c:	6823      	ldr	r3, [r4, #0]
 8001f2e:	075b      	lsls	r3, r3, #29
 8001f30:	d506      	bpl.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001f32:	4a09      	ldr	r2, [pc, #36]	@ (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8001f34:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8001f36:	490e      	ldr	r1, [pc, #56]	@ (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f38:	400b      	ands	r3, r1
 8001f3a:	6921      	ldr	r1, [r4, #16]
 8001f3c:	430b      	orrs	r3, r1
 8001f3e:	6553      	str	r3, [r2, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8001f40:	6823      	ldr	r3, [r4, #0]
 8001f42:	061b      	lsls	r3, r3, #24
 8001f44:	d506      	bpl.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8001f46:	4a04      	ldr	r2, [pc, #16]	@ (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8001f48:	6813      	ldr	r3, [r2, #0]
 8001f4a:	21e0      	movs	r1, #224	@ 0xe0
 8001f4c:	438b      	bics	r3, r1
 8001f4e:	6861      	ldr	r1, [r4, #4]
 8001f50:	430b      	orrs	r3, r1
 8001f52:	6013      	str	r3, [r2, #0]
  }
  return status;
}
 8001f54:	b002      	add	sp, #8
 8001f56:	bd70      	pop	{r4, r5, r6, pc}
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	fffffcff 	.word	0xfffffcff
 8001f60:	fffeffff 	.word	0xfffeffff
 8001f64:	efffffff 	.word	0xefffffff
 8001f68:	00001388 	.word	0x00001388
 8001f6c:	ffffcfff 	.word	0xffffcfff
 8001f70:	ffff3fff 	.word	0xffff3fff

08001f74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001f74:	b530      	push	{r4, r5, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001f76:	f3ef 8410 	mrs	r4, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8001f80:	6801      	ldr	r1, [r0, #0]
 8001f82:	680b      	ldr	r3, [r1, #0]
 8001f84:	4d12      	ldr	r5, [pc, #72]	@ (8001fd0 <UART_EndRxTransfer+0x5c>)
 8001f86:	402b      	ands	r3, r5
 8001f88:	600b      	str	r3, [r1, #0]
 8001f8a:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001f8e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f92:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8001f96:	6802      	ldr	r2, [r0, #0]
 8001f98:	6893      	ldr	r3, [r2, #8]
 8001f9a:	4c0e      	ldr	r4, [pc, #56]	@ (8001fd4 <UART_EndRxTransfer+0x60>)
 8001f9c:	4023      	ands	r3, r4
 8001f9e:	6093      	str	r3, [r2, #8]
 8001fa0:	f381 8810 	msr	PRIMASK, r1

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001fa4:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d006      	beq.n	8001fb8 <UART_EndRxTransfer+0x44>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001faa:	238c      	movs	r3, #140	@ 0x8c
 8001fac:	2220      	movs	r2, #32
 8001fae:	50c2      	str	r2, [r0, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8001fb4:	6743      	str	r3, [r0, #116]	@ 0x74
}
 8001fb6:	bd30      	pop	{r4, r5, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001fb8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fbc:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001fc0:	6802      	ldr	r2, [r0, #0]
 8001fc2:	6813      	ldr	r3, [r2, #0]
 8001fc4:	2410      	movs	r4, #16
 8001fc6:	43a3      	bics	r3, r4
 8001fc8:	6013      	str	r3, [r2, #0]
 8001fca:	f381 8810 	msr	PRIMASK, r1
}
 8001fce:	e7ec      	b.n	8001faa <UART_EndRxTransfer+0x36>
 8001fd0:	fffffedf 	.word	0xfffffedf
 8001fd4:	effffffe 	.word	0xeffffffe

08001fd8 <UART_SetConfig>:
{
 8001fd8:	b510      	push	{r4, lr}
 8001fda:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001fdc:	6883      	ldr	r3, [r0, #8]
 8001fde:	6902      	ldr	r2, [r0, #16]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	6942      	ldr	r2, [r0, #20]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	69c2      	ldr	r2, [r0, #28]
 8001fe8:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001fea:	6801      	ldr	r1, [r0, #0]
 8001fec:	680a      	ldr	r2, [r1, #0]
 8001fee:	4862      	ldr	r0, [pc, #392]	@ (8002178 <UART_SetConfig+0x1a0>)
 8001ff0:	4002      	ands	r2, r0
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ff6:	6822      	ldr	r2, [r4, #0]
 8001ff8:	6853      	ldr	r3, [r2, #4]
 8001ffa:	4960      	ldr	r1, [pc, #384]	@ (800217c <UART_SetConfig+0x1a4>)
 8001ffc:	400b      	ands	r3, r1
 8001ffe:	68e1      	ldr	r1, [r4, #12]
 8002000:	430b      	orrs	r3, r1
 8002002:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002004:	69a3      	ldr	r3, [r4, #24]
  tmpreg |= huart->Init.OneBitSampling;
 8002006:	6a22      	ldr	r2, [r4, #32]
 8002008:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800200a:	6821      	ldr	r1, [r4, #0]
 800200c:	688b      	ldr	r3, [r1, #8]
 800200e:	485c      	ldr	r0, [pc, #368]	@ (8002180 <UART_SetConfig+0x1a8>)
 8002010:	4003      	ands	r3, r0
 8002012:	4313      	orrs	r3, r2
 8002014:	608b      	str	r3, [r1, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002016:	6822      	ldr	r2, [r4, #0]
 8002018:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800201a:	210f      	movs	r1, #15
 800201c:	438b      	bics	r3, r1
 800201e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8002020:	430b      	orrs	r3, r1
 8002022:	62d3      	str	r3, [r2, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002024:	6823      	ldr	r3, [r4, #0]
 8002026:	4a57      	ldr	r2, [pc, #348]	@ (8002184 <UART_SetConfig+0x1ac>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d030      	beq.n	800208e <UART_SetConfig+0xb6>
 800202c:	4a56      	ldr	r2, [pc, #344]	@ (8002188 <UART_SetConfig+0x1b0>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d03e      	beq.n	80020b0 <UART_SetConfig+0xd8>
 8002032:	2310      	movs	r3, #16
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002034:	69e0      	ldr	r0, [r4, #28]
 8002036:	2280      	movs	r2, #128	@ 0x80
 8002038:	0212      	lsls	r2, r2, #8
 800203a:	4290      	cmp	r0, r2
 800203c:	d042      	beq.n	80020c4 <UART_SetConfig+0xec>
    switch (clocksource)
 800203e:	2b04      	cmp	r3, #4
 8002040:	d100      	bne.n	8002044 <UART_SetConfig+0x6c>
 8002042:	e089      	b.n	8002158 <UART_SetConfig+0x180>
 8002044:	d87b      	bhi.n	800213e <UART_SetConfig+0x166>
 8002046:	2b00      	cmp	r3, #0
 8002048:	d100      	bne.n	800204c <UART_SetConfig+0x74>
 800204a:	e07f      	b.n	800214c <UART_SetConfig+0x174>
 800204c:	2b02      	cmp	r3, #2
 800204e:	d174      	bne.n	800213a <UART_SetConfig+0x162>
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8002050:	4b4e      	ldr	r3, [pc, #312]	@ (800218c <UART_SetConfig+0x1b4>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	095b      	lsrs	r3, r3, #5
 8002056:	2107      	movs	r1, #7
 8002058:	4019      	ands	r1, r3
 800205a:	3101      	adds	r1, #1
 800205c:	484c      	ldr	r0, [pc, #304]	@ (8002190 <UART_SetConfig+0x1b8>)
 800205e:	f7fe f841 	bl	80000e4 <__udivsi3>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002062:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002064:	4b4b      	ldr	r3, [pc, #300]	@ (8002194 <UART_SetConfig+0x1bc>)
 8002066:	0052      	lsls	r2, r2, #1
 8002068:	5ad1      	ldrh	r1, [r2, r3]
 800206a:	f7fe f83b 	bl	80000e4 <__udivsi3>
 800206e:	6861      	ldr	r1, [r4, #4]
 8002070:	084b      	lsrs	r3, r1, #1
 8002072:	18c0      	adds	r0, r0, r3
 8002074:	f7fe f836 	bl	80000e4 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002078:	0002      	movs	r2, r0
 800207a:	3a10      	subs	r2, #16
 800207c:	4b46      	ldr	r3, [pc, #280]	@ (8002198 <UART_SetConfig+0x1c0>)
 800207e:	429a      	cmp	r2, r3
 8002080:	d86f      	bhi.n	8002162 <UART_SetConfig+0x18a>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002082:	6823      	ldr	r3, [r4, #0]
 8002084:	0400      	lsls	r0, r0, #16
 8002086:	0c00      	lsrs	r0, r0, #16
 8002088:	60d8      	str	r0, [r3, #12]
 800208a:	2000      	movs	r0, #0
 800208c:	e06a      	b.n	8002164 <UART_SetConfig+0x18c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800208e:	4b3f      	ldr	r3, [pc, #252]	@ (800218c <UART_SetConfig+0x1b4>)
 8002090:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002092:	2303      	movs	r3, #3
 8002094:	4013      	ands	r3, r2
 8002096:	2b02      	cmp	r3, #2
 8002098:	d00c      	beq.n	80020b4 <UART_SetConfig+0xdc>
 800209a:	d805      	bhi.n	80020a8 <UART_SetConfig+0xd0>
 800209c:	2b00      	cmp	r3, #0
 800209e:	d00b      	beq.n	80020b8 <UART_SetConfig+0xe0>
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d10b      	bne.n	80020bc <UART_SetConfig+0xe4>
 80020a4:	3303      	adds	r3, #3
 80020a6:	e7c5      	b.n	8002034 <UART_SetConfig+0x5c>
 80020a8:	2b03      	cmp	r3, #3
 80020aa:	d109      	bne.n	80020c0 <UART_SetConfig+0xe8>
 80020ac:	3305      	adds	r3, #5
 80020ae:	e7c1      	b.n	8002034 <UART_SetConfig+0x5c>
 80020b0:	2300      	movs	r3, #0
 80020b2:	e7bf      	b.n	8002034 <UART_SetConfig+0x5c>
 80020b4:	2302      	movs	r3, #2
 80020b6:	e7bd      	b.n	8002034 <UART_SetConfig+0x5c>
 80020b8:	2300      	movs	r3, #0
 80020ba:	e7bb      	b.n	8002034 <UART_SetConfig+0x5c>
 80020bc:	2310      	movs	r3, #16
 80020be:	e7b9      	b.n	8002034 <UART_SetConfig+0x5c>
 80020c0:	2310      	movs	r3, #16
 80020c2:	e7b7      	b.n	8002034 <UART_SetConfig+0x5c>
    switch (clocksource)
 80020c4:	2b04      	cmp	r3, #4
 80020c6:	d035      	beq.n	8002134 <UART_SetConfig+0x15c>
 80020c8:	d82a      	bhi.n	8002120 <UART_SetConfig+0x148>
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d02c      	beq.n	8002128 <UART_SetConfig+0x150>
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d124      	bne.n	800211c <UART_SetConfig+0x144>
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 80020d2:	4b2e      	ldr	r3, [pc, #184]	@ (800218c <UART_SetConfig+0x1b4>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	095b      	lsrs	r3, r3, #5
 80020d8:	2107      	movs	r1, #7
 80020da:	4019      	ands	r1, r3
 80020dc:	3101      	adds	r1, #1
 80020de:	482c      	ldr	r0, [pc, #176]	@ (8002190 <UART_SetConfig+0x1b8>)
 80020e0:	f7fe f800 	bl	80000e4 <__udivsi3>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80020e4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80020e6:	4b2b      	ldr	r3, [pc, #172]	@ (8002194 <UART_SetConfig+0x1bc>)
 80020e8:	0052      	lsls	r2, r2, #1
 80020ea:	5ad1      	ldrh	r1, [r2, r3]
 80020ec:	f7fd fffa 	bl	80000e4 <__udivsi3>
 80020f0:	0040      	lsls	r0, r0, #1
 80020f2:	6861      	ldr	r1, [r4, #4]
 80020f4:	084b      	lsrs	r3, r1, #1
 80020f6:	18c0      	adds	r0, r0, r3
 80020f8:	f7fd fff4 	bl	80000e4 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80020fc:	0002      	movs	r2, r0
 80020fe:	3a10      	subs	r2, #16
 8002100:	4b25      	ldr	r3, [pc, #148]	@ (8002198 <UART_SetConfig+0x1c0>)
 8002102:	429a      	cmp	r2, r3
 8002104:	d82b      	bhi.n	800215e <UART_SetConfig+0x186>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002106:	b282      	uxth	r2, r0
 8002108:	230f      	movs	r3, #15
 800210a:	439a      	bics	r2, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800210c:	0840      	lsrs	r0, r0, #1
 800210e:	3b08      	subs	r3, #8
 8002110:	4003      	ands	r3, r0
 8002112:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 8002114:	6822      	ldr	r2, [r4, #0]
 8002116:	60d3      	str	r3, [r2, #12]
 8002118:	2000      	movs	r0, #0
 800211a:	e023      	b.n	8002164 <UART_SetConfig+0x18c>
    switch (clocksource)
 800211c:	2001      	movs	r0, #1
 800211e:	e021      	b.n	8002164 <UART_SetConfig+0x18c>
 8002120:	2b08      	cmp	r3, #8
 8002122:	d0df      	beq.n	80020e4 <UART_SetConfig+0x10c>
 8002124:	2001      	movs	r0, #1
 8002126:	e01d      	b.n	8002164 <UART_SetConfig+0x18c>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002128:	f7ff fe76 	bl	8001e18 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800212c:	2800      	cmp	r0, #0
 800212e:	d1d9      	bne.n	80020e4 <UART_SetConfig+0x10c>
 8002130:	2000      	movs	r0, #0
 8002132:	e017      	b.n	8002164 <UART_SetConfig+0x18c>
        pclk = HAL_RCC_GetSysClockFreq();
 8002134:	f7ff fd68 	bl	8001c08 <HAL_RCC_GetSysClockFreq>
        break;
 8002138:	e7f8      	b.n	800212c <UART_SetConfig+0x154>
    switch (clocksource)
 800213a:	2001      	movs	r0, #1
 800213c:	e012      	b.n	8002164 <UART_SetConfig+0x18c>
 800213e:	2b08      	cmp	r3, #8
 8002140:	d102      	bne.n	8002148 <UART_SetConfig+0x170>
 8002142:	2080      	movs	r0, #128	@ 0x80
 8002144:	0200      	lsls	r0, r0, #8
 8002146:	e78c      	b.n	8002062 <UART_SetConfig+0x8a>
 8002148:	2001      	movs	r0, #1
 800214a:	e00b      	b.n	8002164 <UART_SetConfig+0x18c>
        pclk = HAL_RCC_GetPCLK1Freq();
 800214c:	f7ff fe64 	bl	8001e18 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002150:	2800      	cmp	r0, #0
 8002152:	d186      	bne.n	8002062 <UART_SetConfig+0x8a>
 8002154:	2000      	movs	r0, #0
 8002156:	e005      	b.n	8002164 <UART_SetConfig+0x18c>
        pclk = HAL_RCC_GetSysClockFreq();
 8002158:	f7ff fd56 	bl	8001c08 <HAL_RCC_GetSysClockFreq>
        break;
 800215c:	e7f8      	b.n	8002150 <UART_SetConfig+0x178>
        ret = HAL_ERROR;
 800215e:	2001      	movs	r0, #1
 8002160:	e000      	b.n	8002164 <UART_SetConfig+0x18c>
        ret = HAL_ERROR;
 8002162:	2001      	movs	r0, #1
  huart->NbTxDataToProcess = 1;
 8002164:	2301      	movs	r3, #1
 8002166:	226a      	movs	r2, #106	@ 0x6a
 8002168:	52a3      	strh	r3, [r4, r2]
  huart->NbRxDataToProcess = 1;
 800216a:	3a02      	subs	r2, #2
 800216c:	52a3      	strh	r3, [r4, r2]
  huart->RxISR = NULL;
 800216e:	2300      	movs	r3, #0
 8002170:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->TxISR = NULL;
 8002172:	67a3      	str	r3, [r4, #120]	@ 0x78
}
 8002174:	bd10      	pop	{r4, pc}
 8002176:	46c0      	nop			@ (mov r8, r8)
 8002178:	cfff69f3 	.word	0xcfff69f3
 800217c:	ffffcfff 	.word	0xffffcfff
 8002180:	11fff4ff 	.word	0x11fff4ff
 8002184:	40013800 	.word	0x40013800
 8002188:	40004400 	.word	0x40004400
 800218c:	40021000 	.word	0x40021000
 8002190:	02dc6c00 	.word	0x02dc6c00
 8002194:	08007740 	.word	0x08007740
 8002198:	0000ffef 	.word	0x0000ffef

0800219c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800219c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800219e:	071b      	lsls	r3, r3, #28
 80021a0:	d506      	bpl.n	80021b0 <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80021a2:	6802      	ldr	r2, [r0, #0]
 80021a4:	6853      	ldr	r3, [r2, #4]
 80021a6:	492c      	ldr	r1, [pc, #176]	@ (8002258 <UART_AdvFeatureConfig+0xbc>)
 80021a8:	400b      	ands	r3, r1
 80021aa:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 80021ac:	430b      	orrs	r3, r1
 80021ae:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80021b0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80021b2:	07db      	lsls	r3, r3, #31
 80021b4:	d506      	bpl.n	80021c4 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80021b6:	6802      	ldr	r2, [r0, #0]
 80021b8:	6853      	ldr	r3, [r2, #4]
 80021ba:	4928      	ldr	r1, [pc, #160]	@ (800225c <UART_AdvFeatureConfig+0xc0>)
 80021bc:	400b      	ands	r3, r1
 80021be:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80021c0:	430b      	orrs	r3, r1
 80021c2:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80021c4:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80021c6:	079b      	lsls	r3, r3, #30
 80021c8:	d506      	bpl.n	80021d8 <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80021ca:	6802      	ldr	r2, [r0, #0]
 80021cc:	6853      	ldr	r3, [r2, #4]
 80021ce:	4924      	ldr	r1, [pc, #144]	@ (8002260 <UART_AdvFeatureConfig+0xc4>)
 80021d0:	400b      	ands	r3, r1
 80021d2:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 80021d4:	430b      	orrs	r3, r1
 80021d6:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80021d8:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80021da:	075b      	lsls	r3, r3, #29
 80021dc:	d506      	bpl.n	80021ec <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80021de:	6802      	ldr	r2, [r0, #0]
 80021e0:	6853      	ldr	r3, [r2, #4]
 80021e2:	4920      	ldr	r1, [pc, #128]	@ (8002264 <UART_AdvFeatureConfig+0xc8>)
 80021e4:	400b      	ands	r3, r1
 80021e6:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 80021e8:	430b      	orrs	r3, r1
 80021ea:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80021ec:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80021ee:	06db      	lsls	r3, r3, #27
 80021f0:	d506      	bpl.n	8002200 <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80021f2:	6802      	ldr	r2, [r0, #0]
 80021f4:	6893      	ldr	r3, [r2, #8]
 80021f6:	491c      	ldr	r1, [pc, #112]	@ (8002268 <UART_AdvFeatureConfig+0xcc>)
 80021f8:	400b      	ands	r3, r1
 80021fa:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 80021fc:	430b      	orrs	r3, r1
 80021fe:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002200:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8002202:	069b      	lsls	r3, r3, #26
 8002204:	d506      	bpl.n	8002214 <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002206:	6802      	ldr	r2, [r0, #0]
 8002208:	6893      	ldr	r3, [r2, #8]
 800220a:	4918      	ldr	r1, [pc, #96]	@ (800226c <UART_AdvFeatureConfig+0xd0>)
 800220c:	400b      	ands	r3, r1
 800220e:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8002210:	430b      	orrs	r3, r1
 8002212:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002214:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8002216:	065b      	lsls	r3, r3, #25
 8002218:	d50b      	bpl.n	8002232 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800221a:	6802      	ldr	r2, [r0, #0]
 800221c:	6853      	ldr	r3, [r2, #4]
 800221e:	4914      	ldr	r1, [pc, #80]	@ (8002270 <UART_AdvFeatureConfig+0xd4>)
 8002220:	400b      	ands	r3, r1
 8002222:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 8002224:	430b      	orrs	r3, r1
 8002226:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002228:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 800222a:	2380      	movs	r3, #128	@ 0x80
 800222c:	035b      	lsls	r3, r3, #13
 800222e:	429a      	cmp	r2, r3
 8002230:	d00a      	beq.n	8002248 <UART_AdvFeatureConfig+0xac>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002232:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8002234:	061b      	lsls	r3, r3, #24
 8002236:	d506      	bpl.n	8002246 <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002238:	6802      	ldr	r2, [r0, #0]
 800223a:	6853      	ldr	r3, [r2, #4]
 800223c:	490d      	ldr	r1, [pc, #52]	@ (8002274 <UART_AdvFeatureConfig+0xd8>)
 800223e:	400b      	ands	r3, r1
 8002240:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8002242:	430b      	orrs	r3, r1
 8002244:	6053      	str	r3, [r2, #4]
}
 8002246:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002248:	6802      	ldr	r2, [r0, #0]
 800224a:	6853      	ldr	r3, [r2, #4]
 800224c:	490a      	ldr	r1, [pc, #40]	@ (8002278 <UART_AdvFeatureConfig+0xdc>)
 800224e:	400b      	ands	r3, r1
 8002250:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8002252:	430b      	orrs	r3, r1
 8002254:	6053      	str	r3, [r2, #4]
 8002256:	e7ec      	b.n	8002232 <UART_AdvFeatureConfig+0x96>
 8002258:	ffff7fff 	.word	0xffff7fff
 800225c:	fffdffff 	.word	0xfffdffff
 8002260:	fffeffff 	.word	0xfffeffff
 8002264:	fffbffff 	.word	0xfffbffff
 8002268:	ffffefff 	.word	0xffffefff
 800226c:	ffffdfff 	.word	0xffffdfff
 8002270:	ffefffff 	.word	0xffefffff
 8002274:	fff7ffff 	.word	0xfff7ffff
 8002278:	ff9fffff 	.word	0xff9fffff

0800227c <UART_WaitOnFlagUntilTimeout>:
{
 800227c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800227e:	46ce      	mov	lr, r9
 8002280:	4647      	mov	r7, r8
 8002282:	b580      	push	{r7, lr}
 8002284:	0006      	movs	r6, r0
 8002286:	000d      	movs	r5, r1
 8002288:	0017      	movs	r7, r2
 800228a:	4699      	mov	r9, r3
 800228c:	9b08      	ldr	r3, [sp, #32]
 800228e:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002290:	6833      	ldr	r3, [r6, #0]
 8002292:	69dc      	ldr	r4, [r3, #28]
 8002294:	402c      	ands	r4, r5
 8002296:	1b64      	subs	r4, r4, r5
 8002298:	4263      	negs	r3, r4
 800229a:	415c      	adcs	r4, r3
 800229c:	42bc      	cmp	r4, r7
 800229e:	d133      	bne.n	8002308 <UART_WaitOnFlagUntilTimeout+0x8c>
    if (Timeout != HAL_MAX_DELAY)
 80022a0:	4643      	mov	r3, r8
 80022a2:	3301      	adds	r3, #1
 80022a4:	d0f4      	beq.n	8002290 <UART_WaitOnFlagUntilTimeout+0x14>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022a6:	f7fe fb3f 	bl	8000928 <HAL_GetTick>
 80022aa:	464b      	mov	r3, r9
 80022ac:	1ac0      	subs	r0, r0, r3
 80022ae:	4540      	cmp	r0, r8
 80022b0:	d82f      	bhi.n	8002312 <UART_WaitOnFlagUntilTimeout+0x96>
 80022b2:	4643      	mov	r3, r8
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d02e      	beq.n	8002316 <UART_WaitOnFlagUntilTimeout+0x9a>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80022b8:	6832      	ldr	r2, [r6, #0]
 80022ba:	6813      	ldr	r3, [r2, #0]
 80022bc:	075b      	lsls	r3, r3, #29
 80022be:	d5e7      	bpl.n	8002290 <UART_WaitOnFlagUntilTimeout+0x14>
 80022c0:	2d80      	cmp	r5, #128	@ 0x80
 80022c2:	d0e5      	beq.n	8002290 <UART_WaitOnFlagUntilTimeout+0x14>
 80022c4:	2d40      	cmp	r5, #64	@ 0x40
 80022c6:	d0e3      	beq.n	8002290 <UART_WaitOnFlagUntilTimeout+0x14>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80022c8:	69d3      	ldr	r3, [r2, #28]
 80022ca:	071b      	lsls	r3, r3, #28
 80022cc:	d410      	bmi.n	80022f0 <UART_WaitOnFlagUntilTimeout+0x74>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80022ce:	69d3      	ldr	r3, [r2, #28]
 80022d0:	051b      	lsls	r3, r3, #20
 80022d2:	d5dd      	bpl.n	8002290 <UART_WaitOnFlagUntilTimeout+0x14>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80022d4:	2380      	movs	r3, #128	@ 0x80
 80022d6:	011b      	lsls	r3, r3, #4
 80022d8:	6213      	str	r3, [r2, #32]
          UART_EndRxTransfer(huart);
 80022da:	0030      	movs	r0, r6
 80022dc:	f7ff fe4a 	bl	8001f74 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80022e0:	2390      	movs	r3, #144	@ 0x90
 80022e2:	2220      	movs	r2, #32
 80022e4:	50f2      	str	r2, [r6, r3]
          __HAL_UNLOCK(huart);
 80022e6:	3b0c      	subs	r3, #12
 80022e8:	2200      	movs	r2, #0
 80022ea:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 80022ec:	2003      	movs	r0, #3
 80022ee:	e00c      	b.n	800230a <UART_WaitOnFlagUntilTimeout+0x8e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80022f0:	2408      	movs	r4, #8
 80022f2:	6214      	str	r4, [r2, #32]
          UART_EndRxTransfer(huart);
 80022f4:	0030      	movs	r0, r6
 80022f6:	f7ff fe3d 	bl	8001f74 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80022fa:	2390      	movs	r3, #144	@ 0x90
 80022fc:	50f4      	str	r4, [r6, r3]
          __HAL_UNLOCK(huart);
 80022fe:	3b0c      	subs	r3, #12
 8002300:	2200      	movs	r2, #0
 8002302:	54f2      	strb	r2, [r6, r3]
          return HAL_ERROR;
 8002304:	2001      	movs	r0, #1
 8002306:	e000      	b.n	800230a <UART_WaitOnFlagUntilTimeout+0x8e>
  return HAL_OK;
 8002308:	2000      	movs	r0, #0
}
 800230a:	bcc0      	pop	{r6, r7}
 800230c:	46b9      	mov	r9, r7
 800230e:	46b0      	mov	r8, r6
 8002310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8002312:	2003      	movs	r0, #3
 8002314:	e7f9      	b.n	800230a <UART_WaitOnFlagUntilTimeout+0x8e>
 8002316:	2003      	movs	r0, #3
 8002318:	e7f7      	b.n	800230a <UART_WaitOnFlagUntilTimeout+0x8e>

0800231a <HAL_UART_Transmit>:
{
 800231a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800231c:	46c6      	mov	lr, r8
 800231e:	b500      	push	{lr}
 8002320:	b082      	sub	sp, #8
 8002322:	0004      	movs	r4, r0
 8002324:	000d      	movs	r5, r1
 8002326:	4690      	mov	r8, r2
 8002328:	001e      	movs	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800232a:	2388      	movs	r3, #136	@ 0x88
 800232c:	58c3      	ldr	r3, [r0, r3]
 800232e:	2b20      	cmp	r3, #32
 8002330:	d165      	bne.n	80023fe <HAL_UART_Transmit+0xe4>
    if ((pData == NULL) || (Size == 0U))
 8002332:	2900      	cmp	r1, #0
 8002334:	d068      	beq.n	8002408 <HAL_UART_Transmit+0xee>
 8002336:	2a00      	cmp	r2, #0
 8002338:	d068      	beq.n	800240c <HAL_UART_Transmit+0xf2>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800233a:	6882      	ldr	r2, [r0, #8]
 800233c:	2380      	movs	r3, #128	@ 0x80
 800233e:	015b      	lsls	r3, r3, #5
 8002340:	429a      	cmp	r2, r3
 8002342:	d104      	bne.n	800234e <HAL_UART_Transmit+0x34>
 8002344:	6903      	ldr	r3, [r0, #16]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d101      	bne.n	800234e <HAL_UART_Transmit+0x34>
      if ((((uint32_t)pData) & 1U) != 0U)
 800234a:	07cb      	lsls	r3, r1, #31
 800234c:	d460      	bmi.n	8002410 <HAL_UART_Transmit+0xf6>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800234e:	2390      	movs	r3, #144	@ 0x90
 8002350:	2200      	movs	r2, #0
 8002352:	50e2      	str	r2, [r4, r3]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002354:	3b08      	subs	r3, #8
 8002356:	3221      	adds	r2, #33	@ 0x21
 8002358:	50e2      	str	r2, [r4, r3]
    tickstart = HAL_GetTick();
 800235a:	f7fe fae5 	bl	8000928 <HAL_GetTick>
 800235e:	0007      	movs	r7, r0
    huart->TxXferSize  = Size;
 8002360:	2354      	movs	r3, #84	@ 0x54
 8002362:	4642      	mov	r2, r8
 8002364:	52e2      	strh	r2, [r4, r3]
    huart->TxXferCount = Size;
 8002366:	3302      	adds	r3, #2
 8002368:	52e2      	strh	r2, [r4, r3]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800236a:	68a2      	ldr	r2, [r4, #8]
 800236c:	2380      	movs	r3, #128	@ 0x80
 800236e:	015b      	lsls	r3, r3, #5
 8002370:	429a      	cmp	r2, r3
 8002372:	d002      	beq.n	800237a <HAL_UART_Transmit+0x60>
      pdata16bits = NULL;
 8002374:	2300      	movs	r3, #0
 8002376:	4698      	mov	r8, r3
 8002378:	e018      	b.n	80023ac <HAL_UART_Transmit+0x92>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800237a:	6923      	ldr	r3, [r4, #16]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d029      	beq.n	80023d4 <HAL_UART_Transmit+0xba>
      pdata16bits = NULL;
 8002380:	2300      	movs	r3, #0
 8002382:	4698      	mov	r8, r3
 8002384:	e012      	b.n	80023ac <HAL_UART_Transmit+0x92>
        huart->gState = HAL_UART_STATE_READY;
 8002386:	2388      	movs	r3, #136	@ 0x88
 8002388:	2220      	movs	r2, #32
 800238a:	50e2      	str	r2, [r4, r3]
        return HAL_TIMEOUT;
 800238c:	2003      	movs	r0, #3
 800238e:	e037      	b.n	8002400 <HAL_UART_Transmit+0xe6>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002390:	4643      	mov	r3, r8
 8002392:	881b      	ldrh	r3, [r3, #0]
 8002394:	6822      	ldr	r2, [r4, #0]
 8002396:	05db      	lsls	r3, r3, #23
 8002398:	0ddb      	lsrs	r3, r3, #23
 800239a:	6293      	str	r3, [r2, #40]	@ 0x28
        pdata16bits++;
 800239c:	2302      	movs	r3, #2
 800239e:	469c      	mov	ip, r3
 80023a0:	44e0      	add	r8, ip
      huart->TxXferCount--;
 80023a2:	2356      	movs	r3, #86	@ 0x56
 80023a4:	5ae2      	ldrh	r2, [r4, r3]
 80023a6:	3a01      	subs	r2, #1
 80023a8:	b292      	uxth	r2, r2
 80023aa:	52e2      	strh	r2, [r4, r3]
    while (huart->TxXferCount > 0U)
 80023ac:	2356      	movs	r3, #86	@ 0x56
 80023ae:	5ae3      	ldrh	r3, [r4, r3]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d012      	beq.n	80023da <HAL_UART_Transmit+0xc0>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023b4:	9600      	str	r6, [sp, #0]
 80023b6:	003b      	movs	r3, r7
 80023b8:	2200      	movs	r2, #0
 80023ba:	2180      	movs	r1, #128	@ 0x80
 80023bc:	0020      	movs	r0, r4
 80023be:	f7ff ff5d 	bl	800227c <UART_WaitOnFlagUntilTimeout>
 80023c2:	2800      	cmp	r0, #0
 80023c4:	d1df      	bne.n	8002386 <HAL_UART_Transmit+0x6c>
      if (pdata8bits == NULL)
 80023c6:	2d00      	cmp	r5, #0
 80023c8:	d0e2      	beq.n	8002390 <HAL_UART_Transmit+0x76>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80023ca:	782a      	ldrb	r2, [r5, #0]
 80023cc:	6823      	ldr	r3, [r4, #0]
 80023ce:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80023d0:	3501      	adds	r5, #1
 80023d2:	e7e6      	b.n	80023a2 <HAL_UART_Transmit+0x88>
      pdata16bits = (const uint16_t *) pData;
 80023d4:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 80023d6:	2500      	movs	r5, #0
 80023d8:	e7e8      	b.n	80023ac <HAL_UART_Transmit+0x92>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80023da:	9600      	str	r6, [sp, #0]
 80023dc:	003b      	movs	r3, r7
 80023de:	2200      	movs	r2, #0
 80023e0:	2140      	movs	r1, #64	@ 0x40
 80023e2:	0020      	movs	r0, r4
 80023e4:	f7ff ff4a 	bl	800227c <UART_WaitOnFlagUntilTimeout>
 80023e8:	2800      	cmp	r0, #0
 80023ea:	d103      	bne.n	80023f4 <HAL_UART_Transmit+0xda>
    huart->gState = HAL_UART_STATE_READY;
 80023ec:	2388      	movs	r3, #136	@ 0x88
 80023ee:	2220      	movs	r2, #32
 80023f0:	50e2      	str	r2, [r4, r3]
    return HAL_OK;
 80023f2:	e005      	b.n	8002400 <HAL_UART_Transmit+0xe6>
      huart->gState = HAL_UART_STATE_READY;
 80023f4:	2388      	movs	r3, #136	@ 0x88
 80023f6:	2220      	movs	r2, #32
 80023f8:	50e2      	str	r2, [r4, r3]
      return HAL_TIMEOUT;
 80023fa:	2003      	movs	r0, #3
 80023fc:	e000      	b.n	8002400 <HAL_UART_Transmit+0xe6>
    return HAL_BUSY;
 80023fe:	2002      	movs	r0, #2
}
 8002400:	b002      	add	sp, #8
 8002402:	bc80      	pop	{r7}
 8002404:	46b8      	mov	r8, r7
 8002406:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return  HAL_ERROR;
 8002408:	2001      	movs	r0, #1
 800240a:	e7f9      	b.n	8002400 <HAL_UART_Transmit+0xe6>
 800240c:	2001      	movs	r0, #1
 800240e:	e7f7      	b.n	8002400 <HAL_UART_Transmit+0xe6>
        return  HAL_ERROR;
 8002410:	2001      	movs	r0, #1
 8002412:	e7f5      	b.n	8002400 <HAL_UART_Transmit+0xe6>

08002414 <UART_CheckIdleState>:
{
 8002414:	b530      	push	{r4, r5, lr}
 8002416:	b083      	sub	sp, #12
 8002418:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800241a:	2390      	movs	r3, #144	@ 0x90
 800241c:	2200      	movs	r2, #0
 800241e:	50c2      	str	r2, [r0, r3]
  tickstart = HAL_GetTick();
 8002420:	f7fe fa82 	bl	8000928 <HAL_GetTick>
 8002424:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002426:	6823      	ldr	r3, [r4, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	071b      	lsls	r3, r3, #28
 800242c:	d410      	bmi.n	8002450 <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800242e:	6823      	ldr	r3, [r4, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	075b      	lsls	r3, r3, #29
 8002434:	d42b      	bmi.n	800248e <UART_CheckIdleState+0x7a>
  huart->gState = HAL_UART_STATE_READY;
 8002436:	2320      	movs	r3, #32
 8002438:	2288      	movs	r2, #136	@ 0x88
 800243a:	50a3      	str	r3, [r4, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800243c:	3204      	adds	r2, #4
 800243e:	50a3      	str	r3, [r4, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002440:	2300      	movs	r3, #0
 8002442:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002444:	6723      	str	r3, [r4, #112]	@ 0x70
  __HAL_UNLOCK(huart);
 8002446:	3a08      	subs	r2, #8
 8002448:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 800244a:	2000      	movs	r0, #0
}
 800244c:	b003      	add	sp, #12
 800244e:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002450:	2180      	movs	r1, #128	@ 0x80
 8002452:	4b23      	ldr	r3, [pc, #140]	@ (80024e0 <UART_CheckIdleState+0xcc>)
 8002454:	9300      	str	r3, [sp, #0]
 8002456:	0003      	movs	r3, r0
 8002458:	2200      	movs	r2, #0
 800245a:	0389      	lsls	r1, r1, #14
 800245c:	0020      	movs	r0, r4
 800245e:	f7ff ff0d 	bl	800227c <UART_WaitOnFlagUntilTimeout>
 8002462:	2800      	cmp	r0, #0
 8002464:	d0e3      	beq.n	800242e <UART_CheckIdleState+0x1a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002466:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800246a:	2301      	movs	r3, #1
 800246c:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002470:	6822      	ldr	r2, [r4, #0]
 8002472:	6813      	ldr	r3, [r2, #0]
 8002474:	2080      	movs	r0, #128	@ 0x80
 8002476:	4383      	bics	r3, r0
 8002478:	6013      	str	r3, [r2, #0]
 800247a:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 800247e:	2388      	movs	r3, #136	@ 0x88
 8002480:	2220      	movs	r2, #32
 8002482:	50e2      	str	r2, [r4, r3]
      __HAL_UNLOCK(huart);
 8002484:	3b04      	subs	r3, #4
 8002486:	2200      	movs	r2, #0
 8002488:	54e2      	strb	r2, [r4, r3]
      return HAL_TIMEOUT;
 800248a:	387d      	subs	r0, #125	@ 0x7d
 800248c:	e7de      	b.n	800244c <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800248e:	2180      	movs	r1, #128	@ 0x80
 8002490:	4b13      	ldr	r3, [pc, #76]	@ (80024e0 <UART_CheckIdleState+0xcc>)
 8002492:	9300      	str	r3, [sp, #0]
 8002494:	002b      	movs	r3, r5
 8002496:	2200      	movs	r2, #0
 8002498:	03c9      	lsls	r1, r1, #15
 800249a:	0020      	movs	r0, r4
 800249c:	f7ff feee 	bl	800227c <UART_WaitOnFlagUntilTimeout>
 80024a0:	2800      	cmp	r0, #0
 80024a2:	d0c8      	beq.n	8002436 <UART_CheckIdleState+0x22>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80024a4:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024a8:	2201      	movs	r2, #1
 80024aa:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80024ae:	6821      	ldr	r1, [r4, #0]
 80024b0:	680b      	ldr	r3, [r1, #0]
 80024b2:	4d0c      	ldr	r5, [pc, #48]	@ (80024e4 <UART_CheckIdleState+0xd0>)
 80024b4:	402b      	ands	r3, r5
 80024b6:	600b      	str	r3, [r1, #0]
 80024b8:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80024bc:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024c0:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024c4:	6821      	ldr	r1, [r4, #0]
 80024c6:	688b      	ldr	r3, [r1, #8]
 80024c8:	4393      	bics	r3, r2
 80024ca:	608b      	str	r3, [r1, #8]
 80024cc:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 80024d0:	238c      	movs	r3, #140	@ 0x8c
 80024d2:	321f      	adds	r2, #31
 80024d4:	50e2      	str	r2, [r4, r3]
      __HAL_UNLOCK(huart);
 80024d6:	3b08      	subs	r3, #8
 80024d8:	2200      	movs	r2, #0
 80024da:	54e2      	strb	r2, [r4, r3]
      return HAL_TIMEOUT;
 80024dc:	2003      	movs	r0, #3
 80024de:	e7b5      	b.n	800244c <UART_CheckIdleState+0x38>
 80024e0:	01ffffff 	.word	0x01ffffff
 80024e4:	fffffedf 	.word	0xfffffedf

080024e8 <HAL_UART_Init>:
{
 80024e8:	b510      	push	{r4, lr}
 80024ea:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 80024ec:	d030      	beq.n	8002550 <HAL_UART_Init+0x68>
  if (huart->gState == HAL_UART_STATE_RESET)
 80024ee:	2388      	movs	r3, #136	@ 0x88
 80024f0:	58c3      	ldr	r3, [r0, r3]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d022      	beq.n	800253c <HAL_UART_Init+0x54>
  huart->gState = HAL_UART_STATE_BUSY;
 80024f6:	2388      	movs	r3, #136	@ 0x88
 80024f8:	2224      	movs	r2, #36	@ 0x24
 80024fa:	50e2      	str	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 80024fc:	6822      	ldr	r2, [r4, #0]
 80024fe:	6813      	ldr	r3, [r2, #0]
 8002500:	2101      	movs	r1, #1
 8002502:	438b      	bics	r3, r1
 8002504:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002506:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002508:	2b00      	cmp	r3, #0
 800250a:	d11d      	bne.n	8002548 <HAL_UART_Init+0x60>
  if (UART_SetConfig(huart) == HAL_ERROR)
 800250c:	0020      	movs	r0, r4
 800250e:	f7ff fd63 	bl	8001fd8 <UART_SetConfig>
 8002512:	2801      	cmp	r0, #1
 8002514:	d011      	beq.n	800253a <HAL_UART_Init+0x52>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002516:	6822      	ldr	r2, [r4, #0]
 8002518:	6853      	ldr	r3, [r2, #4]
 800251a:	490e      	ldr	r1, [pc, #56]	@ (8002554 <HAL_UART_Init+0x6c>)
 800251c:	400b      	ands	r3, r1
 800251e:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002520:	6822      	ldr	r2, [r4, #0]
 8002522:	6893      	ldr	r3, [r2, #8]
 8002524:	212a      	movs	r1, #42	@ 0x2a
 8002526:	438b      	bics	r3, r1
 8002528:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 800252a:	6822      	ldr	r2, [r4, #0]
 800252c:	6813      	ldr	r3, [r2, #0]
 800252e:	3929      	subs	r1, #41	@ 0x29
 8002530:	430b      	orrs	r3, r1
 8002532:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8002534:	0020      	movs	r0, r4
 8002536:	f7ff ff6d 	bl	8002414 <UART_CheckIdleState>
}
 800253a:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800253c:	3384      	adds	r3, #132	@ 0x84
 800253e:	2200      	movs	r2, #0
 8002540:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 8002542:	f7ff f9d3 	bl	80018ec <HAL_UART_MspInit>
 8002546:	e7d6      	b.n	80024f6 <HAL_UART_Init+0xe>
    UART_AdvFeatureConfig(huart);
 8002548:	0020      	movs	r0, r4
 800254a:	f7ff fe27 	bl	800219c <UART_AdvFeatureConfig>
 800254e:	e7dd      	b.n	800250c <HAL_UART_Init+0x24>
    return HAL_ERROR;
 8002550:	2001      	movs	r0, #1
 8002552:	e7f2      	b.n	800253a <HAL_UART_Init+0x52>
 8002554:	ffffb7ff 	.word	0xffffb7ff

08002558 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002558:	e7fe      	b.n	8002558 <NMI_Handler>

0800255a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800255a:	e7fe      	b.n	800255a <HardFault_Handler>

0800255c <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800255c:	4770      	bx	lr

0800255e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800255e:	4770      	bx	lr

08002560 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002560:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002562:	f7fe f9d5 	bl	8000910 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002566:	bd10      	pop	{r4, pc}

08002568 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8002568:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 800256a:	2000      	movs	r0, #0
 800256c:	f000 f894 	bl	8002698 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8002570:	bd10      	pop	{r4, pc}
	...

08002574 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002574:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002576:	4802      	ldr	r0, [pc, #8]	@ (8002580 <DMA1_Channel1_IRQHandler+0xc>)
 8002578:	f7fe ffb2 	bl	80014e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800257c:	bd10      	pop	{r4, pc}
 800257e:	46c0      	nop			@ (mov r8, r8)
 8002580:	200002d0 	.word	0x200002d0

08002584 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED4
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8002584:	b570      	push	{r4, r5, r6, lr}
 8002586:	b088      	sub	sp, #32
 8002588:	0004      	movs	r4, r0
  int32_t ret = BSP_ERROR_NONE;
  GPIO_InitTypeDef  gpio_init_structure;

#if defined (USE_NUCLEO_64)
  if ((Led != LED1)
 800258a:	2801      	cmp	r0, #1
 800258c:	d832      	bhi.n	80025f4 <BSP_LED_Init+0x70>
  }
  else
  {
    /* Enable the GPIO LED Clock */
#if defined (USE_NUCLEO_64)
    if (Led == LED1)
 800258e:	2800      	cmp	r0, #0
 8002590:	d11d      	bne.n	80025ce <BSP_LED_Init+0x4a>
    {
      LED1_GPIO_CLK_ENABLE();
 8002592:	4a1a      	ldr	r2, [pc, #104]	@ (80025fc <BSP_LED_Init+0x78>)
 8002594:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 8002596:	2301      	movs	r3, #1
 8002598:	4319      	orrs	r1, r3
 800259a:	6351      	str	r1, [r2, #52]	@ 0x34
 800259c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800259e:	4013      	ands	r3, r2
 80025a0:	9301      	str	r3, [sp, #4]
 80025a2:	9b01      	ldr	r3, [sp, #4]
      LED4_GPIO_CLK_ENABLE();
    }
#endif /* defined (USE_NUCLEO_64) */

    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 80025a4:	4b16      	ldr	r3, [pc, #88]	@ (8002600 <BSP_LED_Init+0x7c>)
 80025a6:	0062      	lsls	r2, r4, #1
 80025a8:	5ad6      	ldrh	r6, [r2, r3]
 80025aa:	a903      	add	r1, sp, #12
 80025ac:	9603      	str	r6, [sp, #12]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80025ae:	2301      	movs	r3, #1
 80025b0:	604b      	str	r3, [r1, #4]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 80025b2:	2300      	movs	r3, #0
 80025b4:	608b      	str	r3, [r1, #8]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025b6:	3303      	adds	r3, #3
 80025b8:	60cb      	str	r3, [r1, #12]

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80025ba:	4b12      	ldr	r3, [pc, #72]	@ (8002604 <BSP_LED_Init+0x80>)
 80025bc:	00a2      	lsls	r2, r4, #2
 80025be:	58d0      	ldr	r0, [r2, r3]
 80025c0:	f7ff f832 	bl	8001628 <HAL_GPIO_Init>
#if defined (USE_NUCLEO_64)
    if (Led == LED2)
 80025c4:	2c01      	cmp	r4, #1
 80025c6:	d00c      	beq.n	80025e2 <BSP_LED_Init+0x5e>
  int32_t ret = BSP_ERROR_NONE;
 80025c8:	2000      	movs	r0, #0
     HAL_GPIO_WritePin(LED_PORT [Led], (uint16_t)LED_PIN[Led], GPIO_PIN_SET);
    }
#endif
  }
  return ret;
}
 80025ca:	b008      	add	sp, #32
 80025cc:	bd70      	pop	{r4, r5, r6, pc}
      LED2_GPIO_CLK_ENABLE();
 80025ce:	4a0b      	ldr	r2, [pc, #44]	@ (80025fc <BSP_LED_Init+0x78>)
 80025d0:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 80025d2:	2304      	movs	r3, #4
 80025d4:	4319      	orrs	r1, r3
 80025d6:	6351      	str	r1, [r2, #52]	@ 0x34
 80025d8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80025da:	4013      	ands	r3, r2
 80025dc:	9302      	str	r3, [sp, #8]
 80025de:	9b02      	ldr	r3, [sp, #8]
 80025e0:	e7e0      	b.n	80025a4 <BSP_LED_Init+0x20>
     HAL_GPIO_WritePin(LED_PORT [Led], (uint16_t)LED_PIN[Led], GPIO_PIN_SET);
 80025e2:	4b08      	ldr	r3, [pc, #32]	@ (8002604 <BSP_LED_Init+0x80>)
 80025e4:	00a4      	lsls	r4, r4, #2
 80025e6:	58e0      	ldr	r0, [r4, r3]
 80025e8:	2201      	movs	r2, #1
 80025ea:	0031      	movs	r1, r6
 80025ec:	f7ff f901 	bl	80017f2 <HAL_GPIO_WritePin>
  int32_t ret = BSP_ERROR_NONE;
 80025f0:	2000      	movs	r0, #0
 80025f2:	e7ea      	b.n	80025ca <BSP_LED_Init+0x46>
    ret = BSP_ERROR_WRONG_PARAM;
 80025f4:	2002      	movs	r0, #2
 80025f6:	4240      	negs	r0, r0
 80025f8:	e7e7      	b.n	80025ca <BSP_LED_Init+0x46>
 80025fa:	46c0      	nop			@ (mov r8, r8)
 80025fc:	40021000 	.word	0x40021000
 8002600:	08007758 	.word	0x08007758
 8002604:	0800775c 	.word	0x0800775c

08002608 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002608:	b530      	push	{r4, r5, lr}
 800260a:	b087      	sub	sp, #28
 800260c:	0005      	movs	r5, r0
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 800260e:	4a1c      	ldr	r2, [pc, #112]	@ (8002680 <BSP_PB_Init+0x78>)
 8002610:	6b50      	ldr	r0, [r2, #52]	@ 0x34
 8002612:	2304      	movs	r3, #4
 8002614:	4318      	orrs	r0, r3
 8002616:	6350      	str	r0, [r2, #52]	@ 0x34
 8002618:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800261a:	4013      	ands	r3, r2
 800261c:	9300      	str	r3, [sp, #0]
 800261e:	9b00      	ldr	r3, [sp, #0]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8002620:	ab01      	add	r3, sp, #4
 8002622:	2280      	movs	r2, #128	@ 0x80
 8002624:	0192      	lsls	r2, r2, #6
 8002626:	9201      	str	r2, [sp, #4]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8002628:	2201      	movs	r2, #1
 800262a:	9203      	str	r2, [sp, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800262c:	3201      	adds	r2, #1
 800262e:	9204      	str	r2, [sp, #16]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8002630:	2900      	cmp	r1, #0
 8002632:	d108      	bne.n	8002646 <BSP_PB_Init+0x3e>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8002634:	0019      	movs	r1, r3
 8002636:	2300      	movs	r3, #0
 8002638:	604b      	str	r3, [r1, #4]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 800263a:	4812      	ldr	r0, [pc, #72]	@ (8002684 <BSP_PB_Init+0x7c>)
 800263c:	f7fe fff4 	bl	8001628 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
  }

  return BSP_ERROR_NONE;
}
 8002640:	2000      	movs	r0, #0
 8002642:	b007      	add	sp, #28
 8002644:	bd30      	pop	{r4, r5, pc}
    gpio_init_structure.Mode = GPIO_MODE_IT_FALLING;
 8002646:	a901      	add	r1, sp, #4
 8002648:	4b0f      	ldr	r3, [pc, #60]	@ (8002688 <BSP_PB_Init+0x80>)
 800264a:	604b      	str	r3, [r1, #4]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800264c:	480d      	ldr	r0, [pc, #52]	@ (8002684 <BSP_PB_Init+0x7c>)
 800264e:	f7fe ffeb 	bl	8001628 <HAL_GPIO_Init>
    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8002652:	006c      	lsls	r4, r5, #1
 8002654:	1964      	adds	r4, r4, r5
 8002656:	00a4      	lsls	r4, r4, #2
 8002658:	4b0c      	ldr	r3, [pc, #48]	@ (800268c <BSP_PB_Init+0x84>)
 800265a:	18e4      	adds	r4, r4, r3
 800265c:	490c      	ldr	r1, [pc, #48]	@ (8002690 <BSP_PB_Init+0x88>)
 800265e:	0020      	movs	r0, r4
 8002660:	f7fe ffb6 	bl	80015d0 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8002664:	4a0b      	ldr	r2, [pc, #44]	@ (8002694 <BSP_PB_Init+0x8c>)
 8002666:	2100      	movs	r1, #0
 8002668:	0020      	movs	r0, r4
 800266a:	f7fe ff9f 	bl	80015ac <HAL_EXTI_RegisterCallback>
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 800266e:	2200      	movs	r2, #0
 8002670:	210f      	movs	r1, #15
 8002672:	2007      	movs	r0, #7
 8002674:	f7fe fe24 	bl	80012c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8002678:	2007      	movs	r0, #7
 800267a:	f7fe fe25 	bl	80012c8 <HAL_NVIC_EnableIRQ>
 800267e:	e7df      	b.n	8002640 <BSP_PB_Init+0x38>
 8002680:	40021000 	.word	0x40021000
 8002684:	50000800 	.word	0x50000800
 8002688:	10210000 	.word	0x10210000
 800268c:	20000394 	.word	0x20000394
 8002690:	0600000d 	.word	0x0600000d
 8002694:	080026b3 	.word	0x080026b3

08002698 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8002698:	b510      	push	{r4, lr}
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 800269a:	0043      	lsls	r3, r0, #1
 800269c:	1818      	adds	r0, r3, r0
 800269e:	0080      	lsls	r0, r0, #2
 80026a0:	4b02      	ldr	r3, [pc, #8]	@ (80026ac <BSP_PB_IRQHandler+0x14>)
 80026a2:	18c0      	adds	r0, r0, r3
 80026a4:	f7fe ff9c 	bl	80015e0 <HAL_EXTI_IRQHandler>
}
 80026a8:	bd10      	pop	{r4, pc}
 80026aa:	46c0      	nop			@ (mov r8, r8)
 80026ac:	20000394 	.word	0x20000394

080026b0 <BSP_PB_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 80026b0:	4770      	bx	lr

080026b2 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80026b2:	b510      	push	{r4, lr}
  BSP_PB_Callback(BUTTON_USER);
 80026b4:	2000      	movs	r0, #0
 80026b6:	f7ff fffb 	bl	80026b0 <BSP_PB_Callback>
}
 80026ba:	bd10      	pop	{r4, pc}

080026bc <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 80026bc:	2001      	movs	r0, #1
 80026be:	4770      	bx	lr

080026c0 <_kill>:

int _kill(int pid, int sig)
{
 80026c0:	b510      	push	{r4, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80026c2:	f000 f9f5 	bl	8002ab0 <__errno>
 80026c6:	2316      	movs	r3, #22
 80026c8:	6003      	str	r3, [r0, #0]
  return -1;
 80026ca:	2001      	movs	r0, #1
}
 80026cc:	4240      	negs	r0, r0
 80026ce:	bd10      	pop	{r4, pc}

080026d0 <_exit>:

void _exit (int status)
{
 80026d0:	b510      	push	{r4, lr}
  _kill(status, -1);
 80026d2:	2101      	movs	r1, #1
 80026d4:	4249      	negs	r1, r1
 80026d6:	f7ff fff3 	bl	80026c0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80026da:	e7fe      	b.n	80026da <_exit+0xa>

080026dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026dc:	b570      	push	{r4, r5, r6, lr}
 80026de:	000c      	movs	r4, r1
 80026e0:	0016      	movs	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026e2:	2500      	movs	r5, #0
 80026e4:	e004      	b.n	80026f0 <_read+0x14>
  {
    *ptr++ = __io_getchar();
 80026e6:	e000      	b.n	80026ea <_read+0xe>
 80026e8:	bf00      	nop
 80026ea:	7020      	strb	r0, [r4, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026ec:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 80026ee:	3401      	adds	r4, #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026f0:	42b5      	cmp	r5, r6
 80026f2:	dbf8      	blt.n	80026e6 <_read+0xa>
  }

  return len;
}
 80026f4:	0030      	movs	r0, r6
 80026f6:	bd70      	pop	{r4, r5, r6, pc}

080026f8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80026f8:	b570      	push	{r4, r5, r6, lr}
 80026fa:	0016      	movs	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026fc:	2400      	movs	r4, #0
 80026fe:	e005      	b.n	800270c <_write+0x14>
  {
    __io_putchar(*ptr++);
 8002700:	1c4d      	adds	r5, r1, #1
 8002702:	7808      	ldrb	r0, [r1, #0]
 8002704:	e000      	b.n	8002708 <_write+0x10>
 8002706:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002708:	3401      	adds	r4, #1
    __io_putchar(*ptr++);
 800270a:	0029      	movs	r1, r5
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800270c:	42b4      	cmp	r4, r6
 800270e:	dbf7      	blt.n	8002700 <_write+0x8>
  }
  return len;
}
 8002710:	0030      	movs	r0, r6
 8002712:	bd70      	pop	{r4, r5, r6, pc}

08002714 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
 8002714:	2001      	movs	r0, #1
}
 8002716:	4240      	negs	r0, r0
 8002718:	4770      	bx	lr

0800271a <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 800271a:	2380      	movs	r3, #128	@ 0x80
 800271c:	019b      	lsls	r3, r3, #6
 800271e:	604b      	str	r3, [r1, #4]
  return 0;
}
 8002720:	2000      	movs	r0, #0
 8002722:	4770      	bx	lr

08002724 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8002724:	2001      	movs	r0, #1
 8002726:	4770      	bx	lr

08002728 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8002728:	2000      	movs	r0, #0
 800272a:	4770      	bx	lr

0800272c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800272c:	b510      	push	{r4, lr}
 800272e:	0003      	movs	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002730:	4a0c      	ldr	r2, [pc, #48]	@ (8002764 <_sbrk+0x38>)
 8002732:	490d      	ldr	r1, [pc, #52]	@ (8002768 <_sbrk+0x3c>)
 8002734:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002736:	490d      	ldr	r1, [pc, #52]	@ (800276c <_sbrk+0x40>)
 8002738:	6809      	ldr	r1, [r1, #0]
 800273a:	2900      	cmp	r1, #0
 800273c:	d007      	beq.n	800274e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800273e:	490b      	ldr	r1, [pc, #44]	@ (800276c <_sbrk+0x40>)
 8002740:	6808      	ldr	r0, [r1, #0]
 8002742:	18c3      	adds	r3, r0, r3
 8002744:	4293      	cmp	r3, r2
 8002746:	d806      	bhi.n	8002756 <_sbrk+0x2a>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8002748:	4a08      	ldr	r2, [pc, #32]	@ (800276c <_sbrk+0x40>)
 800274a:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 800274c:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800274e:	4907      	ldr	r1, [pc, #28]	@ (800276c <_sbrk+0x40>)
 8002750:	4807      	ldr	r0, [pc, #28]	@ (8002770 <_sbrk+0x44>)
 8002752:	6008      	str	r0, [r1, #0]
 8002754:	e7f3      	b.n	800273e <_sbrk+0x12>
    errno = ENOMEM;
 8002756:	f000 f9ab 	bl	8002ab0 <__errno>
 800275a:	230c      	movs	r3, #12
 800275c:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800275e:	2001      	movs	r0, #1
 8002760:	4240      	negs	r0, r0
 8002762:	e7f3      	b.n	800274c <_sbrk+0x20>
 8002764:	20003000 	.word	0x20003000
 8002768:	00000400 	.word	0x00000400
 800276c:	200003a0 	.word	0x200003a0
 8002770:	200004f0 	.word	0x200004f0

08002774 <SystemInit>:
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002774:	4b02      	ldr	r3, [pc, #8]	@ (8002780 <SystemInit+0xc>)
 8002776:	2280      	movs	r2, #128	@ 0x80
 8002778:	0512      	lsls	r2, r2, #20
 800277a:	609a      	str	r2, [r3, #8]
#endif
}
 800277c:	4770      	bx	lr
 800277e:	46c0      	nop			@ (mov r8, r8)
 8002780:	e000ed00 	.word	0xe000ed00

08002784 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002784:	480d      	ldr	r0, [pc, #52]	@ (80027bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002786:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002788:	f7ff fff4 	bl	8002774 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800278c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800278e:	e003      	b.n	8002798 <LoopCopyDataInit>

08002790 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002790:	4b0b      	ldr	r3, [pc, #44]	@ (80027c0 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8002792:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002794:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002796:	3104      	adds	r1, #4

08002798 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002798:	480a      	ldr	r0, [pc, #40]	@ (80027c4 <LoopForever+0xa>)
  ldr r3, =_edata
 800279a:	4b0b      	ldr	r3, [pc, #44]	@ (80027c8 <LoopForever+0xe>)
  adds r2, r0, r1
 800279c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800279e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80027a0:	d3f6      	bcc.n	8002790 <CopyDataInit>
  ldr r2, =_sbss
 80027a2:	4a0a      	ldr	r2, [pc, #40]	@ (80027cc <LoopForever+0x12>)
  b LoopFillZerobss
 80027a4:	e002      	b.n	80027ac <LoopFillZerobss>

080027a6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80027a6:	2300      	movs	r3, #0
  str  r3, [r2]
 80027a8:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027aa:	3204      	adds	r2, #4

080027ac <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 80027ac:	4b08      	ldr	r3, [pc, #32]	@ (80027d0 <LoopForever+0x16>)
  cmp r2, r3
 80027ae:	429a      	cmp	r2, r3
  bcc FillZerobss
 80027b0:	d3f9      	bcc.n	80027a6 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80027b2:	f000 f983 	bl	8002abc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80027b6:	f7fe f84b 	bl	8000850 <main>

080027ba <LoopForever>:

LoopForever:
    b LoopForever
 80027ba:	e7fe      	b.n	80027ba <LoopForever>
  ldr   r0, =_estack
 80027bc:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 80027c0:	08007b30 	.word	0x08007b30
  ldr r0, =_sdata
 80027c4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80027c8:	20000068 	.word	0x20000068
  ldr r2, =_sbss
 80027cc:	20000068 	.word	0x20000068
  ldr r3, = _ebss
 80027d0:	200004f0 	.word	0x200004f0

080027d4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80027d4:	e7fe      	b.n	80027d4 <ADC1_IRQHandler>
	...

080027d8 <sniprintf>:
 80027d8:	b40c      	push	{r2, r3}
 80027da:	b530      	push	{r4, r5, lr}
 80027dc:	4b17      	ldr	r3, [pc, #92]	@ (800283c <sniprintf+0x64>)
 80027de:	000c      	movs	r4, r1
 80027e0:	681d      	ldr	r5, [r3, #0]
 80027e2:	b09d      	sub	sp, #116	@ 0x74
 80027e4:	2900      	cmp	r1, #0
 80027e6:	da08      	bge.n	80027fa <sniprintf+0x22>
 80027e8:	238b      	movs	r3, #139	@ 0x8b
 80027ea:	2001      	movs	r0, #1
 80027ec:	602b      	str	r3, [r5, #0]
 80027ee:	4240      	negs	r0, r0
 80027f0:	b01d      	add	sp, #116	@ 0x74
 80027f2:	bc30      	pop	{r4, r5}
 80027f4:	bc08      	pop	{r3}
 80027f6:	b002      	add	sp, #8
 80027f8:	4718      	bx	r3
 80027fa:	2382      	movs	r3, #130	@ 0x82
 80027fc:	a902      	add	r1, sp, #8
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	818b      	strh	r3, [r1, #12]
 8002802:	2300      	movs	r3, #0
 8002804:	9002      	str	r0, [sp, #8]
 8002806:	664b      	str	r3, [r1, #100]	@ 0x64
 8002808:	6108      	str	r0, [r1, #16]
 800280a:	429c      	cmp	r4, r3
 800280c:	d000      	beq.n	8002810 <sniprintf+0x38>
 800280e:	1e63      	subs	r3, r4, #1
 8002810:	608b      	str	r3, [r1, #8]
 8002812:	614b      	str	r3, [r1, #20]
 8002814:	2301      	movs	r3, #1
 8002816:	425b      	negs	r3, r3
 8002818:	81cb      	strh	r3, [r1, #14]
 800281a:	0028      	movs	r0, r5
 800281c:	ab21      	add	r3, sp, #132	@ 0x84
 800281e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8002820:	9301      	str	r3, [sp, #4]
 8002822:	f000 fa23 	bl	8002c6c <_svfiprintf_r>
 8002826:	1c43      	adds	r3, r0, #1
 8002828:	da01      	bge.n	800282e <sniprintf+0x56>
 800282a:	238b      	movs	r3, #139	@ 0x8b
 800282c:	602b      	str	r3, [r5, #0]
 800282e:	2c00      	cmp	r4, #0
 8002830:	d0de      	beq.n	80027f0 <sniprintf+0x18>
 8002832:	2200      	movs	r2, #0
 8002834:	9b02      	ldr	r3, [sp, #8]
 8002836:	701a      	strb	r2, [r3, #0]
 8002838:	e7da      	b.n	80027f0 <sniprintf+0x18>
 800283a:	46c0      	nop			@ (mov r8, r8)
 800283c:	20000018 	.word	0x20000018

08002840 <srand>:
 8002840:	4b10      	ldr	r3, [pc, #64]	@ (8002884 <srand+0x44>)
 8002842:	b570      	push	{r4, r5, r6, lr}
 8002844:	681d      	ldr	r5, [r3, #0]
 8002846:	0004      	movs	r4, r0
 8002848:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 800284a:	2a00      	cmp	r2, #0
 800284c:	d116      	bne.n	800287c <srand+0x3c>
 800284e:	2018      	movs	r0, #24
 8002850:	f000 fb10 	bl	8002e74 <malloc>
 8002854:	1e02      	subs	r2, r0, #0
 8002856:	6328      	str	r0, [r5, #48]	@ 0x30
 8002858:	d104      	bne.n	8002864 <srand+0x24>
 800285a:	2146      	movs	r1, #70	@ 0x46
 800285c:	4b0a      	ldr	r3, [pc, #40]	@ (8002888 <srand+0x48>)
 800285e:	480b      	ldr	r0, [pc, #44]	@ (800288c <srand+0x4c>)
 8002860:	f000 f982 	bl	8002b68 <__assert_func>
 8002864:	4b0a      	ldr	r3, [pc, #40]	@ (8002890 <srand+0x50>)
 8002866:	2100      	movs	r1, #0
 8002868:	6003      	str	r3, [r0, #0]
 800286a:	4b0a      	ldr	r3, [pc, #40]	@ (8002894 <srand+0x54>)
 800286c:	6043      	str	r3, [r0, #4]
 800286e:	4b0a      	ldr	r3, [pc, #40]	@ (8002898 <srand+0x58>)
 8002870:	6083      	str	r3, [r0, #8]
 8002872:	230b      	movs	r3, #11
 8002874:	8183      	strh	r3, [r0, #12]
 8002876:	2001      	movs	r0, #1
 8002878:	6110      	str	r0, [r2, #16]
 800287a:	6151      	str	r1, [r2, #20]
 800287c:	2300      	movs	r3, #0
 800287e:	6114      	str	r4, [r2, #16]
 8002880:	6153      	str	r3, [r2, #20]
 8002882:	bd70      	pop	{r4, r5, r6, pc}
 8002884:	20000018 	.word	0x20000018
 8002888:	080077c4 	.word	0x080077c4
 800288c:	080077db 	.word	0x080077db
 8002890:	abcd330e 	.word	0xabcd330e
 8002894:	e66d1234 	.word	0xe66d1234
 8002898:	0005deec 	.word	0x0005deec

0800289c <rand>:
 800289c:	4b16      	ldr	r3, [pc, #88]	@ (80028f8 <rand+0x5c>)
 800289e:	b570      	push	{r4, r5, r6, lr}
 80028a0:	681d      	ldr	r5, [r3, #0]
 80028a2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80028a4:	2c00      	cmp	r4, #0
 80028a6:	d117      	bne.n	80028d8 <rand+0x3c>
 80028a8:	2018      	movs	r0, #24
 80028aa:	f000 fae3 	bl	8002e74 <malloc>
 80028ae:	1e04      	subs	r4, r0, #0
 80028b0:	6328      	str	r0, [r5, #48]	@ 0x30
 80028b2:	d105      	bne.n	80028c0 <rand+0x24>
 80028b4:	0022      	movs	r2, r4
 80028b6:	2152      	movs	r1, #82	@ 0x52
 80028b8:	4b10      	ldr	r3, [pc, #64]	@ (80028fc <rand+0x60>)
 80028ba:	4811      	ldr	r0, [pc, #68]	@ (8002900 <rand+0x64>)
 80028bc:	f000 f954 	bl	8002b68 <__assert_func>
 80028c0:	4b10      	ldr	r3, [pc, #64]	@ (8002904 <rand+0x68>)
 80028c2:	2201      	movs	r2, #1
 80028c4:	6003      	str	r3, [r0, #0]
 80028c6:	4b10      	ldr	r3, [pc, #64]	@ (8002908 <rand+0x6c>)
 80028c8:	6043      	str	r3, [r0, #4]
 80028ca:	4b10      	ldr	r3, [pc, #64]	@ (800290c <rand+0x70>)
 80028cc:	6083      	str	r3, [r0, #8]
 80028ce:	230b      	movs	r3, #11
 80028d0:	8183      	strh	r3, [r0, #12]
 80028d2:	2300      	movs	r3, #0
 80028d4:	6102      	str	r2, [r0, #16]
 80028d6:	6143      	str	r3, [r0, #20]
 80028d8:	6920      	ldr	r0, [r4, #16]
 80028da:	6961      	ldr	r1, [r4, #20]
 80028dc:	4a0c      	ldr	r2, [pc, #48]	@ (8002910 <rand+0x74>)
 80028de:	4b0d      	ldr	r3, [pc, #52]	@ (8002914 <rand+0x78>)
 80028e0:	f002 ff00 	bl	80056e4 <__aeabi_lmul>
 80028e4:	2201      	movs	r2, #1
 80028e6:	2300      	movs	r3, #0
 80028e8:	1880      	adds	r0, r0, r2
 80028ea:	4159      	adcs	r1, r3
 80028ec:	6120      	str	r0, [r4, #16]
 80028ee:	6161      	str	r1, [r4, #20]
 80028f0:	0048      	lsls	r0, r1, #1
 80028f2:	0840      	lsrs	r0, r0, #1
 80028f4:	bd70      	pop	{r4, r5, r6, pc}
 80028f6:	46c0      	nop			@ (mov r8, r8)
 80028f8:	20000018 	.word	0x20000018
 80028fc:	080077c4 	.word	0x080077c4
 8002900:	080077db 	.word	0x080077db
 8002904:	abcd330e 	.word	0xabcd330e
 8002908:	e66d1234 	.word	0xe66d1234
 800290c:	0005deec 	.word	0x0005deec
 8002910:	4c957f2d 	.word	0x4c957f2d
 8002914:	5851f42d 	.word	0x5851f42d

08002918 <std>:
 8002918:	2300      	movs	r3, #0
 800291a:	b510      	push	{r4, lr}
 800291c:	0004      	movs	r4, r0
 800291e:	6003      	str	r3, [r0, #0]
 8002920:	6043      	str	r3, [r0, #4]
 8002922:	6083      	str	r3, [r0, #8]
 8002924:	8181      	strh	r1, [r0, #12]
 8002926:	6643      	str	r3, [r0, #100]	@ 0x64
 8002928:	81c2      	strh	r2, [r0, #14]
 800292a:	6103      	str	r3, [r0, #16]
 800292c:	6143      	str	r3, [r0, #20]
 800292e:	6183      	str	r3, [r0, #24]
 8002930:	0019      	movs	r1, r3
 8002932:	2208      	movs	r2, #8
 8002934:	305c      	adds	r0, #92	@ 0x5c
 8002936:	f000 f8b3 	bl	8002aa0 <memset>
 800293a:	4b0b      	ldr	r3, [pc, #44]	@ (8002968 <std+0x50>)
 800293c:	6224      	str	r4, [r4, #32]
 800293e:	6263      	str	r3, [r4, #36]	@ 0x24
 8002940:	4b0a      	ldr	r3, [pc, #40]	@ (800296c <std+0x54>)
 8002942:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002944:	4b0a      	ldr	r3, [pc, #40]	@ (8002970 <std+0x58>)
 8002946:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002948:	4b0a      	ldr	r3, [pc, #40]	@ (8002974 <std+0x5c>)
 800294a:	6323      	str	r3, [r4, #48]	@ 0x30
 800294c:	4b0a      	ldr	r3, [pc, #40]	@ (8002978 <std+0x60>)
 800294e:	429c      	cmp	r4, r3
 8002950:	d005      	beq.n	800295e <std+0x46>
 8002952:	4b0a      	ldr	r3, [pc, #40]	@ (800297c <std+0x64>)
 8002954:	429c      	cmp	r4, r3
 8002956:	d002      	beq.n	800295e <std+0x46>
 8002958:	4b09      	ldr	r3, [pc, #36]	@ (8002980 <std+0x68>)
 800295a:	429c      	cmp	r4, r3
 800295c:	d103      	bne.n	8002966 <std+0x4e>
 800295e:	0020      	movs	r0, r4
 8002960:	3058      	adds	r0, #88	@ 0x58
 8002962:	f000 f8eb 	bl	8002b3c <__retarget_lock_init_recursive>
 8002966:	bd10      	pop	{r4, pc}
 8002968:	08003451 	.word	0x08003451
 800296c:	08003479 	.word	0x08003479
 8002970:	080034b1 	.word	0x080034b1
 8002974:	080034dd 	.word	0x080034dd
 8002978:	200003a4 	.word	0x200003a4
 800297c:	2000040c 	.word	0x2000040c
 8002980:	20000474 	.word	0x20000474

08002984 <stdio_exit_handler>:
 8002984:	b510      	push	{r4, lr}
 8002986:	4a03      	ldr	r2, [pc, #12]	@ (8002994 <stdio_exit_handler+0x10>)
 8002988:	4903      	ldr	r1, [pc, #12]	@ (8002998 <stdio_exit_handler+0x14>)
 800298a:	4804      	ldr	r0, [pc, #16]	@ (800299c <stdio_exit_handler+0x18>)
 800298c:	f000 f86c 	bl	8002a68 <_fwalk_sglue>
 8002990:	bd10      	pop	{r4, pc}
 8002992:	46c0      	nop			@ (mov r8, r8)
 8002994:	2000000c 	.word	0x2000000c
 8002998:	080033d9 	.word	0x080033d9
 800299c:	2000001c 	.word	0x2000001c

080029a0 <cleanup_stdio>:
 80029a0:	6841      	ldr	r1, [r0, #4]
 80029a2:	4b0b      	ldr	r3, [pc, #44]	@ (80029d0 <cleanup_stdio+0x30>)
 80029a4:	b510      	push	{r4, lr}
 80029a6:	0004      	movs	r4, r0
 80029a8:	4299      	cmp	r1, r3
 80029aa:	d001      	beq.n	80029b0 <cleanup_stdio+0x10>
 80029ac:	f000 fd14 	bl	80033d8 <_fflush_r>
 80029b0:	68a1      	ldr	r1, [r4, #8]
 80029b2:	4b08      	ldr	r3, [pc, #32]	@ (80029d4 <cleanup_stdio+0x34>)
 80029b4:	4299      	cmp	r1, r3
 80029b6:	d002      	beq.n	80029be <cleanup_stdio+0x1e>
 80029b8:	0020      	movs	r0, r4
 80029ba:	f000 fd0d 	bl	80033d8 <_fflush_r>
 80029be:	68e1      	ldr	r1, [r4, #12]
 80029c0:	4b05      	ldr	r3, [pc, #20]	@ (80029d8 <cleanup_stdio+0x38>)
 80029c2:	4299      	cmp	r1, r3
 80029c4:	d002      	beq.n	80029cc <cleanup_stdio+0x2c>
 80029c6:	0020      	movs	r0, r4
 80029c8:	f000 fd06 	bl	80033d8 <_fflush_r>
 80029cc:	bd10      	pop	{r4, pc}
 80029ce:	46c0      	nop			@ (mov r8, r8)
 80029d0:	200003a4 	.word	0x200003a4
 80029d4:	2000040c 	.word	0x2000040c
 80029d8:	20000474 	.word	0x20000474

080029dc <global_stdio_init.part.0>:
 80029dc:	b510      	push	{r4, lr}
 80029de:	4b09      	ldr	r3, [pc, #36]	@ (8002a04 <global_stdio_init.part.0+0x28>)
 80029e0:	4a09      	ldr	r2, [pc, #36]	@ (8002a08 <global_stdio_init.part.0+0x2c>)
 80029e2:	2104      	movs	r1, #4
 80029e4:	601a      	str	r2, [r3, #0]
 80029e6:	4809      	ldr	r0, [pc, #36]	@ (8002a0c <global_stdio_init.part.0+0x30>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	f7ff ff95 	bl	8002918 <std>
 80029ee:	2201      	movs	r2, #1
 80029f0:	2109      	movs	r1, #9
 80029f2:	4807      	ldr	r0, [pc, #28]	@ (8002a10 <global_stdio_init.part.0+0x34>)
 80029f4:	f7ff ff90 	bl	8002918 <std>
 80029f8:	2202      	movs	r2, #2
 80029fa:	2112      	movs	r1, #18
 80029fc:	4805      	ldr	r0, [pc, #20]	@ (8002a14 <global_stdio_init.part.0+0x38>)
 80029fe:	f7ff ff8b 	bl	8002918 <std>
 8002a02:	bd10      	pop	{r4, pc}
 8002a04:	200004dc 	.word	0x200004dc
 8002a08:	08002985 	.word	0x08002985
 8002a0c:	200003a4 	.word	0x200003a4
 8002a10:	2000040c 	.word	0x2000040c
 8002a14:	20000474 	.word	0x20000474

08002a18 <__sfp_lock_acquire>:
 8002a18:	b510      	push	{r4, lr}
 8002a1a:	4802      	ldr	r0, [pc, #8]	@ (8002a24 <__sfp_lock_acquire+0xc>)
 8002a1c:	f000 f88f 	bl	8002b3e <__retarget_lock_acquire_recursive>
 8002a20:	bd10      	pop	{r4, pc}
 8002a22:	46c0      	nop			@ (mov r8, r8)
 8002a24:	200004e1 	.word	0x200004e1

08002a28 <__sfp_lock_release>:
 8002a28:	b510      	push	{r4, lr}
 8002a2a:	4802      	ldr	r0, [pc, #8]	@ (8002a34 <__sfp_lock_release+0xc>)
 8002a2c:	f000 f888 	bl	8002b40 <__retarget_lock_release_recursive>
 8002a30:	bd10      	pop	{r4, pc}
 8002a32:	46c0      	nop			@ (mov r8, r8)
 8002a34:	200004e1 	.word	0x200004e1

08002a38 <__sinit>:
 8002a38:	b510      	push	{r4, lr}
 8002a3a:	0004      	movs	r4, r0
 8002a3c:	f7ff ffec 	bl	8002a18 <__sfp_lock_acquire>
 8002a40:	6a23      	ldr	r3, [r4, #32]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d002      	beq.n	8002a4c <__sinit+0x14>
 8002a46:	f7ff ffef 	bl	8002a28 <__sfp_lock_release>
 8002a4a:	bd10      	pop	{r4, pc}
 8002a4c:	4b04      	ldr	r3, [pc, #16]	@ (8002a60 <__sinit+0x28>)
 8002a4e:	6223      	str	r3, [r4, #32]
 8002a50:	4b04      	ldr	r3, [pc, #16]	@ (8002a64 <__sinit+0x2c>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d1f6      	bne.n	8002a46 <__sinit+0xe>
 8002a58:	f7ff ffc0 	bl	80029dc <global_stdio_init.part.0>
 8002a5c:	e7f3      	b.n	8002a46 <__sinit+0xe>
 8002a5e:	46c0      	nop			@ (mov r8, r8)
 8002a60:	080029a1 	.word	0x080029a1
 8002a64:	200004dc 	.word	0x200004dc

08002a68 <_fwalk_sglue>:
 8002a68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002a6a:	0014      	movs	r4, r2
 8002a6c:	2600      	movs	r6, #0
 8002a6e:	9000      	str	r0, [sp, #0]
 8002a70:	9101      	str	r1, [sp, #4]
 8002a72:	68a5      	ldr	r5, [r4, #8]
 8002a74:	6867      	ldr	r7, [r4, #4]
 8002a76:	3f01      	subs	r7, #1
 8002a78:	d504      	bpl.n	8002a84 <_fwalk_sglue+0x1c>
 8002a7a:	6824      	ldr	r4, [r4, #0]
 8002a7c:	2c00      	cmp	r4, #0
 8002a7e:	d1f8      	bne.n	8002a72 <_fwalk_sglue+0xa>
 8002a80:	0030      	movs	r0, r6
 8002a82:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002a84:	89ab      	ldrh	r3, [r5, #12]
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d908      	bls.n	8002a9c <_fwalk_sglue+0x34>
 8002a8a:	220e      	movs	r2, #14
 8002a8c:	5eab      	ldrsh	r3, [r5, r2]
 8002a8e:	3301      	adds	r3, #1
 8002a90:	d004      	beq.n	8002a9c <_fwalk_sglue+0x34>
 8002a92:	0029      	movs	r1, r5
 8002a94:	9800      	ldr	r0, [sp, #0]
 8002a96:	9b01      	ldr	r3, [sp, #4]
 8002a98:	4798      	blx	r3
 8002a9a:	4306      	orrs	r6, r0
 8002a9c:	3568      	adds	r5, #104	@ 0x68
 8002a9e:	e7ea      	b.n	8002a76 <_fwalk_sglue+0xe>

08002aa0 <memset>:
 8002aa0:	0003      	movs	r3, r0
 8002aa2:	1882      	adds	r2, r0, r2
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d100      	bne.n	8002aaa <memset+0xa>
 8002aa8:	4770      	bx	lr
 8002aaa:	7019      	strb	r1, [r3, #0]
 8002aac:	3301      	adds	r3, #1
 8002aae:	e7f9      	b.n	8002aa4 <memset+0x4>

08002ab0 <__errno>:
 8002ab0:	4b01      	ldr	r3, [pc, #4]	@ (8002ab8 <__errno+0x8>)
 8002ab2:	6818      	ldr	r0, [r3, #0]
 8002ab4:	4770      	bx	lr
 8002ab6:	46c0      	nop			@ (mov r8, r8)
 8002ab8:	20000018 	.word	0x20000018

08002abc <__libc_init_array>:
 8002abc:	b570      	push	{r4, r5, r6, lr}
 8002abe:	2600      	movs	r6, #0
 8002ac0:	4c0c      	ldr	r4, [pc, #48]	@ (8002af4 <__libc_init_array+0x38>)
 8002ac2:	4d0d      	ldr	r5, [pc, #52]	@ (8002af8 <__libc_init_array+0x3c>)
 8002ac4:	1b64      	subs	r4, r4, r5
 8002ac6:	10a4      	asrs	r4, r4, #2
 8002ac8:	42a6      	cmp	r6, r4
 8002aca:	d109      	bne.n	8002ae0 <__libc_init_array+0x24>
 8002acc:	2600      	movs	r6, #0
 8002ace:	f004 fe1f 	bl	8007710 <_init>
 8002ad2:	4c0a      	ldr	r4, [pc, #40]	@ (8002afc <__libc_init_array+0x40>)
 8002ad4:	4d0a      	ldr	r5, [pc, #40]	@ (8002b00 <__libc_init_array+0x44>)
 8002ad6:	1b64      	subs	r4, r4, r5
 8002ad8:	10a4      	asrs	r4, r4, #2
 8002ada:	42a6      	cmp	r6, r4
 8002adc:	d105      	bne.n	8002aea <__libc_init_array+0x2e>
 8002ade:	bd70      	pop	{r4, r5, r6, pc}
 8002ae0:	00b3      	lsls	r3, r6, #2
 8002ae2:	58eb      	ldr	r3, [r5, r3]
 8002ae4:	4798      	blx	r3
 8002ae6:	3601      	adds	r6, #1
 8002ae8:	e7ee      	b.n	8002ac8 <__libc_init_array+0xc>
 8002aea:	00b3      	lsls	r3, r6, #2
 8002aec:	58eb      	ldr	r3, [r5, r3]
 8002aee:	4798      	blx	r3
 8002af0:	3601      	adds	r6, #1
 8002af2:	e7f2      	b.n	8002ada <__libc_init_array+0x1e>
 8002af4:	08007b28 	.word	0x08007b28
 8002af8:	08007b28 	.word	0x08007b28
 8002afc:	08007b2c 	.word	0x08007b2c
 8002b00:	08007b28 	.word	0x08007b28

08002b04 <time>:
 8002b04:	b5df      	push	{r0, r1, r2, r3, r4, r6, r7, lr}
 8002b06:	2601      	movs	r6, #1
 8002b08:	4276      	negs	r6, r6
 8002b0a:	17f7      	asrs	r7, r6, #31
 8002b0c:	4b0a      	ldr	r3, [pc, #40]	@ (8002b38 <time+0x34>)
 8002b0e:	0004      	movs	r4, r0
 8002b10:	2200      	movs	r2, #0
 8002b12:	4669      	mov	r1, sp
 8002b14:	6818      	ldr	r0, [r3, #0]
 8002b16:	9600      	str	r6, [sp, #0]
 8002b18:	9701      	str	r7, [sp, #4]
 8002b1a:	f000 f813 	bl	8002b44 <_gettimeofday_r>
 8002b1e:	2800      	cmp	r0, #0
 8002b20:	da01      	bge.n	8002b26 <time+0x22>
 8002b22:	9600      	str	r6, [sp, #0]
 8002b24:	9701      	str	r7, [sp, #4]
 8002b26:	9800      	ldr	r0, [sp, #0]
 8002b28:	9901      	ldr	r1, [sp, #4]
 8002b2a:	2c00      	cmp	r4, #0
 8002b2c:	d001      	beq.n	8002b32 <time+0x2e>
 8002b2e:	6020      	str	r0, [r4, #0]
 8002b30:	6061      	str	r1, [r4, #4]
 8002b32:	b004      	add	sp, #16
 8002b34:	bdd0      	pop	{r4, r6, r7, pc}
 8002b36:	46c0      	nop			@ (mov r8, r8)
 8002b38:	20000018 	.word	0x20000018

08002b3c <__retarget_lock_init_recursive>:
 8002b3c:	4770      	bx	lr

08002b3e <__retarget_lock_acquire_recursive>:
 8002b3e:	4770      	bx	lr

08002b40 <__retarget_lock_release_recursive>:
 8002b40:	4770      	bx	lr
	...

08002b44 <_gettimeofday_r>:
 8002b44:	2300      	movs	r3, #0
 8002b46:	b570      	push	{r4, r5, r6, lr}
 8002b48:	4d06      	ldr	r5, [pc, #24]	@ (8002b64 <_gettimeofday_r+0x20>)
 8002b4a:	0004      	movs	r4, r0
 8002b4c:	0008      	movs	r0, r1
 8002b4e:	0011      	movs	r1, r2
 8002b50:	602b      	str	r3, [r5, #0]
 8002b52:	f002 fdbf 	bl	80056d4 <_gettimeofday>
 8002b56:	1c43      	adds	r3, r0, #1
 8002b58:	d103      	bne.n	8002b62 <_gettimeofday_r+0x1e>
 8002b5a:	682b      	ldr	r3, [r5, #0]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d000      	beq.n	8002b62 <_gettimeofday_r+0x1e>
 8002b60:	6023      	str	r3, [r4, #0]
 8002b62:	bd70      	pop	{r4, r5, r6, pc}
 8002b64:	200004ec 	.word	0x200004ec

08002b68 <__assert_func>:
 8002b68:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8002b6a:	0014      	movs	r4, r2
 8002b6c:	001a      	movs	r2, r3
 8002b6e:	4b09      	ldr	r3, [pc, #36]	@ (8002b94 <__assert_func+0x2c>)
 8002b70:	0005      	movs	r5, r0
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	000e      	movs	r6, r1
 8002b76:	68d8      	ldr	r0, [r3, #12]
 8002b78:	4b07      	ldr	r3, [pc, #28]	@ (8002b98 <__assert_func+0x30>)
 8002b7a:	2c00      	cmp	r4, #0
 8002b7c:	d101      	bne.n	8002b82 <__assert_func+0x1a>
 8002b7e:	4b07      	ldr	r3, [pc, #28]	@ (8002b9c <__assert_func+0x34>)
 8002b80:	001c      	movs	r4, r3
 8002b82:	4907      	ldr	r1, [pc, #28]	@ (8002ba0 <__assert_func+0x38>)
 8002b84:	9301      	str	r3, [sp, #4]
 8002b86:	9402      	str	r4, [sp, #8]
 8002b88:	002b      	movs	r3, r5
 8002b8a:	9600      	str	r6, [sp, #0]
 8002b8c:	f000 fcac 	bl	80034e8 <fiprintf>
 8002b90:	f000 fd70 	bl	8003674 <abort>
 8002b94:	20000018 	.word	0x20000018
 8002b98:	0800788c 	.word	0x0800788c
 8002b9c:	080078c7 	.word	0x080078c7
 8002ba0:	08007899 	.word	0x08007899

08002ba4 <__ssputs_r>:
 8002ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ba6:	688e      	ldr	r6, [r1, #8]
 8002ba8:	b085      	sub	sp, #20
 8002baa:	001f      	movs	r7, r3
 8002bac:	000c      	movs	r4, r1
 8002bae:	0033      	movs	r3, r6
 8002bb0:	9002      	str	r0, [sp, #8]
 8002bb2:	9203      	str	r2, [sp, #12]
 8002bb4:	42be      	cmp	r6, r7
 8002bb6:	d854      	bhi.n	8002c62 <__ssputs_r+0xbe>
 8002bb8:	220c      	movs	r2, #12
 8002bba:	5e88      	ldrsh	r0, [r1, r2]
 8002bbc:	2290      	movs	r2, #144	@ 0x90
 8002bbe:	00d2      	lsls	r2, r2, #3
 8002bc0:	4210      	tst	r0, r2
 8002bc2:	d02c      	beq.n	8002c1e <__ssputs_r+0x7a>
 8002bc4:	2203      	movs	r2, #3
 8002bc6:	6909      	ldr	r1, [r1, #16]
 8002bc8:	6823      	ldr	r3, [r4, #0]
 8002bca:	1a5b      	subs	r3, r3, r1
 8002bcc:	9301      	str	r3, [sp, #4]
 8002bce:	6963      	ldr	r3, [r4, #20]
 8002bd0:	4353      	muls	r3, r2
 8002bd2:	9a01      	ldr	r2, [sp, #4]
 8002bd4:	0fdd      	lsrs	r5, r3, #31
 8002bd6:	18ed      	adds	r5, r5, r3
 8002bd8:	1c7b      	adds	r3, r7, #1
 8002bda:	106d      	asrs	r5, r5, #1
 8002bdc:	189b      	adds	r3, r3, r2
 8002bde:	002a      	movs	r2, r5
 8002be0:	42ab      	cmp	r3, r5
 8002be2:	d901      	bls.n	8002be8 <__ssputs_r+0x44>
 8002be4:	001d      	movs	r5, r3
 8002be6:	001a      	movs	r2, r3
 8002be8:	0540      	lsls	r0, r0, #21
 8002bea:	d527      	bpl.n	8002c3c <__ssputs_r+0x98>
 8002bec:	0011      	movs	r1, r2
 8002bee:	9802      	ldr	r0, [sp, #8]
 8002bf0:	f000 f96c 	bl	8002ecc <_malloc_r>
 8002bf4:	1e06      	subs	r6, r0, #0
 8002bf6:	d02a      	beq.n	8002c4e <__ssputs_r+0xaa>
 8002bf8:	9a01      	ldr	r2, [sp, #4]
 8002bfa:	6921      	ldr	r1, [r4, #16]
 8002bfc:	f000 fd31 	bl	8003662 <memcpy>
 8002c00:	89a2      	ldrh	r2, [r4, #12]
 8002c02:	4b19      	ldr	r3, [pc, #100]	@ (8002c68 <__ssputs_r+0xc4>)
 8002c04:	401a      	ands	r2, r3
 8002c06:	2380      	movs	r3, #128	@ 0x80
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	81a3      	strh	r3, [r4, #12]
 8002c0c:	9b01      	ldr	r3, [sp, #4]
 8002c0e:	6126      	str	r6, [r4, #16]
 8002c10:	18f6      	adds	r6, r6, r3
 8002c12:	6026      	str	r6, [r4, #0]
 8002c14:	6165      	str	r5, [r4, #20]
 8002c16:	003e      	movs	r6, r7
 8002c18:	1aed      	subs	r5, r5, r3
 8002c1a:	003b      	movs	r3, r7
 8002c1c:	60a5      	str	r5, [r4, #8]
 8002c1e:	001f      	movs	r7, r3
 8002c20:	003a      	movs	r2, r7
 8002c22:	9903      	ldr	r1, [sp, #12]
 8002c24:	6820      	ldr	r0, [r4, #0]
 8002c26:	f000 fc9f 	bl	8003568 <memmove>
 8002c2a:	2000      	movs	r0, #0
 8002c2c:	68a3      	ldr	r3, [r4, #8]
 8002c2e:	1b9b      	subs	r3, r3, r6
 8002c30:	60a3      	str	r3, [r4, #8]
 8002c32:	6823      	ldr	r3, [r4, #0]
 8002c34:	19db      	adds	r3, r3, r7
 8002c36:	6023      	str	r3, [r4, #0]
 8002c38:	b005      	add	sp, #20
 8002c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c3c:	9802      	ldr	r0, [sp, #8]
 8002c3e:	f000 fc63 	bl	8003508 <_realloc_r>
 8002c42:	1e06      	subs	r6, r0, #0
 8002c44:	d1e2      	bne.n	8002c0c <__ssputs_r+0x68>
 8002c46:	6921      	ldr	r1, [r4, #16]
 8002c48:	9802      	ldr	r0, [sp, #8]
 8002c4a:	f000 fd1b 	bl	8003684 <_free_r>
 8002c4e:	230c      	movs	r3, #12
 8002c50:	2001      	movs	r0, #1
 8002c52:	9a02      	ldr	r2, [sp, #8]
 8002c54:	4240      	negs	r0, r0
 8002c56:	6013      	str	r3, [r2, #0]
 8002c58:	89a2      	ldrh	r2, [r4, #12]
 8002c5a:	3334      	adds	r3, #52	@ 0x34
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	81a3      	strh	r3, [r4, #12]
 8002c60:	e7ea      	b.n	8002c38 <__ssputs_r+0x94>
 8002c62:	003e      	movs	r6, r7
 8002c64:	e7dc      	b.n	8002c20 <__ssputs_r+0x7c>
 8002c66:	46c0      	nop			@ (mov r8, r8)
 8002c68:	fffffb7f 	.word	0xfffffb7f

08002c6c <_svfiprintf_r>:
 8002c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c6e:	b09f      	sub	sp, #124	@ 0x7c
 8002c70:	9002      	str	r0, [sp, #8]
 8002c72:	001c      	movs	r4, r3
 8002c74:	898b      	ldrh	r3, [r1, #12]
 8002c76:	000e      	movs	r6, r1
 8002c78:	0015      	movs	r5, r2
 8002c7a:	061b      	lsls	r3, r3, #24
 8002c7c:	d511      	bpl.n	8002ca2 <_svfiprintf_r+0x36>
 8002c7e:	690b      	ldr	r3, [r1, #16]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d10e      	bne.n	8002ca2 <_svfiprintf_r+0x36>
 8002c84:	2140      	movs	r1, #64	@ 0x40
 8002c86:	f000 f921 	bl	8002ecc <_malloc_r>
 8002c8a:	6030      	str	r0, [r6, #0]
 8002c8c:	6130      	str	r0, [r6, #16]
 8002c8e:	2800      	cmp	r0, #0
 8002c90:	d105      	bne.n	8002c9e <_svfiprintf_r+0x32>
 8002c92:	230c      	movs	r3, #12
 8002c94:	9a02      	ldr	r2, [sp, #8]
 8002c96:	6013      	str	r3, [r2, #0]
 8002c98:	2001      	movs	r0, #1
 8002c9a:	4240      	negs	r0, r0
 8002c9c:	e0d4      	b.n	8002e48 <_svfiprintf_r+0x1dc>
 8002c9e:	2340      	movs	r3, #64	@ 0x40
 8002ca0:	6173      	str	r3, [r6, #20]
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	2129      	movs	r1, #41	@ 0x29
 8002ca6:	aa02      	add	r2, sp, #8
 8002ca8:	1852      	adds	r2, r2, r1
 8002caa:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002cac:	3320      	adds	r3, #32
 8002cae:	7013      	strb	r3, [r2, #0]
 8002cb0:	3101      	adds	r1, #1
 8002cb2:	aa02      	add	r2, sp, #8
 8002cb4:	3310      	adds	r3, #16
 8002cb6:	1852      	adds	r2, r2, r1
 8002cb8:	7013      	strb	r3, [r2, #0]
 8002cba:	9405      	str	r4, [sp, #20]
 8002cbc:	002c      	movs	r4, r5
 8002cbe:	7823      	ldrb	r3, [r4, #0]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d001      	beq.n	8002cc8 <_svfiprintf_r+0x5c>
 8002cc4:	2b25      	cmp	r3, #37	@ 0x25
 8002cc6:	d148      	bne.n	8002d5a <_svfiprintf_r+0xee>
 8002cc8:	1b67      	subs	r7, r4, r5
 8002cca:	42ac      	cmp	r4, r5
 8002ccc:	d00b      	beq.n	8002ce6 <_svfiprintf_r+0x7a>
 8002cce:	003b      	movs	r3, r7
 8002cd0:	002a      	movs	r2, r5
 8002cd2:	0031      	movs	r1, r6
 8002cd4:	9802      	ldr	r0, [sp, #8]
 8002cd6:	f7ff ff65 	bl	8002ba4 <__ssputs_r>
 8002cda:	3001      	adds	r0, #1
 8002cdc:	d100      	bne.n	8002ce0 <_svfiprintf_r+0x74>
 8002cde:	e0ae      	b.n	8002e3e <_svfiprintf_r+0x1d2>
 8002ce0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8002ce2:	19db      	adds	r3, r3, r7
 8002ce4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002ce6:	7823      	ldrb	r3, [r4, #0]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d100      	bne.n	8002cee <_svfiprintf_r+0x82>
 8002cec:	e0a7      	b.n	8002e3e <_svfiprintf_r+0x1d2>
 8002cee:	2201      	movs	r2, #1
 8002cf0:	2153      	movs	r1, #83	@ 0x53
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	4252      	negs	r2, r2
 8002cf6:	9207      	str	r2, [sp, #28]
 8002cf8:	aa02      	add	r2, sp, #8
 8002cfa:	1852      	adds	r2, r2, r1
 8002cfc:	1c65      	adds	r5, r4, #1
 8002cfe:	9306      	str	r3, [sp, #24]
 8002d00:	9309      	str	r3, [sp, #36]	@ 0x24
 8002d02:	9308      	str	r3, [sp, #32]
 8002d04:	7013      	strb	r3, [r2, #0]
 8002d06:	931c      	str	r3, [sp, #112]	@ 0x70
 8002d08:	4f55      	ldr	r7, [pc, #340]	@ (8002e60 <_svfiprintf_r+0x1f4>)
 8002d0a:	7829      	ldrb	r1, [r5, #0]
 8002d0c:	2205      	movs	r2, #5
 8002d0e:	0038      	movs	r0, r7
 8002d10:	f000 fc9c 	bl	800364c <memchr>
 8002d14:	1c6c      	adds	r4, r5, #1
 8002d16:	9906      	ldr	r1, [sp, #24]
 8002d18:	ab06      	add	r3, sp, #24
 8002d1a:	2800      	cmp	r0, #0
 8002d1c:	d11f      	bne.n	8002d5e <_svfiprintf_r+0xf2>
 8002d1e:	06ca      	lsls	r2, r1, #27
 8002d20:	d504      	bpl.n	8002d2c <_svfiprintf_r+0xc0>
 8002d22:	2753      	movs	r7, #83	@ 0x53
 8002d24:	2220      	movs	r2, #32
 8002d26:	a802      	add	r0, sp, #8
 8002d28:	19c0      	adds	r0, r0, r7
 8002d2a:	7002      	strb	r2, [r0, #0]
 8002d2c:	070a      	lsls	r2, r1, #28
 8002d2e:	d504      	bpl.n	8002d3a <_svfiprintf_r+0xce>
 8002d30:	2753      	movs	r7, #83	@ 0x53
 8002d32:	222b      	movs	r2, #43	@ 0x2b
 8002d34:	a802      	add	r0, sp, #8
 8002d36:	19c0      	adds	r0, r0, r7
 8002d38:	7002      	strb	r2, [r0, #0]
 8002d3a:	782a      	ldrb	r2, [r5, #0]
 8002d3c:	2a2a      	cmp	r2, #42	@ 0x2a
 8002d3e:	d015      	beq.n	8002d6c <_svfiprintf_r+0x100>
 8002d40:	002c      	movs	r4, r5
 8002d42:	2000      	movs	r0, #0
 8002d44:	270a      	movs	r7, #10
 8002d46:	68da      	ldr	r2, [r3, #12]
 8002d48:	7821      	ldrb	r1, [r4, #0]
 8002d4a:	1c65      	adds	r5, r4, #1
 8002d4c:	3930      	subs	r1, #48	@ 0x30
 8002d4e:	2909      	cmp	r1, #9
 8002d50:	d950      	bls.n	8002df4 <_svfiprintf_r+0x188>
 8002d52:	2800      	cmp	r0, #0
 8002d54:	d011      	beq.n	8002d7a <_svfiprintf_r+0x10e>
 8002d56:	9209      	str	r2, [sp, #36]	@ 0x24
 8002d58:	e00f      	b.n	8002d7a <_svfiprintf_r+0x10e>
 8002d5a:	3401      	adds	r4, #1
 8002d5c:	e7af      	b.n	8002cbe <_svfiprintf_r+0x52>
 8002d5e:	2301      	movs	r3, #1
 8002d60:	1bc0      	subs	r0, r0, r7
 8002d62:	4083      	lsls	r3, r0
 8002d64:	430b      	orrs	r3, r1
 8002d66:	0025      	movs	r5, r4
 8002d68:	9306      	str	r3, [sp, #24]
 8002d6a:	e7cd      	b.n	8002d08 <_svfiprintf_r+0x9c>
 8002d6c:	9a05      	ldr	r2, [sp, #20]
 8002d6e:	1d10      	adds	r0, r2, #4
 8002d70:	6812      	ldr	r2, [r2, #0]
 8002d72:	9005      	str	r0, [sp, #20]
 8002d74:	2a00      	cmp	r2, #0
 8002d76:	db37      	blt.n	8002de8 <_svfiprintf_r+0x17c>
 8002d78:	60da      	str	r2, [r3, #12]
 8002d7a:	7822      	ldrb	r2, [r4, #0]
 8002d7c:	2a2e      	cmp	r2, #46	@ 0x2e
 8002d7e:	d10c      	bne.n	8002d9a <_svfiprintf_r+0x12e>
 8002d80:	7862      	ldrb	r2, [r4, #1]
 8002d82:	2a2a      	cmp	r2, #42	@ 0x2a
 8002d84:	d13b      	bne.n	8002dfe <_svfiprintf_r+0x192>
 8002d86:	9a05      	ldr	r2, [sp, #20]
 8002d88:	3402      	adds	r4, #2
 8002d8a:	1d11      	adds	r1, r2, #4
 8002d8c:	6812      	ldr	r2, [r2, #0]
 8002d8e:	9105      	str	r1, [sp, #20]
 8002d90:	2a00      	cmp	r2, #0
 8002d92:	da01      	bge.n	8002d98 <_svfiprintf_r+0x12c>
 8002d94:	2201      	movs	r2, #1
 8002d96:	4252      	negs	r2, r2
 8002d98:	605a      	str	r2, [r3, #4]
 8002d9a:	4d32      	ldr	r5, [pc, #200]	@ (8002e64 <_svfiprintf_r+0x1f8>)
 8002d9c:	2203      	movs	r2, #3
 8002d9e:	0028      	movs	r0, r5
 8002da0:	7821      	ldrb	r1, [r4, #0]
 8002da2:	f000 fc53 	bl	800364c <memchr>
 8002da6:	af06      	add	r7, sp, #24
 8002da8:	2800      	cmp	r0, #0
 8002daa:	d006      	beq.n	8002dba <_svfiprintf_r+0x14e>
 8002dac:	2340      	movs	r3, #64	@ 0x40
 8002dae:	1b40      	subs	r0, r0, r5
 8002db0:	4083      	lsls	r3, r0
 8002db2:	9a06      	ldr	r2, [sp, #24]
 8002db4:	3401      	adds	r4, #1
 8002db6:	4313      	orrs	r3, r2
 8002db8:	9306      	str	r3, [sp, #24]
 8002dba:	7821      	ldrb	r1, [r4, #0]
 8002dbc:	2206      	movs	r2, #6
 8002dbe:	482a      	ldr	r0, [pc, #168]	@ (8002e68 <_svfiprintf_r+0x1fc>)
 8002dc0:	1c65      	adds	r5, r4, #1
 8002dc2:	7639      	strb	r1, [r7, #24]
 8002dc4:	f000 fc42 	bl	800364c <memchr>
 8002dc8:	2800      	cmp	r0, #0
 8002dca:	d03f      	beq.n	8002e4c <_svfiprintf_r+0x1e0>
 8002dcc:	4b27      	ldr	r3, [pc, #156]	@ (8002e6c <_svfiprintf_r+0x200>)
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d129      	bne.n	8002e26 <_svfiprintf_r+0x1ba>
 8002dd2:	2207      	movs	r2, #7
 8002dd4:	9b05      	ldr	r3, [sp, #20]
 8002dd6:	3307      	adds	r3, #7
 8002dd8:	4393      	bics	r3, r2
 8002dda:	3308      	adds	r3, #8
 8002ddc:	9305      	str	r3, [sp, #20]
 8002dde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8002de0:	9903      	ldr	r1, [sp, #12]
 8002de2:	185b      	adds	r3, r3, r1
 8002de4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002de6:	e769      	b.n	8002cbc <_svfiprintf_r+0x50>
 8002de8:	4252      	negs	r2, r2
 8002dea:	60da      	str	r2, [r3, #12]
 8002dec:	2202      	movs	r2, #2
 8002dee:	430a      	orrs	r2, r1
 8002df0:	9206      	str	r2, [sp, #24]
 8002df2:	e7c2      	b.n	8002d7a <_svfiprintf_r+0x10e>
 8002df4:	437a      	muls	r2, r7
 8002df6:	002c      	movs	r4, r5
 8002df8:	2001      	movs	r0, #1
 8002dfa:	1852      	adds	r2, r2, r1
 8002dfc:	e7a4      	b.n	8002d48 <_svfiprintf_r+0xdc>
 8002dfe:	2200      	movs	r2, #0
 8002e00:	200a      	movs	r0, #10
 8002e02:	605a      	str	r2, [r3, #4]
 8002e04:	0011      	movs	r1, r2
 8002e06:	0013      	movs	r3, r2
 8002e08:	3401      	adds	r4, #1
 8002e0a:	7822      	ldrb	r2, [r4, #0]
 8002e0c:	1c65      	adds	r5, r4, #1
 8002e0e:	3a30      	subs	r2, #48	@ 0x30
 8002e10:	2a09      	cmp	r2, #9
 8002e12:	d903      	bls.n	8002e1c <_svfiprintf_r+0x1b0>
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d0c0      	beq.n	8002d9a <_svfiprintf_r+0x12e>
 8002e18:	9107      	str	r1, [sp, #28]
 8002e1a:	e7be      	b.n	8002d9a <_svfiprintf_r+0x12e>
 8002e1c:	4341      	muls	r1, r0
 8002e1e:	002c      	movs	r4, r5
 8002e20:	2301      	movs	r3, #1
 8002e22:	1889      	adds	r1, r1, r2
 8002e24:	e7f1      	b.n	8002e0a <_svfiprintf_r+0x19e>
 8002e26:	aa05      	add	r2, sp, #20
 8002e28:	9200      	str	r2, [sp, #0]
 8002e2a:	0039      	movs	r1, r7
 8002e2c:	0032      	movs	r2, r6
 8002e2e:	4b10      	ldr	r3, [pc, #64]	@ (8002e70 <_svfiprintf_r+0x204>)
 8002e30:	9802      	ldr	r0, [sp, #8]
 8002e32:	e000      	b.n	8002e36 <_svfiprintf_r+0x1ca>
 8002e34:	bf00      	nop
 8002e36:	9003      	str	r0, [sp, #12]
 8002e38:	9b03      	ldr	r3, [sp, #12]
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	d1cf      	bne.n	8002dde <_svfiprintf_r+0x172>
 8002e3e:	89b3      	ldrh	r3, [r6, #12]
 8002e40:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8002e42:	065b      	lsls	r3, r3, #25
 8002e44:	d500      	bpl.n	8002e48 <_svfiprintf_r+0x1dc>
 8002e46:	e727      	b.n	8002c98 <_svfiprintf_r+0x2c>
 8002e48:	b01f      	add	sp, #124	@ 0x7c
 8002e4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e4c:	aa05      	add	r2, sp, #20
 8002e4e:	9200      	str	r2, [sp, #0]
 8002e50:	0039      	movs	r1, r7
 8002e52:	0032      	movs	r2, r6
 8002e54:	4b06      	ldr	r3, [pc, #24]	@ (8002e70 <_svfiprintf_r+0x204>)
 8002e56:	9802      	ldr	r0, [sp, #8]
 8002e58:	f000 f928 	bl	80030ac <_printf_i>
 8002e5c:	e7eb      	b.n	8002e36 <_svfiprintf_r+0x1ca>
 8002e5e:	46c0      	nop			@ (mov r8, r8)
 8002e60:	080078c8 	.word	0x080078c8
 8002e64:	080078ce 	.word	0x080078ce
 8002e68:	080078d2 	.word	0x080078d2
 8002e6c:	00000000 	.word	0x00000000
 8002e70:	08002ba5 	.word	0x08002ba5

08002e74 <malloc>:
 8002e74:	b510      	push	{r4, lr}
 8002e76:	4b03      	ldr	r3, [pc, #12]	@ (8002e84 <malloc+0x10>)
 8002e78:	0001      	movs	r1, r0
 8002e7a:	6818      	ldr	r0, [r3, #0]
 8002e7c:	f000 f826 	bl	8002ecc <_malloc_r>
 8002e80:	bd10      	pop	{r4, pc}
 8002e82:	46c0      	nop			@ (mov r8, r8)
 8002e84:	20000018 	.word	0x20000018

08002e88 <sbrk_aligned>:
 8002e88:	b570      	push	{r4, r5, r6, lr}
 8002e8a:	4e0f      	ldr	r6, [pc, #60]	@ (8002ec8 <sbrk_aligned+0x40>)
 8002e8c:	000d      	movs	r5, r1
 8002e8e:	6831      	ldr	r1, [r6, #0]
 8002e90:	0004      	movs	r4, r0
 8002e92:	2900      	cmp	r1, #0
 8002e94:	d102      	bne.n	8002e9c <sbrk_aligned+0x14>
 8002e96:	f000 fba1 	bl	80035dc <_sbrk_r>
 8002e9a:	6030      	str	r0, [r6, #0]
 8002e9c:	0029      	movs	r1, r5
 8002e9e:	0020      	movs	r0, r4
 8002ea0:	f000 fb9c 	bl	80035dc <_sbrk_r>
 8002ea4:	1c43      	adds	r3, r0, #1
 8002ea6:	d103      	bne.n	8002eb0 <sbrk_aligned+0x28>
 8002ea8:	2501      	movs	r5, #1
 8002eaa:	426d      	negs	r5, r5
 8002eac:	0028      	movs	r0, r5
 8002eae:	bd70      	pop	{r4, r5, r6, pc}
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	1cc5      	adds	r5, r0, #3
 8002eb4:	439d      	bics	r5, r3
 8002eb6:	42a8      	cmp	r0, r5
 8002eb8:	d0f8      	beq.n	8002eac <sbrk_aligned+0x24>
 8002eba:	1a29      	subs	r1, r5, r0
 8002ebc:	0020      	movs	r0, r4
 8002ebe:	f000 fb8d 	bl	80035dc <_sbrk_r>
 8002ec2:	3001      	adds	r0, #1
 8002ec4:	d1f2      	bne.n	8002eac <sbrk_aligned+0x24>
 8002ec6:	e7ef      	b.n	8002ea8 <sbrk_aligned+0x20>
 8002ec8:	200004e4 	.word	0x200004e4

08002ecc <_malloc_r>:
 8002ecc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002ece:	2203      	movs	r2, #3
 8002ed0:	1ccb      	adds	r3, r1, #3
 8002ed2:	4393      	bics	r3, r2
 8002ed4:	3308      	adds	r3, #8
 8002ed6:	0005      	movs	r5, r0
 8002ed8:	001f      	movs	r7, r3
 8002eda:	2b0c      	cmp	r3, #12
 8002edc:	d234      	bcs.n	8002f48 <_malloc_r+0x7c>
 8002ede:	270c      	movs	r7, #12
 8002ee0:	42b9      	cmp	r1, r7
 8002ee2:	d833      	bhi.n	8002f4c <_malloc_r+0x80>
 8002ee4:	0028      	movs	r0, r5
 8002ee6:	f000 faa3 	bl	8003430 <__malloc_lock>
 8002eea:	4e37      	ldr	r6, [pc, #220]	@ (8002fc8 <_malloc_r+0xfc>)
 8002eec:	6833      	ldr	r3, [r6, #0]
 8002eee:	001c      	movs	r4, r3
 8002ef0:	2c00      	cmp	r4, #0
 8002ef2:	d12f      	bne.n	8002f54 <_malloc_r+0x88>
 8002ef4:	0039      	movs	r1, r7
 8002ef6:	0028      	movs	r0, r5
 8002ef8:	f7ff ffc6 	bl	8002e88 <sbrk_aligned>
 8002efc:	0004      	movs	r4, r0
 8002efe:	1c43      	adds	r3, r0, #1
 8002f00:	d15f      	bne.n	8002fc2 <_malloc_r+0xf6>
 8002f02:	6834      	ldr	r4, [r6, #0]
 8002f04:	9400      	str	r4, [sp, #0]
 8002f06:	9b00      	ldr	r3, [sp, #0]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d14a      	bne.n	8002fa2 <_malloc_r+0xd6>
 8002f0c:	2c00      	cmp	r4, #0
 8002f0e:	d052      	beq.n	8002fb6 <_malloc_r+0xea>
 8002f10:	6823      	ldr	r3, [r4, #0]
 8002f12:	0028      	movs	r0, r5
 8002f14:	18e3      	adds	r3, r4, r3
 8002f16:	9900      	ldr	r1, [sp, #0]
 8002f18:	9301      	str	r3, [sp, #4]
 8002f1a:	f000 fb5f 	bl	80035dc <_sbrk_r>
 8002f1e:	9b01      	ldr	r3, [sp, #4]
 8002f20:	4283      	cmp	r3, r0
 8002f22:	d148      	bne.n	8002fb6 <_malloc_r+0xea>
 8002f24:	6823      	ldr	r3, [r4, #0]
 8002f26:	0028      	movs	r0, r5
 8002f28:	1aff      	subs	r7, r7, r3
 8002f2a:	0039      	movs	r1, r7
 8002f2c:	f7ff ffac 	bl	8002e88 <sbrk_aligned>
 8002f30:	3001      	adds	r0, #1
 8002f32:	d040      	beq.n	8002fb6 <_malloc_r+0xea>
 8002f34:	6823      	ldr	r3, [r4, #0]
 8002f36:	19db      	adds	r3, r3, r7
 8002f38:	6023      	str	r3, [r4, #0]
 8002f3a:	6833      	ldr	r3, [r6, #0]
 8002f3c:	685a      	ldr	r2, [r3, #4]
 8002f3e:	2a00      	cmp	r2, #0
 8002f40:	d133      	bne.n	8002faa <_malloc_r+0xde>
 8002f42:	9b00      	ldr	r3, [sp, #0]
 8002f44:	6033      	str	r3, [r6, #0]
 8002f46:	e019      	b.n	8002f7c <_malloc_r+0xb0>
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	dac9      	bge.n	8002ee0 <_malloc_r+0x14>
 8002f4c:	230c      	movs	r3, #12
 8002f4e:	602b      	str	r3, [r5, #0]
 8002f50:	2000      	movs	r0, #0
 8002f52:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002f54:	6821      	ldr	r1, [r4, #0]
 8002f56:	1bc9      	subs	r1, r1, r7
 8002f58:	d420      	bmi.n	8002f9c <_malloc_r+0xd0>
 8002f5a:	290b      	cmp	r1, #11
 8002f5c:	d90a      	bls.n	8002f74 <_malloc_r+0xa8>
 8002f5e:	19e2      	adds	r2, r4, r7
 8002f60:	6027      	str	r7, [r4, #0]
 8002f62:	42a3      	cmp	r3, r4
 8002f64:	d104      	bne.n	8002f70 <_malloc_r+0xa4>
 8002f66:	6032      	str	r2, [r6, #0]
 8002f68:	6863      	ldr	r3, [r4, #4]
 8002f6a:	6011      	str	r1, [r2, #0]
 8002f6c:	6053      	str	r3, [r2, #4]
 8002f6e:	e005      	b.n	8002f7c <_malloc_r+0xb0>
 8002f70:	605a      	str	r2, [r3, #4]
 8002f72:	e7f9      	b.n	8002f68 <_malloc_r+0x9c>
 8002f74:	6862      	ldr	r2, [r4, #4]
 8002f76:	42a3      	cmp	r3, r4
 8002f78:	d10e      	bne.n	8002f98 <_malloc_r+0xcc>
 8002f7a:	6032      	str	r2, [r6, #0]
 8002f7c:	0028      	movs	r0, r5
 8002f7e:	f000 fa5f 	bl	8003440 <__malloc_unlock>
 8002f82:	0020      	movs	r0, r4
 8002f84:	2207      	movs	r2, #7
 8002f86:	300b      	adds	r0, #11
 8002f88:	1d23      	adds	r3, r4, #4
 8002f8a:	4390      	bics	r0, r2
 8002f8c:	1ac2      	subs	r2, r0, r3
 8002f8e:	4298      	cmp	r0, r3
 8002f90:	d0df      	beq.n	8002f52 <_malloc_r+0x86>
 8002f92:	1a1b      	subs	r3, r3, r0
 8002f94:	50a3      	str	r3, [r4, r2]
 8002f96:	e7dc      	b.n	8002f52 <_malloc_r+0x86>
 8002f98:	605a      	str	r2, [r3, #4]
 8002f9a:	e7ef      	b.n	8002f7c <_malloc_r+0xb0>
 8002f9c:	0023      	movs	r3, r4
 8002f9e:	6864      	ldr	r4, [r4, #4]
 8002fa0:	e7a6      	b.n	8002ef0 <_malloc_r+0x24>
 8002fa2:	9c00      	ldr	r4, [sp, #0]
 8002fa4:	6863      	ldr	r3, [r4, #4]
 8002fa6:	9300      	str	r3, [sp, #0]
 8002fa8:	e7ad      	b.n	8002f06 <_malloc_r+0x3a>
 8002faa:	001a      	movs	r2, r3
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	42a3      	cmp	r3, r4
 8002fb0:	d1fb      	bne.n	8002faa <_malloc_r+0xde>
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	e7da      	b.n	8002f6c <_malloc_r+0xa0>
 8002fb6:	230c      	movs	r3, #12
 8002fb8:	0028      	movs	r0, r5
 8002fba:	602b      	str	r3, [r5, #0]
 8002fbc:	f000 fa40 	bl	8003440 <__malloc_unlock>
 8002fc0:	e7c6      	b.n	8002f50 <_malloc_r+0x84>
 8002fc2:	6007      	str	r7, [r0, #0]
 8002fc4:	e7da      	b.n	8002f7c <_malloc_r+0xb0>
 8002fc6:	46c0      	nop			@ (mov r8, r8)
 8002fc8:	200004e8 	.word	0x200004e8

08002fcc <_printf_common>:
 8002fcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002fce:	0016      	movs	r6, r2
 8002fd0:	9301      	str	r3, [sp, #4]
 8002fd2:	688a      	ldr	r2, [r1, #8]
 8002fd4:	690b      	ldr	r3, [r1, #16]
 8002fd6:	000c      	movs	r4, r1
 8002fd8:	9000      	str	r0, [sp, #0]
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	da00      	bge.n	8002fe0 <_printf_common+0x14>
 8002fde:	0013      	movs	r3, r2
 8002fe0:	0022      	movs	r2, r4
 8002fe2:	6033      	str	r3, [r6, #0]
 8002fe4:	3243      	adds	r2, #67	@ 0x43
 8002fe6:	7812      	ldrb	r2, [r2, #0]
 8002fe8:	2a00      	cmp	r2, #0
 8002fea:	d001      	beq.n	8002ff0 <_printf_common+0x24>
 8002fec:	3301      	adds	r3, #1
 8002fee:	6033      	str	r3, [r6, #0]
 8002ff0:	6823      	ldr	r3, [r4, #0]
 8002ff2:	069b      	lsls	r3, r3, #26
 8002ff4:	d502      	bpl.n	8002ffc <_printf_common+0x30>
 8002ff6:	6833      	ldr	r3, [r6, #0]
 8002ff8:	3302      	adds	r3, #2
 8002ffa:	6033      	str	r3, [r6, #0]
 8002ffc:	6822      	ldr	r2, [r4, #0]
 8002ffe:	2306      	movs	r3, #6
 8003000:	0015      	movs	r5, r2
 8003002:	401d      	ands	r5, r3
 8003004:	421a      	tst	r2, r3
 8003006:	d027      	beq.n	8003058 <_printf_common+0x8c>
 8003008:	0023      	movs	r3, r4
 800300a:	3343      	adds	r3, #67	@ 0x43
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	1e5a      	subs	r2, r3, #1
 8003010:	4193      	sbcs	r3, r2
 8003012:	6822      	ldr	r2, [r4, #0]
 8003014:	0692      	lsls	r2, r2, #26
 8003016:	d430      	bmi.n	800307a <_printf_common+0xae>
 8003018:	0022      	movs	r2, r4
 800301a:	9901      	ldr	r1, [sp, #4]
 800301c:	9800      	ldr	r0, [sp, #0]
 800301e:	9d08      	ldr	r5, [sp, #32]
 8003020:	3243      	adds	r2, #67	@ 0x43
 8003022:	47a8      	blx	r5
 8003024:	3001      	adds	r0, #1
 8003026:	d025      	beq.n	8003074 <_printf_common+0xa8>
 8003028:	2206      	movs	r2, #6
 800302a:	6823      	ldr	r3, [r4, #0]
 800302c:	2500      	movs	r5, #0
 800302e:	4013      	ands	r3, r2
 8003030:	2b04      	cmp	r3, #4
 8003032:	d105      	bne.n	8003040 <_printf_common+0x74>
 8003034:	6833      	ldr	r3, [r6, #0]
 8003036:	68e5      	ldr	r5, [r4, #12]
 8003038:	1aed      	subs	r5, r5, r3
 800303a:	43eb      	mvns	r3, r5
 800303c:	17db      	asrs	r3, r3, #31
 800303e:	401d      	ands	r5, r3
 8003040:	68a3      	ldr	r3, [r4, #8]
 8003042:	6922      	ldr	r2, [r4, #16]
 8003044:	4293      	cmp	r3, r2
 8003046:	dd01      	ble.n	800304c <_printf_common+0x80>
 8003048:	1a9b      	subs	r3, r3, r2
 800304a:	18ed      	adds	r5, r5, r3
 800304c:	2600      	movs	r6, #0
 800304e:	42b5      	cmp	r5, r6
 8003050:	d120      	bne.n	8003094 <_printf_common+0xc8>
 8003052:	2000      	movs	r0, #0
 8003054:	e010      	b.n	8003078 <_printf_common+0xac>
 8003056:	3501      	adds	r5, #1
 8003058:	68e3      	ldr	r3, [r4, #12]
 800305a:	6832      	ldr	r2, [r6, #0]
 800305c:	1a9b      	subs	r3, r3, r2
 800305e:	42ab      	cmp	r3, r5
 8003060:	ddd2      	ble.n	8003008 <_printf_common+0x3c>
 8003062:	0022      	movs	r2, r4
 8003064:	2301      	movs	r3, #1
 8003066:	9901      	ldr	r1, [sp, #4]
 8003068:	9800      	ldr	r0, [sp, #0]
 800306a:	9f08      	ldr	r7, [sp, #32]
 800306c:	3219      	adds	r2, #25
 800306e:	47b8      	blx	r7
 8003070:	3001      	adds	r0, #1
 8003072:	d1f0      	bne.n	8003056 <_printf_common+0x8a>
 8003074:	2001      	movs	r0, #1
 8003076:	4240      	negs	r0, r0
 8003078:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800307a:	2030      	movs	r0, #48	@ 0x30
 800307c:	18e1      	adds	r1, r4, r3
 800307e:	3143      	adds	r1, #67	@ 0x43
 8003080:	7008      	strb	r0, [r1, #0]
 8003082:	0021      	movs	r1, r4
 8003084:	1c5a      	adds	r2, r3, #1
 8003086:	3145      	adds	r1, #69	@ 0x45
 8003088:	7809      	ldrb	r1, [r1, #0]
 800308a:	18a2      	adds	r2, r4, r2
 800308c:	3243      	adds	r2, #67	@ 0x43
 800308e:	3302      	adds	r3, #2
 8003090:	7011      	strb	r1, [r2, #0]
 8003092:	e7c1      	b.n	8003018 <_printf_common+0x4c>
 8003094:	0022      	movs	r2, r4
 8003096:	2301      	movs	r3, #1
 8003098:	9901      	ldr	r1, [sp, #4]
 800309a:	9800      	ldr	r0, [sp, #0]
 800309c:	9f08      	ldr	r7, [sp, #32]
 800309e:	321a      	adds	r2, #26
 80030a0:	47b8      	blx	r7
 80030a2:	3001      	adds	r0, #1
 80030a4:	d0e6      	beq.n	8003074 <_printf_common+0xa8>
 80030a6:	3601      	adds	r6, #1
 80030a8:	e7d1      	b.n	800304e <_printf_common+0x82>
	...

080030ac <_printf_i>:
 80030ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030ae:	b08b      	sub	sp, #44	@ 0x2c
 80030b0:	9206      	str	r2, [sp, #24]
 80030b2:	000a      	movs	r2, r1
 80030b4:	3243      	adds	r2, #67	@ 0x43
 80030b6:	9307      	str	r3, [sp, #28]
 80030b8:	9005      	str	r0, [sp, #20]
 80030ba:	9203      	str	r2, [sp, #12]
 80030bc:	7e0a      	ldrb	r2, [r1, #24]
 80030be:	000c      	movs	r4, r1
 80030c0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80030c2:	2a78      	cmp	r2, #120	@ 0x78
 80030c4:	d809      	bhi.n	80030da <_printf_i+0x2e>
 80030c6:	2a62      	cmp	r2, #98	@ 0x62
 80030c8:	d80b      	bhi.n	80030e2 <_printf_i+0x36>
 80030ca:	2a00      	cmp	r2, #0
 80030cc:	d100      	bne.n	80030d0 <_printf_i+0x24>
 80030ce:	e0ba      	b.n	8003246 <_printf_i+0x19a>
 80030d0:	497a      	ldr	r1, [pc, #488]	@ (80032bc <_printf_i+0x210>)
 80030d2:	9104      	str	r1, [sp, #16]
 80030d4:	2a58      	cmp	r2, #88	@ 0x58
 80030d6:	d100      	bne.n	80030da <_printf_i+0x2e>
 80030d8:	e08e      	b.n	80031f8 <_printf_i+0x14c>
 80030da:	0025      	movs	r5, r4
 80030dc:	3542      	adds	r5, #66	@ 0x42
 80030de:	702a      	strb	r2, [r5, #0]
 80030e0:	e022      	b.n	8003128 <_printf_i+0x7c>
 80030e2:	0010      	movs	r0, r2
 80030e4:	3863      	subs	r0, #99	@ 0x63
 80030e6:	2815      	cmp	r0, #21
 80030e8:	d8f7      	bhi.n	80030da <_printf_i+0x2e>
 80030ea:	f7fc fff1 	bl	80000d0 <__gnu_thumb1_case_shi>
 80030ee:	0016      	.short	0x0016
 80030f0:	fff6001f 	.word	0xfff6001f
 80030f4:	fff6fff6 	.word	0xfff6fff6
 80030f8:	001ffff6 	.word	0x001ffff6
 80030fc:	fff6fff6 	.word	0xfff6fff6
 8003100:	fff6fff6 	.word	0xfff6fff6
 8003104:	0036009f 	.word	0x0036009f
 8003108:	fff6007e 	.word	0xfff6007e
 800310c:	00b0fff6 	.word	0x00b0fff6
 8003110:	0036fff6 	.word	0x0036fff6
 8003114:	fff6fff6 	.word	0xfff6fff6
 8003118:	0082      	.short	0x0082
 800311a:	0025      	movs	r5, r4
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	3542      	adds	r5, #66	@ 0x42
 8003120:	1d11      	adds	r1, r2, #4
 8003122:	6019      	str	r1, [r3, #0]
 8003124:	6813      	ldr	r3, [r2, #0]
 8003126:	702b      	strb	r3, [r5, #0]
 8003128:	2301      	movs	r3, #1
 800312a:	e09e      	b.n	800326a <_printf_i+0x1be>
 800312c:	6818      	ldr	r0, [r3, #0]
 800312e:	6809      	ldr	r1, [r1, #0]
 8003130:	1d02      	adds	r2, r0, #4
 8003132:	060d      	lsls	r5, r1, #24
 8003134:	d50b      	bpl.n	800314e <_printf_i+0xa2>
 8003136:	6806      	ldr	r6, [r0, #0]
 8003138:	601a      	str	r2, [r3, #0]
 800313a:	2e00      	cmp	r6, #0
 800313c:	da03      	bge.n	8003146 <_printf_i+0x9a>
 800313e:	232d      	movs	r3, #45	@ 0x2d
 8003140:	9a03      	ldr	r2, [sp, #12]
 8003142:	4276      	negs	r6, r6
 8003144:	7013      	strb	r3, [r2, #0]
 8003146:	4b5d      	ldr	r3, [pc, #372]	@ (80032bc <_printf_i+0x210>)
 8003148:	270a      	movs	r7, #10
 800314a:	9304      	str	r3, [sp, #16]
 800314c:	e018      	b.n	8003180 <_printf_i+0xd4>
 800314e:	6806      	ldr	r6, [r0, #0]
 8003150:	601a      	str	r2, [r3, #0]
 8003152:	0649      	lsls	r1, r1, #25
 8003154:	d5f1      	bpl.n	800313a <_printf_i+0x8e>
 8003156:	b236      	sxth	r6, r6
 8003158:	e7ef      	b.n	800313a <_printf_i+0x8e>
 800315a:	6808      	ldr	r0, [r1, #0]
 800315c:	6819      	ldr	r1, [r3, #0]
 800315e:	c940      	ldmia	r1!, {r6}
 8003160:	0605      	lsls	r5, r0, #24
 8003162:	d402      	bmi.n	800316a <_printf_i+0xbe>
 8003164:	0640      	lsls	r0, r0, #25
 8003166:	d500      	bpl.n	800316a <_printf_i+0xbe>
 8003168:	b2b6      	uxth	r6, r6
 800316a:	6019      	str	r1, [r3, #0]
 800316c:	4b53      	ldr	r3, [pc, #332]	@ (80032bc <_printf_i+0x210>)
 800316e:	270a      	movs	r7, #10
 8003170:	9304      	str	r3, [sp, #16]
 8003172:	2a6f      	cmp	r2, #111	@ 0x6f
 8003174:	d100      	bne.n	8003178 <_printf_i+0xcc>
 8003176:	3f02      	subs	r7, #2
 8003178:	0023      	movs	r3, r4
 800317a:	2200      	movs	r2, #0
 800317c:	3343      	adds	r3, #67	@ 0x43
 800317e:	701a      	strb	r2, [r3, #0]
 8003180:	6863      	ldr	r3, [r4, #4]
 8003182:	60a3      	str	r3, [r4, #8]
 8003184:	2b00      	cmp	r3, #0
 8003186:	db06      	blt.n	8003196 <_printf_i+0xea>
 8003188:	2104      	movs	r1, #4
 800318a:	6822      	ldr	r2, [r4, #0]
 800318c:	9d03      	ldr	r5, [sp, #12]
 800318e:	438a      	bics	r2, r1
 8003190:	6022      	str	r2, [r4, #0]
 8003192:	4333      	orrs	r3, r6
 8003194:	d00c      	beq.n	80031b0 <_printf_i+0x104>
 8003196:	9d03      	ldr	r5, [sp, #12]
 8003198:	0030      	movs	r0, r6
 800319a:	0039      	movs	r1, r7
 800319c:	f7fd f828 	bl	80001f0 <__aeabi_uidivmod>
 80031a0:	9b04      	ldr	r3, [sp, #16]
 80031a2:	3d01      	subs	r5, #1
 80031a4:	5c5b      	ldrb	r3, [r3, r1]
 80031a6:	702b      	strb	r3, [r5, #0]
 80031a8:	0033      	movs	r3, r6
 80031aa:	0006      	movs	r6, r0
 80031ac:	429f      	cmp	r7, r3
 80031ae:	d9f3      	bls.n	8003198 <_printf_i+0xec>
 80031b0:	2f08      	cmp	r7, #8
 80031b2:	d109      	bne.n	80031c8 <_printf_i+0x11c>
 80031b4:	6823      	ldr	r3, [r4, #0]
 80031b6:	07db      	lsls	r3, r3, #31
 80031b8:	d506      	bpl.n	80031c8 <_printf_i+0x11c>
 80031ba:	6862      	ldr	r2, [r4, #4]
 80031bc:	6923      	ldr	r3, [r4, #16]
 80031be:	429a      	cmp	r2, r3
 80031c0:	dc02      	bgt.n	80031c8 <_printf_i+0x11c>
 80031c2:	2330      	movs	r3, #48	@ 0x30
 80031c4:	3d01      	subs	r5, #1
 80031c6:	702b      	strb	r3, [r5, #0]
 80031c8:	9b03      	ldr	r3, [sp, #12]
 80031ca:	1b5b      	subs	r3, r3, r5
 80031cc:	6123      	str	r3, [r4, #16]
 80031ce:	9b07      	ldr	r3, [sp, #28]
 80031d0:	0021      	movs	r1, r4
 80031d2:	9300      	str	r3, [sp, #0]
 80031d4:	9805      	ldr	r0, [sp, #20]
 80031d6:	9b06      	ldr	r3, [sp, #24]
 80031d8:	aa09      	add	r2, sp, #36	@ 0x24
 80031da:	f7ff fef7 	bl	8002fcc <_printf_common>
 80031de:	3001      	adds	r0, #1
 80031e0:	d148      	bne.n	8003274 <_printf_i+0x1c8>
 80031e2:	2001      	movs	r0, #1
 80031e4:	4240      	negs	r0, r0
 80031e6:	b00b      	add	sp, #44	@ 0x2c
 80031e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031ea:	2220      	movs	r2, #32
 80031ec:	6809      	ldr	r1, [r1, #0]
 80031ee:	430a      	orrs	r2, r1
 80031f0:	6022      	str	r2, [r4, #0]
 80031f2:	2278      	movs	r2, #120	@ 0x78
 80031f4:	4932      	ldr	r1, [pc, #200]	@ (80032c0 <_printf_i+0x214>)
 80031f6:	9104      	str	r1, [sp, #16]
 80031f8:	0021      	movs	r1, r4
 80031fa:	3145      	adds	r1, #69	@ 0x45
 80031fc:	700a      	strb	r2, [r1, #0]
 80031fe:	6819      	ldr	r1, [r3, #0]
 8003200:	6822      	ldr	r2, [r4, #0]
 8003202:	c940      	ldmia	r1!, {r6}
 8003204:	0610      	lsls	r0, r2, #24
 8003206:	d402      	bmi.n	800320e <_printf_i+0x162>
 8003208:	0650      	lsls	r0, r2, #25
 800320a:	d500      	bpl.n	800320e <_printf_i+0x162>
 800320c:	b2b6      	uxth	r6, r6
 800320e:	6019      	str	r1, [r3, #0]
 8003210:	07d3      	lsls	r3, r2, #31
 8003212:	d502      	bpl.n	800321a <_printf_i+0x16e>
 8003214:	2320      	movs	r3, #32
 8003216:	4313      	orrs	r3, r2
 8003218:	6023      	str	r3, [r4, #0]
 800321a:	2e00      	cmp	r6, #0
 800321c:	d001      	beq.n	8003222 <_printf_i+0x176>
 800321e:	2710      	movs	r7, #16
 8003220:	e7aa      	b.n	8003178 <_printf_i+0xcc>
 8003222:	2220      	movs	r2, #32
 8003224:	6823      	ldr	r3, [r4, #0]
 8003226:	4393      	bics	r3, r2
 8003228:	6023      	str	r3, [r4, #0]
 800322a:	e7f8      	b.n	800321e <_printf_i+0x172>
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	680d      	ldr	r5, [r1, #0]
 8003230:	1d10      	adds	r0, r2, #4
 8003232:	6949      	ldr	r1, [r1, #20]
 8003234:	6018      	str	r0, [r3, #0]
 8003236:	6813      	ldr	r3, [r2, #0]
 8003238:	062e      	lsls	r6, r5, #24
 800323a:	d501      	bpl.n	8003240 <_printf_i+0x194>
 800323c:	6019      	str	r1, [r3, #0]
 800323e:	e002      	b.n	8003246 <_printf_i+0x19a>
 8003240:	066d      	lsls	r5, r5, #25
 8003242:	d5fb      	bpl.n	800323c <_printf_i+0x190>
 8003244:	8019      	strh	r1, [r3, #0]
 8003246:	2300      	movs	r3, #0
 8003248:	9d03      	ldr	r5, [sp, #12]
 800324a:	6123      	str	r3, [r4, #16]
 800324c:	e7bf      	b.n	80031ce <_printf_i+0x122>
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	1d11      	adds	r1, r2, #4
 8003252:	6019      	str	r1, [r3, #0]
 8003254:	6815      	ldr	r5, [r2, #0]
 8003256:	2100      	movs	r1, #0
 8003258:	0028      	movs	r0, r5
 800325a:	6862      	ldr	r2, [r4, #4]
 800325c:	f000 f9f6 	bl	800364c <memchr>
 8003260:	2800      	cmp	r0, #0
 8003262:	d001      	beq.n	8003268 <_printf_i+0x1bc>
 8003264:	1b40      	subs	r0, r0, r5
 8003266:	6060      	str	r0, [r4, #4]
 8003268:	6863      	ldr	r3, [r4, #4]
 800326a:	6123      	str	r3, [r4, #16]
 800326c:	2300      	movs	r3, #0
 800326e:	9a03      	ldr	r2, [sp, #12]
 8003270:	7013      	strb	r3, [r2, #0]
 8003272:	e7ac      	b.n	80031ce <_printf_i+0x122>
 8003274:	002a      	movs	r2, r5
 8003276:	6923      	ldr	r3, [r4, #16]
 8003278:	9906      	ldr	r1, [sp, #24]
 800327a:	9805      	ldr	r0, [sp, #20]
 800327c:	9d07      	ldr	r5, [sp, #28]
 800327e:	47a8      	blx	r5
 8003280:	3001      	adds	r0, #1
 8003282:	d0ae      	beq.n	80031e2 <_printf_i+0x136>
 8003284:	6823      	ldr	r3, [r4, #0]
 8003286:	079b      	lsls	r3, r3, #30
 8003288:	d415      	bmi.n	80032b6 <_printf_i+0x20a>
 800328a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800328c:	68e0      	ldr	r0, [r4, #12]
 800328e:	4298      	cmp	r0, r3
 8003290:	daa9      	bge.n	80031e6 <_printf_i+0x13a>
 8003292:	0018      	movs	r0, r3
 8003294:	e7a7      	b.n	80031e6 <_printf_i+0x13a>
 8003296:	0022      	movs	r2, r4
 8003298:	2301      	movs	r3, #1
 800329a:	9906      	ldr	r1, [sp, #24]
 800329c:	9805      	ldr	r0, [sp, #20]
 800329e:	9e07      	ldr	r6, [sp, #28]
 80032a0:	3219      	adds	r2, #25
 80032a2:	47b0      	blx	r6
 80032a4:	3001      	adds	r0, #1
 80032a6:	d09c      	beq.n	80031e2 <_printf_i+0x136>
 80032a8:	3501      	adds	r5, #1
 80032aa:	68e3      	ldr	r3, [r4, #12]
 80032ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80032ae:	1a9b      	subs	r3, r3, r2
 80032b0:	42ab      	cmp	r3, r5
 80032b2:	dcf0      	bgt.n	8003296 <_printf_i+0x1ea>
 80032b4:	e7e9      	b.n	800328a <_printf_i+0x1de>
 80032b6:	2500      	movs	r5, #0
 80032b8:	e7f7      	b.n	80032aa <_printf_i+0x1fe>
 80032ba:	46c0      	nop			@ (mov r8, r8)
 80032bc:	080078d9 	.word	0x080078d9
 80032c0:	080078ea 	.word	0x080078ea

080032c4 <__sflush_r>:
 80032c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80032c6:	220c      	movs	r2, #12
 80032c8:	5e8b      	ldrsh	r3, [r1, r2]
 80032ca:	0005      	movs	r5, r0
 80032cc:	000c      	movs	r4, r1
 80032ce:	071a      	lsls	r2, r3, #28
 80032d0:	d45a      	bmi.n	8003388 <__sflush_r+0xc4>
 80032d2:	684a      	ldr	r2, [r1, #4]
 80032d4:	2a00      	cmp	r2, #0
 80032d6:	dc02      	bgt.n	80032de <__sflush_r+0x1a>
 80032d8:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 80032da:	2a00      	cmp	r2, #0
 80032dc:	dd4f      	ble.n	800337e <__sflush_r+0xba>
 80032de:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80032e0:	2f00      	cmp	r7, #0
 80032e2:	d04c      	beq.n	800337e <__sflush_r+0xba>
 80032e4:	2200      	movs	r2, #0
 80032e6:	2180      	movs	r1, #128	@ 0x80
 80032e8:	682e      	ldr	r6, [r5, #0]
 80032ea:	602a      	str	r2, [r5, #0]
 80032ec:	001a      	movs	r2, r3
 80032ee:	0149      	lsls	r1, r1, #5
 80032f0:	400a      	ands	r2, r1
 80032f2:	420b      	tst	r3, r1
 80032f4:	d034      	beq.n	8003360 <__sflush_r+0x9c>
 80032f6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80032f8:	89a3      	ldrh	r3, [r4, #12]
 80032fa:	075b      	lsls	r3, r3, #29
 80032fc:	d506      	bpl.n	800330c <__sflush_r+0x48>
 80032fe:	6863      	ldr	r3, [r4, #4]
 8003300:	1ad2      	subs	r2, r2, r3
 8003302:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003304:	2b00      	cmp	r3, #0
 8003306:	d001      	beq.n	800330c <__sflush_r+0x48>
 8003308:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800330a:	1ad2      	subs	r2, r2, r3
 800330c:	2300      	movs	r3, #0
 800330e:	0028      	movs	r0, r5
 8003310:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8003312:	6a21      	ldr	r1, [r4, #32]
 8003314:	47b8      	blx	r7
 8003316:	230c      	movs	r3, #12
 8003318:	5ee2      	ldrsh	r2, [r4, r3]
 800331a:	1c43      	adds	r3, r0, #1
 800331c:	d106      	bne.n	800332c <__sflush_r+0x68>
 800331e:	6829      	ldr	r1, [r5, #0]
 8003320:	291d      	cmp	r1, #29
 8003322:	d82e      	bhi.n	8003382 <__sflush_r+0xbe>
 8003324:	4b2b      	ldr	r3, [pc, #172]	@ (80033d4 <__sflush_r+0x110>)
 8003326:	40cb      	lsrs	r3, r1
 8003328:	07db      	lsls	r3, r3, #31
 800332a:	d52a      	bpl.n	8003382 <__sflush_r+0xbe>
 800332c:	2300      	movs	r3, #0
 800332e:	6063      	str	r3, [r4, #4]
 8003330:	6923      	ldr	r3, [r4, #16]
 8003332:	6023      	str	r3, [r4, #0]
 8003334:	04d2      	lsls	r2, r2, #19
 8003336:	d505      	bpl.n	8003344 <__sflush_r+0x80>
 8003338:	1c43      	adds	r3, r0, #1
 800333a:	d102      	bne.n	8003342 <__sflush_r+0x7e>
 800333c:	682b      	ldr	r3, [r5, #0]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d100      	bne.n	8003344 <__sflush_r+0x80>
 8003342:	6560      	str	r0, [r4, #84]	@ 0x54
 8003344:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003346:	602e      	str	r6, [r5, #0]
 8003348:	2900      	cmp	r1, #0
 800334a:	d018      	beq.n	800337e <__sflush_r+0xba>
 800334c:	0023      	movs	r3, r4
 800334e:	3344      	adds	r3, #68	@ 0x44
 8003350:	4299      	cmp	r1, r3
 8003352:	d002      	beq.n	800335a <__sflush_r+0x96>
 8003354:	0028      	movs	r0, r5
 8003356:	f000 f995 	bl	8003684 <_free_r>
 800335a:	2300      	movs	r3, #0
 800335c:	6363      	str	r3, [r4, #52]	@ 0x34
 800335e:	e00e      	b.n	800337e <__sflush_r+0xba>
 8003360:	2301      	movs	r3, #1
 8003362:	0028      	movs	r0, r5
 8003364:	6a21      	ldr	r1, [r4, #32]
 8003366:	47b8      	blx	r7
 8003368:	0002      	movs	r2, r0
 800336a:	1c43      	adds	r3, r0, #1
 800336c:	d1c4      	bne.n	80032f8 <__sflush_r+0x34>
 800336e:	682b      	ldr	r3, [r5, #0]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d0c1      	beq.n	80032f8 <__sflush_r+0x34>
 8003374:	2b1d      	cmp	r3, #29
 8003376:	d001      	beq.n	800337c <__sflush_r+0xb8>
 8003378:	2b16      	cmp	r3, #22
 800337a:	d11d      	bne.n	80033b8 <__sflush_r+0xf4>
 800337c:	602e      	str	r6, [r5, #0]
 800337e:	2000      	movs	r0, #0
 8003380:	e021      	b.n	80033c6 <__sflush_r+0x102>
 8003382:	2340      	movs	r3, #64	@ 0x40
 8003384:	4313      	orrs	r3, r2
 8003386:	e01b      	b.n	80033c0 <__sflush_r+0xfc>
 8003388:	690e      	ldr	r6, [r1, #16]
 800338a:	2e00      	cmp	r6, #0
 800338c:	d0f7      	beq.n	800337e <__sflush_r+0xba>
 800338e:	680f      	ldr	r7, [r1, #0]
 8003390:	600e      	str	r6, [r1, #0]
 8003392:	1bba      	subs	r2, r7, r6
 8003394:	9201      	str	r2, [sp, #4]
 8003396:	2200      	movs	r2, #0
 8003398:	079b      	lsls	r3, r3, #30
 800339a:	d100      	bne.n	800339e <__sflush_r+0xda>
 800339c:	694a      	ldr	r2, [r1, #20]
 800339e:	60a2      	str	r2, [r4, #8]
 80033a0:	9b01      	ldr	r3, [sp, #4]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	ddeb      	ble.n	800337e <__sflush_r+0xba>
 80033a6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80033a8:	0032      	movs	r2, r6
 80033aa:	001f      	movs	r7, r3
 80033ac:	0028      	movs	r0, r5
 80033ae:	9b01      	ldr	r3, [sp, #4]
 80033b0:	6a21      	ldr	r1, [r4, #32]
 80033b2:	47b8      	blx	r7
 80033b4:	2800      	cmp	r0, #0
 80033b6:	dc07      	bgt.n	80033c8 <__sflush_r+0x104>
 80033b8:	2340      	movs	r3, #64	@ 0x40
 80033ba:	89a2      	ldrh	r2, [r4, #12]
 80033bc:	4313      	orrs	r3, r2
 80033be:	b21b      	sxth	r3, r3
 80033c0:	2001      	movs	r0, #1
 80033c2:	81a3      	strh	r3, [r4, #12]
 80033c4:	4240      	negs	r0, r0
 80033c6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80033c8:	9b01      	ldr	r3, [sp, #4]
 80033ca:	1836      	adds	r6, r6, r0
 80033cc:	1a1b      	subs	r3, r3, r0
 80033ce:	9301      	str	r3, [sp, #4]
 80033d0:	e7e6      	b.n	80033a0 <__sflush_r+0xdc>
 80033d2:	46c0      	nop			@ (mov r8, r8)
 80033d4:	20400001 	.word	0x20400001

080033d8 <_fflush_r>:
 80033d8:	690b      	ldr	r3, [r1, #16]
 80033da:	b570      	push	{r4, r5, r6, lr}
 80033dc:	0005      	movs	r5, r0
 80033de:	000c      	movs	r4, r1
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d102      	bne.n	80033ea <_fflush_r+0x12>
 80033e4:	2500      	movs	r5, #0
 80033e6:	0028      	movs	r0, r5
 80033e8:	bd70      	pop	{r4, r5, r6, pc}
 80033ea:	2800      	cmp	r0, #0
 80033ec:	d004      	beq.n	80033f8 <_fflush_r+0x20>
 80033ee:	6a03      	ldr	r3, [r0, #32]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d101      	bne.n	80033f8 <_fflush_r+0x20>
 80033f4:	f7ff fb20 	bl	8002a38 <__sinit>
 80033f8:	220c      	movs	r2, #12
 80033fa:	5ea3      	ldrsh	r3, [r4, r2]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d0f1      	beq.n	80033e4 <_fflush_r+0xc>
 8003400:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003402:	07d2      	lsls	r2, r2, #31
 8003404:	d404      	bmi.n	8003410 <_fflush_r+0x38>
 8003406:	059b      	lsls	r3, r3, #22
 8003408:	d402      	bmi.n	8003410 <_fflush_r+0x38>
 800340a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800340c:	f7ff fb97 	bl	8002b3e <__retarget_lock_acquire_recursive>
 8003410:	0028      	movs	r0, r5
 8003412:	0021      	movs	r1, r4
 8003414:	f7ff ff56 	bl	80032c4 <__sflush_r>
 8003418:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800341a:	0005      	movs	r5, r0
 800341c:	07db      	lsls	r3, r3, #31
 800341e:	d4e2      	bmi.n	80033e6 <_fflush_r+0xe>
 8003420:	89a3      	ldrh	r3, [r4, #12]
 8003422:	059b      	lsls	r3, r3, #22
 8003424:	d4df      	bmi.n	80033e6 <_fflush_r+0xe>
 8003426:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003428:	f7ff fb8a 	bl	8002b40 <__retarget_lock_release_recursive>
 800342c:	e7db      	b.n	80033e6 <_fflush_r+0xe>
	...

08003430 <__malloc_lock>:
 8003430:	b510      	push	{r4, lr}
 8003432:	4802      	ldr	r0, [pc, #8]	@ (800343c <__malloc_lock+0xc>)
 8003434:	f7ff fb83 	bl	8002b3e <__retarget_lock_acquire_recursive>
 8003438:	bd10      	pop	{r4, pc}
 800343a:	46c0      	nop			@ (mov r8, r8)
 800343c:	200004e0 	.word	0x200004e0

08003440 <__malloc_unlock>:
 8003440:	b510      	push	{r4, lr}
 8003442:	4802      	ldr	r0, [pc, #8]	@ (800344c <__malloc_unlock+0xc>)
 8003444:	f7ff fb7c 	bl	8002b40 <__retarget_lock_release_recursive>
 8003448:	bd10      	pop	{r4, pc}
 800344a:	46c0      	nop			@ (mov r8, r8)
 800344c:	200004e0 	.word	0x200004e0

08003450 <__sread>:
 8003450:	b570      	push	{r4, r5, r6, lr}
 8003452:	000c      	movs	r4, r1
 8003454:	250e      	movs	r5, #14
 8003456:	5f49      	ldrsh	r1, [r1, r5]
 8003458:	f000 f8ac 	bl	80035b4 <_read_r>
 800345c:	2800      	cmp	r0, #0
 800345e:	db03      	blt.n	8003468 <__sread+0x18>
 8003460:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003462:	181b      	adds	r3, r3, r0
 8003464:	6563      	str	r3, [r4, #84]	@ 0x54
 8003466:	bd70      	pop	{r4, r5, r6, pc}
 8003468:	89a3      	ldrh	r3, [r4, #12]
 800346a:	4a02      	ldr	r2, [pc, #8]	@ (8003474 <__sread+0x24>)
 800346c:	4013      	ands	r3, r2
 800346e:	81a3      	strh	r3, [r4, #12]
 8003470:	e7f9      	b.n	8003466 <__sread+0x16>
 8003472:	46c0      	nop			@ (mov r8, r8)
 8003474:	ffffefff 	.word	0xffffefff

08003478 <__swrite>:
 8003478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800347a:	001f      	movs	r7, r3
 800347c:	898b      	ldrh	r3, [r1, #12]
 800347e:	0005      	movs	r5, r0
 8003480:	000c      	movs	r4, r1
 8003482:	0016      	movs	r6, r2
 8003484:	05db      	lsls	r3, r3, #23
 8003486:	d505      	bpl.n	8003494 <__swrite+0x1c>
 8003488:	230e      	movs	r3, #14
 800348a:	5ec9      	ldrsh	r1, [r1, r3]
 800348c:	2200      	movs	r2, #0
 800348e:	2302      	movs	r3, #2
 8003490:	f000 f87c 	bl	800358c <_lseek_r>
 8003494:	89a3      	ldrh	r3, [r4, #12]
 8003496:	4a05      	ldr	r2, [pc, #20]	@ (80034ac <__swrite+0x34>)
 8003498:	0028      	movs	r0, r5
 800349a:	4013      	ands	r3, r2
 800349c:	81a3      	strh	r3, [r4, #12]
 800349e:	0032      	movs	r2, r6
 80034a0:	230e      	movs	r3, #14
 80034a2:	5ee1      	ldrsh	r1, [r4, r3]
 80034a4:	003b      	movs	r3, r7
 80034a6:	f000 f8ab 	bl	8003600 <_write_r>
 80034aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034ac:	ffffefff 	.word	0xffffefff

080034b0 <__sseek>:
 80034b0:	b570      	push	{r4, r5, r6, lr}
 80034b2:	000c      	movs	r4, r1
 80034b4:	250e      	movs	r5, #14
 80034b6:	5f49      	ldrsh	r1, [r1, r5]
 80034b8:	f000 f868 	bl	800358c <_lseek_r>
 80034bc:	220c      	movs	r2, #12
 80034be:	5ea3      	ldrsh	r3, [r4, r2]
 80034c0:	1c42      	adds	r2, r0, #1
 80034c2:	d103      	bne.n	80034cc <__sseek+0x1c>
 80034c4:	4a04      	ldr	r2, [pc, #16]	@ (80034d8 <__sseek+0x28>)
 80034c6:	4013      	ands	r3, r2
 80034c8:	81a3      	strh	r3, [r4, #12]
 80034ca:	bd70      	pop	{r4, r5, r6, pc}
 80034cc:	2280      	movs	r2, #128	@ 0x80
 80034ce:	0152      	lsls	r2, r2, #5
 80034d0:	4313      	orrs	r3, r2
 80034d2:	81a3      	strh	r3, [r4, #12]
 80034d4:	6560      	str	r0, [r4, #84]	@ 0x54
 80034d6:	e7f8      	b.n	80034ca <__sseek+0x1a>
 80034d8:	ffffefff 	.word	0xffffefff

080034dc <__sclose>:
 80034dc:	b510      	push	{r4, lr}
 80034de:	230e      	movs	r3, #14
 80034e0:	5ec9      	ldrsh	r1, [r1, r3]
 80034e2:	f000 f8a1 	bl	8003628 <_close_r>
 80034e6:	bd10      	pop	{r4, pc}

080034e8 <fiprintf>:
 80034e8:	b40e      	push	{r1, r2, r3}
 80034ea:	b517      	push	{r0, r1, r2, r4, lr}
 80034ec:	4c05      	ldr	r4, [pc, #20]	@ (8003504 <fiprintf+0x1c>)
 80034ee:	ab05      	add	r3, sp, #20
 80034f0:	cb04      	ldmia	r3!, {r2}
 80034f2:	0001      	movs	r1, r0
 80034f4:	6820      	ldr	r0, [r4, #0]
 80034f6:	9301      	str	r3, [sp, #4]
 80034f8:	f000 f936 	bl	8003768 <_vfiprintf_r>
 80034fc:	bc1e      	pop	{r1, r2, r3, r4}
 80034fe:	bc08      	pop	{r3}
 8003500:	b003      	add	sp, #12
 8003502:	4718      	bx	r3
 8003504:	20000018 	.word	0x20000018

08003508 <_realloc_r>:
 8003508:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800350a:	0006      	movs	r6, r0
 800350c:	000c      	movs	r4, r1
 800350e:	0015      	movs	r5, r2
 8003510:	2900      	cmp	r1, #0
 8003512:	d105      	bne.n	8003520 <_realloc_r+0x18>
 8003514:	0011      	movs	r1, r2
 8003516:	f7ff fcd9 	bl	8002ecc <_malloc_r>
 800351a:	0004      	movs	r4, r0
 800351c:	0020      	movs	r0, r4
 800351e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003520:	2a00      	cmp	r2, #0
 8003522:	d103      	bne.n	800352c <_realloc_r+0x24>
 8003524:	f000 f8ae 	bl	8003684 <_free_r>
 8003528:	002c      	movs	r4, r5
 800352a:	e7f7      	b.n	800351c <_realloc_r+0x14>
 800352c:	f000 fa3c 	bl	80039a8 <_malloc_usable_size_r>
 8003530:	0007      	movs	r7, r0
 8003532:	4285      	cmp	r5, r0
 8003534:	d802      	bhi.n	800353c <_realloc_r+0x34>
 8003536:	0843      	lsrs	r3, r0, #1
 8003538:	42ab      	cmp	r3, r5
 800353a:	d3ef      	bcc.n	800351c <_realloc_r+0x14>
 800353c:	0029      	movs	r1, r5
 800353e:	0030      	movs	r0, r6
 8003540:	f7ff fcc4 	bl	8002ecc <_malloc_r>
 8003544:	9001      	str	r0, [sp, #4]
 8003546:	2800      	cmp	r0, #0
 8003548:	d101      	bne.n	800354e <_realloc_r+0x46>
 800354a:	9c01      	ldr	r4, [sp, #4]
 800354c:	e7e6      	b.n	800351c <_realloc_r+0x14>
 800354e:	002a      	movs	r2, r5
 8003550:	42bd      	cmp	r5, r7
 8003552:	d900      	bls.n	8003556 <_realloc_r+0x4e>
 8003554:	003a      	movs	r2, r7
 8003556:	0021      	movs	r1, r4
 8003558:	9801      	ldr	r0, [sp, #4]
 800355a:	f000 f882 	bl	8003662 <memcpy>
 800355e:	0021      	movs	r1, r4
 8003560:	0030      	movs	r0, r6
 8003562:	f000 f88f 	bl	8003684 <_free_r>
 8003566:	e7f0      	b.n	800354a <_realloc_r+0x42>

08003568 <memmove>:
 8003568:	b510      	push	{r4, lr}
 800356a:	4288      	cmp	r0, r1
 800356c:	d902      	bls.n	8003574 <memmove+0xc>
 800356e:	188b      	adds	r3, r1, r2
 8003570:	4298      	cmp	r0, r3
 8003572:	d308      	bcc.n	8003586 <memmove+0x1e>
 8003574:	2300      	movs	r3, #0
 8003576:	429a      	cmp	r2, r3
 8003578:	d007      	beq.n	800358a <memmove+0x22>
 800357a:	5ccc      	ldrb	r4, [r1, r3]
 800357c:	54c4      	strb	r4, [r0, r3]
 800357e:	3301      	adds	r3, #1
 8003580:	e7f9      	b.n	8003576 <memmove+0xe>
 8003582:	5c8b      	ldrb	r3, [r1, r2]
 8003584:	5483      	strb	r3, [r0, r2]
 8003586:	3a01      	subs	r2, #1
 8003588:	d2fb      	bcs.n	8003582 <memmove+0x1a>
 800358a:	bd10      	pop	{r4, pc}

0800358c <_lseek_r>:
 800358c:	b570      	push	{r4, r5, r6, lr}
 800358e:	0004      	movs	r4, r0
 8003590:	0008      	movs	r0, r1
 8003592:	0011      	movs	r1, r2
 8003594:	001a      	movs	r2, r3
 8003596:	2300      	movs	r3, #0
 8003598:	4d05      	ldr	r5, [pc, #20]	@ (80035b0 <_lseek_r+0x24>)
 800359a:	602b      	str	r3, [r5, #0]
 800359c:	f7ff f8c4 	bl	8002728 <_lseek>
 80035a0:	1c43      	adds	r3, r0, #1
 80035a2:	d103      	bne.n	80035ac <_lseek_r+0x20>
 80035a4:	682b      	ldr	r3, [r5, #0]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d000      	beq.n	80035ac <_lseek_r+0x20>
 80035aa:	6023      	str	r3, [r4, #0]
 80035ac:	bd70      	pop	{r4, r5, r6, pc}
 80035ae:	46c0      	nop			@ (mov r8, r8)
 80035b0:	200004ec 	.word	0x200004ec

080035b4 <_read_r>:
 80035b4:	b570      	push	{r4, r5, r6, lr}
 80035b6:	0004      	movs	r4, r0
 80035b8:	0008      	movs	r0, r1
 80035ba:	0011      	movs	r1, r2
 80035bc:	001a      	movs	r2, r3
 80035be:	2300      	movs	r3, #0
 80035c0:	4d05      	ldr	r5, [pc, #20]	@ (80035d8 <_read_r+0x24>)
 80035c2:	602b      	str	r3, [r5, #0]
 80035c4:	f7ff f88a 	bl	80026dc <_read>
 80035c8:	1c43      	adds	r3, r0, #1
 80035ca:	d103      	bne.n	80035d4 <_read_r+0x20>
 80035cc:	682b      	ldr	r3, [r5, #0]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d000      	beq.n	80035d4 <_read_r+0x20>
 80035d2:	6023      	str	r3, [r4, #0]
 80035d4:	bd70      	pop	{r4, r5, r6, pc}
 80035d6:	46c0      	nop			@ (mov r8, r8)
 80035d8:	200004ec 	.word	0x200004ec

080035dc <_sbrk_r>:
 80035dc:	2300      	movs	r3, #0
 80035de:	b570      	push	{r4, r5, r6, lr}
 80035e0:	4d06      	ldr	r5, [pc, #24]	@ (80035fc <_sbrk_r+0x20>)
 80035e2:	0004      	movs	r4, r0
 80035e4:	0008      	movs	r0, r1
 80035e6:	602b      	str	r3, [r5, #0]
 80035e8:	f7ff f8a0 	bl	800272c <_sbrk>
 80035ec:	1c43      	adds	r3, r0, #1
 80035ee:	d103      	bne.n	80035f8 <_sbrk_r+0x1c>
 80035f0:	682b      	ldr	r3, [r5, #0]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d000      	beq.n	80035f8 <_sbrk_r+0x1c>
 80035f6:	6023      	str	r3, [r4, #0]
 80035f8:	bd70      	pop	{r4, r5, r6, pc}
 80035fa:	46c0      	nop			@ (mov r8, r8)
 80035fc:	200004ec 	.word	0x200004ec

08003600 <_write_r>:
 8003600:	b570      	push	{r4, r5, r6, lr}
 8003602:	0004      	movs	r4, r0
 8003604:	0008      	movs	r0, r1
 8003606:	0011      	movs	r1, r2
 8003608:	001a      	movs	r2, r3
 800360a:	2300      	movs	r3, #0
 800360c:	4d05      	ldr	r5, [pc, #20]	@ (8003624 <_write_r+0x24>)
 800360e:	602b      	str	r3, [r5, #0]
 8003610:	f7ff f872 	bl	80026f8 <_write>
 8003614:	1c43      	adds	r3, r0, #1
 8003616:	d103      	bne.n	8003620 <_write_r+0x20>
 8003618:	682b      	ldr	r3, [r5, #0]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d000      	beq.n	8003620 <_write_r+0x20>
 800361e:	6023      	str	r3, [r4, #0]
 8003620:	bd70      	pop	{r4, r5, r6, pc}
 8003622:	46c0      	nop			@ (mov r8, r8)
 8003624:	200004ec 	.word	0x200004ec

08003628 <_close_r>:
 8003628:	2300      	movs	r3, #0
 800362a:	b570      	push	{r4, r5, r6, lr}
 800362c:	4d06      	ldr	r5, [pc, #24]	@ (8003648 <_close_r+0x20>)
 800362e:	0004      	movs	r4, r0
 8003630:	0008      	movs	r0, r1
 8003632:	602b      	str	r3, [r5, #0]
 8003634:	f7ff f86e 	bl	8002714 <_close>
 8003638:	1c43      	adds	r3, r0, #1
 800363a:	d103      	bne.n	8003644 <_close_r+0x1c>
 800363c:	682b      	ldr	r3, [r5, #0]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d000      	beq.n	8003644 <_close_r+0x1c>
 8003642:	6023      	str	r3, [r4, #0]
 8003644:	bd70      	pop	{r4, r5, r6, pc}
 8003646:	46c0      	nop			@ (mov r8, r8)
 8003648:	200004ec 	.word	0x200004ec

0800364c <memchr>:
 800364c:	b2c9      	uxtb	r1, r1
 800364e:	1882      	adds	r2, r0, r2
 8003650:	4290      	cmp	r0, r2
 8003652:	d101      	bne.n	8003658 <memchr+0xc>
 8003654:	2000      	movs	r0, #0
 8003656:	4770      	bx	lr
 8003658:	7803      	ldrb	r3, [r0, #0]
 800365a:	428b      	cmp	r3, r1
 800365c:	d0fb      	beq.n	8003656 <memchr+0xa>
 800365e:	3001      	adds	r0, #1
 8003660:	e7f6      	b.n	8003650 <memchr+0x4>

08003662 <memcpy>:
 8003662:	2300      	movs	r3, #0
 8003664:	b510      	push	{r4, lr}
 8003666:	429a      	cmp	r2, r3
 8003668:	d100      	bne.n	800366c <memcpy+0xa>
 800366a:	bd10      	pop	{r4, pc}
 800366c:	5ccc      	ldrb	r4, [r1, r3]
 800366e:	54c4      	strb	r4, [r0, r3]
 8003670:	3301      	adds	r3, #1
 8003672:	e7f8      	b.n	8003666 <memcpy+0x4>

08003674 <abort>:
 8003674:	2006      	movs	r0, #6
 8003676:	b510      	push	{r4, lr}
 8003678:	f000 fac6 	bl	8003c08 <raise>
 800367c:	2001      	movs	r0, #1
 800367e:	f7ff f827 	bl	80026d0 <_exit>
	...

08003684 <_free_r>:
 8003684:	b570      	push	{r4, r5, r6, lr}
 8003686:	0005      	movs	r5, r0
 8003688:	1e0c      	subs	r4, r1, #0
 800368a:	d010      	beq.n	80036ae <_free_r+0x2a>
 800368c:	3c04      	subs	r4, #4
 800368e:	6823      	ldr	r3, [r4, #0]
 8003690:	2b00      	cmp	r3, #0
 8003692:	da00      	bge.n	8003696 <_free_r+0x12>
 8003694:	18e4      	adds	r4, r4, r3
 8003696:	0028      	movs	r0, r5
 8003698:	f7ff feca 	bl	8003430 <__malloc_lock>
 800369c:	4a1d      	ldr	r2, [pc, #116]	@ (8003714 <_free_r+0x90>)
 800369e:	6813      	ldr	r3, [r2, #0]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d105      	bne.n	80036b0 <_free_r+0x2c>
 80036a4:	6063      	str	r3, [r4, #4]
 80036a6:	6014      	str	r4, [r2, #0]
 80036a8:	0028      	movs	r0, r5
 80036aa:	f7ff fec9 	bl	8003440 <__malloc_unlock>
 80036ae:	bd70      	pop	{r4, r5, r6, pc}
 80036b0:	42a3      	cmp	r3, r4
 80036b2:	d908      	bls.n	80036c6 <_free_r+0x42>
 80036b4:	6820      	ldr	r0, [r4, #0]
 80036b6:	1821      	adds	r1, r4, r0
 80036b8:	428b      	cmp	r3, r1
 80036ba:	d1f3      	bne.n	80036a4 <_free_r+0x20>
 80036bc:	6819      	ldr	r1, [r3, #0]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	1809      	adds	r1, r1, r0
 80036c2:	6021      	str	r1, [r4, #0]
 80036c4:	e7ee      	b.n	80036a4 <_free_r+0x20>
 80036c6:	001a      	movs	r2, r3
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d001      	beq.n	80036d2 <_free_r+0x4e>
 80036ce:	42a3      	cmp	r3, r4
 80036d0:	d9f9      	bls.n	80036c6 <_free_r+0x42>
 80036d2:	6811      	ldr	r1, [r2, #0]
 80036d4:	1850      	adds	r0, r2, r1
 80036d6:	42a0      	cmp	r0, r4
 80036d8:	d10b      	bne.n	80036f2 <_free_r+0x6e>
 80036da:	6820      	ldr	r0, [r4, #0]
 80036dc:	1809      	adds	r1, r1, r0
 80036de:	1850      	adds	r0, r2, r1
 80036e0:	6011      	str	r1, [r2, #0]
 80036e2:	4283      	cmp	r3, r0
 80036e4:	d1e0      	bne.n	80036a8 <_free_r+0x24>
 80036e6:	6818      	ldr	r0, [r3, #0]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	1841      	adds	r1, r0, r1
 80036ec:	6011      	str	r1, [r2, #0]
 80036ee:	6053      	str	r3, [r2, #4]
 80036f0:	e7da      	b.n	80036a8 <_free_r+0x24>
 80036f2:	42a0      	cmp	r0, r4
 80036f4:	d902      	bls.n	80036fc <_free_r+0x78>
 80036f6:	230c      	movs	r3, #12
 80036f8:	602b      	str	r3, [r5, #0]
 80036fa:	e7d5      	b.n	80036a8 <_free_r+0x24>
 80036fc:	6820      	ldr	r0, [r4, #0]
 80036fe:	1821      	adds	r1, r4, r0
 8003700:	428b      	cmp	r3, r1
 8003702:	d103      	bne.n	800370c <_free_r+0x88>
 8003704:	6819      	ldr	r1, [r3, #0]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	1809      	adds	r1, r1, r0
 800370a:	6021      	str	r1, [r4, #0]
 800370c:	6063      	str	r3, [r4, #4]
 800370e:	6054      	str	r4, [r2, #4]
 8003710:	e7ca      	b.n	80036a8 <_free_r+0x24>
 8003712:	46c0      	nop			@ (mov r8, r8)
 8003714:	200004e8 	.word	0x200004e8

08003718 <__sfputc_r>:
 8003718:	6893      	ldr	r3, [r2, #8]
 800371a:	b510      	push	{r4, lr}
 800371c:	3b01      	subs	r3, #1
 800371e:	6093      	str	r3, [r2, #8]
 8003720:	2b00      	cmp	r3, #0
 8003722:	da04      	bge.n	800372e <__sfputc_r+0x16>
 8003724:	6994      	ldr	r4, [r2, #24]
 8003726:	42a3      	cmp	r3, r4
 8003728:	db07      	blt.n	800373a <__sfputc_r+0x22>
 800372a:	290a      	cmp	r1, #10
 800372c:	d005      	beq.n	800373a <__sfputc_r+0x22>
 800372e:	6813      	ldr	r3, [r2, #0]
 8003730:	1c58      	adds	r0, r3, #1
 8003732:	6010      	str	r0, [r2, #0]
 8003734:	7019      	strb	r1, [r3, #0]
 8003736:	0008      	movs	r0, r1
 8003738:	bd10      	pop	{r4, pc}
 800373a:	f000 f93d 	bl	80039b8 <__swbuf_r>
 800373e:	0001      	movs	r1, r0
 8003740:	e7f9      	b.n	8003736 <__sfputc_r+0x1e>

08003742 <__sfputs_r>:
 8003742:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003744:	0006      	movs	r6, r0
 8003746:	000f      	movs	r7, r1
 8003748:	0014      	movs	r4, r2
 800374a:	18d5      	adds	r5, r2, r3
 800374c:	42ac      	cmp	r4, r5
 800374e:	d101      	bne.n	8003754 <__sfputs_r+0x12>
 8003750:	2000      	movs	r0, #0
 8003752:	e007      	b.n	8003764 <__sfputs_r+0x22>
 8003754:	7821      	ldrb	r1, [r4, #0]
 8003756:	003a      	movs	r2, r7
 8003758:	0030      	movs	r0, r6
 800375a:	f7ff ffdd 	bl	8003718 <__sfputc_r>
 800375e:	3401      	adds	r4, #1
 8003760:	1c43      	adds	r3, r0, #1
 8003762:	d1f3      	bne.n	800374c <__sfputs_r+0xa>
 8003764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003768 <_vfiprintf_r>:
 8003768:	b5f0      	push	{r4, r5, r6, r7, lr}
 800376a:	b09f      	sub	sp, #124	@ 0x7c
 800376c:	000d      	movs	r5, r1
 800376e:	0016      	movs	r6, r2
 8003770:	001c      	movs	r4, r3
 8003772:	9002      	str	r0, [sp, #8]
 8003774:	2800      	cmp	r0, #0
 8003776:	d004      	beq.n	8003782 <_vfiprintf_r+0x1a>
 8003778:	6a03      	ldr	r3, [r0, #32]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d101      	bne.n	8003782 <_vfiprintf_r+0x1a>
 800377e:	f7ff f95b 	bl	8002a38 <__sinit>
 8003782:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003784:	07db      	lsls	r3, r3, #31
 8003786:	d405      	bmi.n	8003794 <_vfiprintf_r+0x2c>
 8003788:	89ab      	ldrh	r3, [r5, #12]
 800378a:	059b      	lsls	r3, r3, #22
 800378c:	d402      	bmi.n	8003794 <_vfiprintf_r+0x2c>
 800378e:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003790:	f7ff f9d5 	bl	8002b3e <__retarget_lock_acquire_recursive>
 8003794:	89ab      	ldrh	r3, [r5, #12]
 8003796:	071b      	lsls	r3, r3, #28
 8003798:	d502      	bpl.n	80037a0 <_vfiprintf_r+0x38>
 800379a:	692b      	ldr	r3, [r5, #16]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d113      	bne.n	80037c8 <_vfiprintf_r+0x60>
 80037a0:	0029      	movs	r1, r5
 80037a2:	9802      	ldr	r0, [sp, #8]
 80037a4:	f000 f94a 	bl	8003a3c <__swsetup_r>
 80037a8:	2800      	cmp	r0, #0
 80037aa:	d00d      	beq.n	80037c8 <_vfiprintf_r+0x60>
 80037ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80037ae:	07db      	lsls	r3, r3, #31
 80037b0:	d503      	bpl.n	80037ba <_vfiprintf_r+0x52>
 80037b2:	2001      	movs	r0, #1
 80037b4:	4240      	negs	r0, r0
 80037b6:	b01f      	add	sp, #124	@ 0x7c
 80037b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037ba:	89ab      	ldrh	r3, [r5, #12]
 80037bc:	059b      	lsls	r3, r3, #22
 80037be:	d4f8      	bmi.n	80037b2 <_vfiprintf_r+0x4a>
 80037c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80037c2:	f7ff f9bd 	bl	8002b40 <__retarget_lock_release_recursive>
 80037c6:	e7f4      	b.n	80037b2 <_vfiprintf_r+0x4a>
 80037c8:	2300      	movs	r3, #0
 80037ca:	2129      	movs	r1, #41	@ 0x29
 80037cc:	aa02      	add	r2, sp, #8
 80037ce:	1852      	adds	r2, r2, r1
 80037d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80037d2:	3320      	adds	r3, #32
 80037d4:	7013      	strb	r3, [r2, #0]
 80037d6:	3101      	adds	r1, #1
 80037d8:	aa02      	add	r2, sp, #8
 80037da:	3310      	adds	r3, #16
 80037dc:	1852      	adds	r2, r2, r1
 80037de:	7013      	strb	r3, [r2, #0]
 80037e0:	9405      	str	r4, [sp, #20]
 80037e2:	0034      	movs	r4, r6
 80037e4:	7823      	ldrb	r3, [r4, #0]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d001      	beq.n	80037ee <_vfiprintf_r+0x86>
 80037ea:	2b25      	cmp	r3, #37	@ 0x25
 80037ec:	d148      	bne.n	8003880 <_vfiprintf_r+0x118>
 80037ee:	1ba7      	subs	r7, r4, r6
 80037f0:	42b4      	cmp	r4, r6
 80037f2:	d00b      	beq.n	800380c <_vfiprintf_r+0xa4>
 80037f4:	003b      	movs	r3, r7
 80037f6:	0032      	movs	r2, r6
 80037f8:	0029      	movs	r1, r5
 80037fa:	9802      	ldr	r0, [sp, #8]
 80037fc:	f7ff ffa1 	bl	8003742 <__sfputs_r>
 8003800:	3001      	adds	r0, #1
 8003802:	d100      	bne.n	8003806 <_vfiprintf_r+0x9e>
 8003804:	e0ae      	b.n	8003964 <_vfiprintf_r+0x1fc>
 8003806:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003808:	19db      	adds	r3, r3, r7
 800380a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800380c:	7823      	ldrb	r3, [r4, #0]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d100      	bne.n	8003814 <_vfiprintf_r+0xac>
 8003812:	e0a7      	b.n	8003964 <_vfiprintf_r+0x1fc>
 8003814:	2201      	movs	r2, #1
 8003816:	2153      	movs	r1, #83	@ 0x53
 8003818:	2300      	movs	r3, #0
 800381a:	4252      	negs	r2, r2
 800381c:	9207      	str	r2, [sp, #28]
 800381e:	aa02      	add	r2, sp, #8
 8003820:	1852      	adds	r2, r2, r1
 8003822:	1c66      	adds	r6, r4, #1
 8003824:	9306      	str	r3, [sp, #24]
 8003826:	9309      	str	r3, [sp, #36]	@ 0x24
 8003828:	9308      	str	r3, [sp, #32]
 800382a:	7013      	strb	r3, [r2, #0]
 800382c:	931c      	str	r3, [sp, #112]	@ 0x70
 800382e:	4f59      	ldr	r7, [pc, #356]	@ (8003994 <_vfiprintf_r+0x22c>)
 8003830:	7831      	ldrb	r1, [r6, #0]
 8003832:	2205      	movs	r2, #5
 8003834:	0038      	movs	r0, r7
 8003836:	f7ff ff09 	bl	800364c <memchr>
 800383a:	1c74      	adds	r4, r6, #1
 800383c:	9906      	ldr	r1, [sp, #24]
 800383e:	ab06      	add	r3, sp, #24
 8003840:	2800      	cmp	r0, #0
 8003842:	d11f      	bne.n	8003884 <_vfiprintf_r+0x11c>
 8003844:	06ca      	lsls	r2, r1, #27
 8003846:	d504      	bpl.n	8003852 <_vfiprintf_r+0xea>
 8003848:	2753      	movs	r7, #83	@ 0x53
 800384a:	2220      	movs	r2, #32
 800384c:	a802      	add	r0, sp, #8
 800384e:	19c0      	adds	r0, r0, r7
 8003850:	7002      	strb	r2, [r0, #0]
 8003852:	070a      	lsls	r2, r1, #28
 8003854:	d504      	bpl.n	8003860 <_vfiprintf_r+0xf8>
 8003856:	2753      	movs	r7, #83	@ 0x53
 8003858:	222b      	movs	r2, #43	@ 0x2b
 800385a:	a802      	add	r0, sp, #8
 800385c:	19c0      	adds	r0, r0, r7
 800385e:	7002      	strb	r2, [r0, #0]
 8003860:	7832      	ldrb	r2, [r6, #0]
 8003862:	2a2a      	cmp	r2, #42	@ 0x2a
 8003864:	d015      	beq.n	8003892 <_vfiprintf_r+0x12a>
 8003866:	0034      	movs	r4, r6
 8003868:	2000      	movs	r0, #0
 800386a:	270a      	movs	r7, #10
 800386c:	68da      	ldr	r2, [r3, #12]
 800386e:	7821      	ldrb	r1, [r4, #0]
 8003870:	1c66      	adds	r6, r4, #1
 8003872:	3930      	subs	r1, #48	@ 0x30
 8003874:	2909      	cmp	r1, #9
 8003876:	d950      	bls.n	800391a <_vfiprintf_r+0x1b2>
 8003878:	2800      	cmp	r0, #0
 800387a:	d011      	beq.n	80038a0 <_vfiprintf_r+0x138>
 800387c:	9209      	str	r2, [sp, #36]	@ 0x24
 800387e:	e00f      	b.n	80038a0 <_vfiprintf_r+0x138>
 8003880:	3401      	adds	r4, #1
 8003882:	e7af      	b.n	80037e4 <_vfiprintf_r+0x7c>
 8003884:	2301      	movs	r3, #1
 8003886:	1bc0      	subs	r0, r0, r7
 8003888:	4083      	lsls	r3, r0
 800388a:	430b      	orrs	r3, r1
 800388c:	0026      	movs	r6, r4
 800388e:	9306      	str	r3, [sp, #24]
 8003890:	e7cd      	b.n	800382e <_vfiprintf_r+0xc6>
 8003892:	9a05      	ldr	r2, [sp, #20]
 8003894:	1d10      	adds	r0, r2, #4
 8003896:	6812      	ldr	r2, [r2, #0]
 8003898:	9005      	str	r0, [sp, #20]
 800389a:	2a00      	cmp	r2, #0
 800389c:	db37      	blt.n	800390e <_vfiprintf_r+0x1a6>
 800389e:	60da      	str	r2, [r3, #12]
 80038a0:	7822      	ldrb	r2, [r4, #0]
 80038a2:	2a2e      	cmp	r2, #46	@ 0x2e
 80038a4:	d10c      	bne.n	80038c0 <_vfiprintf_r+0x158>
 80038a6:	7862      	ldrb	r2, [r4, #1]
 80038a8:	2a2a      	cmp	r2, #42	@ 0x2a
 80038aa:	d13b      	bne.n	8003924 <_vfiprintf_r+0x1bc>
 80038ac:	9a05      	ldr	r2, [sp, #20]
 80038ae:	3402      	adds	r4, #2
 80038b0:	1d11      	adds	r1, r2, #4
 80038b2:	6812      	ldr	r2, [r2, #0]
 80038b4:	9105      	str	r1, [sp, #20]
 80038b6:	2a00      	cmp	r2, #0
 80038b8:	da01      	bge.n	80038be <_vfiprintf_r+0x156>
 80038ba:	2201      	movs	r2, #1
 80038bc:	4252      	negs	r2, r2
 80038be:	605a      	str	r2, [r3, #4]
 80038c0:	4e35      	ldr	r6, [pc, #212]	@ (8003998 <_vfiprintf_r+0x230>)
 80038c2:	2203      	movs	r2, #3
 80038c4:	0030      	movs	r0, r6
 80038c6:	7821      	ldrb	r1, [r4, #0]
 80038c8:	f7ff fec0 	bl	800364c <memchr>
 80038cc:	af06      	add	r7, sp, #24
 80038ce:	2800      	cmp	r0, #0
 80038d0:	d006      	beq.n	80038e0 <_vfiprintf_r+0x178>
 80038d2:	2340      	movs	r3, #64	@ 0x40
 80038d4:	1b80      	subs	r0, r0, r6
 80038d6:	4083      	lsls	r3, r0
 80038d8:	9a06      	ldr	r2, [sp, #24]
 80038da:	3401      	adds	r4, #1
 80038dc:	4313      	orrs	r3, r2
 80038de:	9306      	str	r3, [sp, #24]
 80038e0:	7821      	ldrb	r1, [r4, #0]
 80038e2:	2206      	movs	r2, #6
 80038e4:	482d      	ldr	r0, [pc, #180]	@ (800399c <_vfiprintf_r+0x234>)
 80038e6:	1c66      	adds	r6, r4, #1
 80038e8:	7639      	strb	r1, [r7, #24]
 80038ea:	f7ff feaf 	bl	800364c <memchr>
 80038ee:	2800      	cmp	r0, #0
 80038f0:	d047      	beq.n	8003982 <_vfiprintf_r+0x21a>
 80038f2:	4b2b      	ldr	r3, [pc, #172]	@ (80039a0 <_vfiprintf_r+0x238>)
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d129      	bne.n	800394c <_vfiprintf_r+0x1e4>
 80038f8:	2207      	movs	r2, #7
 80038fa:	9b05      	ldr	r3, [sp, #20]
 80038fc:	3307      	adds	r3, #7
 80038fe:	4393      	bics	r3, r2
 8003900:	3308      	adds	r3, #8
 8003902:	9305      	str	r3, [sp, #20]
 8003904:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003906:	9903      	ldr	r1, [sp, #12]
 8003908:	185b      	adds	r3, r3, r1
 800390a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800390c:	e769      	b.n	80037e2 <_vfiprintf_r+0x7a>
 800390e:	4252      	negs	r2, r2
 8003910:	60da      	str	r2, [r3, #12]
 8003912:	2202      	movs	r2, #2
 8003914:	430a      	orrs	r2, r1
 8003916:	9206      	str	r2, [sp, #24]
 8003918:	e7c2      	b.n	80038a0 <_vfiprintf_r+0x138>
 800391a:	437a      	muls	r2, r7
 800391c:	0034      	movs	r4, r6
 800391e:	2001      	movs	r0, #1
 8003920:	1852      	adds	r2, r2, r1
 8003922:	e7a4      	b.n	800386e <_vfiprintf_r+0x106>
 8003924:	2200      	movs	r2, #0
 8003926:	200a      	movs	r0, #10
 8003928:	605a      	str	r2, [r3, #4]
 800392a:	0011      	movs	r1, r2
 800392c:	0013      	movs	r3, r2
 800392e:	3401      	adds	r4, #1
 8003930:	7822      	ldrb	r2, [r4, #0]
 8003932:	1c66      	adds	r6, r4, #1
 8003934:	3a30      	subs	r2, #48	@ 0x30
 8003936:	2a09      	cmp	r2, #9
 8003938:	d903      	bls.n	8003942 <_vfiprintf_r+0x1da>
 800393a:	2b00      	cmp	r3, #0
 800393c:	d0c0      	beq.n	80038c0 <_vfiprintf_r+0x158>
 800393e:	9107      	str	r1, [sp, #28]
 8003940:	e7be      	b.n	80038c0 <_vfiprintf_r+0x158>
 8003942:	4341      	muls	r1, r0
 8003944:	0034      	movs	r4, r6
 8003946:	2301      	movs	r3, #1
 8003948:	1889      	adds	r1, r1, r2
 800394a:	e7f1      	b.n	8003930 <_vfiprintf_r+0x1c8>
 800394c:	aa05      	add	r2, sp, #20
 800394e:	9200      	str	r2, [sp, #0]
 8003950:	0039      	movs	r1, r7
 8003952:	002a      	movs	r2, r5
 8003954:	4b13      	ldr	r3, [pc, #76]	@ (80039a4 <_vfiprintf_r+0x23c>)
 8003956:	9802      	ldr	r0, [sp, #8]
 8003958:	e000      	b.n	800395c <_vfiprintf_r+0x1f4>
 800395a:	bf00      	nop
 800395c:	9003      	str	r0, [sp, #12]
 800395e:	9b03      	ldr	r3, [sp, #12]
 8003960:	3301      	adds	r3, #1
 8003962:	d1cf      	bne.n	8003904 <_vfiprintf_r+0x19c>
 8003964:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003966:	07db      	lsls	r3, r3, #31
 8003968:	d405      	bmi.n	8003976 <_vfiprintf_r+0x20e>
 800396a:	89ab      	ldrh	r3, [r5, #12]
 800396c:	059b      	lsls	r3, r3, #22
 800396e:	d402      	bmi.n	8003976 <_vfiprintf_r+0x20e>
 8003970:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003972:	f7ff f8e5 	bl	8002b40 <__retarget_lock_release_recursive>
 8003976:	89ab      	ldrh	r3, [r5, #12]
 8003978:	065b      	lsls	r3, r3, #25
 800397a:	d500      	bpl.n	800397e <_vfiprintf_r+0x216>
 800397c:	e719      	b.n	80037b2 <_vfiprintf_r+0x4a>
 800397e:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8003980:	e719      	b.n	80037b6 <_vfiprintf_r+0x4e>
 8003982:	aa05      	add	r2, sp, #20
 8003984:	9200      	str	r2, [sp, #0]
 8003986:	0039      	movs	r1, r7
 8003988:	002a      	movs	r2, r5
 800398a:	4b06      	ldr	r3, [pc, #24]	@ (80039a4 <_vfiprintf_r+0x23c>)
 800398c:	9802      	ldr	r0, [sp, #8]
 800398e:	f7ff fb8d 	bl	80030ac <_printf_i>
 8003992:	e7e3      	b.n	800395c <_vfiprintf_r+0x1f4>
 8003994:	080078c8 	.word	0x080078c8
 8003998:	080078ce 	.word	0x080078ce
 800399c:	080078d2 	.word	0x080078d2
 80039a0:	00000000 	.word	0x00000000
 80039a4:	08003743 	.word	0x08003743

080039a8 <_malloc_usable_size_r>:
 80039a8:	1f0b      	subs	r3, r1, #4
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	1f18      	subs	r0, r3, #4
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	da01      	bge.n	80039b6 <_malloc_usable_size_r+0xe>
 80039b2:	580b      	ldr	r3, [r1, r0]
 80039b4:	18c0      	adds	r0, r0, r3
 80039b6:	4770      	bx	lr

080039b8 <__swbuf_r>:
 80039b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039ba:	0006      	movs	r6, r0
 80039bc:	000d      	movs	r5, r1
 80039be:	0014      	movs	r4, r2
 80039c0:	2800      	cmp	r0, #0
 80039c2:	d004      	beq.n	80039ce <__swbuf_r+0x16>
 80039c4:	6a03      	ldr	r3, [r0, #32]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d101      	bne.n	80039ce <__swbuf_r+0x16>
 80039ca:	f7ff f835 	bl	8002a38 <__sinit>
 80039ce:	69a3      	ldr	r3, [r4, #24]
 80039d0:	60a3      	str	r3, [r4, #8]
 80039d2:	89a3      	ldrh	r3, [r4, #12]
 80039d4:	071b      	lsls	r3, r3, #28
 80039d6:	d502      	bpl.n	80039de <__swbuf_r+0x26>
 80039d8:	6923      	ldr	r3, [r4, #16]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d109      	bne.n	80039f2 <__swbuf_r+0x3a>
 80039de:	0021      	movs	r1, r4
 80039e0:	0030      	movs	r0, r6
 80039e2:	f000 f82b 	bl	8003a3c <__swsetup_r>
 80039e6:	2800      	cmp	r0, #0
 80039e8:	d003      	beq.n	80039f2 <__swbuf_r+0x3a>
 80039ea:	2501      	movs	r5, #1
 80039ec:	426d      	negs	r5, r5
 80039ee:	0028      	movs	r0, r5
 80039f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039f2:	6923      	ldr	r3, [r4, #16]
 80039f4:	6820      	ldr	r0, [r4, #0]
 80039f6:	b2ef      	uxtb	r7, r5
 80039f8:	1ac0      	subs	r0, r0, r3
 80039fa:	6963      	ldr	r3, [r4, #20]
 80039fc:	b2ed      	uxtb	r5, r5
 80039fe:	4283      	cmp	r3, r0
 8003a00:	dc05      	bgt.n	8003a0e <__swbuf_r+0x56>
 8003a02:	0021      	movs	r1, r4
 8003a04:	0030      	movs	r0, r6
 8003a06:	f7ff fce7 	bl	80033d8 <_fflush_r>
 8003a0a:	2800      	cmp	r0, #0
 8003a0c:	d1ed      	bne.n	80039ea <__swbuf_r+0x32>
 8003a0e:	68a3      	ldr	r3, [r4, #8]
 8003a10:	3001      	adds	r0, #1
 8003a12:	3b01      	subs	r3, #1
 8003a14:	60a3      	str	r3, [r4, #8]
 8003a16:	6823      	ldr	r3, [r4, #0]
 8003a18:	1c5a      	adds	r2, r3, #1
 8003a1a:	6022      	str	r2, [r4, #0]
 8003a1c:	701f      	strb	r7, [r3, #0]
 8003a1e:	6963      	ldr	r3, [r4, #20]
 8003a20:	4283      	cmp	r3, r0
 8003a22:	d004      	beq.n	8003a2e <__swbuf_r+0x76>
 8003a24:	89a3      	ldrh	r3, [r4, #12]
 8003a26:	07db      	lsls	r3, r3, #31
 8003a28:	d5e1      	bpl.n	80039ee <__swbuf_r+0x36>
 8003a2a:	2d0a      	cmp	r5, #10
 8003a2c:	d1df      	bne.n	80039ee <__swbuf_r+0x36>
 8003a2e:	0021      	movs	r1, r4
 8003a30:	0030      	movs	r0, r6
 8003a32:	f7ff fcd1 	bl	80033d8 <_fflush_r>
 8003a36:	2800      	cmp	r0, #0
 8003a38:	d0d9      	beq.n	80039ee <__swbuf_r+0x36>
 8003a3a:	e7d6      	b.n	80039ea <__swbuf_r+0x32>

08003a3c <__swsetup_r>:
 8003a3c:	4b2b      	ldr	r3, [pc, #172]	@ (8003aec <__swsetup_r+0xb0>)
 8003a3e:	b570      	push	{r4, r5, r6, lr}
 8003a40:	0005      	movs	r5, r0
 8003a42:	6818      	ldr	r0, [r3, #0]
 8003a44:	000c      	movs	r4, r1
 8003a46:	2800      	cmp	r0, #0
 8003a48:	d004      	beq.n	8003a54 <__swsetup_r+0x18>
 8003a4a:	6a03      	ldr	r3, [r0, #32]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d101      	bne.n	8003a54 <__swsetup_r+0x18>
 8003a50:	f7fe fff2 	bl	8002a38 <__sinit>
 8003a54:	220c      	movs	r2, #12
 8003a56:	5ea3      	ldrsh	r3, [r4, r2]
 8003a58:	071a      	lsls	r2, r3, #28
 8003a5a:	d422      	bmi.n	8003aa2 <__swsetup_r+0x66>
 8003a5c:	06da      	lsls	r2, r3, #27
 8003a5e:	d407      	bmi.n	8003a70 <__swsetup_r+0x34>
 8003a60:	2209      	movs	r2, #9
 8003a62:	602a      	str	r2, [r5, #0]
 8003a64:	3237      	adds	r2, #55	@ 0x37
 8003a66:	2001      	movs	r0, #1
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	81a3      	strh	r3, [r4, #12]
 8003a6c:	4240      	negs	r0, r0
 8003a6e:	bd70      	pop	{r4, r5, r6, pc}
 8003a70:	075a      	lsls	r2, r3, #29
 8003a72:	d513      	bpl.n	8003a9c <__swsetup_r+0x60>
 8003a74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003a76:	2900      	cmp	r1, #0
 8003a78:	d008      	beq.n	8003a8c <__swsetup_r+0x50>
 8003a7a:	0023      	movs	r3, r4
 8003a7c:	3344      	adds	r3, #68	@ 0x44
 8003a7e:	4299      	cmp	r1, r3
 8003a80:	d002      	beq.n	8003a88 <__swsetup_r+0x4c>
 8003a82:	0028      	movs	r0, r5
 8003a84:	f7ff fdfe 	bl	8003684 <_free_r>
 8003a88:	2300      	movs	r3, #0
 8003a8a:	6363      	str	r3, [r4, #52]	@ 0x34
 8003a8c:	2224      	movs	r2, #36	@ 0x24
 8003a8e:	89a3      	ldrh	r3, [r4, #12]
 8003a90:	4393      	bics	r3, r2
 8003a92:	2200      	movs	r2, #0
 8003a94:	6062      	str	r2, [r4, #4]
 8003a96:	6922      	ldr	r2, [r4, #16]
 8003a98:	b21b      	sxth	r3, r3
 8003a9a:	6022      	str	r2, [r4, #0]
 8003a9c:	2208      	movs	r2, #8
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	81a3      	strh	r3, [r4, #12]
 8003aa2:	6922      	ldr	r2, [r4, #16]
 8003aa4:	2a00      	cmp	r2, #0
 8003aa6:	d107      	bne.n	8003ab8 <__swsetup_r+0x7c>
 8003aa8:	059a      	lsls	r2, r3, #22
 8003aaa:	d501      	bpl.n	8003ab0 <__swsetup_r+0x74>
 8003aac:	061b      	lsls	r3, r3, #24
 8003aae:	d503      	bpl.n	8003ab8 <__swsetup_r+0x7c>
 8003ab0:	0021      	movs	r1, r4
 8003ab2:	0028      	movs	r0, r5
 8003ab4:	f000 f846 	bl	8003b44 <__smakebuf_r>
 8003ab8:	230c      	movs	r3, #12
 8003aba:	5ee2      	ldrsh	r2, [r4, r3]
 8003abc:	2101      	movs	r1, #1
 8003abe:	0013      	movs	r3, r2
 8003ac0:	400b      	ands	r3, r1
 8003ac2:	420a      	tst	r2, r1
 8003ac4:	d00c      	beq.n	8003ae0 <__swsetup_r+0xa4>
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	60a3      	str	r3, [r4, #8]
 8003aca:	6963      	ldr	r3, [r4, #20]
 8003acc:	425b      	negs	r3, r3
 8003ace:	61a3      	str	r3, [r4, #24]
 8003ad0:	2000      	movs	r0, #0
 8003ad2:	6923      	ldr	r3, [r4, #16]
 8003ad4:	4283      	cmp	r3, r0
 8003ad6:	d1ca      	bne.n	8003a6e <__swsetup_r+0x32>
 8003ad8:	0613      	lsls	r3, r2, #24
 8003ada:	d5c8      	bpl.n	8003a6e <__swsetup_r+0x32>
 8003adc:	2340      	movs	r3, #64	@ 0x40
 8003ade:	e7c2      	b.n	8003a66 <__swsetup_r+0x2a>
 8003ae0:	0791      	lsls	r1, r2, #30
 8003ae2:	d400      	bmi.n	8003ae6 <__swsetup_r+0xaa>
 8003ae4:	6963      	ldr	r3, [r4, #20]
 8003ae6:	60a3      	str	r3, [r4, #8]
 8003ae8:	e7f2      	b.n	8003ad0 <__swsetup_r+0x94>
 8003aea:	46c0      	nop			@ (mov r8, r8)
 8003aec:	20000018 	.word	0x20000018

08003af0 <__swhatbuf_r>:
 8003af0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003af2:	000e      	movs	r6, r1
 8003af4:	001d      	movs	r5, r3
 8003af6:	230e      	movs	r3, #14
 8003af8:	5ec9      	ldrsh	r1, [r1, r3]
 8003afa:	0014      	movs	r4, r2
 8003afc:	b097      	sub	sp, #92	@ 0x5c
 8003afe:	2900      	cmp	r1, #0
 8003b00:	da0c      	bge.n	8003b1c <__swhatbuf_r+0x2c>
 8003b02:	89b2      	ldrh	r2, [r6, #12]
 8003b04:	2380      	movs	r3, #128	@ 0x80
 8003b06:	0011      	movs	r1, r2
 8003b08:	4019      	ands	r1, r3
 8003b0a:	421a      	tst	r2, r3
 8003b0c:	d114      	bne.n	8003b38 <__swhatbuf_r+0x48>
 8003b0e:	2380      	movs	r3, #128	@ 0x80
 8003b10:	00db      	lsls	r3, r3, #3
 8003b12:	2000      	movs	r0, #0
 8003b14:	6029      	str	r1, [r5, #0]
 8003b16:	6023      	str	r3, [r4, #0]
 8003b18:	b017      	add	sp, #92	@ 0x5c
 8003b1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b1c:	466a      	mov	r2, sp
 8003b1e:	f000 f8a5 	bl	8003c6c <_fstat_r>
 8003b22:	2800      	cmp	r0, #0
 8003b24:	dbed      	blt.n	8003b02 <__swhatbuf_r+0x12>
 8003b26:	23f0      	movs	r3, #240	@ 0xf0
 8003b28:	9901      	ldr	r1, [sp, #4]
 8003b2a:	021b      	lsls	r3, r3, #8
 8003b2c:	4019      	ands	r1, r3
 8003b2e:	4b04      	ldr	r3, [pc, #16]	@ (8003b40 <__swhatbuf_r+0x50>)
 8003b30:	18c9      	adds	r1, r1, r3
 8003b32:	424b      	negs	r3, r1
 8003b34:	4159      	adcs	r1, r3
 8003b36:	e7ea      	b.n	8003b0e <__swhatbuf_r+0x1e>
 8003b38:	2100      	movs	r1, #0
 8003b3a:	2340      	movs	r3, #64	@ 0x40
 8003b3c:	e7e9      	b.n	8003b12 <__swhatbuf_r+0x22>
 8003b3e:	46c0      	nop			@ (mov r8, r8)
 8003b40:	ffffe000 	.word	0xffffe000

08003b44 <__smakebuf_r>:
 8003b44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b46:	2602      	movs	r6, #2
 8003b48:	898b      	ldrh	r3, [r1, #12]
 8003b4a:	0005      	movs	r5, r0
 8003b4c:	000c      	movs	r4, r1
 8003b4e:	4233      	tst	r3, r6
 8003b50:	d006      	beq.n	8003b60 <__smakebuf_r+0x1c>
 8003b52:	0023      	movs	r3, r4
 8003b54:	3347      	adds	r3, #71	@ 0x47
 8003b56:	6023      	str	r3, [r4, #0]
 8003b58:	6123      	str	r3, [r4, #16]
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	6163      	str	r3, [r4, #20]
 8003b5e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8003b60:	466a      	mov	r2, sp
 8003b62:	ab01      	add	r3, sp, #4
 8003b64:	f7ff ffc4 	bl	8003af0 <__swhatbuf_r>
 8003b68:	9f00      	ldr	r7, [sp, #0]
 8003b6a:	0028      	movs	r0, r5
 8003b6c:	0039      	movs	r1, r7
 8003b6e:	f7ff f9ad 	bl	8002ecc <_malloc_r>
 8003b72:	220c      	movs	r2, #12
 8003b74:	5ea3      	ldrsh	r3, [r4, r2]
 8003b76:	2800      	cmp	r0, #0
 8003b78:	d106      	bne.n	8003b88 <__smakebuf_r+0x44>
 8003b7a:	059a      	lsls	r2, r3, #22
 8003b7c:	d4ef      	bmi.n	8003b5e <__smakebuf_r+0x1a>
 8003b7e:	2203      	movs	r2, #3
 8003b80:	4393      	bics	r3, r2
 8003b82:	431e      	orrs	r6, r3
 8003b84:	81a6      	strh	r6, [r4, #12]
 8003b86:	e7e4      	b.n	8003b52 <__smakebuf_r+0xe>
 8003b88:	2280      	movs	r2, #128	@ 0x80
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	81a3      	strh	r3, [r4, #12]
 8003b8e:	9b01      	ldr	r3, [sp, #4]
 8003b90:	6020      	str	r0, [r4, #0]
 8003b92:	6120      	str	r0, [r4, #16]
 8003b94:	6167      	str	r7, [r4, #20]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d0e1      	beq.n	8003b5e <__smakebuf_r+0x1a>
 8003b9a:	0028      	movs	r0, r5
 8003b9c:	230e      	movs	r3, #14
 8003b9e:	5ee1      	ldrsh	r1, [r4, r3]
 8003ba0:	f000 f83c 	bl	8003c1c <_isatty_r>
 8003ba4:	2800      	cmp	r0, #0
 8003ba6:	d0da      	beq.n	8003b5e <__smakebuf_r+0x1a>
 8003ba8:	2303      	movs	r3, #3
 8003baa:	89a2      	ldrh	r2, [r4, #12]
 8003bac:	439a      	bics	r2, r3
 8003bae:	3b02      	subs	r3, #2
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	81a3      	strh	r3, [r4, #12]
 8003bb4:	e7d3      	b.n	8003b5e <__smakebuf_r+0x1a>

08003bb6 <_raise_r>:
 8003bb6:	b570      	push	{r4, r5, r6, lr}
 8003bb8:	0004      	movs	r4, r0
 8003bba:	000d      	movs	r5, r1
 8003bbc:	291f      	cmp	r1, #31
 8003bbe:	d904      	bls.n	8003bca <_raise_r+0x14>
 8003bc0:	2316      	movs	r3, #22
 8003bc2:	6003      	str	r3, [r0, #0]
 8003bc4:	2001      	movs	r0, #1
 8003bc6:	4240      	negs	r0, r0
 8003bc8:	bd70      	pop	{r4, r5, r6, pc}
 8003bca:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d004      	beq.n	8003bda <_raise_r+0x24>
 8003bd0:	008a      	lsls	r2, r1, #2
 8003bd2:	189b      	adds	r3, r3, r2
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	2a00      	cmp	r2, #0
 8003bd8:	d108      	bne.n	8003bec <_raise_r+0x36>
 8003bda:	0020      	movs	r0, r4
 8003bdc:	f000 f842 	bl	8003c64 <_getpid_r>
 8003be0:	002a      	movs	r2, r5
 8003be2:	0001      	movs	r1, r0
 8003be4:	0020      	movs	r0, r4
 8003be6:	f000 f82b 	bl	8003c40 <_kill_r>
 8003bea:	e7ed      	b.n	8003bc8 <_raise_r+0x12>
 8003bec:	2a01      	cmp	r2, #1
 8003bee:	d009      	beq.n	8003c04 <_raise_r+0x4e>
 8003bf0:	1c51      	adds	r1, r2, #1
 8003bf2:	d103      	bne.n	8003bfc <_raise_r+0x46>
 8003bf4:	2316      	movs	r3, #22
 8003bf6:	6003      	str	r3, [r0, #0]
 8003bf8:	2001      	movs	r0, #1
 8003bfa:	e7e5      	b.n	8003bc8 <_raise_r+0x12>
 8003bfc:	2100      	movs	r1, #0
 8003bfe:	0028      	movs	r0, r5
 8003c00:	6019      	str	r1, [r3, #0]
 8003c02:	4790      	blx	r2
 8003c04:	2000      	movs	r0, #0
 8003c06:	e7df      	b.n	8003bc8 <_raise_r+0x12>

08003c08 <raise>:
 8003c08:	b510      	push	{r4, lr}
 8003c0a:	4b03      	ldr	r3, [pc, #12]	@ (8003c18 <raise+0x10>)
 8003c0c:	0001      	movs	r1, r0
 8003c0e:	6818      	ldr	r0, [r3, #0]
 8003c10:	f7ff ffd1 	bl	8003bb6 <_raise_r>
 8003c14:	bd10      	pop	{r4, pc}
 8003c16:	46c0      	nop			@ (mov r8, r8)
 8003c18:	20000018 	.word	0x20000018

08003c1c <_isatty_r>:
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	b570      	push	{r4, r5, r6, lr}
 8003c20:	4d06      	ldr	r5, [pc, #24]	@ (8003c3c <_isatty_r+0x20>)
 8003c22:	0004      	movs	r4, r0
 8003c24:	0008      	movs	r0, r1
 8003c26:	602b      	str	r3, [r5, #0]
 8003c28:	f7fe fd7c 	bl	8002724 <_isatty>
 8003c2c:	1c43      	adds	r3, r0, #1
 8003c2e:	d103      	bne.n	8003c38 <_isatty_r+0x1c>
 8003c30:	682b      	ldr	r3, [r5, #0]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d000      	beq.n	8003c38 <_isatty_r+0x1c>
 8003c36:	6023      	str	r3, [r4, #0]
 8003c38:	bd70      	pop	{r4, r5, r6, pc}
 8003c3a:	46c0      	nop			@ (mov r8, r8)
 8003c3c:	200004ec 	.word	0x200004ec

08003c40 <_kill_r>:
 8003c40:	2300      	movs	r3, #0
 8003c42:	b570      	push	{r4, r5, r6, lr}
 8003c44:	4d06      	ldr	r5, [pc, #24]	@ (8003c60 <_kill_r+0x20>)
 8003c46:	0004      	movs	r4, r0
 8003c48:	0008      	movs	r0, r1
 8003c4a:	0011      	movs	r1, r2
 8003c4c:	602b      	str	r3, [r5, #0]
 8003c4e:	f7fe fd37 	bl	80026c0 <_kill>
 8003c52:	1c43      	adds	r3, r0, #1
 8003c54:	d103      	bne.n	8003c5e <_kill_r+0x1e>
 8003c56:	682b      	ldr	r3, [r5, #0]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d000      	beq.n	8003c5e <_kill_r+0x1e>
 8003c5c:	6023      	str	r3, [r4, #0]
 8003c5e:	bd70      	pop	{r4, r5, r6, pc}
 8003c60:	200004ec 	.word	0x200004ec

08003c64 <_getpid_r>:
 8003c64:	b510      	push	{r4, lr}
 8003c66:	f7fe fd29 	bl	80026bc <_getpid>
 8003c6a:	bd10      	pop	{r4, pc}

08003c6c <_fstat_r>:
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	b570      	push	{r4, r5, r6, lr}
 8003c70:	4d06      	ldr	r5, [pc, #24]	@ (8003c8c <_fstat_r+0x20>)
 8003c72:	0004      	movs	r4, r0
 8003c74:	0008      	movs	r0, r1
 8003c76:	0011      	movs	r1, r2
 8003c78:	602b      	str	r3, [r5, #0]
 8003c7a:	f7fe fd4e 	bl	800271a <_fstat>
 8003c7e:	1c43      	adds	r3, r0, #1
 8003c80:	d103      	bne.n	8003c8a <_fstat_r+0x1e>
 8003c82:	682b      	ldr	r3, [r5, #0]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d000      	beq.n	8003c8a <_fstat_r+0x1e>
 8003c88:	6023      	str	r3, [r4, #0]
 8003c8a:	bd70      	pop	{r4, r5, r6, pc}
 8003c8c:	200004ec 	.word	0x200004ec

08003c90 <lround>:
 8003c90:	b570      	push	{r4, r5, r6, lr}
 8003c92:	000d      	movs	r5, r1
 8003c94:	0004      	movs	r4, r0
 8003c96:	43c8      	mvns	r0, r1
 8003c98:	2102      	movs	r1, #2
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	9400      	str	r4, [sp, #0]
 8003c9e:	9501      	str	r5, [sp, #4]
 8003ca0:	2480      	movs	r4, #128	@ 0x80
 8003ca2:	17c0      	asrs	r0, r0, #31
 8003ca4:	4008      	ands	r0, r1
 8003ca6:	4b1d      	ldr	r3, [pc, #116]	@ (8003d1c <lround+0x8c>)
 8003ca8:	0069      	lsls	r1, r5, #1
 8003caa:	0d49      	lsrs	r1, r1, #21
 8003cac:	032d      	lsls	r5, r5, #12
 8003cae:	0b2d      	lsrs	r5, r5, #12
 8003cb0:	0364      	lsls	r4, r4, #13
 8003cb2:	18ce      	adds	r6, r1, r3
 8003cb4:	3801      	subs	r0, #1
 8003cb6:	432c      	orrs	r4, r5
 8003cb8:	2e13      	cmp	r6, #19
 8003cba:	dc0b      	bgt.n	8003cd4 <lround+0x44>
 8003cbc:	2e00      	cmp	r6, #0
 8003cbe:	db20      	blt.n	8003d02 <lround+0x72>
 8003cc0:	2380      	movs	r3, #128	@ 0x80
 8003cc2:	031b      	lsls	r3, r3, #12
 8003cc4:	4133      	asrs	r3, r6
 8003cc6:	191c      	adds	r4, r3, r4
 8003cc8:	2314      	movs	r3, #20
 8003cca:	1b9b      	subs	r3, r3, r6
 8003ccc:	40dc      	lsrs	r4, r3
 8003cce:	4360      	muls	r0, r4
 8003cd0:	b002      	add	sp, #8
 8003cd2:	bd70      	pop	{r4, r5, r6, pc}
 8003cd4:	2e1e      	cmp	r6, #30
 8003cd6:	d81c      	bhi.n	8003d12 <lround+0x82>
 8003cd8:	4b11      	ldr	r3, [pc, #68]	@ (8003d20 <lround+0x90>)
 8003cda:	9d00      	ldr	r5, [sp, #0]
 8003cdc:	469c      	mov	ip, r3
 8003cde:	2380      	movs	r3, #128	@ 0x80
 8003ce0:	4461      	add	r1, ip
 8003ce2:	061b      	lsls	r3, r3, #24
 8003ce4:	46ac      	mov	ip, r5
 8003ce6:	40cb      	lsrs	r3, r1
 8003ce8:	4463      	add	r3, ip
 8003cea:	42ab      	cmp	r3, r5
 8003cec:	41ad      	sbcs	r5, r5
 8003cee:	2234      	movs	r2, #52	@ 0x34
 8003cf0:	426d      	negs	r5, r5
 8003cf2:	1964      	adds	r4, r4, r5
 8003cf4:	408c      	lsls	r4, r1
 8003cf6:	1b92      	subs	r2, r2, r6
 8003cf8:	2a20      	cmp	r2, #32
 8003cfa:	d0e8      	beq.n	8003cce <lround+0x3e>
 8003cfc:	40d3      	lsrs	r3, r2
 8003cfe:	431c      	orrs	r4, r3
 8003d00:	e7e5      	b.n	8003cce <lround+0x3e>
 8003d02:	4b08      	ldr	r3, [pc, #32]	@ (8003d24 <lround+0x94>)
 8003d04:	469c      	mov	ip, r3
 8003d06:	4461      	add	r1, ip
 8003d08:	424b      	negs	r3, r1
 8003d0a:	4159      	adcs	r1, r3
 8003d0c:	4249      	negs	r1, r1
 8003d0e:	4008      	ands	r0, r1
 8003d10:	e7de      	b.n	8003cd0 <lround+0x40>
 8003d12:	9800      	ldr	r0, [sp, #0]
 8003d14:	9901      	ldr	r1, [sp, #4]
 8003d16:	f003 fc91 	bl	800763c <__aeabi_d2iz>
 8003d1a:	e7d9      	b.n	8003cd0 <lround+0x40>
 8003d1c:	fffffc01 	.word	0xfffffc01
 8003d20:	fffffbed 	.word	0xfffffbed
 8003d24:	fffffc02 	.word	0xfffffc02

08003d28 <log>:
 8003d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d2a:	0004      	movs	r4, r0
 8003d2c:	000d      	movs	r5, r1
 8003d2e:	f000 f9a9 	bl	8004084 <__ieee754_log>
 8003d32:	0022      	movs	r2, r4
 8003d34:	0006      	movs	r6, r0
 8003d36:	000f      	movs	r7, r1
 8003d38:	002b      	movs	r3, r5
 8003d3a:	0020      	movs	r0, r4
 8003d3c:	0029      	movs	r1, r5
 8003d3e:	f003 fc5b 	bl	80075f8 <__aeabi_dcmpun>
 8003d42:	2800      	cmp	r0, #0
 8003d44:	d115      	bne.n	8003d72 <log+0x4a>
 8003d46:	2200      	movs	r2, #0
 8003d48:	2300      	movs	r3, #0
 8003d4a:	0020      	movs	r0, r4
 8003d4c:	0029      	movs	r1, r5
 8003d4e:	f7fc fb69 	bl	8000424 <__aeabi_dcmpgt>
 8003d52:	2800      	cmp	r0, #0
 8003d54:	d10d      	bne.n	8003d72 <log+0x4a>
 8003d56:	2200      	movs	r2, #0
 8003d58:	2300      	movs	r3, #0
 8003d5a:	0020      	movs	r0, r4
 8003d5c:	0029      	movs	r1, r5
 8003d5e:	f7fc fb47 	bl	80003f0 <__aeabi_dcmpeq>
 8003d62:	2800      	cmp	r0, #0
 8003d64:	d008      	beq.n	8003d78 <log+0x50>
 8003d66:	f7fe fea3 	bl	8002ab0 <__errno>
 8003d6a:	2322      	movs	r3, #34	@ 0x22
 8003d6c:	2600      	movs	r6, #0
 8003d6e:	4f07      	ldr	r7, [pc, #28]	@ (8003d8c <log+0x64>)
 8003d70:	6003      	str	r3, [r0, #0]
 8003d72:	0030      	movs	r0, r6
 8003d74:	0039      	movs	r1, r7
 8003d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d78:	f7fe fe9a 	bl	8002ab0 <__errno>
 8003d7c:	2321      	movs	r3, #33	@ 0x21
 8003d7e:	6003      	str	r3, [r0, #0]
 8003d80:	4803      	ldr	r0, [pc, #12]	@ (8003d90 <log+0x68>)
 8003d82:	f000 f979 	bl	8004078 <nan>
 8003d86:	0006      	movs	r6, r0
 8003d88:	000f      	movs	r7, r1
 8003d8a:	e7f2      	b.n	8003d72 <log+0x4a>
 8003d8c:	fff00000 	.word	0xfff00000
 8003d90:	0800773c 	.word	0x0800773c

08003d94 <sqrt>:
 8003d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d96:	0004      	movs	r4, r0
 8003d98:	000d      	movs	r5, r1
 8003d9a:	f000 f867 	bl	8003e6c <__ieee754_sqrt>
 8003d9e:	0022      	movs	r2, r4
 8003da0:	0006      	movs	r6, r0
 8003da2:	000f      	movs	r7, r1
 8003da4:	002b      	movs	r3, r5
 8003da6:	0020      	movs	r0, r4
 8003da8:	0029      	movs	r1, r5
 8003daa:	f003 fc25 	bl	80075f8 <__aeabi_dcmpun>
 8003dae:	2800      	cmp	r0, #0
 8003db0:	d107      	bne.n	8003dc2 <sqrt+0x2e>
 8003db2:	2200      	movs	r2, #0
 8003db4:	2300      	movs	r3, #0
 8003db6:	0020      	movs	r0, r4
 8003db8:	0029      	movs	r1, r5
 8003dba:	f7fc fb1f 	bl	80003fc <__aeabi_dcmplt>
 8003dbe:	2800      	cmp	r0, #0
 8003dc0:	d102      	bne.n	8003dc8 <sqrt+0x34>
 8003dc2:	0030      	movs	r0, r6
 8003dc4:	0039      	movs	r1, r7
 8003dc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003dc8:	f7fe fe72 	bl	8002ab0 <__errno>
 8003dcc:	2321      	movs	r3, #33	@ 0x21
 8003dce:	2200      	movs	r2, #0
 8003dd0:	6003      	str	r3, [r0, #0]
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	0010      	movs	r0, r2
 8003dd6:	0019      	movs	r1, r3
 8003dd8:	f002 f8cc 	bl	8005f74 <__aeabi_ddiv>
 8003ddc:	0006      	movs	r6, r0
 8003dde:	000f      	movs	r7, r1
 8003de0:	e7ef      	b.n	8003dc2 <sqrt+0x2e>
 8003de2:	46c0      	nop			@ (mov r8, r8)

08003de4 <cos>:
 8003de4:	b530      	push	{r4, r5, lr}
 8003de6:	4a1f      	ldr	r2, [pc, #124]	@ (8003e64 <cos+0x80>)
 8003de8:	004b      	lsls	r3, r1, #1
 8003dea:	b087      	sub	sp, #28
 8003dec:	085b      	lsrs	r3, r3, #1
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d91d      	bls.n	8003e2e <cos+0x4a>
 8003df2:	4a1d      	ldr	r2, [pc, #116]	@ (8003e68 <cos+0x84>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d905      	bls.n	8003e04 <cos+0x20>
 8003df8:	0002      	movs	r2, r0
 8003dfa:	000b      	movs	r3, r1
 8003dfc:	f002 ffc4 	bl	8006d88 <__aeabi_dsub>
 8003e00:	b007      	add	sp, #28
 8003e02:	bd30      	pop	{r4, r5, pc}
 8003e04:	ac02      	add	r4, sp, #8
 8003e06:	0022      	movs	r2, r4
 8003e08:	f000 fb14 	bl	8004434 <__ieee754_rem_pio2>
 8003e0c:	9c04      	ldr	r4, [sp, #16]
 8003e0e:	9d05      	ldr	r5, [sp, #20]
 8003e10:	2303      	movs	r3, #3
 8003e12:	4003      	ands	r3, r0
 8003e14:	9802      	ldr	r0, [sp, #8]
 8003e16:	9903      	ldr	r1, [sp, #12]
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d015      	beq.n	8003e48 <cos+0x64>
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	d00b      	beq.n	8003e38 <cos+0x54>
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d117      	bne.n	8003e54 <cos+0x70>
 8003e24:	0022      	movs	r2, r4
 8003e26:	002b      	movs	r3, r5
 8003e28:	f001 f988 	bl	800513c <__kernel_cos>
 8003e2c:	e7e8      	b.n	8003e00 <cos+0x1c>
 8003e2e:	2200      	movs	r2, #0
 8003e30:	2300      	movs	r3, #0
 8003e32:	f001 f983 	bl	800513c <__kernel_cos>
 8003e36:	e7e3      	b.n	8003e00 <cos+0x1c>
 8003e38:	0022      	movs	r2, r4
 8003e3a:	002b      	movs	r3, r5
 8003e3c:	f001 f97e 	bl	800513c <__kernel_cos>
 8003e40:	2380      	movs	r3, #128	@ 0x80
 8003e42:	061b      	lsls	r3, r3, #24
 8003e44:	18c9      	adds	r1, r1, r3
 8003e46:	e7db      	b.n	8003e00 <cos+0x1c>
 8003e48:	9300      	str	r3, [sp, #0]
 8003e4a:	0022      	movs	r2, r4
 8003e4c:	002b      	movs	r3, r5
 8003e4e:	f001 fa89 	bl	8005364 <__kernel_sin>
 8003e52:	e7f5      	b.n	8003e40 <cos+0x5c>
 8003e54:	2301      	movs	r3, #1
 8003e56:	0022      	movs	r2, r4
 8003e58:	9300      	str	r3, [sp, #0]
 8003e5a:	002b      	movs	r3, r5
 8003e5c:	f001 fa82 	bl	8005364 <__kernel_sin>
 8003e60:	e7ce      	b.n	8003e00 <cos+0x1c>
 8003e62:	46c0      	nop			@ (mov r8, r8)
 8003e64:	3fe921fb 	.word	0x3fe921fb
 8003e68:	7fefffff 	.word	0x7fefffff

08003e6c <__ieee754_sqrt>:
 8003e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e6e:	4645      	mov	r5, r8
 8003e70:	46de      	mov	lr, fp
 8003e72:	4657      	mov	r7, sl
 8003e74:	464e      	mov	r6, r9
 8003e76:	000b      	movs	r3, r1
 8003e78:	b5e0      	push	{r5, r6, r7, lr}
 8003e7a:	000d      	movs	r5, r1
 8003e7c:	4979      	ldr	r1, [pc, #484]	@ (8004064 <__ieee754_sqrt+0x1f8>)
 8003e7e:	0004      	movs	r4, r0
 8003e80:	0002      	movs	r2, r0
 8003e82:	0008      	movs	r0, r1
 8003e84:	b083      	sub	sp, #12
 8003e86:	4028      	ands	r0, r5
 8003e88:	4288      	cmp	r0, r1
 8003e8a:	d100      	bne.n	8003e8e <__ieee754_sqrt+0x22>
 8003e8c:	e0ce      	b.n	800402c <__ieee754_sqrt+0x1c0>
 8003e8e:	2d00      	cmp	r5, #0
 8003e90:	dc00      	bgt.n	8003e94 <__ieee754_sqrt+0x28>
 8003e92:	e086      	b.n	8003fa2 <__ieee754_sqrt+0x136>
 8003e94:	152c      	asrs	r4, r5, #20
 8003e96:	d100      	bne.n	8003e9a <__ieee754_sqrt+0x2e>
 8003e98:	e096      	b.n	8003fc8 <__ieee754_sqrt+0x15c>
 8003e9a:	4973      	ldr	r1, [pc, #460]	@ (8004068 <__ieee754_sqrt+0x1fc>)
 8003e9c:	031b      	lsls	r3, r3, #12
 8003e9e:	1860      	adds	r0, r4, r1
 8003ea0:	2180      	movs	r1, #128	@ 0x80
 8003ea2:	0b1b      	lsrs	r3, r3, #12
 8003ea4:	0349      	lsls	r1, r1, #13
 8003ea6:	4319      	orrs	r1, r3
 8003ea8:	07e4      	lsls	r4, r4, #31
 8003eaa:	d403      	bmi.n	8003eb4 <__ieee754_sqrt+0x48>
 8003eac:	0fd3      	lsrs	r3, r2, #31
 8003eae:	0049      	lsls	r1, r1, #1
 8003eb0:	1859      	adds	r1, r3, r1
 8003eb2:	0052      	lsls	r2, r2, #1
 8003eb4:	1043      	asrs	r3, r0, #1
 8003eb6:	4698      	mov	r8, r3
 8003eb8:	0050      	lsls	r0, r2, #1
 8003eba:	0fd3      	lsrs	r3, r2, #31
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	0049      	lsls	r1, r1, #1
 8003ec0:	4692      	mov	sl, r2
 8003ec2:	2280      	movs	r2, #128	@ 0x80
 8003ec4:	185b      	adds	r3, r3, r1
 8003ec6:	2700      	movs	r7, #0
 8003ec8:	2116      	movs	r1, #22
 8003eca:	0392      	lsls	r2, r2, #14
 8003ecc:	18bc      	adds	r4, r7, r2
 8003ece:	429c      	cmp	r4, r3
 8003ed0:	dc02      	bgt.n	8003ed8 <__ieee754_sqrt+0x6c>
 8003ed2:	18a7      	adds	r7, r4, r2
 8003ed4:	1b1b      	subs	r3, r3, r4
 8003ed6:	4492      	add	sl, r2
 8003ed8:	0fc4      	lsrs	r4, r0, #31
 8003eda:	005b      	lsls	r3, r3, #1
 8003edc:	3901      	subs	r1, #1
 8003ede:	191b      	adds	r3, r3, r4
 8003ee0:	0040      	lsls	r0, r0, #1
 8003ee2:	0852      	lsrs	r2, r2, #1
 8003ee4:	2900      	cmp	r1, #0
 8003ee6:	d1f1      	bne.n	8003ecc <__ieee754_sqrt+0x60>
 8003ee8:	2200      	movs	r2, #0
 8003eea:	4693      	mov	fp, r2
 8003eec:	2280      	movs	r2, #128	@ 0x80
 8003eee:	2600      	movs	r6, #0
 8003ef0:	2420      	movs	r4, #32
 8003ef2:	0612      	lsls	r2, r2, #24
 8003ef4:	e00a      	b.n	8003f0c <__ieee754_sqrt+0xa0>
 8003ef6:	42bb      	cmp	r3, r7
 8003ef8:	d076      	beq.n	8003fe8 <__ieee754_sqrt+0x17c>
 8003efa:	005b      	lsls	r3, r3, #1
 8003efc:	0fc1      	lsrs	r1, r0, #31
 8003efe:	18c9      	adds	r1, r1, r3
 8003f00:	3c01      	subs	r4, #1
 8003f02:	000b      	movs	r3, r1
 8003f04:	0040      	lsls	r0, r0, #1
 8003f06:	0852      	lsrs	r2, r2, #1
 8003f08:	2c00      	cmp	r4, #0
 8003f0a:	d01a      	beq.n	8003f42 <__ieee754_sqrt+0xd6>
 8003f0c:	1991      	adds	r1, r2, r6
 8003f0e:	42bb      	cmp	r3, r7
 8003f10:	ddf1      	ble.n	8003ef6 <__ieee754_sqrt+0x8a>
 8003f12:	46b9      	mov	r9, r7
 8003f14:	188e      	adds	r6, r1, r2
 8003f16:	2900      	cmp	r1, #0
 8003f18:	da03      	bge.n	8003f22 <__ieee754_sqrt+0xb6>
 8003f1a:	43f5      	mvns	r5, r6
 8003f1c:	0fed      	lsrs	r5, r5, #31
 8003f1e:	46a9      	mov	r9, r5
 8003f20:	44b9      	add	r9, r7
 8003f22:	1bdb      	subs	r3, r3, r7
 8003f24:	4281      	cmp	r1, r0
 8003f26:	d900      	bls.n	8003f2a <__ieee754_sqrt+0xbe>
 8003f28:	3b01      	subs	r3, #1
 8003f2a:	464f      	mov	r7, r9
 8003f2c:	005b      	lsls	r3, r3, #1
 8003f2e:	1a40      	subs	r0, r0, r1
 8003f30:	0fc1      	lsrs	r1, r0, #31
 8003f32:	18c9      	adds	r1, r1, r3
 8003f34:	3c01      	subs	r4, #1
 8003f36:	4493      	add	fp, r2
 8003f38:	000b      	movs	r3, r1
 8003f3a:	0040      	lsls	r0, r0, #1
 8003f3c:	0852      	lsrs	r2, r2, #1
 8003f3e:	2c00      	cmp	r4, #0
 8003f40:	d1e4      	bne.n	8003f0c <__ieee754_sqrt+0xa0>
 8003f42:	4301      	orrs	r1, r0
 8003f44:	d05d      	beq.n	8004002 <__ieee754_sqrt+0x196>
 8003f46:	4f49      	ldr	r7, [pc, #292]	@ (800406c <__ieee754_sqrt+0x200>)
 8003f48:	4b49      	ldr	r3, [pc, #292]	@ (8004070 <__ieee754_sqrt+0x204>)
 8003f4a:	6838      	ldr	r0, [r7, #0]
 8003f4c:	6879      	ldr	r1, [r7, #4]
 8003f4e:	4699      	mov	r9, r3
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	683d      	ldr	r5, [r7, #0]
 8003f56:	687e      	ldr	r6, [r7, #4]
 8003f58:	f002 ff16 	bl	8006d88 <__aeabi_dsub>
 8003f5c:	0002      	movs	r2, r0
 8003f5e:	000b      	movs	r3, r1
 8003f60:	0028      	movs	r0, r5
 8003f62:	0031      	movs	r1, r6
 8003f64:	f7fc fa54 	bl	8000410 <__aeabi_dcmple>
 8003f68:	2800      	cmp	r0, #0
 8003f6a:	d04a      	beq.n	8004002 <__ieee754_sqrt+0x196>
 8003f6c:	6838      	ldr	r0, [r7, #0]
 8003f6e:	6879      	ldr	r1, [r7, #4]
 8003f70:	464b      	mov	r3, r9
 8003f72:	465d      	mov	r5, fp
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	3501      	adds	r5, #1
 8003f7a:	d067      	beq.n	800404c <__ieee754_sqrt+0x1e0>
 8003f7c:	683c      	ldr	r4, [r7, #0]
 8003f7e:	687d      	ldr	r5, [r7, #4]
 8003f80:	f001 fbde 	bl	8005740 <__aeabi_dadd>
 8003f84:	0002      	movs	r2, r0
 8003f86:	000b      	movs	r3, r1
 8003f88:	0020      	movs	r0, r4
 8003f8a:	0029      	movs	r1, r5
 8003f8c:	f7fc fa36 	bl	80003fc <__aeabi_dcmplt>
 8003f90:	465d      	mov	r5, fp
 8003f92:	2800      	cmp	r0, #0
 8003f94:	d05e      	beq.n	8004054 <__ieee754_sqrt+0x1e8>
 8003f96:	3502      	adds	r5, #2
 8003f98:	426b      	negs	r3, r5
 8003f9a:	416b      	adcs	r3, r5
 8003f9c:	086c      	lsrs	r4, r5, #1
 8003f9e:	449a      	add	sl, r3
 8003fa0:	e031      	b.n	8004006 <__ieee754_sqrt+0x19a>
 8003fa2:	006e      	lsls	r6, r5, #1
 8003fa4:	0876      	lsrs	r6, r6, #1
 8003fa6:	0020      	movs	r0, r4
 8003fa8:	0029      	movs	r1, r5
 8003faa:	4326      	orrs	r6, r4
 8003fac:	d037      	beq.n	800401e <__ieee754_sqrt+0x1b2>
 8003fae:	2d00      	cmp	r5, #0
 8003fb0:	d145      	bne.n	800403e <__ieee754_sqrt+0x1d2>
 8003fb2:	0ad1      	lsrs	r1, r2, #11
 8003fb4:	3b15      	subs	r3, #21
 8003fb6:	0552      	lsls	r2, r2, #21
 8003fb8:	2900      	cmp	r1, #0
 8003fba:	d0fa      	beq.n	8003fb2 <__ieee754_sqrt+0x146>
 8003fbc:	2080      	movs	r0, #128	@ 0x80
 8003fbe:	0340      	lsls	r0, r0, #13
 8003fc0:	001c      	movs	r4, r3
 8003fc2:	000b      	movs	r3, r1
 8003fc4:	4201      	tst	r1, r0
 8003fc6:	d148      	bne.n	800405a <__ieee754_sqrt+0x1ee>
 8003fc8:	2580      	movs	r5, #128	@ 0x80
 8003fca:	2100      	movs	r1, #0
 8003fcc:	036d      	lsls	r5, r5, #13
 8003fce:	005b      	lsls	r3, r3, #1
 8003fd0:	0008      	movs	r0, r1
 8003fd2:	3101      	adds	r1, #1
 8003fd4:	422b      	tst	r3, r5
 8003fd6:	d0fa      	beq.n	8003fce <__ieee754_sqrt+0x162>
 8003fd8:	2520      	movs	r5, #32
 8003fda:	0016      	movs	r6, r2
 8003fdc:	1a6d      	subs	r5, r5, r1
 8003fde:	40ee      	lsrs	r6, r5
 8003fe0:	408a      	lsls	r2, r1
 8003fe2:	4333      	orrs	r3, r6
 8003fe4:	1a24      	subs	r4, r4, r0
 8003fe6:	e758      	b.n	8003e9a <__ieee754_sqrt+0x2e>
 8003fe8:	007b      	lsls	r3, r7, #1
 8003fea:	4281      	cmp	r1, r0
 8003fec:	d900      	bls.n	8003ff0 <__ieee754_sqrt+0x184>
 8003fee:	e785      	b.n	8003efc <__ieee754_sqrt+0x90>
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	188e      	adds	r6, r1, r2
 8003ff4:	2900      	cmp	r1, #0
 8003ff6:	da9a      	bge.n	8003f2e <__ieee754_sqrt+0xc2>
 8003ff8:	43f5      	mvns	r5, r6
 8003ffa:	0fed      	lsrs	r5, r5, #31
 8003ffc:	46a9      	mov	r9, r5
 8003ffe:	444f      	add	r7, r9
 8004000:	e795      	b.n	8003f2e <__ieee754_sqrt+0xc2>
 8004002:	465b      	mov	r3, fp
 8004004:	085c      	lsrs	r4, r3, #1
 8004006:	4a1b      	ldr	r2, [pc, #108]	@ (8004074 <__ieee754_sqrt+0x208>)
 8004008:	4653      	mov	r3, sl
 800400a:	4694      	mov	ip, r2
 800400c:	4642      	mov	r2, r8
 800400e:	105b      	asrs	r3, r3, #1
 8004010:	4463      	add	r3, ip
 8004012:	0512      	lsls	r2, r2, #20
 8004014:	18d1      	adds	r1, r2, r3
 8004016:	4653      	mov	r3, sl
 8004018:	07de      	lsls	r6, r3, #31
 800401a:	4326      	orrs	r6, r4
 800401c:	0030      	movs	r0, r6
 800401e:	b003      	add	sp, #12
 8004020:	bcf0      	pop	{r4, r5, r6, r7}
 8004022:	46bb      	mov	fp, r7
 8004024:	46b2      	mov	sl, r6
 8004026:	46a9      	mov	r9, r5
 8004028:	46a0      	mov	r8, r4
 800402a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800402c:	0020      	movs	r0, r4
 800402e:	0029      	movs	r1, r5
 8004030:	f002 fbe2 	bl	80067f8 <__aeabi_dmul>
 8004034:	0022      	movs	r2, r4
 8004036:	002b      	movs	r3, r5
 8004038:	f001 fb82 	bl	8005740 <__aeabi_dadd>
 800403c:	e7ef      	b.n	800401e <__ieee754_sqrt+0x1b2>
 800403e:	f002 fea3 	bl	8006d88 <__aeabi_dsub>
 8004042:	0002      	movs	r2, r0
 8004044:	000b      	movs	r3, r1
 8004046:	f001 ff95 	bl	8005f74 <__aeabi_ddiv>
 800404a:	e7e8      	b.n	800401e <__ieee754_sqrt+0x1b2>
 800404c:	2301      	movs	r3, #1
 800404e:	469c      	mov	ip, r3
 8004050:	44e2      	add	sl, ip
 8004052:	e7d8      	b.n	8004006 <__ieee754_sqrt+0x19a>
 8004054:	3501      	adds	r5, #1
 8004056:	086c      	lsrs	r4, r5, #1
 8004058:	e7d5      	b.n	8004006 <__ieee754_sqrt+0x19a>
 800405a:	2001      	movs	r0, #1
 800405c:	4240      	negs	r0, r0
 800405e:	1a24      	subs	r4, r4, r0
 8004060:	e71b      	b.n	8003e9a <__ieee754_sqrt+0x2e>
 8004062:	46c0      	nop			@ (mov r8, r8)
 8004064:	7ff00000 	.word	0x7ff00000
 8004068:	fffffc01 	.word	0xfffffc01
 800406c:	08007908 	.word	0x08007908
 8004070:	08007900 	.word	0x08007900
 8004074:	3fe00000 	.word	0x3fe00000

08004078 <nan>:
 8004078:	2000      	movs	r0, #0
 800407a:	4901      	ldr	r1, [pc, #4]	@ (8004080 <nan+0x8>)
 800407c:	4770      	bx	lr
 800407e:	46c0      	nop			@ (mov r8, r8)
 8004080:	7ff80000 	.word	0x7ff80000

08004084 <__ieee754_log>:
 8004084:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004086:	46d6      	mov	lr, sl
 8004088:	464f      	mov	r7, r9
 800408a:	4646      	mov	r6, r8
 800408c:	2280      	movs	r2, #128	@ 0x80
 800408e:	b5c0      	push	{r6, r7, lr}
 8004090:	000b      	movs	r3, r1
 8004092:	b086      	sub	sp, #24
 8004094:	0352      	lsls	r2, r2, #13
 8004096:	4291      	cmp	r1, r2
 8004098:	da7b      	bge.n	8004192 <__ieee754_log+0x10e>
 800409a:	004a      	lsls	r2, r1, #1
 800409c:	0852      	lsrs	r2, r2, #1
 800409e:	4302      	orrs	r2, r0
 80040a0:	d100      	bne.n	80040a4 <__ieee754_log+0x20>
 80040a2:	e113      	b.n	80042cc <__ieee754_log+0x248>
 80040a4:	2900      	cmp	r1, #0
 80040a6:	da00      	bge.n	80040aa <__ieee754_log+0x26>
 80040a8:	e167      	b.n	800437a <__ieee754_log+0x2f6>
 80040aa:	2200      	movs	r2, #0
 80040ac:	4bc4      	ldr	r3, [pc, #784]	@ (80043c0 <__ieee754_log+0x33c>)
 80040ae:	f002 fba3 	bl	80067f8 <__aeabi_dmul>
 80040b2:	2436      	movs	r4, #54	@ 0x36
 80040b4:	4ac3      	ldr	r2, [pc, #780]	@ (80043c4 <__ieee754_log+0x340>)
 80040b6:	000b      	movs	r3, r1
 80040b8:	4264      	negs	r4, r4
 80040ba:	4293      	cmp	r3, r2
 80040bc:	dc6d      	bgt.n	800419a <__ieee754_log+0x116>
 80040be:	4dc2      	ldr	r5, [pc, #776]	@ (80043c8 <__ieee754_log+0x344>)
 80040c0:	151a      	asrs	r2, r3, #20
 80040c2:	46ac      	mov	ip, r5
 80040c4:	031b      	lsls	r3, r3, #12
 80040c6:	4462      	add	r2, ip
 80040c8:	0b1b      	lsrs	r3, r3, #12
 80040ca:	4698      	mov	r8, r3
 80040cc:	1912      	adds	r2, r2, r4
 80040ce:	2480      	movs	r4, #128	@ 0x80
 80040d0:	4bbe      	ldr	r3, [pc, #760]	@ (80043cc <__ieee754_log+0x348>)
 80040d2:	0364      	lsls	r4, r4, #13
 80040d4:	4443      	add	r3, r8
 80040d6:	4023      	ands	r3, r4
 80040d8:	4cbd      	ldr	r4, [pc, #756]	@ (80043d0 <__ieee754_log+0x34c>)
 80040da:	4645      	mov	r5, r8
 80040dc:	405c      	eors	r4, r3
 80040de:	151b      	asrs	r3, r3, #20
 80040e0:	4699      	mov	r9, r3
 80040e2:	4325      	orrs	r5, r4
 80040e4:	4bba      	ldr	r3, [pc, #744]	@ (80043d0 <__ieee754_log+0x34c>)
 80040e6:	0029      	movs	r1, r5
 80040e8:	4491      	add	r9, r2
 80040ea:	2200      	movs	r2, #0
 80040ec:	f002 fe4c 	bl	8006d88 <__aeabi_dsub>
 80040f0:	4643      	mov	r3, r8
 80040f2:	3302      	adds	r3, #2
 80040f4:	031b      	lsls	r3, r3, #12
 80040f6:	0006      	movs	r6, r0
 80040f8:	000f      	movs	r7, r1
 80040fa:	2200      	movs	r2, #0
 80040fc:	0b1b      	lsrs	r3, r3, #12
 80040fe:	2b02      	cmp	r3, #2
 8004100:	dc55      	bgt.n	80041ae <__ieee754_log+0x12a>
 8004102:	2300      	movs	r3, #0
 8004104:	f7fc f974 	bl	80003f0 <__aeabi_dcmpeq>
 8004108:	2800      	cmp	r0, #0
 800410a:	d000      	beq.n	800410e <__ieee754_log+0x8a>
 800410c:	e0e5      	b.n	80042da <__ieee754_log+0x256>
 800410e:	4ab1      	ldr	r2, [pc, #708]	@ (80043d4 <__ieee754_log+0x350>)
 8004110:	4bb1      	ldr	r3, [pc, #708]	@ (80043d8 <__ieee754_log+0x354>)
 8004112:	0030      	movs	r0, r6
 8004114:	0039      	movs	r1, r7
 8004116:	f002 fb6f 	bl	80067f8 <__aeabi_dmul>
 800411a:	0002      	movs	r2, r0
 800411c:	000b      	movs	r3, r1
 800411e:	2000      	movs	r0, #0
 8004120:	49ae      	ldr	r1, [pc, #696]	@ (80043dc <__ieee754_log+0x358>)
 8004122:	f002 fe31 	bl	8006d88 <__aeabi_dsub>
 8004126:	0032      	movs	r2, r6
 8004128:	0004      	movs	r4, r0
 800412a:	000d      	movs	r5, r1
 800412c:	003b      	movs	r3, r7
 800412e:	0030      	movs	r0, r6
 8004130:	0039      	movs	r1, r7
 8004132:	f002 fb61 	bl	80067f8 <__aeabi_dmul>
 8004136:	000b      	movs	r3, r1
 8004138:	0002      	movs	r2, r0
 800413a:	0029      	movs	r1, r5
 800413c:	0020      	movs	r0, r4
 800413e:	f002 fb5b 	bl	80067f8 <__aeabi_dmul>
 8004142:	464b      	mov	r3, r9
 8004144:	0004      	movs	r4, r0
 8004146:	000d      	movs	r5, r1
 8004148:	2b00      	cmp	r3, #0
 800414a:	d100      	bne.n	800414e <__ieee754_log+0xca>
 800414c:	e10e      	b.n	800436c <__ieee754_log+0x2e8>
 800414e:	4648      	mov	r0, r9
 8004150:	f003 fab0 	bl	80076b4 <__aeabi_i2d>
 8004154:	4aa2      	ldr	r2, [pc, #648]	@ (80043e0 <__ieee754_log+0x35c>)
 8004156:	4ba3      	ldr	r3, [pc, #652]	@ (80043e4 <__ieee754_log+0x360>)
 8004158:	9000      	str	r0, [sp, #0]
 800415a:	9101      	str	r1, [sp, #4]
 800415c:	f002 fb4c 	bl	80067f8 <__aeabi_dmul>
 8004160:	4aa1      	ldr	r2, [pc, #644]	@ (80043e8 <__ieee754_log+0x364>)
 8004162:	9002      	str	r0, [sp, #8]
 8004164:	9103      	str	r1, [sp, #12]
 8004166:	9800      	ldr	r0, [sp, #0]
 8004168:	9901      	ldr	r1, [sp, #4]
 800416a:	4ba0      	ldr	r3, [pc, #640]	@ (80043ec <__ieee754_log+0x368>)
 800416c:	f002 fb44 	bl	80067f8 <__aeabi_dmul>
 8004170:	0002      	movs	r2, r0
 8004172:	000b      	movs	r3, r1
 8004174:	0020      	movs	r0, r4
 8004176:	0029      	movs	r1, r5
 8004178:	f002 fe06 	bl	8006d88 <__aeabi_dsub>
 800417c:	0032      	movs	r2, r6
 800417e:	003b      	movs	r3, r7
 8004180:	f002 fe02 	bl	8006d88 <__aeabi_dsub>
 8004184:	0002      	movs	r2, r0
 8004186:	000b      	movs	r3, r1
 8004188:	9802      	ldr	r0, [sp, #8]
 800418a:	9903      	ldr	r1, [sp, #12]
 800418c:	f002 fdfc 	bl	8006d88 <__aeabi_dsub>
 8004190:	e007      	b.n	80041a2 <__ieee754_log+0x11e>
 8004192:	4a8c      	ldr	r2, [pc, #560]	@ (80043c4 <__ieee754_log+0x340>)
 8004194:	2400      	movs	r4, #0
 8004196:	4293      	cmp	r3, r2
 8004198:	dd91      	ble.n	80040be <__ieee754_log+0x3a>
 800419a:	0002      	movs	r2, r0
 800419c:	000b      	movs	r3, r1
 800419e:	f001 facf 	bl	8005740 <__aeabi_dadd>
 80041a2:	b006      	add	sp, #24
 80041a4:	bce0      	pop	{r5, r6, r7}
 80041a6:	46ba      	mov	sl, r7
 80041a8:	46b1      	mov	r9, r6
 80041aa:	46a8      	mov	r8, r5
 80041ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041ae:	2380      	movs	r3, #128	@ 0x80
 80041b0:	05db      	lsls	r3, r3, #23
 80041b2:	f001 fac5 	bl	8005740 <__aeabi_dadd>
 80041b6:	0002      	movs	r2, r0
 80041b8:	000b      	movs	r3, r1
 80041ba:	0030      	movs	r0, r6
 80041bc:	0039      	movs	r1, r7
 80041be:	f001 fed9 	bl	8005f74 <__aeabi_ddiv>
 80041c2:	0004      	movs	r4, r0
 80041c4:	4648      	mov	r0, r9
 80041c6:	000d      	movs	r5, r1
 80041c8:	f003 fa74 	bl	80076b4 <__aeabi_i2d>
 80041cc:	0022      	movs	r2, r4
 80041ce:	002b      	movs	r3, r5
 80041d0:	9004      	str	r0, [sp, #16]
 80041d2:	9105      	str	r1, [sp, #20]
 80041d4:	0020      	movs	r0, r4
 80041d6:	0029      	movs	r1, r5
 80041d8:	9402      	str	r4, [sp, #8]
 80041da:	9503      	str	r5, [sp, #12]
 80041dc:	f002 fb0c 	bl	80067f8 <__aeabi_dmul>
 80041e0:	4b83      	ldr	r3, [pc, #524]	@ (80043f0 <__ieee754_log+0x36c>)
 80041e2:	0002      	movs	r2, r0
 80041e4:	4443      	add	r3, r8
 80041e6:	469a      	mov	sl, r3
 80041e8:	000b      	movs	r3, r1
 80041ea:	9000      	str	r0, [sp, #0]
 80041ec:	9101      	str	r1, [sp, #4]
 80041ee:	f002 fb03 	bl	80067f8 <__aeabi_dmul>
 80041f2:	0004      	movs	r4, r0
 80041f4:	000d      	movs	r5, r1
 80041f6:	4a7f      	ldr	r2, [pc, #508]	@ (80043f4 <__ieee754_log+0x370>)
 80041f8:	4b7f      	ldr	r3, [pc, #508]	@ (80043f8 <__ieee754_log+0x374>)
 80041fa:	f002 fafd 	bl	80067f8 <__aeabi_dmul>
 80041fe:	4a7f      	ldr	r2, [pc, #508]	@ (80043fc <__ieee754_log+0x378>)
 8004200:	4b7f      	ldr	r3, [pc, #508]	@ (8004400 <__ieee754_log+0x37c>)
 8004202:	f001 fa9d 	bl	8005740 <__aeabi_dadd>
 8004206:	0022      	movs	r2, r4
 8004208:	002b      	movs	r3, r5
 800420a:	f002 faf5 	bl	80067f8 <__aeabi_dmul>
 800420e:	4a7d      	ldr	r2, [pc, #500]	@ (8004404 <__ieee754_log+0x380>)
 8004210:	4b7d      	ldr	r3, [pc, #500]	@ (8004408 <__ieee754_log+0x384>)
 8004212:	f001 fa95 	bl	8005740 <__aeabi_dadd>
 8004216:	0022      	movs	r2, r4
 8004218:	002b      	movs	r3, r5
 800421a:	f002 faed 	bl	80067f8 <__aeabi_dmul>
 800421e:	4a7b      	ldr	r2, [pc, #492]	@ (800440c <__ieee754_log+0x388>)
 8004220:	4b7b      	ldr	r3, [pc, #492]	@ (8004410 <__ieee754_log+0x38c>)
 8004222:	f001 fa8d 	bl	8005740 <__aeabi_dadd>
 8004226:	9a00      	ldr	r2, [sp, #0]
 8004228:	9b01      	ldr	r3, [sp, #4]
 800422a:	f002 fae5 	bl	80067f8 <__aeabi_dmul>
 800422e:	4a79      	ldr	r2, [pc, #484]	@ (8004414 <__ieee754_log+0x390>)
 8004230:	9000      	str	r0, [sp, #0]
 8004232:	9101      	str	r1, [sp, #4]
 8004234:	4b78      	ldr	r3, [pc, #480]	@ (8004418 <__ieee754_log+0x394>)
 8004236:	0020      	movs	r0, r4
 8004238:	0029      	movs	r1, r5
 800423a:	f002 fadd 	bl	80067f8 <__aeabi_dmul>
 800423e:	4a77      	ldr	r2, [pc, #476]	@ (800441c <__ieee754_log+0x398>)
 8004240:	4b77      	ldr	r3, [pc, #476]	@ (8004420 <__ieee754_log+0x39c>)
 8004242:	f001 fa7d 	bl	8005740 <__aeabi_dadd>
 8004246:	0022      	movs	r2, r4
 8004248:	002b      	movs	r3, r5
 800424a:	f002 fad5 	bl	80067f8 <__aeabi_dmul>
 800424e:	4a75      	ldr	r2, [pc, #468]	@ (8004424 <__ieee754_log+0x3a0>)
 8004250:	4b75      	ldr	r3, [pc, #468]	@ (8004428 <__ieee754_log+0x3a4>)
 8004252:	f001 fa75 	bl	8005740 <__aeabi_dadd>
 8004256:	0022      	movs	r2, r4
 8004258:	002b      	movs	r3, r5
 800425a:	f002 facd 	bl	80067f8 <__aeabi_dmul>
 800425e:	000b      	movs	r3, r1
 8004260:	0002      	movs	r2, r0
 8004262:	9800      	ldr	r0, [sp, #0]
 8004264:	9901      	ldr	r1, [sp, #4]
 8004266:	f001 fa6b 	bl	8005740 <__aeabi_dadd>
 800426a:	000d      	movs	r5, r1
 800426c:	4641      	mov	r1, r8
 800426e:	4b6f      	ldr	r3, [pc, #444]	@ (800442c <__ieee754_log+0x3a8>)
 8004270:	0004      	movs	r4, r0
 8004272:	1a5b      	subs	r3, r3, r1
 8004274:	4651      	mov	r1, sl
 8004276:	430b      	orrs	r3, r1
 8004278:	2b00      	cmp	r3, #0
 800427a:	dd49      	ble.n	8004310 <__ieee754_log+0x28c>
 800427c:	2200      	movs	r2, #0
 800427e:	4b57      	ldr	r3, [pc, #348]	@ (80043dc <__ieee754_log+0x358>)
 8004280:	0030      	movs	r0, r6
 8004282:	0039      	movs	r1, r7
 8004284:	f002 fab8 	bl	80067f8 <__aeabi_dmul>
 8004288:	0032      	movs	r2, r6
 800428a:	003b      	movs	r3, r7
 800428c:	f002 fab4 	bl	80067f8 <__aeabi_dmul>
 8004290:	0002      	movs	r2, r0
 8004292:	000b      	movs	r3, r1
 8004294:	9000      	str	r0, [sp, #0]
 8004296:	9101      	str	r1, [sp, #4]
 8004298:	0020      	movs	r0, r4
 800429a:	0029      	movs	r1, r5
 800429c:	f001 fa50 	bl	8005740 <__aeabi_dadd>
 80042a0:	9a02      	ldr	r2, [sp, #8]
 80042a2:	9b03      	ldr	r3, [sp, #12]
 80042a4:	f002 faa8 	bl	80067f8 <__aeabi_dmul>
 80042a8:	464b      	mov	r3, r9
 80042aa:	0004      	movs	r4, r0
 80042ac:	000d      	movs	r5, r1
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d16b      	bne.n	800438a <__ieee754_log+0x306>
 80042b2:	0002      	movs	r2, r0
 80042b4:	000b      	movs	r3, r1
 80042b6:	9800      	ldr	r0, [sp, #0]
 80042b8:	9901      	ldr	r1, [sp, #4]
 80042ba:	f002 fd65 	bl	8006d88 <__aeabi_dsub>
 80042be:	0002      	movs	r2, r0
 80042c0:	000b      	movs	r3, r1
 80042c2:	0030      	movs	r0, r6
 80042c4:	0039      	movs	r1, r7
 80042c6:	f002 fd5f 	bl	8006d88 <__aeabi_dsub>
 80042ca:	e76a      	b.n	80041a2 <__ieee754_log+0x11e>
 80042cc:	2200      	movs	r2, #0
 80042ce:	2300      	movs	r3, #0
 80042d0:	2000      	movs	r0, #0
 80042d2:	4957      	ldr	r1, [pc, #348]	@ (8004430 <__ieee754_log+0x3ac>)
 80042d4:	f001 fe4e 	bl	8005f74 <__aeabi_ddiv>
 80042d8:	e763      	b.n	80041a2 <__ieee754_log+0x11e>
 80042da:	464b      	mov	r3, r9
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d06b      	beq.n	80043b8 <__ieee754_log+0x334>
 80042e0:	4648      	mov	r0, r9
 80042e2:	f003 f9e7 	bl	80076b4 <__aeabi_i2d>
 80042e6:	4a3e      	ldr	r2, [pc, #248]	@ (80043e0 <__ieee754_log+0x35c>)
 80042e8:	4b3e      	ldr	r3, [pc, #248]	@ (80043e4 <__ieee754_log+0x360>)
 80042ea:	0004      	movs	r4, r0
 80042ec:	000d      	movs	r5, r1
 80042ee:	f002 fa83 	bl	80067f8 <__aeabi_dmul>
 80042f2:	4a3d      	ldr	r2, [pc, #244]	@ (80043e8 <__ieee754_log+0x364>)
 80042f4:	0006      	movs	r6, r0
 80042f6:	000f      	movs	r7, r1
 80042f8:	0020      	movs	r0, r4
 80042fa:	0029      	movs	r1, r5
 80042fc:	4b3b      	ldr	r3, [pc, #236]	@ (80043ec <__ieee754_log+0x368>)
 80042fe:	f002 fa7b 	bl	80067f8 <__aeabi_dmul>
 8004302:	0002      	movs	r2, r0
 8004304:	000b      	movs	r3, r1
 8004306:	0030      	movs	r0, r6
 8004308:	0039      	movs	r1, r7
 800430a:	f001 fa19 	bl	8005740 <__aeabi_dadd>
 800430e:	e748      	b.n	80041a2 <__ieee754_log+0x11e>
 8004310:	0022      	movs	r2, r4
 8004312:	002b      	movs	r3, r5
 8004314:	0030      	movs	r0, r6
 8004316:	0039      	movs	r1, r7
 8004318:	f002 fd36 	bl	8006d88 <__aeabi_dsub>
 800431c:	9a02      	ldr	r2, [sp, #8]
 800431e:	9b03      	ldr	r3, [sp, #12]
 8004320:	f002 fa6a 	bl	80067f8 <__aeabi_dmul>
 8004324:	464b      	mov	r3, r9
 8004326:	0004      	movs	r4, r0
 8004328:	000d      	movs	r5, r1
 800432a:	2b00      	cmp	r3, #0
 800432c:	d01e      	beq.n	800436c <__ieee754_log+0x2e8>
 800432e:	9804      	ldr	r0, [sp, #16]
 8004330:	9905      	ldr	r1, [sp, #20]
 8004332:	4a2b      	ldr	r2, [pc, #172]	@ (80043e0 <__ieee754_log+0x35c>)
 8004334:	4b2b      	ldr	r3, [pc, #172]	@ (80043e4 <__ieee754_log+0x360>)
 8004336:	f002 fa5f 	bl	80067f8 <__aeabi_dmul>
 800433a:	4a2b      	ldr	r2, [pc, #172]	@ (80043e8 <__ieee754_log+0x364>)
 800433c:	9000      	str	r0, [sp, #0]
 800433e:	9101      	str	r1, [sp, #4]
 8004340:	9804      	ldr	r0, [sp, #16]
 8004342:	9905      	ldr	r1, [sp, #20]
 8004344:	4b29      	ldr	r3, [pc, #164]	@ (80043ec <__ieee754_log+0x368>)
 8004346:	f002 fa57 	bl	80067f8 <__aeabi_dmul>
 800434a:	0002      	movs	r2, r0
 800434c:	000b      	movs	r3, r1
 800434e:	0020      	movs	r0, r4
 8004350:	0029      	movs	r1, r5
 8004352:	f002 fd19 	bl	8006d88 <__aeabi_dsub>
 8004356:	0032      	movs	r2, r6
 8004358:	003b      	movs	r3, r7
 800435a:	f002 fd15 	bl	8006d88 <__aeabi_dsub>
 800435e:	0002      	movs	r2, r0
 8004360:	000b      	movs	r3, r1
 8004362:	9800      	ldr	r0, [sp, #0]
 8004364:	9901      	ldr	r1, [sp, #4]
 8004366:	f002 fd0f 	bl	8006d88 <__aeabi_dsub>
 800436a:	e71a      	b.n	80041a2 <__ieee754_log+0x11e>
 800436c:	0022      	movs	r2, r4
 800436e:	002b      	movs	r3, r5
 8004370:	0030      	movs	r0, r6
 8004372:	0039      	movs	r1, r7
 8004374:	f002 fd08 	bl	8006d88 <__aeabi_dsub>
 8004378:	e713      	b.n	80041a2 <__ieee754_log+0x11e>
 800437a:	0002      	movs	r2, r0
 800437c:	f002 fd04 	bl	8006d88 <__aeabi_dsub>
 8004380:	2200      	movs	r2, #0
 8004382:	2300      	movs	r3, #0
 8004384:	f001 fdf6 	bl	8005f74 <__aeabi_ddiv>
 8004388:	e70b      	b.n	80041a2 <__ieee754_log+0x11e>
 800438a:	4a15      	ldr	r2, [pc, #84]	@ (80043e0 <__ieee754_log+0x35c>)
 800438c:	4b15      	ldr	r3, [pc, #84]	@ (80043e4 <__ieee754_log+0x360>)
 800438e:	9804      	ldr	r0, [sp, #16]
 8004390:	9905      	ldr	r1, [sp, #20]
 8004392:	f002 fa31 	bl	80067f8 <__aeabi_dmul>
 8004396:	4a14      	ldr	r2, [pc, #80]	@ (80043e8 <__ieee754_log+0x364>)
 8004398:	9002      	str	r0, [sp, #8]
 800439a:	9103      	str	r1, [sp, #12]
 800439c:	9804      	ldr	r0, [sp, #16]
 800439e:	9905      	ldr	r1, [sp, #20]
 80043a0:	4b12      	ldr	r3, [pc, #72]	@ (80043ec <__ieee754_log+0x368>)
 80043a2:	f002 fa29 	bl	80067f8 <__aeabi_dmul>
 80043a6:	0022      	movs	r2, r4
 80043a8:	002b      	movs	r3, r5
 80043aa:	f001 f9c9 	bl	8005740 <__aeabi_dadd>
 80043ae:	0002      	movs	r2, r0
 80043b0:	000b      	movs	r3, r1
 80043b2:	9800      	ldr	r0, [sp, #0]
 80043b4:	9901      	ldr	r1, [sp, #4]
 80043b6:	e6df      	b.n	8004178 <__ieee754_log+0xf4>
 80043b8:	2000      	movs	r0, #0
 80043ba:	2100      	movs	r1, #0
 80043bc:	e6f1      	b.n	80041a2 <__ieee754_log+0x11e>
 80043be:	46c0      	nop			@ (mov r8, r8)
 80043c0:	43500000 	.word	0x43500000
 80043c4:	7fefffff 	.word	0x7fefffff
 80043c8:	fffffc01 	.word	0xfffffc01
 80043cc:	00095f64 	.word	0x00095f64
 80043d0:	3ff00000 	.word	0x3ff00000
 80043d4:	55555555 	.word	0x55555555
 80043d8:	3fd55555 	.word	0x3fd55555
 80043dc:	3fe00000 	.word	0x3fe00000
 80043e0:	fee00000 	.word	0xfee00000
 80043e4:	3fe62e42 	.word	0x3fe62e42
 80043e8:	35793c76 	.word	0x35793c76
 80043ec:	3dea39ef 	.word	0x3dea39ef
 80043f0:	fff9eb86 	.word	0xfff9eb86
 80043f4:	df3e5244 	.word	0xdf3e5244
 80043f8:	3fc2f112 	.word	0x3fc2f112
 80043fc:	96cb03de 	.word	0x96cb03de
 8004400:	3fc74664 	.word	0x3fc74664
 8004404:	94229359 	.word	0x94229359
 8004408:	3fd24924 	.word	0x3fd24924
 800440c:	55555593 	.word	0x55555593
 8004410:	3fe55555 	.word	0x3fe55555
 8004414:	d078c69f 	.word	0xd078c69f
 8004418:	3fc39a09 	.word	0x3fc39a09
 800441c:	1d8e78af 	.word	0x1d8e78af
 8004420:	3fcc71c5 	.word	0x3fcc71c5
 8004424:	9997fa04 	.word	0x9997fa04
 8004428:	3fd99999 	.word	0x3fd99999
 800442c:	0006b851 	.word	0x0006b851
 8004430:	c3500000 	.word	0xc3500000

08004434 <__ieee754_rem_pio2>:
 8004434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004436:	4657      	mov	r7, sl
 8004438:	464e      	mov	r6, r9
 800443a:	46de      	mov	lr, fp
 800443c:	4645      	mov	r5, r8
 800443e:	b5e0      	push	{r5, r6, r7, lr}
 8004440:	4bd4      	ldr	r3, [pc, #848]	@ (8004794 <__ieee754_rem_pio2+0x360>)
 8004442:	004f      	lsls	r7, r1, #1
 8004444:	4691      	mov	r9, r2
 8004446:	468a      	mov	sl, r1
 8004448:	b091      	sub	sp, #68	@ 0x44
 800444a:	087f      	lsrs	r7, r7, #1
 800444c:	429f      	cmp	r7, r3
 800444e:	d800      	bhi.n	8004452 <__ieee754_rem_pio2+0x1e>
 8004450:	e094      	b.n	800457c <__ieee754_rem_pio2+0x148>
 8004452:	4bd1      	ldr	r3, [pc, #836]	@ (8004798 <__ieee754_rem_pio2+0x364>)
 8004454:	429f      	cmp	r7, r3
 8004456:	d82b      	bhi.n	80044b0 <__ieee754_rem_pio2+0x7c>
 8004458:	4ad0      	ldr	r2, [pc, #832]	@ (800479c <__ieee754_rem_pio2+0x368>)
 800445a:	2900      	cmp	r1, #0
 800445c:	dc00      	bgt.n	8004460 <__ieee754_rem_pio2+0x2c>
 800445e:	e1bf      	b.n	80047e0 <__ieee754_rem_pio2+0x3ac>
 8004460:	4bcf      	ldr	r3, [pc, #828]	@ (80047a0 <__ieee754_rem_pio2+0x36c>)
 8004462:	f002 fc91 	bl	8006d88 <__aeabi_dsub>
 8004466:	4bce      	ldr	r3, [pc, #824]	@ (80047a0 <__ieee754_rem_pio2+0x36c>)
 8004468:	0004      	movs	r4, r0
 800446a:	000d      	movs	r5, r1
 800446c:	429f      	cmp	r7, r3
 800446e:	d100      	bne.n	8004472 <__ieee754_rem_pio2+0x3e>
 8004470:	e098      	b.n	80045a4 <__ieee754_rem_pio2+0x170>
 8004472:	4acc      	ldr	r2, [pc, #816]	@ (80047a4 <__ieee754_rem_pio2+0x370>)
 8004474:	4bcc      	ldr	r3, [pc, #816]	@ (80047a8 <__ieee754_rem_pio2+0x374>)
 8004476:	f002 fc87 	bl	8006d88 <__aeabi_dsub>
 800447a:	0002      	movs	r2, r0
 800447c:	000b      	movs	r3, r1
 800447e:	0006      	movs	r6, r0
 8004480:	000f      	movs	r7, r1
 8004482:	0020      	movs	r0, r4
 8004484:	0029      	movs	r1, r5
 8004486:	f002 fc7f 	bl	8006d88 <__aeabi_dsub>
 800448a:	4ac6      	ldr	r2, [pc, #792]	@ (80047a4 <__ieee754_rem_pio2+0x370>)
 800448c:	4bc6      	ldr	r3, [pc, #792]	@ (80047a8 <__ieee754_rem_pio2+0x374>)
 800448e:	f002 fc7b 	bl	8006d88 <__aeabi_dsub>
 8004492:	464b      	mov	r3, r9
 8004494:	601e      	str	r6, [r3, #0]
 8004496:	605f      	str	r7, [r3, #4]
 8004498:	6098      	str	r0, [r3, #8]
 800449a:	60d9      	str	r1, [r3, #12]
 800449c:	2301      	movs	r3, #1
 800449e:	469b      	mov	fp, r3
 80044a0:	4658      	mov	r0, fp
 80044a2:	b011      	add	sp, #68	@ 0x44
 80044a4:	bcf0      	pop	{r4, r5, r6, r7}
 80044a6:	46bb      	mov	fp, r7
 80044a8:	46b2      	mov	sl, r6
 80044aa:	46a9      	mov	r9, r5
 80044ac:	46a0      	mov	r8, r4
 80044ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044b0:	4bbe      	ldr	r3, [pc, #760]	@ (80047ac <__ieee754_rem_pio2+0x378>)
 80044b2:	429f      	cmp	r7, r3
 80044b4:	d800      	bhi.n	80044b8 <__ieee754_rem_pio2+0x84>
 80044b6:	e08d      	b.n	80045d4 <__ieee754_rem_pio2+0x1a0>
 80044b8:	4bbd      	ldr	r3, [pc, #756]	@ (80047b0 <__ieee754_rem_pio2+0x37c>)
 80044ba:	429f      	cmp	r7, r3
 80044bc:	d868      	bhi.n	8004590 <__ieee754_rem_pio2+0x15c>
 80044be:	4abd      	ldr	r2, [pc, #756]	@ (80047b4 <__ieee754_rem_pio2+0x380>)
 80044c0:	153e      	asrs	r6, r7, #20
 80044c2:	4694      	mov	ip, r2
 80044c4:	4466      	add	r6, ip
 80044c6:	0533      	lsls	r3, r6, #20
 80044c8:	1afd      	subs	r5, r7, r3
 80044ca:	0029      	movs	r1, r5
 80044cc:	0004      	movs	r4, r0
 80044ce:	f003 f8b5 	bl	800763c <__aeabi_d2iz>
 80044d2:	f003 f8ef 	bl	80076b4 <__aeabi_i2d>
 80044d6:	0002      	movs	r2, r0
 80044d8:	000b      	movs	r3, r1
 80044da:	0020      	movs	r0, r4
 80044dc:	0029      	movs	r1, r5
 80044de:	920a      	str	r2, [sp, #40]	@ 0x28
 80044e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80044e2:	f002 fc51 	bl	8006d88 <__aeabi_dsub>
 80044e6:	2200      	movs	r2, #0
 80044e8:	4bb3      	ldr	r3, [pc, #716]	@ (80047b8 <__ieee754_rem_pio2+0x384>)
 80044ea:	f002 f985 	bl	80067f8 <__aeabi_dmul>
 80044ee:	000d      	movs	r5, r1
 80044f0:	0004      	movs	r4, r0
 80044f2:	f003 f8a3 	bl	800763c <__aeabi_d2iz>
 80044f6:	f003 f8dd 	bl	80076b4 <__aeabi_i2d>
 80044fa:	0002      	movs	r2, r0
 80044fc:	000b      	movs	r3, r1
 80044fe:	0020      	movs	r0, r4
 8004500:	920c      	str	r2, [sp, #48]	@ 0x30
 8004502:	930d      	str	r3, [sp, #52]	@ 0x34
 8004504:	0029      	movs	r1, r5
 8004506:	f002 fc3f 	bl	8006d88 <__aeabi_dsub>
 800450a:	2200      	movs	r2, #0
 800450c:	4baa      	ldr	r3, [pc, #680]	@ (80047b8 <__ieee754_rem_pio2+0x384>)
 800450e:	f002 f973 	bl	80067f8 <__aeabi_dmul>
 8004512:	af0a      	add	r7, sp, #40	@ 0x28
 8004514:	003d      	movs	r5, r7
 8004516:	2403      	movs	r4, #3
 8004518:	46b0      	mov	r8, r6
 800451a:	6138      	str	r0, [r7, #16]
 800451c:	6179      	str	r1, [r7, #20]
 800451e:	6928      	ldr	r0, [r5, #16]
 8004520:	6969      	ldr	r1, [r5, #20]
 8004522:	2200      	movs	r2, #0
 8004524:	2300      	movs	r3, #0
 8004526:	0026      	movs	r6, r4
 8004528:	3d08      	subs	r5, #8
 800452a:	3c01      	subs	r4, #1
 800452c:	f7fb ff60 	bl	80003f0 <__aeabi_dcmpeq>
 8004530:	2800      	cmp	r0, #0
 8004532:	d1f4      	bne.n	800451e <__ieee754_rem_pio2+0xea>
 8004534:	0033      	movs	r3, r6
 8004536:	4646      	mov	r6, r8
 8004538:	4698      	mov	r8, r3
 800453a:	4ba0      	ldr	r3, [pc, #640]	@ (80047bc <__ieee754_rem_pio2+0x388>)
 800453c:	0032      	movs	r2, r6
 800453e:	9301      	str	r3, [sp, #4]
 8004540:	2302      	movs	r3, #2
 8004542:	4649      	mov	r1, r9
 8004544:	9300      	str	r3, [sp, #0]
 8004546:	0038      	movs	r0, r7
 8004548:	4643      	mov	r3, r8
 800454a:	f000 f98d 	bl	8004868 <__kernel_rem_pio2>
 800454e:	4653      	mov	r3, sl
 8004550:	4683      	mov	fp, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	daa4      	bge.n	80044a0 <__ieee754_rem_pio2+0x6c>
 8004556:	4649      	mov	r1, r9
 8004558:	2080      	movs	r0, #128	@ 0x80
 800455a:	680a      	ldr	r2, [r1, #0]
 800455c:	6849      	ldr	r1, [r1, #4]
 800455e:	0600      	lsls	r0, r0, #24
 8004560:	180b      	adds	r3, r1, r0
 8004562:	4649      	mov	r1, r9
 8004564:	600a      	str	r2, [r1, #0]
 8004566:	604b      	str	r3, [r1, #4]
 8004568:	688a      	ldr	r2, [r1, #8]
 800456a:	68c9      	ldr	r1, [r1, #12]
 800456c:	180b      	adds	r3, r1, r0
 800456e:	4649      	mov	r1, r9
 8004570:	608a      	str	r2, [r1, #8]
 8004572:	60cb      	str	r3, [r1, #12]
 8004574:	465b      	mov	r3, fp
 8004576:	425b      	negs	r3, r3
 8004578:	469b      	mov	fp, r3
 800457a:	e791      	b.n	80044a0 <__ieee754_rem_pio2+0x6c>
 800457c:	6010      	str	r0, [r2, #0]
 800457e:	6051      	str	r1, [r2, #4]
 8004580:	2300      	movs	r3, #0
 8004582:	2200      	movs	r2, #0
 8004584:	4649      	mov	r1, r9
 8004586:	608a      	str	r2, [r1, #8]
 8004588:	60cb      	str	r3, [r1, #12]
 800458a:	2300      	movs	r3, #0
 800458c:	469b      	mov	fp, r3
 800458e:	e787      	b.n	80044a0 <__ieee754_rem_pio2+0x6c>
 8004590:	000b      	movs	r3, r1
 8004592:	0002      	movs	r2, r0
 8004594:	f002 fbf8 	bl	8006d88 <__aeabi_dsub>
 8004598:	464b      	mov	r3, r9
 800459a:	6098      	str	r0, [r3, #8]
 800459c:	60d9      	str	r1, [r3, #12]
 800459e:	6018      	str	r0, [r3, #0]
 80045a0:	6059      	str	r1, [r3, #4]
 80045a2:	e7f2      	b.n	800458a <__ieee754_rem_pio2+0x156>
 80045a4:	22d3      	movs	r2, #211	@ 0xd3
 80045a6:	4b80      	ldr	r3, [pc, #512]	@ (80047a8 <__ieee754_rem_pio2+0x374>)
 80045a8:	0552      	lsls	r2, r2, #21
 80045aa:	f002 fbed 	bl	8006d88 <__aeabi_dsub>
 80045ae:	4a84      	ldr	r2, [pc, #528]	@ (80047c0 <__ieee754_rem_pio2+0x38c>)
 80045b0:	4b84      	ldr	r3, [pc, #528]	@ (80047c4 <__ieee754_rem_pio2+0x390>)
 80045b2:	0004      	movs	r4, r0
 80045b4:	000d      	movs	r5, r1
 80045b6:	f002 fbe7 	bl	8006d88 <__aeabi_dsub>
 80045ba:	0002      	movs	r2, r0
 80045bc:	000b      	movs	r3, r1
 80045be:	0006      	movs	r6, r0
 80045c0:	000f      	movs	r7, r1
 80045c2:	0020      	movs	r0, r4
 80045c4:	0029      	movs	r1, r5
 80045c6:	f002 fbdf 	bl	8006d88 <__aeabi_dsub>
 80045ca:	4a7d      	ldr	r2, [pc, #500]	@ (80047c0 <__ieee754_rem_pio2+0x38c>)
 80045cc:	4b7d      	ldr	r3, [pc, #500]	@ (80047c4 <__ieee754_rem_pio2+0x390>)
 80045ce:	f002 fbdb 	bl	8006d88 <__aeabi_dsub>
 80045d2:	e75e      	b.n	8004492 <__ieee754_rem_pio2+0x5e>
 80045d4:	f000 ff70 	bl	80054b8 <fabs>
 80045d8:	4a7b      	ldr	r2, [pc, #492]	@ (80047c8 <__ieee754_rem_pio2+0x394>)
 80045da:	4b7c      	ldr	r3, [pc, #496]	@ (80047cc <__ieee754_rem_pio2+0x398>)
 80045dc:	0004      	movs	r4, r0
 80045de:	000d      	movs	r5, r1
 80045e0:	f002 f90a 	bl	80067f8 <__aeabi_dmul>
 80045e4:	2200      	movs	r2, #0
 80045e6:	4b7a      	ldr	r3, [pc, #488]	@ (80047d0 <__ieee754_rem_pio2+0x39c>)
 80045e8:	f001 f8aa 	bl	8005740 <__aeabi_dadd>
 80045ec:	f003 f826 	bl	800763c <__aeabi_d2iz>
 80045f0:	4683      	mov	fp, r0
 80045f2:	f003 f85f 	bl	80076b4 <__aeabi_i2d>
 80045f6:	4a69      	ldr	r2, [pc, #420]	@ (800479c <__ieee754_rem_pio2+0x368>)
 80045f8:	4b69      	ldr	r3, [pc, #420]	@ (80047a0 <__ieee754_rem_pio2+0x36c>)
 80045fa:	9002      	str	r0, [sp, #8]
 80045fc:	9103      	str	r1, [sp, #12]
 80045fe:	f002 f8fb 	bl	80067f8 <__aeabi_dmul>
 8004602:	0002      	movs	r2, r0
 8004604:	000b      	movs	r3, r1
 8004606:	0020      	movs	r0, r4
 8004608:	0029      	movs	r1, r5
 800460a:	f002 fbbd 	bl	8006d88 <__aeabi_dsub>
 800460e:	0004      	movs	r4, r0
 8004610:	000d      	movs	r5, r1
 8004612:	9802      	ldr	r0, [sp, #8]
 8004614:	9903      	ldr	r1, [sp, #12]
 8004616:	4a63      	ldr	r2, [pc, #396]	@ (80047a4 <__ieee754_rem_pio2+0x370>)
 8004618:	4b63      	ldr	r3, [pc, #396]	@ (80047a8 <__ieee754_rem_pio2+0x374>)
 800461a:	9404      	str	r4, [sp, #16]
 800461c:	9505      	str	r5, [sp, #20]
 800461e:	f002 f8eb 	bl	80067f8 <__aeabi_dmul>
 8004622:	000b      	movs	r3, r1
 8004624:	0002      	movs	r2, r0
 8004626:	0029      	movs	r1, r5
 8004628:	0020      	movs	r0, r4
 800462a:	9206      	str	r2, [sp, #24]
 800462c:	9307      	str	r3, [sp, #28]
 800462e:	f002 fbab 	bl	8006d88 <__aeabi_dsub>
 8004632:	465b      	mov	r3, fp
 8004634:	0004      	movs	r4, r0
 8004636:	000d      	movs	r5, r1
 8004638:	2b1f      	cmp	r3, #31
 800463a:	dc2f      	bgt.n	800469c <__ieee754_rem_pio2+0x268>
 800463c:	465a      	mov	r2, fp
 800463e:	4b65      	ldr	r3, [pc, #404]	@ (80047d4 <__ieee754_rem_pio2+0x3a0>)
 8004640:	3a01      	subs	r2, #1
 8004642:	0092      	lsls	r2, r2, #2
 8004644:	58d3      	ldr	r3, [r2, r3]
 8004646:	42bb      	cmp	r3, r7
 8004648:	d028      	beq.n	800469c <__ieee754_rem_pio2+0x268>
 800464a:	464b      	mov	r3, r9
 800464c:	601c      	str	r4, [r3, #0]
 800464e:	605d      	str	r5, [r3, #4]
 8004650:	9804      	ldr	r0, [sp, #16]
 8004652:	9905      	ldr	r1, [sp, #20]
 8004654:	0022      	movs	r2, r4
 8004656:	002b      	movs	r3, r5
 8004658:	f002 fb96 	bl	8006d88 <__aeabi_dsub>
 800465c:	9a06      	ldr	r2, [sp, #24]
 800465e:	9b07      	ldr	r3, [sp, #28]
 8004660:	f002 fb92 	bl	8006d88 <__aeabi_dsub>
 8004664:	464b      	mov	r3, r9
 8004666:	0006      	movs	r6, r0
 8004668:	000f      	movs	r7, r1
 800466a:	609e      	str	r6, [r3, #8]
 800466c:	60df      	str	r7, [r3, #12]
 800466e:	4653      	mov	r3, sl
 8004670:	2b00      	cmp	r3, #0
 8004672:	db00      	blt.n	8004676 <__ieee754_rem_pio2+0x242>
 8004674:	e714      	b.n	80044a0 <__ieee754_rem_pio2+0x6c>
 8004676:	464b      	mov	r3, r9
 8004678:	601c      	str	r4, [r3, #0]
 800467a:	2380      	movs	r3, #128	@ 0x80
 800467c:	061b      	lsls	r3, r3, #24
 800467e:	18e9      	adds	r1, r5, r3
 8004680:	464b      	mov	r3, r9
 8004682:	6059      	str	r1, [r3, #4]
 8004684:	609e      	str	r6, [r3, #8]
 8004686:	2380      	movs	r3, #128	@ 0x80
 8004688:	061b      	lsls	r3, r3, #24
 800468a:	469c      	mov	ip, r3
 800468c:	003b      	movs	r3, r7
 800468e:	464a      	mov	r2, r9
 8004690:	4463      	add	r3, ip
 8004692:	60d3      	str	r3, [r2, #12]
 8004694:	465b      	mov	r3, fp
 8004696:	425b      	negs	r3, r3
 8004698:	469b      	mov	fp, r3
 800469a:	e701      	b.n	80044a0 <__ieee754_rem_pio2+0x6c>
 800469c:	153b      	asrs	r3, r7, #20
 800469e:	4698      	mov	r8, r3
 80046a0:	4642      	mov	r2, r8
 80046a2:	006b      	lsls	r3, r5, #1
 80046a4:	0d5b      	lsrs	r3, r3, #21
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	2b10      	cmp	r3, #16
 80046aa:	ddce      	ble.n	800464a <__ieee754_rem_pio2+0x216>
 80046ac:	9802      	ldr	r0, [sp, #8]
 80046ae:	9903      	ldr	r1, [sp, #12]
 80046b0:	22d3      	movs	r2, #211	@ 0xd3
 80046b2:	4b3d      	ldr	r3, [pc, #244]	@ (80047a8 <__ieee754_rem_pio2+0x374>)
 80046b4:	0552      	lsls	r2, r2, #21
 80046b6:	f002 f89f 	bl	80067f8 <__aeabi_dmul>
 80046ba:	0004      	movs	r4, r0
 80046bc:	000d      	movs	r5, r1
 80046be:	0002      	movs	r2, r0
 80046c0:	000b      	movs	r3, r1
 80046c2:	9804      	ldr	r0, [sp, #16]
 80046c4:	9905      	ldr	r1, [sp, #20]
 80046c6:	f002 fb5f 	bl	8006d88 <__aeabi_dsub>
 80046ca:	0006      	movs	r6, r0
 80046cc:	000f      	movs	r7, r1
 80046ce:	0002      	movs	r2, r0
 80046d0:	000b      	movs	r3, r1
 80046d2:	9804      	ldr	r0, [sp, #16]
 80046d4:	9905      	ldr	r1, [sp, #20]
 80046d6:	9608      	str	r6, [sp, #32]
 80046d8:	9709      	str	r7, [sp, #36]	@ 0x24
 80046da:	f002 fb55 	bl	8006d88 <__aeabi_dsub>
 80046de:	0022      	movs	r2, r4
 80046e0:	002b      	movs	r3, r5
 80046e2:	f002 fb51 	bl	8006d88 <__aeabi_dsub>
 80046e6:	0004      	movs	r4, r0
 80046e8:	000d      	movs	r5, r1
 80046ea:	9802      	ldr	r0, [sp, #8]
 80046ec:	9903      	ldr	r1, [sp, #12]
 80046ee:	4a34      	ldr	r2, [pc, #208]	@ (80047c0 <__ieee754_rem_pio2+0x38c>)
 80046f0:	4b34      	ldr	r3, [pc, #208]	@ (80047c4 <__ieee754_rem_pio2+0x390>)
 80046f2:	f002 f881 	bl	80067f8 <__aeabi_dmul>
 80046f6:	0022      	movs	r2, r4
 80046f8:	002b      	movs	r3, r5
 80046fa:	f002 fb45 	bl	8006d88 <__aeabi_dsub>
 80046fe:	0002      	movs	r2, r0
 8004700:	000b      	movs	r3, r1
 8004702:	0030      	movs	r0, r6
 8004704:	0039      	movs	r1, r7
 8004706:	9206      	str	r2, [sp, #24]
 8004708:	9307      	str	r3, [sp, #28]
 800470a:	f002 fb3d 	bl	8006d88 <__aeabi_dsub>
 800470e:	4642      	mov	r2, r8
 8004710:	004b      	lsls	r3, r1, #1
 8004712:	0d5b      	lsrs	r3, r3, #21
 8004714:	0004      	movs	r4, r0
 8004716:	000d      	movs	r5, r1
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	2b31      	cmp	r3, #49	@ 0x31
 800471c:	dc05      	bgt.n	800472a <__ieee754_rem_pio2+0x2f6>
 800471e:	464b      	mov	r3, r9
 8004720:	9604      	str	r6, [sp, #16]
 8004722:	9705      	str	r7, [sp, #20]
 8004724:	601c      	str	r4, [r3, #0]
 8004726:	605d      	str	r5, [r3, #4]
 8004728:	e792      	b.n	8004650 <__ieee754_rem_pio2+0x21c>
 800472a:	22b8      	movs	r2, #184	@ 0xb8
 800472c:	9802      	ldr	r0, [sp, #8]
 800472e:	9903      	ldr	r1, [sp, #12]
 8004730:	4b24      	ldr	r3, [pc, #144]	@ (80047c4 <__ieee754_rem_pio2+0x390>)
 8004732:	0592      	lsls	r2, r2, #22
 8004734:	f002 f860 	bl	80067f8 <__aeabi_dmul>
 8004738:	0004      	movs	r4, r0
 800473a:	000d      	movs	r5, r1
 800473c:	0002      	movs	r2, r0
 800473e:	000b      	movs	r3, r1
 8004740:	9808      	ldr	r0, [sp, #32]
 8004742:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004744:	f002 fb20 	bl	8006d88 <__aeabi_dsub>
 8004748:	0006      	movs	r6, r0
 800474a:	000f      	movs	r7, r1
 800474c:	0002      	movs	r2, r0
 800474e:	000b      	movs	r3, r1
 8004750:	9808      	ldr	r0, [sp, #32]
 8004752:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004754:	9604      	str	r6, [sp, #16]
 8004756:	9705      	str	r7, [sp, #20]
 8004758:	f002 fb16 	bl	8006d88 <__aeabi_dsub>
 800475c:	0022      	movs	r2, r4
 800475e:	002b      	movs	r3, r5
 8004760:	f002 fb12 	bl	8006d88 <__aeabi_dsub>
 8004764:	0004      	movs	r4, r0
 8004766:	000d      	movs	r5, r1
 8004768:	9802      	ldr	r0, [sp, #8]
 800476a:	9903      	ldr	r1, [sp, #12]
 800476c:	4a1a      	ldr	r2, [pc, #104]	@ (80047d8 <__ieee754_rem_pio2+0x3a4>)
 800476e:	4b1b      	ldr	r3, [pc, #108]	@ (80047dc <__ieee754_rem_pio2+0x3a8>)
 8004770:	f002 f842 	bl	80067f8 <__aeabi_dmul>
 8004774:	0022      	movs	r2, r4
 8004776:	002b      	movs	r3, r5
 8004778:	f002 fb06 	bl	8006d88 <__aeabi_dsub>
 800477c:	0002      	movs	r2, r0
 800477e:	000b      	movs	r3, r1
 8004780:	0030      	movs	r0, r6
 8004782:	0039      	movs	r1, r7
 8004784:	9206      	str	r2, [sp, #24]
 8004786:	9307      	str	r3, [sp, #28]
 8004788:	f002 fafe 	bl	8006d88 <__aeabi_dsub>
 800478c:	0004      	movs	r4, r0
 800478e:	000d      	movs	r5, r1
 8004790:	e75b      	b.n	800464a <__ieee754_rem_pio2+0x216>
 8004792:	46c0      	nop			@ (mov r8, r8)
 8004794:	3fe921fb 	.word	0x3fe921fb
 8004798:	4002d97b 	.word	0x4002d97b
 800479c:	54400000 	.word	0x54400000
 80047a0:	3ff921fb 	.word	0x3ff921fb
 80047a4:	1a626331 	.word	0x1a626331
 80047a8:	3dd0b461 	.word	0x3dd0b461
 80047ac:	413921fb 	.word	0x413921fb
 80047b0:	7fefffff 	.word	0x7fefffff
 80047b4:	fffffbea 	.word	0xfffffbea
 80047b8:	41700000 	.word	0x41700000
 80047bc:	08007990 	.word	0x08007990
 80047c0:	2e037073 	.word	0x2e037073
 80047c4:	3ba3198a 	.word	0x3ba3198a
 80047c8:	6dc9c883 	.word	0x6dc9c883
 80047cc:	3fe45f30 	.word	0x3fe45f30
 80047d0:	3fe00000 	.word	0x3fe00000
 80047d4:	08007910 	.word	0x08007910
 80047d8:	252049c1 	.word	0x252049c1
 80047dc:	397b839a 	.word	0x397b839a
 80047e0:	4b1c      	ldr	r3, [pc, #112]	@ (8004854 <__ieee754_rem_pio2+0x420>)
 80047e2:	f000 ffad 	bl	8005740 <__aeabi_dadd>
 80047e6:	4b1b      	ldr	r3, [pc, #108]	@ (8004854 <__ieee754_rem_pio2+0x420>)
 80047e8:	0004      	movs	r4, r0
 80047ea:	000d      	movs	r5, r1
 80047ec:	429f      	cmp	r7, r3
 80047ee:	d018      	beq.n	8004822 <__ieee754_rem_pio2+0x3ee>
 80047f0:	4a19      	ldr	r2, [pc, #100]	@ (8004858 <__ieee754_rem_pio2+0x424>)
 80047f2:	4b1a      	ldr	r3, [pc, #104]	@ (800485c <__ieee754_rem_pio2+0x428>)
 80047f4:	f000 ffa4 	bl	8005740 <__aeabi_dadd>
 80047f8:	0002      	movs	r2, r0
 80047fa:	000b      	movs	r3, r1
 80047fc:	0006      	movs	r6, r0
 80047fe:	000f      	movs	r7, r1
 8004800:	0020      	movs	r0, r4
 8004802:	0029      	movs	r1, r5
 8004804:	f002 fac0 	bl	8006d88 <__aeabi_dsub>
 8004808:	4a13      	ldr	r2, [pc, #76]	@ (8004858 <__ieee754_rem_pio2+0x424>)
 800480a:	4b14      	ldr	r3, [pc, #80]	@ (800485c <__ieee754_rem_pio2+0x428>)
 800480c:	f000 ff98 	bl	8005740 <__aeabi_dadd>
 8004810:	464b      	mov	r3, r9
 8004812:	601e      	str	r6, [r3, #0]
 8004814:	605f      	str	r7, [r3, #4]
 8004816:	6098      	str	r0, [r3, #8]
 8004818:	60d9      	str	r1, [r3, #12]
 800481a:	2301      	movs	r3, #1
 800481c:	425b      	negs	r3, r3
 800481e:	469b      	mov	fp, r3
 8004820:	e63e      	b.n	80044a0 <__ieee754_rem_pio2+0x6c>
 8004822:	22d3      	movs	r2, #211	@ 0xd3
 8004824:	4b0d      	ldr	r3, [pc, #52]	@ (800485c <__ieee754_rem_pio2+0x428>)
 8004826:	0552      	lsls	r2, r2, #21
 8004828:	f000 ff8a 	bl	8005740 <__aeabi_dadd>
 800482c:	4a0c      	ldr	r2, [pc, #48]	@ (8004860 <__ieee754_rem_pio2+0x42c>)
 800482e:	4b0d      	ldr	r3, [pc, #52]	@ (8004864 <__ieee754_rem_pio2+0x430>)
 8004830:	0004      	movs	r4, r0
 8004832:	000d      	movs	r5, r1
 8004834:	f000 ff84 	bl	8005740 <__aeabi_dadd>
 8004838:	0002      	movs	r2, r0
 800483a:	000b      	movs	r3, r1
 800483c:	0006      	movs	r6, r0
 800483e:	000f      	movs	r7, r1
 8004840:	0020      	movs	r0, r4
 8004842:	0029      	movs	r1, r5
 8004844:	f002 faa0 	bl	8006d88 <__aeabi_dsub>
 8004848:	4a05      	ldr	r2, [pc, #20]	@ (8004860 <__ieee754_rem_pio2+0x42c>)
 800484a:	4b06      	ldr	r3, [pc, #24]	@ (8004864 <__ieee754_rem_pio2+0x430>)
 800484c:	f000 ff78 	bl	8005740 <__aeabi_dadd>
 8004850:	e7de      	b.n	8004810 <__ieee754_rem_pio2+0x3dc>
 8004852:	46c0      	nop			@ (mov r8, r8)
 8004854:	3ff921fb 	.word	0x3ff921fb
 8004858:	1a626331 	.word	0x1a626331
 800485c:	3dd0b461 	.word	0x3dd0b461
 8004860:	2e037073 	.word	0x2e037073
 8004864:	3ba3198a 	.word	0x3ba3198a

08004868 <__kernel_rem_pio2>:
 8004868:	b5f0      	push	{r4, r5, r6, r7, lr}
 800486a:	4657      	mov	r7, sl
 800486c:	46de      	mov	lr, fp
 800486e:	464e      	mov	r6, r9
 8004870:	4645      	mov	r5, r8
 8004872:	b5e0      	push	{r5, r6, r7, lr}
 8004874:	4cc3      	ldr	r4, [pc, #780]	@ (8004b84 <__kernel_rem_pio2+0x31c>)
 8004876:	44a5      	add	sp, r4
 8004878:	910d      	str	r1, [sp, #52]	@ 0x34
 800487a:	0019      	movs	r1, r3
 800487c:	0014      	movs	r4, r2
 800487e:	9aa4      	ldr	r2, [sp, #656]	@ 0x290
 8004880:	930a      	str	r3, [sp, #40]	@ 0x28
 8004882:	4bc1      	ldr	r3, [pc, #772]	@ (8004b88 <__kernel_rem_pio2+0x320>)
 8004884:	0092      	lsls	r2, r2, #2
 8004886:	58d2      	ldr	r2, [r2, r3]
 8004888:	000b      	movs	r3, r1
 800488a:	3b01      	subs	r3, #1
 800488c:	9304      	str	r3, [sp, #16]
 800488e:	0023      	movs	r3, r4
 8004890:	9fa5      	ldr	r7, [sp, #660]	@ 0x294
 8004892:	9006      	str	r0, [sp, #24]
 8004894:	9208      	str	r2, [sp, #32]
 8004896:	3314      	adds	r3, #20
 8004898:	da00      	bge.n	800489c <__kernel_rem_pio2+0x34>
 800489a:	e318      	b.n	8004ece <__kernel_rem_pio2+0x666>
 800489c:	2118      	movs	r1, #24
 800489e:	1ee0      	subs	r0, r4, #3
 80048a0:	f7fb fcaa 	bl	80001f8 <__divsi3>
 80048a4:	0003      	movs	r3, r0
 80048a6:	3301      	adds	r3, #1
 80048a8:	009a      	lsls	r2, r3, #2
 80048aa:	1a9b      	subs	r3, r3, r2
 80048ac:	9005      	str	r0, [sp, #20]
 80048ae:	00db      	lsls	r3, r3, #3
 80048b0:	18e3      	adds	r3, r4, r3
 80048b2:	9a05      	ldr	r2, [sp, #20]
 80048b4:	9307      	str	r3, [sp, #28]
 80048b6:	9b04      	ldr	r3, [sp, #16]
 80048b8:	1ad4      	subs	r4, r2, r3
 80048ba:	9a08      	ldr	r2, [sp, #32]
 80048bc:	18d6      	adds	r6, r2, r3
 80048be:	d413      	bmi.n	80048e8 <__kernel_rem_pio2+0x80>
 80048c0:	3601      	adds	r6, #1
 80048c2:	ad22      	add	r5, sp, #136	@ 0x88
 80048c4:	1936      	adds	r6, r6, r4
 80048c6:	e007      	b.n	80048d8 <__kernel_rem_pio2+0x70>
 80048c8:	00a3      	lsls	r3, r4, #2
 80048ca:	58f8      	ldr	r0, [r7, r3]
 80048cc:	f002 fef2 	bl	80076b4 <__aeabi_i2d>
 80048d0:	3401      	adds	r4, #1
 80048d2:	c503      	stmia	r5!, {r0, r1}
 80048d4:	42b4      	cmp	r4, r6
 80048d6:	d007      	beq.n	80048e8 <__kernel_rem_pio2+0x80>
 80048d8:	2c00      	cmp	r4, #0
 80048da:	daf5      	bge.n	80048c8 <__kernel_rem_pio2+0x60>
 80048dc:	2000      	movs	r0, #0
 80048de:	2100      	movs	r1, #0
 80048e0:	3401      	adds	r4, #1
 80048e2:	c503      	stmia	r5!, {r0, r1}
 80048e4:	42b4      	cmp	r4, r6
 80048e6:	d1f7      	bne.n	80048d8 <__kernel_rem_pio2+0x70>
 80048e8:	9b08      	ldr	r3, [sp, #32]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	da01      	bge.n	80048f2 <__kernel_rem_pio2+0x8a>
 80048ee:	f000 fbfe 	bl	80050ee <__kernel_rem_pio2+0x886>
 80048f2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80048f4:	aa22      	add	r2, sp, #136	@ 0x88
 80048f6:	468c      	mov	ip, r1
 80048f8:	4693      	mov	fp, r2
 80048fa:	9a08      	ldr	r2, [sp, #32]
 80048fc:	ab72      	add	r3, sp, #456	@ 0x1c8
 80048fe:	4462      	add	r2, ip
 8004900:	4699      	mov	r9, r3
 8004902:	9300      	str	r3, [sp, #0]
 8004904:	9203      	str	r2, [sp, #12]
 8004906:	9b04      	ldr	r3, [sp, #16]
 8004908:	9a06      	ldr	r2, [sp, #24]
 800490a:	469a      	mov	sl, r3
 800490c:	4690      	mov	r8, r2
 800490e:	00db      	lsls	r3, r3, #3
 8004910:	449b      	add	fp, r3
 8004912:	3308      	adds	r3, #8
 8004914:	4498      	add	r8, r3
 8004916:	2200      	movs	r2, #0
 8004918:	2300      	movs	r3, #0
 800491a:	4648      	mov	r0, r9
 800491c:	465c      	mov	r4, fp
 800491e:	4651      	mov	r1, sl
 8004920:	9d04      	ldr	r5, [sp, #16]
 8004922:	2d00      	cmp	r5, #0
 8004924:	db00      	blt.n	8004928 <__kernel_rem_pio2+0xc0>
 8004926:	e1ed      	b.n	8004d04 <__kernel_rem_pio2+0x49c>
 8004928:	9d03      	ldr	r5, [sp, #12]
 800492a:	3101      	adds	r1, #1
 800492c:	c00c      	stmia	r0!, {r2, r3}
 800492e:	3408      	adds	r4, #8
 8004930:	42a9      	cmp	r1, r5
 8004932:	d1f5      	bne.n	8004920 <__kernel_rem_pio2+0xb8>
 8004934:	9908      	ldr	r1, [sp, #32]
 8004936:	aa0d      	add	r2, sp, #52	@ 0x34
 8004938:	008b      	lsls	r3, r1, #2
 800493a:	18d2      	adds	r2, r2, r3
 800493c:	920c      	str	r2, [sp, #48]	@ 0x30
 800493e:	aa0e      	add	r2, sp, #56	@ 0x38
 8004940:	4694      	mov	ip, r2
 8004942:	9a06      	ldr	r2, [sp, #24]
 8004944:	4688      	mov	r8, r1
 8004946:	4693      	mov	fp, r2
 8004948:	3b08      	subs	r3, #8
 800494a:	4463      	add	r3, ip
 800494c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800494e:	9b05      	ldr	r3, [sp, #20]
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	18fb      	adds	r3, r7, r3
 8004954:	9305      	str	r3, [sp, #20]
 8004956:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004958:	00db      	lsls	r3, r3, #3
 800495a:	449b      	add	fp, r3
 800495c:	4643      	mov	r3, r8
 800495e:	00db      	lsls	r3, r3, #3
 8004960:	0019      	movs	r1, r3
 8004962:	9a00      	ldr	r2, [sp, #0]
 8004964:	468c      	mov	ip, r1
 8004966:	9309      	str	r3, [sp, #36]	@ 0x24
 8004968:	0013      	movs	r3, r2
 800496a:	4463      	add	r3, ip
 800496c:	681e      	ldr	r6, [r3, #0]
 800496e:	685f      	ldr	r7, [r3, #4]
 8004970:	4643      	mov	r3, r8
 8004972:	2b00      	cmp	r3, #0
 8004974:	dd32      	ble.n	80049dc <__kernel_rem_pio2+0x174>
 8004976:	4691      	mov	r9, r2
 8004978:	4b84      	ldr	r3, [pc, #528]	@ (8004b8c <__kernel_rem_pio2+0x324>)
 800497a:	4443      	add	r3, r8
 800497c:	00db      	lsls	r3, r3, #3
 800497e:	4499      	add	r9, r3
 8004980:	ab0e      	add	r3, sp, #56	@ 0x38
 8004982:	469a      	mov	sl, r3
 8004984:	2200      	movs	r2, #0
 8004986:	4b82      	ldr	r3, [pc, #520]	@ (8004b90 <__kernel_rem_pio2+0x328>)
 8004988:	0030      	movs	r0, r6
 800498a:	0039      	movs	r1, r7
 800498c:	f001 ff34 	bl	80067f8 <__aeabi_dmul>
 8004990:	f002 fe54 	bl	800763c <__aeabi_d2iz>
 8004994:	f002 fe8e 	bl	80076b4 <__aeabi_i2d>
 8004998:	2200      	movs	r2, #0
 800499a:	4b7e      	ldr	r3, [pc, #504]	@ (8004b94 <__kernel_rem_pio2+0x32c>)
 800499c:	0004      	movs	r4, r0
 800499e:	000d      	movs	r5, r1
 80049a0:	f001 ff2a 	bl	80067f8 <__aeabi_dmul>
 80049a4:	0002      	movs	r2, r0
 80049a6:	000b      	movs	r3, r1
 80049a8:	0030      	movs	r0, r6
 80049aa:	0039      	movs	r1, r7
 80049ac:	f002 f9ec 	bl	8006d88 <__aeabi_dsub>
 80049b0:	f002 fe44 	bl	800763c <__aeabi_d2iz>
 80049b4:	4653      	mov	r3, sl
 80049b6:	c301      	stmia	r3!, {r0}
 80049b8:	469a      	mov	sl, r3
 80049ba:	464b      	mov	r3, r9
 80049bc:	0020      	movs	r0, r4
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	0029      	movs	r1, r5
 80049c4:	f000 febc 	bl	8005740 <__aeabi_dadd>
 80049c8:	2208      	movs	r2, #8
 80049ca:	4252      	negs	r2, r2
 80049cc:	4694      	mov	ip, r2
 80049ce:	464b      	mov	r3, r9
 80049d0:	9a00      	ldr	r2, [sp, #0]
 80049d2:	0006      	movs	r6, r0
 80049d4:	000f      	movs	r7, r1
 80049d6:	44e1      	add	r9, ip
 80049d8:	429a      	cmp	r2, r3
 80049da:	d1d3      	bne.n	8004984 <__kernel_rem_pio2+0x11c>
 80049dc:	9b07      	ldr	r3, [sp, #28]
 80049de:	0030      	movs	r0, r6
 80049e0:	001a      	movs	r2, r3
 80049e2:	0039      	movs	r1, r7
 80049e4:	469a      	mov	sl, r3
 80049e6:	f000 fd6b 	bl	80054c0 <scalbn>
 80049ea:	23ff      	movs	r3, #255	@ 0xff
 80049ec:	2200      	movs	r2, #0
 80049ee:	059b      	lsls	r3, r3, #22
 80049f0:	0004      	movs	r4, r0
 80049f2:	000d      	movs	r5, r1
 80049f4:	f001 ff00 	bl	80067f8 <__aeabi_dmul>
 80049f8:	f000 fdde 	bl	80055b8 <floor>
 80049fc:	2200      	movs	r2, #0
 80049fe:	4b66      	ldr	r3, [pc, #408]	@ (8004b98 <__kernel_rem_pio2+0x330>)
 8004a00:	f001 fefa 	bl	80067f8 <__aeabi_dmul>
 8004a04:	0002      	movs	r2, r0
 8004a06:	000b      	movs	r3, r1
 8004a08:	0020      	movs	r0, r4
 8004a0a:	0029      	movs	r1, r5
 8004a0c:	f002 f9bc 	bl	8006d88 <__aeabi_dsub>
 8004a10:	0004      	movs	r4, r0
 8004a12:	000d      	movs	r5, r1
 8004a14:	f002 fe12 	bl	800763c <__aeabi_d2iz>
 8004a18:	4681      	mov	r9, r0
 8004a1a:	f002 fe4b 	bl	80076b4 <__aeabi_i2d>
 8004a1e:	0002      	movs	r2, r0
 8004a20:	000b      	movs	r3, r1
 8004a22:	0020      	movs	r0, r4
 8004a24:	0029      	movs	r1, r5
 8004a26:	f002 f9af 	bl	8006d88 <__aeabi_dsub>
 8004a2a:	4654      	mov	r4, sl
 8004a2c:	0006      	movs	r6, r0
 8004a2e:	000f      	movs	r7, r1
 8004a30:	2c00      	cmp	r4, #0
 8004a32:	dc00      	bgt.n	8004a36 <__kernel_rem_pio2+0x1ce>
 8004a34:	e082      	b.n	8004b3c <__kernel_rem_pio2+0x2d4>
 8004a36:	4643      	mov	r3, r8
 8004a38:	1e5a      	subs	r2, r3, #1
 8004a3a:	0092      	lsls	r2, r2, #2
 8004a3c:	ab0e      	add	r3, sp, #56	@ 0x38
 8004a3e:	5898      	ldr	r0, [r3, r2]
 8004a40:	2118      	movs	r1, #24
 8004a42:	0003      	movs	r3, r0
 8004a44:	1b09      	subs	r1, r1, r4
 8004a46:	410b      	asrs	r3, r1
 8004a48:	4499      	add	r9, r3
 8004a4a:	408b      	lsls	r3, r1
 8004a4c:	a90e      	add	r1, sp, #56	@ 0x38
 8004a4e:	1ac3      	subs	r3, r0, r3
 8004a50:	508b      	str	r3, [r1, r2]
 8004a52:	2117      	movs	r1, #23
 8004a54:	001d      	movs	r5, r3
 8004a56:	1b09      	subs	r1, r1, r4
 8004a58:	410d      	asrs	r5, r1
 8004a5a:	2d00      	cmp	r5, #0
 8004a5c:	dd00      	ble.n	8004a60 <__kernel_rem_pio2+0x1f8>
 8004a5e:	e13c      	b.n	8004cda <__kernel_rem_pio2+0x472>
 8004a60:	2200      	movs	r2, #0
 8004a62:	2300      	movs	r3, #0
 8004a64:	0030      	movs	r0, r6
 8004a66:	0039      	movs	r1, r7
 8004a68:	f7fb fcc2 	bl	80003f0 <__aeabi_dcmpeq>
 8004a6c:	2800      	cmp	r0, #0
 8004a6e:	d100      	bne.n	8004a72 <__kernel_rem_pio2+0x20a>
 8004a70:	e0d8      	b.n	8004c24 <__kernel_rem_pio2+0x3bc>
 8004a72:	9b08      	ldr	r3, [sp, #32]
 8004a74:	4598      	cmp	r8, r3
 8004a76:	dd0f      	ble.n	8004a98 <__kernel_rem_pio2+0x230>
 8004a78:	aa0e      	add	r2, sp, #56	@ 0x38
 8004a7a:	4694      	mov	ip, r2
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	4b47      	ldr	r3, [pc, #284]	@ (8004b9c <__kernel_rem_pio2+0x334>)
 8004a80:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8004a82:	4443      	add	r3, r8
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	4463      	add	r3, ip
 8004a88:	6819      	ldr	r1, [r3, #0]
 8004a8a:	3b04      	subs	r3, #4
 8004a8c:	430a      	orrs	r2, r1
 8004a8e:	4283      	cmp	r3, r0
 8004a90:	d1fa      	bne.n	8004a88 <__kernel_rem_pio2+0x220>
 8004a92:	2a00      	cmp	r2, #0
 8004a94:	d000      	beq.n	8004a98 <__kernel_rem_pio2+0x230>
 8004a96:	e15b      	b.n	8004d50 <__kernel_rem_pio2+0x4e8>
 8004a98:	2301      	movs	r3, #1
 8004a9a:	4443      	add	r3, r8
 8004a9c:	469a      	mov	sl, r3
 8004a9e:	9b08      	ldr	r3, [sp, #32]
 8004aa0:	aa0e      	add	r2, sp, #56	@ 0x38
 8004aa2:	3b01      	subs	r3, #1
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	58d3      	ldr	r3, [r2, r3]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d000      	beq.n	8004aae <__kernel_rem_pio2+0x246>
 8004aac:	e127      	b.n	8004cfe <__kernel_rem_pio2+0x496>
 8004aae:	2201      	movs	r2, #1
 8004ab0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004ab2:	6819      	ldr	r1, [r3, #0]
 8004ab4:	3b04      	subs	r3, #4
 8004ab6:	3201      	adds	r2, #1
 8004ab8:	2900      	cmp	r1, #0
 8004aba:	d0fa      	beq.n	8004ab2 <__kernel_rem_pio2+0x24a>
 8004abc:	0013      	movs	r3, r2
 8004abe:	4443      	add	r3, r8
 8004ac0:	9303      	str	r3, [sp, #12]
 8004ac2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004ac4:	aa22      	add	r2, sp, #136	@ 0x88
 8004ac6:	4443      	add	r3, r8
 8004ac8:	4690      	mov	r8, r2
 8004aca:	9a00      	ldr	r2, [sp, #0]
 8004acc:	00db      	lsls	r3, r3, #3
 8004ace:	4694      	mov	ip, r2
 8004ad0:	4498      	add	r8, r3
 8004ad2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ad4:	4463      	add	r3, ip
 8004ad6:	4699      	mov	r9, r3
 8004ad8:	4653      	mov	r3, sl
 8004ada:	9a05      	ldr	r2, [sp, #20]
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	58d0      	ldr	r0, [r2, r3]
 8004ae0:	f002 fde8 	bl	80076b4 <__aeabi_i2d>
 8004ae4:	4643      	mov	r3, r8
 8004ae6:	6018      	str	r0, [r3, #0]
 8004ae8:	6059      	str	r1, [r3, #4]
 8004aea:	9b04      	ldr	r3, [sp, #16]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	db22      	blt.n	8004b36 <__kernel_rem_pio2+0x2ce>
 8004af0:	4647      	mov	r7, r8
 8004af2:	2400      	movs	r4, #0
 8004af4:	2500      	movs	r5, #0
 8004af6:	9e06      	ldr	r6, [sp, #24]
 8004af8:	683a      	ldr	r2, [r7, #0]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	ce03      	ldmia	r6!, {r0, r1}
 8004afe:	f001 fe7b 	bl	80067f8 <__aeabi_dmul>
 8004b02:	0002      	movs	r2, r0
 8004b04:	000b      	movs	r3, r1
 8004b06:	0020      	movs	r0, r4
 8004b08:	0029      	movs	r1, r5
 8004b0a:	f000 fe19 	bl	8005740 <__aeabi_dadd>
 8004b0e:	3f08      	subs	r7, #8
 8004b10:	0004      	movs	r4, r0
 8004b12:	000d      	movs	r5, r1
 8004b14:	455e      	cmp	r6, fp
 8004b16:	d1ef      	bne.n	8004af8 <__kernel_rem_pio2+0x290>
 8004b18:	464b      	mov	r3, r9
 8004b1a:	609c      	str	r4, [r3, #8]
 8004b1c:	60dd      	str	r5, [r3, #12]
 8004b1e:	2301      	movs	r3, #1
 8004b20:	469c      	mov	ip, r3
 8004b22:	3307      	adds	r3, #7
 8004b24:	44e2      	add	sl, ip
 8004b26:	469c      	mov	ip, r3
 8004b28:	9b03      	ldr	r3, [sp, #12]
 8004b2a:	44e0      	add	r8, ip
 8004b2c:	44e1      	add	r9, ip
 8004b2e:	459a      	cmp	sl, r3
 8004b30:	ddd2      	ble.n	8004ad8 <__kernel_rem_pio2+0x270>
 8004b32:	4698      	mov	r8, r3
 8004b34:	e712      	b.n	800495c <__kernel_rem_pio2+0xf4>
 8004b36:	2400      	movs	r4, #0
 8004b38:	2500      	movs	r5, #0
 8004b3a:	e7ed      	b.n	8004b18 <__kernel_rem_pio2+0x2b0>
 8004b3c:	9b07      	ldr	r3, [sp, #28]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d100      	bne.n	8004b44 <__kernel_rem_pio2+0x2dc>
 8004b42:	e0ae      	b.n	8004ca2 <__kernel_rem_pio2+0x43a>
 8004b44:	2200      	movs	r2, #0
 8004b46:	4b16      	ldr	r3, [pc, #88]	@ (8004ba0 <__kernel_rem_pio2+0x338>)
 8004b48:	f7fb fc76 	bl	8000438 <__aeabi_dcmpge>
 8004b4c:	2500      	movs	r5, #0
 8004b4e:	2800      	cmp	r0, #0
 8004b50:	d086      	beq.n	8004a60 <__kernel_rem_pio2+0x1f8>
 8004b52:	2301      	movs	r3, #1
 8004b54:	469c      	mov	ip, r3
 8004b56:	4643      	mov	r3, r8
 8004b58:	2502      	movs	r5, #2
 8004b5a:	44e1      	add	r9, ip
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	dc00      	bgt.n	8004b62 <__kernel_rem_pio2+0x2fa>
 8004b60:	e0b2      	b.n	8004cc8 <__kernel_rem_pio2+0x460>
 8004b62:	ab0e      	add	r3, sp, #56	@ 0x38
 8004b64:	0018      	movs	r0, r3
 8004b66:	2200      	movs	r2, #0
 8004b68:	4641      	mov	r1, r8
 8004b6a:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8004b6c:	2c00      	cmp	r4, #0
 8004b6e:	d100      	bne.n	8004b72 <__kernel_rem_pio2+0x30a>
 8004b70:	e08f      	b.n	8004c92 <__kernel_rem_pio2+0x42a>
 8004b72:	4688      	mov	r8, r1
 8004b74:	2180      	movs	r1, #128	@ 0x80
 8004b76:	0449      	lsls	r1, r1, #17
 8004b78:	1b09      	subs	r1, r1, r4
 8004b7a:	6001      	str	r1, [r0, #0]
 8004b7c:	4644      	mov	r4, r8
 8004b7e:	4809      	ldr	r0, [pc, #36]	@ (8004ba4 <__kernel_rem_pio2+0x33c>)
 8004b80:	e015      	b.n	8004bae <__kernel_rem_pio2+0x346>
 8004b82:	46c0      	nop			@ (mov r8, r8)
 8004b84:	fffffd94 	.word	0xfffffd94
 8004b88:	08007ad8 	.word	0x08007ad8
 8004b8c:	1fffffff 	.word	0x1fffffff
 8004b90:	3e700000 	.word	0x3e700000
 8004b94:	41700000 	.word	0x41700000
 8004b98:	40200000 	.word	0x40200000
 8004b9c:	3fffffff 	.word	0x3fffffff
 8004ba0:	3fe00000 	.word	0x3fe00000
 8004ba4:	00ffffff 	.word	0x00ffffff
 8004ba8:	6819      	ldr	r1, [r3, #0]
 8004baa:	1a41      	subs	r1, r0, r1
 8004bac:	6019      	str	r1, [r3, #0]
 8004bae:	3201      	adds	r2, #1
 8004bb0:	3304      	adds	r3, #4
 8004bb2:	4294      	cmp	r4, r2
 8004bb4:	dcf8      	bgt.n	8004ba8 <__kernel_rem_pio2+0x340>
 8004bb6:	46a0      	mov	r8, r4
 8004bb8:	2401      	movs	r4, #1
 8004bba:	9b07      	ldr	r3, [sp, #28]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	dd0d      	ble.n	8004bdc <__kernel_rem_pio2+0x374>
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d100      	bne.n	8004bc6 <__kernel_rem_pio2+0x35e>
 8004bc4:	e179      	b.n	8004eba <__kernel_rem_pio2+0x652>
 8004bc6:	2b02      	cmp	r3, #2
 8004bc8:	d108      	bne.n	8004bdc <__kernel_rem_pio2+0x374>
 8004bca:	4643      	mov	r3, r8
 8004bcc:	1e5a      	subs	r2, r3, #1
 8004bce:	0092      	lsls	r2, r2, #2
 8004bd0:	ab0e      	add	r3, sp, #56	@ 0x38
 8004bd2:	589b      	ldr	r3, [r3, r2]
 8004bd4:	a90e      	add	r1, sp, #56	@ 0x38
 8004bd6:	029b      	lsls	r3, r3, #10
 8004bd8:	0a9b      	lsrs	r3, r3, #10
 8004bda:	508b      	str	r3, [r1, r2]
 8004bdc:	2d02      	cmp	r5, #2
 8004bde:	d000      	beq.n	8004be2 <__kernel_rem_pio2+0x37a>
 8004be0:	e73e      	b.n	8004a60 <__kernel_rem_pio2+0x1f8>
 8004be2:	0032      	movs	r2, r6
 8004be4:	003b      	movs	r3, r7
 8004be6:	2000      	movs	r0, #0
 8004be8:	49bb      	ldr	r1, [pc, #748]	@ (8004ed8 <__kernel_rem_pio2+0x670>)
 8004bea:	f002 f8cd 	bl	8006d88 <__aeabi_dsub>
 8004bee:	0006      	movs	r6, r0
 8004bf0:	000f      	movs	r7, r1
 8004bf2:	2c00      	cmp	r4, #0
 8004bf4:	d100      	bne.n	8004bf8 <__kernel_rem_pio2+0x390>
 8004bf6:	e733      	b.n	8004a60 <__kernel_rem_pio2+0x1f8>
 8004bf8:	9a07      	ldr	r2, [sp, #28]
 8004bfa:	2000      	movs	r0, #0
 8004bfc:	49b6      	ldr	r1, [pc, #728]	@ (8004ed8 <__kernel_rem_pio2+0x670>)
 8004bfe:	f000 fc5f 	bl	80054c0 <scalbn>
 8004c02:	0002      	movs	r2, r0
 8004c04:	000b      	movs	r3, r1
 8004c06:	0030      	movs	r0, r6
 8004c08:	0039      	movs	r1, r7
 8004c0a:	f002 f8bd 	bl	8006d88 <__aeabi_dsub>
 8004c0e:	0006      	movs	r6, r0
 8004c10:	000f      	movs	r7, r1
 8004c12:	2200      	movs	r2, #0
 8004c14:	2300      	movs	r3, #0
 8004c16:	0030      	movs	r0, r6
 8004c18:	0039      	movs	r1, r7
 8004c1a:	f7fb fbe9 	bl	80003f0 <__aeabi_dcmpeq>
 8004c1e:	2800      	cmp	r0, #0
 8004c20:	d000      	beq.n	8004c24 <__kernel_rem_pio2+0x3bc>
 8004c22:	e726      	b.n	8004a72 <__kernel_rem_pio2+0x20a>
 8004c24:	464b      	mov	r3, r9
 8004c26:	9306      	str	r3, [sp, #24]
 8004c28:	9b07      	ldr	r3, [sp, #28]
 8004c2a:	0030      	movs	r0, r6
 8004c2c:	425a      	negs	r2, r3
 8004c2e:	0039      	movs	r1, r7
 8004c30:	9505      	str	r5, [sp, #20]
 8004c32:	f000 fc45 	bl	80054c0 <scalbn>
 8004c36:	2200      	movs	r2, #0
 8004c38:	4ba8      	ldr	r3, [pc, #672]	@ (8004edc <__kernel_rem_pio2+0x674>)
 8004c3a:	0006      	movs	r6, r0
 8004c3c:	000f      	movs	r7, r1
 8004c3e:	f7fb fbfb 	bl	8000438 <__aeabi_dcmpge>
 8004c42:	2800      	cmp	r0, #0
 8004c44:	d100      	bne.n	8004c48 <__kernel_rem_pio2+0x3e0>
 8004c46:	e212      	b.n	800506e <__kernel_rem_pio2+0x806>
 8004c48:	4ba5      	ldr	r3, [pc, #660]	@ (8004ee0 <__kernel_rem_pio2+0x678>)
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	0030      	movs	r0, r6
 8004c4e:	0039      	movs	r1, r7
 8004c50:	f001 fdd2 	bl	80067f8 <__aeabi_dmul>
 8004c54:	f002 fcf2 	bl	800763c <__aeabi_d2iz>
 8004c58:	4642      	mov	r2, r8
 8004c5a:	0004      	movs	r4, r0
 8004c5c:	0095      	lsls	r5, r2, #2
 8004c5e:	f002 fd29 	bl	80076b4 <__aeabi_i2d>
 8004c62:	2200      	movs	r2, #0
 8004c64:	4b9d      	ldr	r3, [pc, #628]	@ (8004edc <__kernel_rem_pio2+0x674>)
 8004c66:	f001 fdc7 	bl	80067f8 <__aeabi_dmul>
 8004c6a:	0002      	movs	r2, r0
 8004c6c:	000b      	movs	r3, r1
 8004c6e:	0030      	movs	r0, r6
 8004c70:	0039      	movs	r1, r7
 8004c72:	f002 f889 	bl	8006d88 <__aeabi_dsub>
 8004c76:	f002 fce1 	bl	800763c <__aeabi_d2iz>
 8004c7a:	aa0e      	add	r2, sp, #56	@ 0x38
 8004c7c:	5150      	str	r0, [r2, r5]
 8004c7e:	4642      	mov	r2, r8
 8004c80:	9b07      	ldr	r3, [sp, #28]
 8004c82:	3201      	adds	r2, #1
 8004c84:	3318      	adds	r3, #24
 8004c86:	9203      	str	r2, [sp, #12]
 8004c88:	9307      	str	r3, [sp, #28]
 8004c8a:	0093      	lsls	r3, r2, #2
 8004c8c:	aa0e      	add	r2, sp, #56	@ 0x38
 8004c8e:	50d4      	str	r4, [r2, r3]
 8004c90:	e079      	b.n	8004d86 <__kernel_rem_pio2+0x51e>
 8004c92:	3201      	adds	r2, #1
 8004c94:	3304      	adds	r3, #4
 8004c96:	4291      	cmp	r1, r2
 8004c98:	dc00      	bgt.n	8004c9c <__kernel_rem_pio2+0x434>
 8004c9a:	e10c      	b.n	8004eb6 <__kernel_rem_pio2+0x64e>
 8004c9c:	0018      	movs	r0, r3
 8004c9e:	681c      	ldr	r4, [r3, #0]
 8004ca0:	e764      	b.n	8004b6c <__kernel_rem_pio2+0x304>
 8004ca2:	4643      	mov	r3, r8
 8004ca4:	3b01      	subs	r3, #1
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	aa0e      	add	r2, sp, #56	@ 0x38
 8004caa:	58d5      	ldr	r5, [r2, r3]
 8004cac:	15ed      	asrs	r5, r5, #23
 8004cae:	2d00      	cmp	r5, #0
 8004cb0:	dc00      	bgt.n	8004cb4 <__kernel_rem_pio2+0x44c>
 8004cb2:	e6d5      	b.n	8004a60 <__kernel_rem_pio2+0x1f8>
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	469c      	mov	ip, r3
 8004cb8:	4643      	mov	r3, r8
 8004cba:	44e1      	add	r9, ip
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	dd00      	ble.n	8004cc2 <__kernel_rem_pio2+0x45a>
 8004cc0:	e74f      	b.n	8004b62 <__kernel_rem_pio2+0x2fa>
 8004cc2:	2d02      	cmp	r5, #2
 8004cc4:	d000      	beq.n	8004cc8 <__kernel_rem_pio2+0x460>
 8004cc6:	e6cb      	b.n	8004a60 <__kernel_rem_pio2+0x1f8>
 8004cc8:	0032      	movs	r2, r6
 8004cca:	003b      	movs	r3, r7
 8004ccc:	2000      	movs	r0, #0
 8004cce:	4982      	ldr	r1, [pc, #520]	@ (8004ed8 <__kernel_rem_pio2+0x670>)
 8004cd0:	f002 f85a 	bl	8006d88 <__aeabi_dsub>
 8004cd4:	0006      	movs	r6, r0
 8004cd6:	000f      	movs	r7, r1
 8004cd8:	e6c2      	b.n	8004a60 <__kernel_rem_pio2+0x1f8>
 8004cda:	2101      	movs	r1, #1
 8004cdc:	468c      	mov	ip, r1
 8004cde:	4641      	mov	r1, r8
 8004ce0:	44e1      	add	r9, ip
 8004ce2:	2900      	cmp	r1, #0
 8004ce4:	dd00      	ble.n	8004ce8 <__kernel_rem_pio2+0x480>
 8004ce6:	e73c      	b.n	8004b62 <__kernel_rem_pio2+0x2fa>
 8004ce8:	9907      	ldr	r1, [sp, #28]
 8004cea:	2901      	cmp	r1, #1
 8004cec:	d100      	bne.n	8004cf0 <__kernel_rem_pio2+0x488>
 8004cee:	e202      	b.n	80050f6 <__kernel_rem_pio2+0x88e>
 8004cf0:	2902      	cmp	r1, #2
 8004cf2:	d1e6      	bne.n	8004cc2 <__kernel_rem_pio2+0x45a>
 8004cf4:	029b      	lsls	r3, r3, #10
 8004cf6:	0a9b      	lsrs	r3, r3, #10
 8004cf8:	a90e      	add	r1, sp, #56	@ 0x38
 8004cfa:	508b      	str	r3, [r1, r2]
 8004cfc:	e7e1      	b.n	8004cc2 <__kernel_rem_pio2+0x45a>
 8004cfe:	4653      	mov	r3, sl
 8004d00:	9303      	str	r3, [sp, #12]
 8004d02:	e6de      	b.n	8004ac2 <__kernel_rem_pio2+0x25a>
 8004d04:	4681      	mov	r9, r0
 8004d06:	46a3      	mov	fp, r4
 8004d08:	468a      	mov	sl, r1
 8004d0a:	97a5      	str	r7, [sp, #660]	@ 0x294
 8004d0c:	465f      	mov	r7, fp
 8004d0e:	2400      	movs	r4, #0
 8004d10:	2500      	movs	r5, #0
 8004d12:	9e06      	ldr	r6, [sp, #24]
 8004d14:	683a      	ldr	r2, [r7, #0]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	ce03      	ldmia	r6!, {r0, r1}
 8004d1a:	f001 fd6d 	bl	80067f8 <__aeabi_dmul>
 8004d1e:	0002      	movs	r2, r0
 8004d20:	000b      	movs	r3, r1
 8004d22:	0020      	movs	r0, r4
 8004d24:	0029      	movs	r1, r5
 8004d26:	f000 fd0b 	bl	8005740 <__aeabi_dadd>
 8004d2a:	3f08      	subs	r7, #8
 8004d2c:	0004      	movs	r4, r0
 8004d2e:	000d      	movs	r5, r1
 8004d30:	4546      	cmp	r6, r8
 8004d32:	d1ef      	bne.n	8004d14 <__kernel_rem_pio2+0x4ac>
 8004d34:	464b      	mov	r3, r9
 8004d36:	c330      	stmia	r3!, {r4, r5}
 8004d38:	4699      	mov	r9, r3
 8004d3a:	2308      	movs	r3, #8
 8004d3c:	469c      	mov	ip, r3
 8004d3e:	3b07      	subs	r3, #7
 8004d40:	44e3      	add	fp, ip
 8004d42:	469c      	mov	ip, r3
 8004d44:	9b03      	ldr	r3, [sp, #12]
 8004d46:	44e2      	add	sl, ip
 8004d48:	459a      	cmp	sl, r3
 8004d4a:	d1df      	bne.n	8004d0c <__kernel_rem_pio2+0x4a4>
 8004d4c:	9fa5      	ldr	r7, [sp, #660]	@ 0x294
 8004d4e:	e5f1      	b.n	8004934 <__kernel_rem_pio2+0xcc>
 8004d50:	464b      	mov	r3, r9
 8004d52:	9306      	str	r3, [sp, #24]
 8004d54:	4643      	mov	r3, r8
 8004d56:	1e5a      	subs	r2, r3, #1
 8004d58:	9907      	ldr	r1, [sp, #28]
 8004d5a:	0093      	lsls	r3, r2, #2
 8004d5c:	a80e      	add	r0, sp, #56	@ 0x38
 8004d5e:	58c3      	ldr	r3, [r0, r3]
 8004d60:	3918      	subs	r1, #24
 8004d62:	9505      	str	r5, [sp, #20]
 8004d64:	9203      	str	r2, [sp, #12]
 8004d66:	9107      	str	r1, [sp, #28]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d10c      	bne.n	8004d86 <__kernel_rem_pio2+0x51e>
 8004d6c:	4684      	mov	ip, r0
 8004d6e:	4b5d      	ldr	r3, [pc, #372]	@ (8004ee4 <__kernel_rem_pio2+0x67c>)
 8004d70:	4443      	add	r3, r8
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	4463      	add	r3, ip
 8004d76:	6818      	ldr	r0, [r3, #0]
 8004d78:	3b04      	subs	r3, #4
 8004d7a:	3a01      	subs	r2, #1
 8004d7c:	3918      	subs	r1, #24
 8004d7e:	2800      	cmp	r0, #0
 8004d80:	d0f9      	beq.n	8004d76 <__kernel_rem_pio2+0x50e>
 8004d82:	9203      	str	r2, [sp, #12]
 8004d84:	9107      	str	r1, [sp, #28]
 8004d86:	2000      	movs	r0, #0
 8004d88:	9a07      	ldr	r2, [sp, #28]
 8004d8a:	4953      	ldr	r1, [pc, #332]	@ (8004ed8 <__kernel_rem_pio2+0x670>)
 8004d8c:	f000 fb98 	bl	80054c0 <scalbn>
 8004d90:	9b03      	ldr	r3, [sp, #12]
 8004d92:	0004      	movs	r4, r0
 8004d94:	000d      	movs	r5, r1
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	da00      	bge.n	8004d9c <__kernel_rem_pio2+0x534>
 8004d9a:	e19c      	b.n	80050d6 <__kernel_rem_pio2+0x86e>
 8004d9c:	009f      	lsls	r7, r3, #2
 8004d9e:	00db      	lsls	r3, r3, #3
 8004da0:	4698      	mov	r8, r3
 8004da2:	9b00      	ldr	r3, [sp, #0]
 8004da4:	aa0e      	add	r2, sp, #56	@ 0x38
 8004da6:	4694      	mov	ip, r2
 8004da8:	001a      	movs	r2, r3
 8004daa:	4442      	add	r2, r8
 8004dac:	4693      	mov	fp, r2
 8004dae:	0016      	movs	r6, r2
 8004db0:	4699      	mov	r9, r3
 8004db2:	4467      	add	r7, ip
 8004db4:	6838      	ldr	r0, [r7, #0]
 8004db6:	f002 fc7d 	bl	80076b4 <__aeabi_i2d>
 8004dba:	0022      	movs	r2, r4
 8004dbc:	002b      	movs	r3, r5
 8004dbe:	f001 fd1b 	bl	80067f8 <__aeabi_dmul>
 8004dc2:	4b47      	ldr	r3, [pc, #284]	@ (8004ee0 <__kernel_rem_pio2+0x678>)
 8004dc4:	6030      	str	r0, [r6, #0]
 8004dc6:	6071      	str	r1, [r6, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	0020      	movs	r0, r4
 8004dcc:	0029      	movs	r1, r5
 8004dce:	f001 fd13 	bl	80067f8 <__aeabi_dmul>
 8004dd2:	3f04      	subs	r7, #4
 8004dd4:	0033      	movs	r3, r6
 8004dd6:	0004      	movs	r4, r0
 8004dd8:	000d      	movs	r5, r1
 8004dda:	3e08      	subs	r6, #8
 8004ddc:	4599      	cmp	r9, r3
 8004dde:	d1e9      	bne.n	8004db4 <__kernel_rem_pio2+0x54c>
 8004de0:	ab4a      	add	r3, sp, #296	@ 0x128
 8004de2:	469a      	mov	sl, r3
 8004de4:	9304      	str	r3, [sp, #16]
 8004de6:	2300      	movs	r3, #0
 8004de8:	4699      	mov	r9, r3
 8004dea:	465b      	mov	r3, fp
 8004dec:	9300      	str	r3, [sp, #0]
 8004dee:	9b08      	ldr	r3, [sp, #32]
 8004df0:	46d3      	mov	fp, sl
 8004df2:	469a      	mov	sl, r3
 8004df4:	4643      	mov	r3, r8
 8004df6:	9307      	str	r3, [sp, #28]
 8004df8:	4653      	mov	r3, sl
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	db2b      	blt.n	8004e56 <__kernel_rem_pio2+0x5ee>
 8004dfe:	4b3a      	ldr	r3, [pc, #232]	@ (8004ee8 <__kernel_rem_pio2+0x680>)
 8004e00:	9f00      	ldr	r7, [sp, #0]
 8004e02:	4698      	mov	r8, r3
 8004e04:	003b      	movs	r3, r7
 8004e06:	2400      	movs	r4, #0
 8004e08:	4647      	mov	r7, r8
 8004e0a:	2500      	movs	r5, #0
 8004e0c:	2600      	movs	r6, #0
 8004e0e:	4698      	mov	r8, r3
 8004e10:	e010      	b.n	8004e34 <__kernel_rem_pio2+0x5cc>
 8004e12:	4641      	mov	r1, r8
 8004e14:	c90c      	ldmia	r1!, {r2, r3}
 8004e16:	4688      	mov	r8, r1
 8004e18:	cf03      	ldmia	r7!, {r0, r1}
 8004e1a:	f001 fced 	bl	80067f8 <__aeabi_dmul>
 8004e1e:	0002      	movs	r2, r0
 8004e20:	000b      	movs	r3, r1
 8004e22:	0020      	movs	r0, r4
 8004e24:	0029      	movs	r1, r5
 8004e26:	f000 fc8b 	bl	8005740 <__aeabi_dadd>
 8004e2a:	3601      	adds	r6, #1
 8004e2c:	0004      	movs	r4, r0
 8004e2e:	000d      	movs	r5, r1
 8004e30:	45b2      	cmp	sl, r6
 8004e32:	db01      	blt.n	8004e38 <__kernel_rem_pio2+0x5d0>
 8004e34:	454e      	cmp	r6, r9
 8004e36:	ddec      	ble.n	8004e12 <__kernel_rem_pio2+0x5aa>
 8004e38:	465b      	mov	r3, fp
 8004e3a:	c330      	stmia	r3!, {r4, r5}
 8004e3c:	469b      	mov	fp, r3
 8004e3e:	464b      	mov	r3, r9
 8004e40:	9a00      	ldr	r2, [sp, #0]
 8004e42:	3301      	adds	r3, #1
 8004e44:	3a08      	subs	r2, #8
 8004e46:	9200      	str	r2, [sp, #0]
 8004e48:	9a03      	ldr	r2, [sp, #12]
 8004e4a:	4591      	cmp	r9, r2
 8004e4c:	d006      	beq.n	8004e5c <__kernel_rem_pio2+0x5f4>
 8004e4e:	4699      	mov	r9, r3
 8004e50:	4653      	mov	r3, sl
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	dad3      	bge.n	8004dfe <__kernel_rem_pio2+0x596>
 8004e56:	2400      	movs	r4, #0
 8004e58:	2500      	movs	r5, #0
 8004e5a:	e7ed      	b.n	8004e38 <__kernel_rem_pio2+0x5d0>
 8004e5c:	9b07      	ldr	r3, [sp, #28]
 8004e5e:	4698      	mov	r8, r3
 8004e60:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8004e62:	2b02      	cmp	r3, #2
 8004e64:	dd00      	ble.n	8004e68 <__kernel_rem_pio2+0x600>
 8004e66:	e080      	b.n	8004f6a <__kernel_rem_pio2+0x702>
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	dc3f      	bgt.n	8004eec <__kernel_rem_pio2+0x684>
 8004e6c:	d117      	bne.n	8004e9e <__kernel_rem_pio2+0x636>
 8004e6e:	2500      	movs	r5, #0
 8004e70:	2600      	movs	r6, #0
 8004e72:	0028      	movs	r0, r5
 8004e74:	0031      	movs	r1, r6
 8004e76:	9c04      	ldr	r4, [sp, #16]
 8004e78:	4444      	add	r4, r8
 8004e7a:	6822      	ldr	r2, [r4, #0]
 8004e7c:	6863      	ldr	r3, [r4, #4]
 8004e7e:	f000 fc5f 	bl	8005740 <__aeabi_dadd>
 8004e82:	9a04      	ldr	r2, [sp, #16]
 8004e84:	0023      	movs	r3, r4
 8004e86:	3c08      	subs	r4, #8
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d1f6      	bne.n	8004e7a <__kernel_rem_pio2+0x612>
 8004e8c:	0005      	movs	r5, r0
 8004e8e:	000e      	movs	r6, r1
 8004e90:	9b05      	ldr	r3, [sp, #20]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d000      	beq.n	8004e98 <__kernel_rem_pio2+0x630>
 8004e96:	e106      	b.n	80050a6 <__kernel_rem_pio2+0x83e>
 8004e98:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004e9a:	601d      	str	r5, [r3, #0]
 8004e9c:	605e      	str	r6, [r3, #4]
 8004e9e:	2007      	movs	r0, #7
 8004ea0:	9b06      	ldr	r3, [sp, #24]
 8004ea2:	4018      	ands	r0, r3
 8004ea4:	239b      	movs	r3, #155	@ 0x9b
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	449d      	add	sp, r3
 8004eaa:	bcf0      	pop	{r4, r5, r6, r7}
 8004eac:	46bb      	mov	fp, r7
 8004eae:	46b2      	mov	sl, r6
 8004eb0:	46a9      	mov	r9, r5
 8004eb2:	46a0      	mov	r8, r4
 8004eb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004eb6:	4688      	mov	r8, r1
 8004eb8:	e67f      	b.n	8004bba <__kernel_rem_pio2+0x352>
 8004eba:	4643      	mov	r3, r8
 8004ebc:	1e5a      	subs	r2, r3, #1
 8004ebe:	0092      	lsls	r2, r2, #2
 8004ec0:	ab0e      	add	r3, sp, #56	@ 0x38
 8004ec2:	589b      	ldr	r3, [r3, r2]
 8004ec4:	a90e      	add	r1, sp, #56	@ 0x38
 8004ec6:	025b      	lsls	r3, r3, #9
 8004ec8:	0a5b      	lsrs	r3, r3, #9
 8004eca:	508b      	str	r3, [r1, r2]
 8004ecc:	e686      	b.n	8004bdc <__kernel_rem_pio2+0x374>
 8004ece:	2318      	movs	r3, #24
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	425b      	negs	r3, r3
 8004ed4:	9205      	str	r2, [sp, #20]
 8004ed6:	e4eb      	b.n	80048b0 <__kernel_rem_pio2+0x48>
 8004ed8:	3ff00000 	.word	0x3ff00000
 8004edc:	41700000 	.word	0x41700000
 8004ee0:	3e700000 	.word	0x3e700000
 8004ee4:	3ffffffe 	.word	0x3ffffffe
 8004ee8:	08007a98 	.word	0x08007a98
 8004eec:	9b4a      	ldr	r3, [sp, #296]	@ 0x128
 8004eee:	9c4b      	ldr	r4, [sp, #300]	@ 0x12c
 8004ef0:	2500      	movs	r5, #0
 8004ef2:	9300      	str	r3, [sp, #0]
 8004ef4:	9401      	str	r4, [sp, #4]
 8004ef6:	2400      	movs	r4, #0
 8004ef8:	9e04      	ldr	r6, [sp, #16]
 8004efa:	4446      	add	r6, r8
 8004efc:	6832      	ldr	r2, [r6, #0]
 8004efe:	6873      	ldr	r3, [r6, #4]
 8004f00:	0020      	movs	r0, r4
 8004f02:	0029      	movs	r1, r5
 8004f04:	f000 fc1c 	bl	8005740 <__aeabi_dadd>
 8004f08:	9a04      	ldr	r2, [sp, #16]
 8004f0a:	0033      	movs	r3, r6
 8004f0c:	0004      	movs	r4, r0
 8004f0e:	000d      	movs	r5, r1
 8004f10:	3e08      	subs	r6, #8
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d1f2      	bne.n	8004efc <__kernel_rem_pio2+0x694>
 8004f16:	9b05      	ldr	r3, [sp, #20]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d000      	beq.n	8004f1e <__kernel_rem_pio2+0x6b6>
 8004f1c:	e0c8      	b.n	80050b0 <__kernel_rem_pio2+0x848>
 8004f1e:	000b      	movs	r3, r1
 8004f20:	0002      	movs	r2, r0
 8004f22:	9800      	ldr	r0, [sp, #0]
 8004f24:	9901      	ldr	r1, [sp, #4]
 8004f26:	f001 ff2f 	bl	8006d88 <__aeabi_dsub>
 8004f2a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004f2c:	0006      	movs	r6, r0
 8004f2e:	601c      	str	r4, [r3, #0]
 8004f30:	605d      	str	r5, [r3, #4]
 8004f32:	9b03      	ldr	r3, [sp, #12]
 8004f34:	000f      	movs	r7, r1
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d013      	beq.n	8004f62 <__kernel_rem_pio2+0x6fa>
 8004f3a:	2401      	movs	r4, #1
 8004f3c:	0030      	movs	r0, r6
 8004f3e:	0039      	movs	r1, r7
 8004f40:	ad4c      	add	r5, sp, #304	@ 0x130
 8004f42:	cd0c      	ldmia	r5!, {r2, r3}
 8004f44:	f000 fbfc 	bl	8005740 <__aeabi_dadd>
 8004f48:	9b03      	ldr	r3, [sp, #12]
 8004f4a:	3401      	adds	r4, #1
 8004f4c:	42a3      	cmp	r3, r4
 8004f4e:	daf8      	bge.n	8004f42 <__kernel_rem_pio2+0x6da>
 8004f50:	9b05      	ldr	r3, [sp, #20]
 8004f52:	0006      	movs	r6, r0
 8004f54:	000f      	movs	r7, r1
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d003      	beq.n	8004f62 <__kernel_rem_pio2+0x6fa>
 8004f5a:	2180      	movs	r1, #128	@ 0x80
 8004f5c:	0609      	lsls	r1, r1, #24
 8004f5e:	187b      	adds	r3, r7, r1
 8004f60:	001f      	movs	r7, r3
 8004f62:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004f64:	609e      	str	r6, [r3, #8]
 8004f66:	60df      	str	r7, [r3, #12]
 8004f68:	e799      	b.n	8004e9e <__kernel_rem_pio2+0x636>
 8004f6a:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8004f6c:	2b03      	cmp	r3, #3
 8004f6e:	d000      	beq.n	8004f72 <__kernel_rem_pio2+0x70a>
 8004f70:	e795      	b.n	8004e9e <__kernel_rem_pio2+0x636>
 8004f72:	9b03      	ldr	r3, [sp, #12]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d100      	bne.n	8004f7a <__kernel_rem_pio2+0x712>
 8004f78:	e0cb      	b.n	8005112 <__kernel_rem_pio2+0x8aa>
 8004f7a:	2208      	movs	r2, #8
 8004f7c:	9b04      	ldr	r3, [sp, #16]
 8004f7e:	4252      	negs	r2, r2
 8004f80:	4694      	mov	ip, r2
 8004f82:	001c      	movs	r4, r3
 8004f84:	4444      	add	r4, r8
 8004f86:	44e0      	add	r8, ip
 8004f88:	469c      	mov	ip, r3
 8004f8a:	6826      	ldr	r6, [r4, #0]
 8004f8c:	6867      	ldr	r7, [r4, #4]
 8004f8e:	44e0      	add	r8, ip
 8004f90:	46c1      	mov	r9, r8
 8004f92:	46a3      	mov	fp, r4
 8004f94:	464b      	mov	r3, r9
 8004f96:	0030      	movs	r0, r6
 8004f98:	681c      	ldr	r4, [r3, #0]
 8004f9a:	685d      	ldr	r5, [r3, #4]
 8004f9c:	0039      	movs	r1, r7
 8004f9e:	0022      	movs	r2, r4
 8004fa0:	002b      	movs	r3, r5
 8004fa2:	9600      	str	r6, [sp, #0]
 8004fa4:	9701      	str	r7, [sp, #4]
 8004fa6:	f000 fbcb 	bl	8005740 <__aeabi_dadd>
 8004faa:	0002      	movs	r2, r0
 8004fac:	000b      	movs	r3, r1
 8004fae:	0006      	movs	r6, r0
 8004fb0:	000f      	movs	r7, r1
 8004fb2:	0020      	movs	r0, r4
 8004fb4:	0029      	movs	r1, r5
 8004fb6:	f001 fee7 	bl	8006d88 <__aeabi_dsub>
 8004fba:	9a00      	ldr	r2, [sp, #0]
 8004fbc:	9b01      	ldr	r3, [sp, #4]
 8004fbe:	f000 fbbf 	bl	8005740 <__aeabi_dadd>
 8004fc2:	464b      	mov	r3, r9
 8004fc4:	6098      	str	r0, [r3, #8]
 8004fc6:	60d9      	str	r1, [r3, #12]
 8004fc8:	601e      	str	r6, [r3, #0]
 8004fca:	605f      	str	r7, [r3, #4]
 8004fcc:	2308      	movs	r3, #8
 8004fce:	425b      	negs	r3, r3
 8004fd0:	469c      	mov	ip, r3
 8004fd2:	46ca      	mov	sl, r9
 8004fd4:	9b04      	ldr	r3, [sp, #16]
 8004fd6:	44e1      	add	r9, ip
 8004fd8:	459a      	cmp	sl, r3
 8004fda:	d1db      	bne.n	8004f94 <__kernel_rem_pio2+0x72c>
 8004fdc:	9b03      	ldr	r3, [sp, #12]
 8004fde:	465c      	mov	r4, fp
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d100      	bne.n	8004fe6 <__kernel_rem_pio2+0x77e>
 8004fe4:	e095      	b.n	8005112 <__kernel_rem_pio2+0x8aa>
 8004fe6:	6826      	ldr	r6, [r4, #0]
 8004fe8:	6867      	ldr	r7, [r4, #4]
 8004fea:	46d9      	mov	r9, fp
 8004fec:	4643      	mov	r3, r8
 8004fee:	0030      	movs	r0, r6
 8004ff0:	681c      	ldr	r4, [r3, #0]
 8004ff2:	685d      	ldr	r5, [r3, #4]
 8004ff4:	0039      	movs	r1, r7
 8004ff6:	0022      	movs	r2, r4
 8004ff8:	002b      	movs	r3, r5
 8004ffa:	9600      	str	r6, [sp, #0]
 8004ffc:	9701      	str	r7, [sp, #4]
 8004ffe:	f000 fb9f 	bl	8005740 <__aeabi_dadd>
 8005002:	0002      	movs	r2, r0
 8005004:	000b      	movs	r3, r1
 8005006:	0006      	movs	r6, r0
 8005008:	000f      	movs	r7, r1
 800500a:	0020      	movs	r0, r4
 800500c:	0029      	movs	r1, r5
 800500e:	f001 febb 	bl	8006d88 <__aeabi_dsub>
 8005012:	9a00      	ldr	r2, [sp, #0]
 8005014:	9b01      	ldr	r3, [sp, #4]
 8005016:	f000 fb93 	bl	8005740 <__aeabi_dadd>
 800501a:	4643      	mov	r3, r8
 800501c:	6098      	str	r0, [r3, #8]
 800501e:	60d9      	str	r1, [r3, #12]
 8005020:	601e      	str	r6, [r3, #0]
 8005022:	605f      	str	r7, [r3, #4]
 8005024:	2308      	movs	r3, #8
 8005026:	425b      	negs	r3, r3
 8005028:	469c      	mov	ip, r3
 800502a:	9b04      	ldr	r3, [sp, #16]
 800502c:	44e0      	add	r8, ip
 800502e:	4543      	cmp	r3, r8
 8005030:	d1dc      	bne.n	8004fec <__kernel_rem_pio2+0x784>
 8005032:	464c      	mov	r4, r9
 8005034:	2000      	movs	r0, #0
 8005036:	2100      	movs	r1, #0
 8005038:	9d04      	ldr	r5, [sp, #16]
 800503a:	3508      	adds	r5, #8
 800503c:	6822      	ldr	r2, [r4, #0]
 800503e:	6863      	ldr	r3, [r4, #4]
 8005040:	3c08      	subs	r4, #8
 8005042:	f000 fb7d 	bl	8005740 <__aeabi_dadd>
 8005046:	42a5      	cmp	r5, r4
 8005048:	d1f8      	bne.n	800503c <__kernel_rem_pio2+0x7d4>
 800504a:	9e4a      	ldr	r6, [sp, #296]	@ 0x128
 800504c:	9f4b      	ldr	r7, [sp, #300]	@ 0x12c
 800504e:	9b04      	ldr	r3, [sp, #16]
 8005050:	9600      	str	r6, [sp, #0]
 8005052:	9701      	str	r7, [sp, #4]
 8005054:	689c      	ldr	r4, [r3, #8]
 8005056:	68dd      	ldr	r5, [r3, #12]
 8005058:	9b05      	ldr	r3, [sp, #20]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d112      	bne.n	8005084 <__kernel_rem_pio2+0x81c>
 800505e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005060:	601e      	str	r6, [r3, #0]
 8005062:	605f      	str	r7, [r3, #4]
 8005064:	609c      	str	r4, [r3, #8]
 8005066:	60dd      	str	r5, [r3, #12]
 8005068:	6118      	str	r0, [r3, #16]
 800506a:	6159      	str	r1, [r3, #20]
 800506c:	e717      	b.n	8004e9e <__kernel_rem_pio2+0x636>
 800506e:	4643      	mov	r3, r8
 8005070:	0030      	movs	r0, r6
 8005072:	0039      	movs	r1, r7
 8005074:	009c      	lsls	r4, r3, #2
 8005076:	f002 fae1 	bl	800763c <__aeabi_d2iz>
 800507a:	ab0e      	add	r3, sp, #56	@ 0x38
 800507c:	5118      	str	r0, [r3, r4]
 800507e:	4643      	mov	r3, r8
 8005080:	9303      	str	r3, [sp, #12]
 8005082:	e680      	b.n	8004d86 <__kernel_rem_pio2+0x51e>
 8005084:	2380      	movs	r3, #128	@ 0x80
 8005086:	061b      	lsls	r3, r3, #24
 8005088:	469c      	mov	ip, r3
 800508a:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 800508c:	9a00      	ldr	r2, [sp, #0]
 800508e:	9b01      	ldr	r3, [sp, #4]
 8005090:	6032      	str	r2, [r6, #0]
 8005092:	4662      	mov	r2, ip
 8005094:	4463      	add	r3, ip
 8005096:	6073      	str	r3, [r6, #4]
 8005098:	18ab      	adds	r3, r5, r2
 800509a:	60f3      	str	r3, [r6, #12]
 800509c:	188b      	adds	r3, r1, r2
 800509e:	60b4      	str	r4, [r6, #8]
 80050a0:	6130      	str	r0, [r6, #16]
 80050a2:	6173      	str	r3, [r6, #20]
 80050a4:	e6fb      	b.n	8004e9e <__kernel_rem_pio2+0x636>
 80050a6:	2180      	movs	r1, #128	@ 0x80
 80050a8:	0609      	lsls	r1, r1, #24
 80050aa:	1873      	adds	r3, r6, r1
 80050ac:	001e      	movs	r6, r3
 80050ae:	e6f3      	b.n	8004e98 <__kernel_rem_pio2+0x630>
 80050b0:	2380      	movs	r3, #128	@ 0x80
 80050b2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80050b4:	061b      	lsls	r3, r3, #24
 80050b6:	18cb      	adds	r3, r1, r3
 80050b8:	6010      	str	r0, [r2, #0]
 80050ba:	6053      	str	r3, [r2, #4]
 80050bc:	000b      	movs	r3, r1
 80050be:	0002      	movs	r2, r0
 80050c0:	9800      	ldr	r0, [sp, #0]
 80050c2:	9901      	ldr	r1, [sp, #4]
 80050c4:	f001 fe60 	bl	8006d88 <__aeabi_dsub>
 80050c8:	9b03      	ldr	r3, [sp, #12]
 80050ca:	0006      	movs	r6, r0
 80050cc:	000f      	movs	r7, r1
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d000      	beq.n	80050d4 <__kernel_rem_pio2+0x86c>
 80050d2:	e732      	b.n	8004f3a <__kernel_rem_pio2+0x6d2>
 80050d4:	e741      	b.n	8004f5a <__kernel_rem_pio2+0x6f2>
 80050d6:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80050d8:	2b02      	cmp	r3, #2
 80050da:	dc14      	bgt.n	8005106 <__kernel_rem_pio2+0x89e>
 80050dc:	2b00      	cmp	r3, #0
 80050de:	dc1b      	bgt.n	8005118 <__kernel_rem_pio2+0x8b0>
 80050e0:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d000      	beq.n	80050e8 <__kernel_rem_pio2+0x880>
 80050e6:	e6da      	b.n	8004e9e <__kernel_rem_pio2+0x636>
 80050e8:	2500      	movs	r5, #0
 80050ea:	2600      	movs	r6, #0
 80050ec:	e6d0      	b.n	8004e90 <__kernel_rem_pio2+0x628>
 80050ee:	ab72      	add	r3, sp, #456	@ 0x1c8
 80050f0:	9300      	str	r3, [sp, #0]
 80050f2:	f7ff fc1f 	bl	8004934 <__kernel_rem_pio2+0xcc>
 80050f6:	025b      	lsls	r3, r3, #9
 80050f8:	0a5b      	lsrs	r3, r3, #9
 80050fa:	a90e      	add	r1, sp, #56	@ 0x38
 80050fc:	508b      	str	r3, [r1, r2]
 80050fe:	2d02      	cmp	r5, #2
 8005100:	d000      	beq.n	8005104 <__kernel_rem_pio2+0x89c>
 8005102:	e4ad      	b.n	8004a60 <__kernel_rem_pio2+0x1f8>
 8005104:	e5e0      	b.n	8004cc8 <__kernel_rem_pio2+0x460>
 8005106:	ab4a      	add	r3, sp, #296	@ 0x128
 8005108:	9304      	str	r3, [sp, #16]
 800510a:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800510c:	2b03      	cmp	r3, #3
 800510e:	d000      	beq.n	8005112 <__kernel_rem_pio2+0x8aa>
 8005110:	e6c5      	b.n	8004e9e <__kernel_rem_pio2+0x636>
 8005112:	2000      	movs	r0, #0
 8005114:	2100      	movs	r1, #0
 8005116:	e798      	b.n	800504a <__kernel_rem_pio2+0x7e2>
 8005118:	9b05      	ldr	r3, [sp, #20]
 800511a:	9e4a      	ldr	r6, [sp, #296]	@ 0x128
 800511c:	9f4b      	ldr	r7, [sp, #300]	@ 0x12c
 800511e:	2b00      	cmp	r3, #0
 8005120:	d006      	beq.n	8005130 <__kernel_rem_pio2+0x8c8>
 8005122:	2380      	movs	r3, #128	@ 0x80
 8005124:	2200      	movs	r2, #0
 8005126:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8005128:	061b      	lsls	r3, r3, #24
 800512a:	600a      	str	r2, [r1, #0]
 800512c:	604b      	str	r3, [r1, #4]
 800512e:	e714      	b.n	8004f5a <__kernel_rem_pio2+0x6f2>
 8005130:	2200      	movs	r2, #0
 8005132:	2300      	movs	r3, #0
 8005134:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8005136:	600a      	str	r2, [r1, #0]
 8005138:	604b      	str	r3, [r1, #4]
 800513a:	e712      	b.n	8004f62 <__kernel_rem_pio2+0x6fa>

0800513c <__kernel_cos>:
 800513c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800513e:	b089      	sub	sp, #36	@ 0x24
 8005140:	9202      	str	r2, [sp, #8]
 8005142:	9303      	str	r3, [sp, #12]
 8005144:	23f9      	movs	r3, #249	@ 0xf9
 8005146:	004e      	lsls	r6, r1, #1
 8005148:	9000      	str	r0, [sp, #0]
 800514a:	9101      	str	r1, [sp, #4]
 800514c:	0876      	lsrs	r6, r6, #1
 800514e:	059b      	lsls	r3, r3, #22
 8005150:	429e      	cmp	r6, r3
 8005152:	d263      	bcs.n	800521c <__kernel_cos+0xe0>
 8005154:	f002 fa72 	bl	800763c <__aeabi_d2iz>
 8005158:	2800      	cmp	r0, #0
 800515a:	d100      	bne.n	800515e <__kernel_cos+0x22>
 800515c:	e0d9      	b.n	8005312 <__kernel_cos+0x1d6>
 800515e:	9800      	ldr	r0, [sp, #0]
 8005160:	9901      	ldr	r1, [sp, #4]
 8005162:	0002      	movs	r2, r0
 8005164:	000b      	movs	r3, r1
 8005166:	f001 fb47 	bl	80067f8 <__aeabi_dmul>
 800516a:	0004      	movs	r4, r0
 800516c:	000d      	movs	r5, r1
 800516e:	4a6a      	ldr	r2, [pc, #424]	@ (8005318 <__kernel_cos+0x1dc>)
 8005170:	4b6a      	ldr	r3, [pc, #424]	@ (800531c <__kernel_cos+0x1e0>)
 8005172:	f001 fb41 	bl	80067f8 <__aeabi_dmul>
 8005176:	4a6a      	ldr	r2, [pc, #424]	@ (8005320 <__kernel_cos+0x1e4>)
 8005178:	4b6a      	ldr	r3, [pc, #424]	@ (8005324 <__kernel_cos+0x1e8>)
 800517a:	f000 fae1 	bl	8005740 <__aeabi_dadd>
 800517e:	0022      	movs	r2, r4
 8005180:	002b      	movs	r3, r5
 8005182:	f001 fb39 	bl	80067f8 <__aeabi_dmul>
 8005186:	4a68      	ldr	r2, [pc, #416]	@ (8005328 <__kernel_cos+0x1ec>)
 8005188:	4b68      	ldr	r3, [pc, #416]	@ (800532c <__kernel_cos+0x1f0>)
 800518a:	f001 fdfd 	bl	8006d88 <__aeabi_dsub>
 800518e:	0022      	movs	r2, r4
 8005190:	002b      	movs	r3, r5
 8005192:	f001 fb31 	bl	80067f8 <__aeabi_dmul>
 8005196:	4a66      	ldr	r2, [pc, #408]	@ (8005330 <__kernel_cos+0x1f4>)
 8005198:	4b66      	ldr	r3, [pc, #408]	@ (8005334 <__kernel_cos+0x1f8>)
 800519a:	f000 fad1 	bl	8005740 <__aeabi_dadd>
 800519e:	0022      	movs	r2, r4
 80051a0:	002b      	movs	r3, r5
 80051a2:	f001 fb29 	bl	80067f8 <__aeabi_dmul>
 80051a6:	4a64      	ldr	r2, [pc, #400]	@ (8005338 <__kernel_cos+0x1fc>)
 80051a8:	4b64      	ldr	r3, [pc, #400]	@ (800533c <__kernel_cos+0x200>)
 80051aa:	f001 fded 	bl	8006d88 <__aeabi_dsub>
 80051ae:	0022      	movs	r2, r4
 80051b0:	002b      	movs	r3, r5
 80051b2:	f001 fb21 	bl	80067f8 <__aeabi_dmul>
 80051b6:	4a62      	ldr	r2, [pc, #392]	@ (8005340 <__kernel_cos+0x204>)
 80051b8:	4b62      	ldr	r3, [pc, #392]	@ (8005344 <__kernel_cos+0x208>)
 80051ba:	f000 fac1 	bl	8005740 <__aeabi_dadd>
 80051be:	0022      	movs	r2, r4
 80051c0:	002b      	movs	r3, r5
 80051c2:	f001 fb19 	bl	80067f8 <__aeabi_dmul>
 80051c6:	9004      	str	r0, [sp, #16]
 80051c8:	9105      	str	r1, [sp, #20]
 80051ca:	2200      	movs	r2, #0
 80051cc:	0020      	movs	r0, r4
 80051ce:	0029      	movs	r1, r5
 80051d0:	4b5d      	ldr	r3, [pc, #372]	@ (8005348 <__kernel_cos+0x20c>)
 80051d2:	f001 fb11 	bl	80067f8 <__aeabi_dmul>
 80051d6:	9a04      	ldr	r2, [sp, #16]
 80051d8:	9b05      	ldr	r3, [sp, #20]
 80051da:	0006      	movs	r6, r0
 80051dc:	000f      	movs	r7, r1
 80051de:	0020      	movs	r0, r4
 80051e0:	0029      	movs	r1, r5
 80051e2:	f001 fb09 	bl	80067f8 <__aeabi_dmul>
 80051e6:	9a02      	ldr	r2, [sp, #8]
 80051e8:	9b03      	ldr	r3, [sp, #12]
 80051ea:	0004      	movs	r4, r0
 80051ec:	000d      	movs	r5, r1
 80051ee:	9800      	ldr	r0, [sp, #0]
 80051f0:	9901      	ldr	r1, [sp, #4]
 80051f2:	f001 fb01 	bl	80067f8 <__aeabi_dmul>
 80051f6:	0002      	movs	r2, r0
 80051f8:	000b      	movs	r3, r1
 80051fa:	0020      	movs	r0, r4
 80051fc:	0029      	movs	r1, r5
 80051fe:	f001 fdc3 	bl	8006d88 <__aeabi_dsub>
 8005202:	0002      	movs	r2, r0
 8005204:	000b      	movs	r3, r1
 8005206:	0030      	movs	r0, r6
 8005208:	0039      	movs	r1, r7
 800520a:	f001 fdbd 	bl	8006d88 <__aeabi_dsub>
 800520e:	0002      	movs	r2, r0
 8005210:	000b      	movs	r3, r1
 8005212:	2000      	movs	r0, #0
 8005214:	494d      	ldr	r1, [pc, #308]	@ (800534c <__kernel_cos+0x210>)
 8005216:	f001 fdb7 	bl	8006d88 <__aeabi_dsub>
 800521a:	e072      	b.n	8005302 <__kernel_cos+0x1c6>
 800521c:	9800      	ldr	r0, [sp, #0]
 800521e:	9901      	ldr	r1, [sp, #4]
 8005220:	0002      	movs	r2, r0
 8005222:	000b      	movs	r3, r1
 8005224:	f001 fae8 	bl	80067f8 <__aeabi_dmul>
 8005228:	0004      	movs	r4, r0
 800522a:	000d      	movs	r5, r1
 800522c:	4a3a      	ldr	r2, [pc, #232]	@ (8005318 <__kernel_cos+0x1dc>)
 800522e:	4b3b      	ldr	r3, [pc, #236]	@ (800531c <__kernel_cos+0x1e0>)
 8005230:	f001 fae2 	bl	80067f8 <__aeabi_dmul>
 8005234:	4a3a      	ldr	r2, [pc, #232]	@ (8005320 <__kernel_cos+0x1e4>)
 8005236:	4b3b      	ldr	r3, [pc, #236]	@ (8005324 <__kernel_cos+0x1e8>)
 8005238:	f000 fa82 	bl	8005740 <__aeabi_dadd>
 800523c:	0022      	movs	r2, r4
 800523e:	002b      	movs	r3, r5
 8005240:	f001 fada 	bl	80067f8 <__aeabi_dmul>
 8005244:	4a38      	ldr	r2, [pc, #224]	@ (8005328 <__kernel_cos+0x1ec>)
 8005246:	4b39      	ldr	r3, [pc, #228]	@ (800532c <__kernel_cos+0x1f0>)
 8005248:	f001 fd9e 	bl	8006d88 <__aeabi_dsub>
 800524c:	0022      	movs	r2, r4
 800524e:	002b      	movs	r3, r5
 8005250:	f001 fad2 	bl	80067f8 <__aeabi_dmul>
 8005254:	4a36      	ldr	r2, [pc, #216]	@ (8005330 <__kernel_cos+0x1f4>)
 8005256:	4b37      	ldr	r3, [pc, #220]	@ (8005334 <__kernel_cos+0x1f8>)
 8005258:	f000 fa72 	bl	8005740 <__aeabi_dadd>
 800525c:	0022      	movs	r2, r4
 800525e:	002b      	movs	r3, r5
 8005260:	f001 faca 	bl	80067f8 <__aeabi_dmul>
 8005264:	4a34      	ldr	r2, [pc, #208]	@ (8005338 <__kernel_cos+0x1fc>)
 8005266:	4b35      	ldr	r3, [pc, #212]	@ (800533c <__kernel_cos+0x200>)
 8005268:	f001 fd8e 	bl	8006d88 <__aeabi_dsub>
 800526c:	0022      	movs	r2, r4
 800526e:	002b      	movs	r3, r5
 8005270:	f001 fac2 	bl	80067f8 <__aeabi_dmul>
 8005274:	4a32      	ldr	r2, [pc, #200]	@ (8005340 <__kernel_cos+0x204>)
 8005276:	4b33      	ldr	r3, [pc, #204]	@ (8005344 <__kernel_cos+0x208>)
 8005278:	f000 fa62 	bl	8005740 <__aeabi_dadd>
 800527c:	002b      	movs	r3, r5
 800527e:	0022      	movs	r2, r4
 8005280:	f001 faba 	bl	80067f8 <__aeabi_dmul>
 8005284:	4b32      	ldr	r3, [pc, #200]	@ (8005350 <__kernel_cos+0x214>)
 8005286:	9004      	str	r0, [sp, #16]
 8005288:	9105      	str	r1, [sp, #20]
 800528a:	429e      	cmp	r6, r3
 800528c:	d99d      	bls.n	80051ca <__kernel_cos+0x8e>
 800528e:	4b31      	ldr	r3, [pc, #196]	@ (8005354 <__kernel_cos+0x218>)
 8005290:	2200      	movs	r2, #0
 8005292:	429e      	cmp	r6, r3
 8005294:	d837      	bhi.n	8005306 <__kernel_cos+0x1ca>
 8005296:	4930      	ldr	r1, [pc, #192]	@ (8005358 <__kernel_cos+0x21c>)
 8005298:	2000      	movs	r0, #0
 800529a:	1873      	adds	r3, r6, r1
 800529c:	492b      	ldr	r1, [pc, #172]	@ (800534c <__kernel_cos+0x210>)
 800529e:	0016      	movs	r6, r2
 80052a0:	001f      	movs	r7, r3
 80052a2:	f001 fd71 	bl	8006d88 <__aeabi_dsub>
 80052a6:	9006      	str	r0, [sp, #24]
 80052a8:	9107      	str	r1, [sp, #28]
 80052aa:	2200      	movs	r2, #0
 80052ac:	0020      	movs	r0, r4
 80052ae:	0029      	movs	r1, r5
 80052b0:	4b25      	ldr	r3, [pc, #148]	@ (8005348 <__kernel_cos+0x20c>)
 80052b2:	f001 faa1 	bl	80067f8 <__aeabi_dmul>
 80052b6:	0032      	movs	r2, r6
 80052b8:	003b      	movs	r3, r7
 80052ba:	f001 fd65 	bl	8006d88 <__aeabi_dsub>
 80052be:	9a04      	ldr	r2, [sp, #16]
 80052c0:	9b05      	ldr	r3, [sp, #20]
 80052c2:	0006      	movs	r6, r0
 80052c4:	000f      	movs	r7, r1
 80052c6:	0020      	movs	r0, r4
 80052c8:	0029      	movs	r1, r5
 80052ca:	f001 fa95 	bl	80067f8 <__aeabi_dmul>
 80052ce:	9a02      	ldr	r2, [sp, #8]
 80052d0:	9b03      	ldr	r3, [sp, #12]
 80052d2:	0004      	movs	r4, r0
 80052d4:	000d      	movs	r5, r1
 80052d6:	9800      	ldr	r0, [sp, #0]
 80052d8:	9901      	ldr	r1, [sp, #4]
 80052da:	f001 fa8d 	bl	80067f8 <__aeabi_dmul>
 80052de:	0002      	movs	r2, r0
 80052e0:	000b      	movs	r3, r1
 80052e2:	0020      	movs	r0, r4
 80052e4:	0029      	movs	r1, r5
 80052e6:	f001 fd4f 	bl	8006d88 <__aeabi_dsub>
 80052ea:	0002      	movs	r2, r0
 80052ec:	000b      	movs	r3, r1
 80052ee:	0030      	movs	r0, r6
 80052f0:	0039      	movs	r1, r7
 80052f2:	f001 fd49 	bl	8006d88 <__aeabi_dsub>
 80052f6:	0002      	movs	r2, r0
 80052f8:	000b      	movs	r3, r1
 80052fa:	9806      	ldr	r0, [sp, #24]
 80052fc:	9907      	ldr	r1, [sp, #28]
 80052fe:	f001 fd43 	bl	8006d88 <__aeabi_dsub>
 8005302:	b009      	add	sp, #36	@ 0x24
 8005304:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005306:	4b15      	ldr	r3, [pc, #84]	@ (800535c <__kernel_cos+0x220>)
 8005308:	2600      	movs	r6, #0
 800530a:	9206      	str	r2, [sp, #24]
 800530c:	9307      	str	r3, [sp, #28]
 800530e:	4f14      	ldr	r7, [pc, #80]	@ (8005360 <__kernel_cos+0x224>)
 8005310:	e7cb      	b.n	80052aa <__kernel_cos+0x16e>
 8005312:	2000      	movs	r0, #0
 8005314:	490d      	ldr	r1, [pc, #52]	@ (800534c <__kernel_cos+0x210>)
 8005316:	e7f4      	b.n	8005302 <__kernel_cos+0x1c6>
 8005318:	be8838d4 	.word	0xbe8838d4
 800531c:	bda8fae9 	.word	0xbda8fae9
 8005320:	bdb4b1c4 	.word	0xbdb4b1c4
 8005324:	3e21ee9e 	.word	0x3e21ee9e
 8005328:	809c52ad 	.word	0x809c52ad
 800532c:	3e927e4f 	.word	0x3e927e4f
 8005330:	19cb1590 	.word	0x19cb1590
 8005334:	3efa01a0 	.word	0x3efa01a0
 8005338:	16c15177 	.word	0x16c15177
 800533c:	3f56c16c 	.word	0x3f56c16c
 8005340:	5555554c 	.word	0x5555554c
 8005344:	3fa55555 	.word	0x3fa55555
 8005348:	3fe00000 	.word	0x3fe00000
 800534c:	3ff00000 	.word	0x3ff00000
 8005350:	3fd33332 	.word	0x3fd33332
 8005354:	3fe90000 	.word	0x3fe90000
 8005358:	ffe00000 	.word	0xffe00000
 800535c:	3fe70000 	.word	0x3fe70000
 8005360:	3fd20000 	.word	0x3fd20000

08005364 <__kernel_sin>:
 8005364:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005366:	b089      	sub	sp, #36	@ 0x24
 8005368:	9202      	str	r2, [sp, #8]
 800536a:	9303      	str	r3, [sp, #12]
 800536c:	22f9      	movs	r2, #249	@ 0xf9
 800536e:	004b      	lsls	r3, r1, #1
 8005370:	0006      	movs	r6, r0
 8005372:	000f      	movs	r7, r1
 8005374:	085b      	lsrs	r3, r3, #1
 8005376:	0592      	lsls	r2, r2, #22
 8005378:	4293      	cmp	r3, r2
 800537a:	d206      	bcs.n	800538a <__kernel_sin+0x26>
 800537c:	f002 f95e 	bl	800763c <__aeabi_d2iz>
 8005380:	0039      	movs	r1, r7
 8005382:	0003      	movs	r3, r0
 8005384:	0030      	movs	r0, r6
 8005386:	2b00      	cmp	r3, #0
 8005388:	d048      	beq.n	800541c <__kernel_sin+0xb8>
 800538a:	0032      	movs	r2, r6
 800538c:	003b      	movs	r3, r7
 800538e:	0030      	movs	r0, r6
 8005390:	0039      	movs	r1, r7
 8005392:	f001 fa31 	bl	80067f8 <__aeabi_dmul>
 8005396:	0004      	movs	r4, r0
 8005398:	000d      	movs	r5, r1
 800539a:	0002      	movs	r2, r0
 800539c:	000b      	movs	r3, r1
 800539e:	0030      	movs	r0, r6
 80053a0:	0039      	movs	r1, r7
 80053a2:	f001 fa29 	bl	80067f8 <__aeabi_dmul>
 80053a6:	4a37      	ldr	r2, [pc, #220]	@ (8005484 <__kernel_sin+0x120>)
 80053a8:	9000      	str	r0, [sp, #0]
 80053aa:	9101      	str	r1, [sp, #4]
 80053ac:	4b36      	ldr	r3, [pc, #216]	@ (8005488 <__kernel_sin+0x124>)
 80053ae:	0020      	movs	r0, r4
 80053b0:	0029      	movs	r1, r5
 80053b2:	f001 fa21 	bl	80067f8 <__aeabi_dmul>
 80053b6:	4a35      	ldr	r2, [pc, #212]	@ (800548c <__kernel_sin+0x128>)
 80053b8:	4b35      	ldr	r3, [pc, #212]	@ (8005490 <__kernel_sin+0x12c>)
 80053ba:	f001 fce5 	bl	8006d88 <__aeabi_dsub>
 80053be:	0022      	movs	r2, r4
 80053c0:	002b      	movs	r3, r5
 80053c2:	f001 fa19 	bl	80067f8 <__aeabi_dmul>
 80053c6:	4a33      	ldr	r2, [pc, #204]	@ (8005494 <__kernel_sin+0x130>)
 80053c8:	4b33      	ldr	r3, [pc, #204]	@ (8005498 <__kernel_sin+0x134>)
 80053ca:	f000 f9b9 	bl	8005740 <__aeabi_dadd>
 80053ce:	0022      	movs	r2, r4
 80053d0:	002b      	movs	r3, r5
 80053d2:	f001 fa11 	bl	80067f8 <__aeabi_dmul>
 80053d6:	4a31      	ldr	r2, [pc, #196]	@ (800549c <__kernel_sin+0x138>)
 80053d8:	4b31      	ldr	r3, [pc, #196]	@ (80054a0 <__kernel_sin+0x13c>)
 80053da:	f001 fcd5 	bl	8006d88 <__aeabi_dsub>
 80053de:	0022      	movs	r2, r4
 80053e0:	002b      	movs	r3, r5
 80053e2:	f001 fa09 	bl	80067f8 <__aeabi_dmul>
 80053e6:	4a2f      	ldr	r2, [pc, #188]	@ (80054a4 <__kernel_sin+0x140>)
 80053e8:	4b2f      	ldr	r3, [pc, #188]	@ (80054a8 <__kernel_sin+0x144>)
 80053ea:	f000 f9a9 	bl	8005740 <__aeabi_dadd>
 80053ee:	000b      	movs	r3, r1
 80053f0:	0002      	movs	r2, r0
 80053f2:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80053f4:	9204      	str	r2, [sp, #16]
 80053f6:	9305      	str	r3, [sp, #20]
 80053f8:	2900      	cmp	r1, #0
 80053fa:	d111      	bne.n	8005420 <__kernel_sin+0xbc>
 80053fc:	0020      	movs	r0, r4
 80053fe:	0029      	movs	r1, r5
 8005400:	f001 f9fa 	bl	80067f8 <__aeabi_dmul>
 8005404:	4a29      	ldr	r2, [pc, #164]	@ (80054ac <__kernel_sin+0x148>)
 8005406:	4b2a      	ldr	r3, [pc, #168]	@ (80054b0 <__kernel_sin+0x14c>)
 8005408:	f001 fcbe 	bl	8006d88 <__aeabi_dsub>
 800540c:	9a00      	ldr	r2, [sp, #0]
 800540e:	9b01      	ldr	r3, [sp, #4]
 8005410:	f001 f9f2 	bl	80067f8 <__aeabi_dmul>
 8005414:	0032      	movs	r2, r6
 8005416:	003b      	movs	r3, r7
 8005418:	f000 f992 	bl	8005740 <__aeabi_dadd>
 800541c:	b009      	add	sp, #36	@ 0x24
 800541e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005420:	2200      	movs	r2, #0
 8005422:	9802      	ldr	r0, [sp, #8]
 8005424:	9903      	ldr	r1, [sp, #12]
 8005426:	4b23      	ldr	r3, [pc, #140]	@ (80054b4 <__kernel_sin+0x150>)
 8005428:	f001 f9e6 	bl	80067f8 <__aeabi_dmul>
 800542c:	9a04      	ldr	r2, [sp, #16]
 800542e:	9b05      	ldr	r3, [sp, #20]
 8005430:	9006      	str	r0, [sp, #24]
 8005432:	9107      	str	r1, [sp, #28]
 8005434:	9800      	ldr	r0, [sp, #0]
 8005436:	9901      	ldr	r1, [sp, #4]
 8005438:	f001 f9de 	bl	80067f8 <__aeabi_dmul>
 800543c:	0002      	movs	r2, r0
 800543e:	000b      	movs	r3, r1
 8005440:	9806      	ldr	r0, [sp, #24]
 8005442:	9907      	ldr	r1, [sp, #28]
 8005444:	f001 fca0 	bl	8006d88 <__aeabi_dsub>
 8005448:	0022      	movs	r2, r4
 800544a:	002b      	movs	r3, r5
 800544c:	f001 f9d4 	bl	80067f8 <__aeabi_dmul>
 8005450:	9a02      	ldr	r2, [sp, #8]
 8005452:	9b03      	ldr	r3, [sp, #12]
 8005454:	f001 fc98 	bl	8006d88 <__aeabi_dsub>
 8005458:	4a14      	ldr	r2, [pc, #80]	@ (80054ac <__kernel_sin+0x148>)
 800545a:	0004      	movs	r4, r0
 800545c:	000d      	movs	r5, r1
 800545e:	9800      	ldr	r0, [sp, #0]
 8005460:	9901      	ldr	r1, [sp, #4]
 8005462:	4b13      	ldr	r3, [pc, #76]	@ (80054b0 <__kernel_sin+0x14c>)
 8005464:	f001 f9c8 	bl	80067f8 <__aeabi_dmul>
 8005468:	0002      	movs	r2, r0
 800546a:	000b      	movs	r3, r1
 800546c:	0020      	movs	r0, r4
 800546e:	0029      	movs	r1, r5
 8005470:	f000 f966 	bl	8005740 <__aeabi_dadd>
 8005474:	0002      	movs	r2, r0
 8005476:	000b      	movs	r3, r1
 8005478:	0030      	movs	r0, r6
 800547a:	0039      	movs	r1, r7
 800547c:	f001 fc84 	bl	8006d88 <__aeabi_dsub>
 8005480:	e7cc      	b.n	800541c <__kernel_sin+0xb8>
 8005482:	46c0      	nop			@ (mov r8, r8)
 8005484:	5acfd57c 	.word	0x5acfd57c
 8005488:	3de5d93a 	.word	0x3de5d93a
 800548c:	8a2b9ceb 	.word	0x8a2b9ceb
 8005490:	3e5ae5e6 	.word	0x3e5ae5e6
 8005494:	57b1fe7d 	.word	0x57b1fe7d
 8005498:	3ec71de3 	.word	0x3ec71de3
 800549c:	19c161d5 	.word	0x19c161d5
 80054a0:	3f2a01a0 	.word	0x3f2a01a0
 80054a4:	1110f8a6 	.word	0x1110f8a6
 80054a8:	3f811111 	.word	0x3f811111
 80054ac:	55555549 	.word	0x55555549
 80054b0:	3fc55555 	.word	0x3fc55555
 80054b4:	3fe00000 	.word	0x3fe00000

080054b8 <fabs>:
 80054b8:	0049      	lsls	r1, r1, #1
 80054ba:	084b      	lsrs	r3, r1, #1
 80054bc:	0019      	movs	r1, r3
 80054be:	4770      	bx	lr

080054c0 <scalbn>:
 80054c0:	004b      	lsls	r3, r1, #1
 80054c2:	b570      	push	{r4, r5, r6, lr}
 80054c4:	0d5b      	lsrs	r3, r3, #21
 80054c6:	0014      	movs	r4, r2
 80054c8:	000a      	movs	r2, r1
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d125      	bne.n	800551a <scalbn+0x5a>
 80054ce:	004b      	lsls	r3, r1, #1
 80054d0:	085b      	lsrs	r3, r3, #1
 80054d2:	4303      	orrs	r3, r0
 80054d4:	d020      	beq.n	8005518 <scalbn+0x58>
 80054d6:	4b2b      	ldr	r3, [pc, #172]	@ (8005584 <scalbn+0xc4>)
 80054d8:	2200      	movs	r2, #0
 80054da:	f001 f98d 	bl	80067f8 <__aeabi_dmul>
 80054de:	4b2a      	ldr	r3, [pc, #168]	@ (8005588 <scalbn+0xc8>)
 80054e0:	429c      	cmp	r4, r3
 80054e2:	db3c      	blt.n	800555e <scalbn+0x9e>
 80054e4:	000a      	movs	r2, r1
 80054e6:	004b      	lsls	r3, r1, #1
 80054e8:	0d5b      	lsrs	r3, r3, #21
 80054ea:	3b36      	subs	r3, #54	@ 0x36
 80054ec:	4d27      	ldr	r5, [pc, #156]	@ (800558c <scalbn+0xcc>)
 80054ee:	42ac      	cmp	r4, r5
 80054f0:	dc1b      	bgt.n	800552a <scalbn+0x6a>
 80054f2:	18e4      	adds	r4, r4, r3
 80054f4:	4b26      	ldr	r3, [pc, #152]	@ (8005590 <scalbn+0xd0>)
 80054f6:	429c      	cmp	r4, r3
 80054f8:	dc17      	bgt.n	800552a <scalbn+0x6a>
 80054fa:	2c00      	cmp	r4, #0
 80054fc:	dc29      	bgt.n	8005552 <scalbn+0x92>
 80054fe:	0023      	movs	r3, r4
 8005500:	3335      	adds	r3, #53	@ 0x35
 8005502:	db31      	blt.n	8005568 <scalbn+0xa8>
 8005504:	4b23      	ldr	r3, [pc, #140]	@ (8005594 <scalbn+0xd4>)
 8005506:	3436      	adds	r4, #54	@ 0x36
 8005508:	401a      	ands	r2, r3
 800550a:	0524      	lsls	r4, r4, #20
 800550c:	4314      	orrs	r4, r2
 800550e:	0021      	movs	r1, r4
 8005510:	2200      	movs	r2, #0
 8005512:	4b21      	ldr	r3, [pc, #132]	@ (8005598 <scalbn+0xd8>)
 8005514:	f001 f970 	bl	80067f8 <__aeabi_dmul>
 8005518:	bd70      	pop	{r4, r5, r6, pc}
 800551a:	4d20      	ldr	r5, [pc, #128]	@ (800559c <scalbn+0xdc>)
 800551c:	42ab      	cmp	r3, r5
 800551e:	d1e5      	bne.n	80054ec <scalbn+0x2c>
 8005520:	0002      	movs	r2, r0
 8005522:	000b      	movs	r3, r1
 8005524:	f000 f90c 	bl	8005740 <__aeabi_dadd>
 8005528:	e7f6      	b.n	8005518 <scalbn+0x58>
 800552a:	4c1d      	ldr	r4, [pc, #116]	@ (80055a0 <scalbn+0xe0>)
 800552c:	4d1d      	ldr	r5, [pc, #116]	@ (80055a4 <scalbn+0xe4>)
 800552e:	2900      	cmp	r1, #0
 8005530:	db06      	blt.n	8005540 <scalbn+0x80>
 8005532:	0020      	movs	r0, r4
 8005534:	0029      	movs	r1, r5
 8005536:	4a1a      	ldr	r2, [pc, #104]	@ (80055a0 <scalbn+0xe0>)
 8005538:	4b1a      	ldr	r3, [pc, #104]	@ (80055a4 <scalbn+0xe4>)
 800553a:	f001 f95d 	bl	80067f8 <__aeabi_dmul>
 800553e:	e7eb      	b.n	8005518 <scalbn+0x58>
 8005540:	4c17      	ldr	r4, [pc, #92]	@ (80055a0 <scalbn+0xe0>)
 8005542:	4d19      	ldr	r5, [pc, #100]	@ (80055a8 <scalbn+0xe8>)
 8005544:	0020      	movs	r0, r4
 8005546:	0029      	movs	r1, r5
 8005548:	4a15      	ldr	r2, [pc, #84]	@ (80055a0 <scalbn+0xe0>)
 800554a:	4b16      	ldr	r3, [pc, #88]	@ (80055a4 <scalbn+0xe4>)
 800554c:	f001 f954 	bl	80067f8 <__aeabi_dmul>
 8005550:	e7e2      	b.n	8005518 <scalbn+0x58>
 8005552:	4b10      	ldr	r3, [pc, #64]	@ (8005594 <scalbn+0xd4>)
 8005554:	0524      	lsls	r4, r4, #20
 8005556:	4013      	ands	r3, r2
 8005558:	4323      	orrs	r3, r4
 800555a:	0019      	movs	r1, r3
 800555c:	e7dc      	b.n	8005518 <scalbn+0x58>
 800555e:	4a13      	ldr	r2, [pc, #76]	@ (80055ac <scalbn+0xec>)
 8005560:	4b13      	ldr	r3, [pc, #76]	@ (80055b0 <scalbn+0xf0>)
 8005562:	f001 f949 	bl	80067f8 <__aeabi_dmul>
 8005566:	e7d7      	b.n	8005518 <scalbn+0x58>
 8005568:	4c10      	ldr	r4, [pc, #64]	@ (80055ac <scalbn+0xec>)
 800556a:	4d11      	ldr	r5, [pc, #68]	@ (80055b0 <scalbn+0xf0>)
 800556c:	2900      	cmp	r1, #0
 800556e:	db06      	blt.n	800557e <scalbn+0xbe>
 8005570:	0020      	movs	r0, r4
 8005572:	0029      	movs	r1, r5
 8005574:	4a0d      	ldr	r2, [pc, #52]	@ (80055ac <scalbn+0xec>)
 8005576:	4b0e      	ldr	r3, [pc, #56]	@ (80055b0 <scalbn+0xf0>)
 8005578:	f001 f93e 	bl	80067f8 <__aeabi_dmul>
 800557c:	e7cc      	b.n	8005518 <scalbn+0x58>
 800557e:	4c0b      	ldr	r4, [pc, #44]	@ (80055ac <scalbn+0xec>)
 8005580:	4d0c      	ldr	r5, [pc, #48]	@ (80055b4 <scalbn+0xf4>)
 8005582:	e7f5      	b.n	8005570 <scalbn+0xb0>
 8005584:	43500000 	.word	0x43500000
 8005588:	ffff3cb0 	.word	0xffff3cb0
 800558c:	0000c350 	.word	0x0000c350
 8005590:	000007fe 	.word	0x000007fe
 8005594:	800fffff 	.word	0x800fffff
 8005598:	3c900000 	.word	0x3c900000
 800559c:	000007ff 	.word	0x000007ff
 80055a0:	8800759c 	.word	0x8800759c
 80055a4:	7e37e43c 	.word	0x7e37e43c
 80055a8:	fe37e43c 	.word	0xfe37e43c
 80055ac:	c2f8f359 	.word	0xc2f8f359
 80055b0:	01a56e1f 	.word	0x01a56e1f
 80055b4:	81a56e1f 	.word	0x81a56e1f

080055b8 <floor>:
 80055b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055ba:	464f      	mov	r7, r9
 80055bc:	4646      	mov	r6, r8
 80055be:	46d6      	mov	lr, sl
 80055c0:	4a3e      	ldr	r2, [pc, #248]	@ (80056bc <floor+0x104>)
 80055c2:	004b      	lsls	r3, r1, #1
 80055c4:	0d5b      	lsrs	r3, r3, #21
 80055c6:	b5c0      	push	{r6, r7, lr}
 80055c8:	189e      	adds	r6, r3, r2
 80055ca:	0004      	movs	r4, r0
 80055cc:	000d      	movs	r5, r1
 80055ce:	000f      	movs	r7, r1
 80055d0:	4689      	mov	r9, r1
 80055d2:	4680      	mov	r8, r0
 80055d4:	2e13      	cmp	r6, #19
 80055d6:	dc24      	bgt.n	8005622 <floor+0x6a>
 80055d8:	2e00      	cmp	r6, #0
 80055da:	db47      	blt.n	800566c <floor+0xb4>
 80055dc:	4b38      	ldr	r3, [pc, #224]	@ (80056c0 <floor+0x108>)
 80055de:	4133      	asrs	r3, r6
 80055e0:	469a      	mov	sl, r3
 80055e2:	400b      	ands	r3, r1
 80055e4:	4303      	orrs	r3, r0
 80055e6:	d017      	beq.n	8005618 <floor+0x60>
 80055e8:	4a36      	ldr	r2, [pc, #216]	@ (80056c4 <floor+0x10c>)
 80055ea:	4b37      	ldr	r3, [pc, #220]	@ (80056c8 <floor+0x110>)
 80055ec:	f000 f8a8 	bl	8005740 <__aeabi_dadd>
 80055f0:	2200      	movs	r2, #0
 80055f2:	2300      	movs	r3, #0
 80055f4:	f7fa ff16 	bl	8000424 <__aeabi_dcmpgt>
 80055f8:	2800      	cmp	r0, #0
 80055fa:	d00b      	beq.n	8005614 <floor+0x5c>
 80055fc:	2d00      	cmp	r5, #0
 80055fe:	da04      	bge.n	800560a <floor+0x52>
 8005600:	2380      	movs	r3, #128	@ 0x80
 8005602:	035b      	lsls	r3, r3, #13
 8005604:	4133      	asrs	r3, r6
 8005606:	4699      	mov	r9, r3
 8005608:	44a9      	add	r9, r5
 800560a:	4653      	mov	r3, sl
 800560c:	464f      	mov	r7, r9
 800560e:	439f      	bics	r7, r3
 8005610:	2300      	movs	r3, #0
 8005612:	4698      	mov	r8, r3
 8005614:	0039      	movs	r1, r7
 8005616:	4640      	mov	r0, r8
 8005618:	bce0      	pop	{r5, r6, r7}
 800561a:	46ba      	mov	sl, r7
 800561c:	46b1      	mov	r9, r6
 800561e:	46a8      	mov	r8, r5
 8005620:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005622:	2e33      	cmp	r6, #51	@ 0x33
 8005624:	dd08      	ble.n	8005638 <floor+0x80>
 8005626:	2380      	movs	r3, #128	@ 0x80
 8005628:	00db      	lsls	r3, r3, #3
 800562a:	429e      	cmp	r6, r3
 800562c:	d1f4      	bne.n	8005618 <floor+0x60>
 800562e:	0002      	movs	r2, r0
 8005630:	000b      	movs	r3, r1
 8005632:	f000 f885 	bl	8005740 <__aeabi_dadd>
 8005636:	e7ef      	b.n	8005618 <floor+0x60>
 8005638:	4a24      	ldr	r2, [pc, #144]	@ (80056cc <floor+0x114>)
 800563a:	4694      	mov	ip, r2
 800563c:	2201      	movs	r2, #1
 800563e:	4463      	add	r3, ip
 8005640:	4252      	negs	r2, r2
 8005642:	40da      	lsrs	r2, r3
 8005644:	4691      	mov	r9, r2
 8005646:	4202      	tst	r2, r0
 8005648:	d0e6      	beq.n	8005618 <floor+0x60>
 800564a:	4a1e      	ldr	r2, [pc, #120]	@ (80056c4 <floor+0x10c>)
 800564c:	4b1e      	ldr	r3, [pc, #120]	@ (80056c8 <floor+0x110>)
 800564e:	f000 f877 	bl	8005740 <__aeabi_dadd>
 8005652:	2200      	movs	r2, #0
 8005654:	2300      	movs	r3, #0
 8005656:	f7fa fee5 	bl	8000424 <__aeabi_dcmpgt>
 800565a:	2800      	cmp	r0, #0
 800565c:	d0da      	beq.n	8005614 <floor+0x5c>
 800565e:	0023      	movs	r3, r4
 8005660:	2d00      	cmp	r5, #0
 8005662:	db1b      	blt.n	800569c <floor+0xe4>
 8005664:	464a      	mov	r2, r9
 8005666:	4393      	bics	r3, r2
 8005668:	4698      	mov	r8, r3
 800566a:	e7d3      	b.n	8005614 <floor+0x5c>
 800566c:	4a15      	ldr	r2, [pc, #84]	@ (80056c4 <floor+0x10c>)
 800566e:	4b16      	ldr	r3, [pc, #88]	@ (80056c8 <floor+0x110>)
 8005670:	f000 f866 	bl	8005740 <__aeabi_dadd>
 8005674:	2200      	movs	r2, #0
 8005676:	2300      	movs	r3, #0
 8005678:	f7fa fed4 	bl	8000424 <__aeabi_dcmpgt>
 800567c:	2800      	cmp	r0, #0
 800567e:	d0c9      	beq.n	8005614 <floor+0x5c>
 8005680:	2d00      	cmp	r5, #0
 8005682:	db03      	blt.n	800568c <floor+0xd4>
 8005684:	2300      	movs	r3, #0
 8005686:	2700      	movs	r7, #0
 8005688:	4698      	mov	r8, r3
 800568a:	e7c3      	b.n	8005614 <floor+0x5c>
 800568c:	006b      	lsls	r3, r5, #1
 800568e:	085b      	lsrs	r3, r3, #1
 8005690:	4323      	orrs	r3, r4
 8005692:	4698      	mov	r8, r3
 8005694:	d10d      	bne.n	80056b2 <floor+0xfa>
 8005696:	2780      	movs	r7, #128	@ 0x80
 8005698:	063f      	lsls	r7, r7, #24
 800569a:	e7bb      	b.n	8005614 <floor+0x5c>
 800569c:	2e14      	cmp	r6, #20
 800569e:	d006      	beq.n	80056ae <floor+0xf6>
 80056a0:	2134      	movs	r1, #52	@ 0x34
 80056a2:	2201      	movs	r2, #1
 80056a4:	1b89      	subs	r1, r1, r6
 80056a6:	408a      	lsls	r2, r1
 80056a8:	18a3      	adds	r3, r4, r2
 80056aa:	429c      	cmp	r4, r3
 80056ac:	d9da      	bls.n	8005664 <floor+0xac>
 80056ae:	1c6f      	adds	r7, r5, #1
 80056b0:	e7d8      	b.n	8005664 <floor+0xac>
 80056b2:	2300      	movs	r3, #0
 80056b4:	4f06      	ldr	r7, [pc, #24]	@ (80056d0 <floor+0x118>)
 80056b6:	4698      	mov	r8, r3
 80056b8:	e7ac      	b.n	8005614 <floor+0x5c>
 80056ba:	46c0      	nop			@ (mov r8, r8)
 80056bc:	fffffc01 	.word	0xfffffc01
 80056c0:	000fffff 	.word	0x000fffff
 80056c4:	8800759c 	.word	0x8800759c
 80056c8:	7e37e43c 	.word	0x7e37e43c
 80056cc:	fffffbed 	.word	0xfffffbed
 80056d0:	bff00000 	.word	0xbff00000

080056d4 <_gettimeofday>:
 80056d4:	2258      	movs	r2, #88	@ 0x58
 80056d6:	2001      	movs	r0, #1
 80056d8:	4b01      	ldr	r3, [pc, #4]	@ (80056e0 <_gettimeofday+0xc>)
 80056da:	4240      	negs	r0, r0
 80056dc:	601a      	str	r2, [r3, #0]
 80056de:	4770      	bx	lr
 80056e0:	200004ec 	.word	0x200004ec

080056e4 <__aeabi_lmul>:
 80056e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056e6:	46ce      	mov	lr, r9
 80056e8:	4699      	mov	r9, r3
 80056ea:	0c03      	lsrs	r3, r0, #16
 80056ec:	469c      	mov	ip, r3
 80056ee:	0413      	lsls	r3, r2, #16
 80056f0:	4647      	mov	r7, r8
 80056f2:	0c1b      	lsrs	r3, r3, #16
 80056f4:	001d      	movs	r5, r3
 80056f6:	000e      	movs	r6, r1
 80056f8:	4661      	mov	r1, ip
 80056fa:	0404      	lsls	r4, r0, #16
 80056fc:	0c24      	lsrs	r4, r4, #16
 80056fe:	b580      	push	{r7, lr}
 8005700:	0007      	movs	r7, r0
 8005702:	0c10      	lsrs	r0, r2, #16
 8005704:	434b      	muls	r3, r1
 8005706:	4365      	muls	r5, r4
 8005708:	4341      	muls	r1, r0
 800570a:	4360      	muls	r0, r4
 800570c:	0c2c      	lsrs	r4, r5, #16
 800570e:	18c0      	adds	r0, r0, r3
 8005710:	1824      	adds	r4, r4, r0
 8005712:	468c      	mov	ip, r1
 8005714:	42a3      	cmp	r3, r4
 8005716:	d903      	bls.n	8005720 <__aeabi_lmul+0x3c>
 8005718:	2380      	movs	r3, #128	@ 0x80
 800571a:	025b      	lsls	r3, r3, #9
 800571c:	4698      	mov	r8, r3
 800571e:	44c4      	add	ip, r8
 8005720:	4649      	mov	r1, r9
 8005722:	4379      	muls	r1, r7
 8005724:	4356      	muls	r6, r2
 8005726:	0c23      	lsrs	r3, r4, #16
 8005728:	042d      	lsls	r5, r5, #16
 800572a:	0c2d      	lsrs	r5, r5, #16
 800572c:	1989      	adds	r1, r1, r6
 800572e:	4463      	add	r3, ip
 8005730:	0424      	lsls	r4, r4, #16
 8005732:	1960      	adds	r0, r4, r5
 8005734:	18c9      	adds	r1, r1, r3
 8005736:	bcc0      	pop	{r6, r7}
 8005738:	46b9      	mov	r9, r7
 800573a:	46b0      	mov	r8, r6
 800573c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800573e:	46c0      	nop			@ (mov r8, r8)

08005740 <__aeabi_dadd>:
 8005740:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005742:	464f      	mov	r7, r9
 8005744:	4646      	mov	r6, r8
 8005746:	46d6      	mov	lr, sl
 8005748:	b5c0      	push	{r6, r7, lr}
 800574a:	030d      	lsls	r5, r1, #12
 800574c:	b082      	sub	sp, #8
 800574e:	9200      	str	r2, [sp, #0]
 8005750:	9301      	str	r3, [sp, #4]
 8005752:	004e      	lsls	r6, r1, #1
 8005754:	00c3      	lsls	r3, r0, #3
 8005756:	0fcc      	lsrs	r4, r1, #31
 8005758:	0a69      	lsrs	r1, r5, #9
 800575a:	0f45      	lsrs	r5, r0, #29
 800575c:	469c      	mov	ip, r3
 800575e:	9a00      	ldr	r2, [sp, #0]
 8005760:	9b01      	ldr	r3, [sp, #4]
 8005762:	430d      	orrs	r5, r1
 8005764:	005f      	lsls	r7, r3, #1
 8005766:	0319      	lsls	r1, r3, #12
 8005768:	0fd8      	lsrs	r0, r3, #31
 800576a:	9b00      	ldr	r3, [sp, #0]
 800576c:	0a49      	lsrs	r1, r1, #9
 800576e:	0f5b      	lsrs	r3, r3, #29
 8005770:	4319      	orrs	r1, r3
 8005772:	9b00      	ldr	r3, [sp, #0]
 8005774:	0d76      	lsrs	r6, r6, #21
 8005776:	0d7f      	lsrs	r7, r7, #21
 8005778:	00da      	lsls	r2, r3, #3
 800577a:	1bf3      	subs	r3, r6, r7
 800577c:	4284      	cmp	r4, r0
 800577e:	d058      	beq.n	8005832 <__aeabi_dadd+0xf2>
 8005780:	2b00      	cmp	r3, #0
 8005782:	dd13      	ble.n	80057ac <__aeabi_dadd+0x6c>
 8005784:	2f00      	cmp	r7, #0
 8005786:	d000      	beq.n	800578a <__aeabi_dadd+0x4a>
 8005788:	e088      	b.n	800589c <__aeabi_dadd+0x15c>
 800578a:	0008      	movs	r0, r1
 800578c:	4310      	orrs	r0, r2
 800578e:	d100      	bne.n	8005792 <__aeabi_dadd+0x52>
 8005790:	e159      	b.n	8005a46 <__aeabi_dadd+0x306>
 8005792:	1e58      	subs	r0, r3, #1
 8005794:	2b01      	cmp	r3, #1
 8005796:	d100      	bne.n	800579a <__aeabi_dadd+0x5a>
 8005798:	e2c2      	b.n	8005d20 <__aeabi_dadd+0x5e0>
 800579a:	4fb1      	ldr	r7, [pc, #708]	@ (8005a60 <__aeabi_dadd+0x320>)
 800579c:	42bb      	cmp	r3, r7
 800579e:	d100      	bne.n	80057a2 <__aeabi_dadd+0x62>
 80057a0:	e141      	b.n	8005a26 <__aeabi_dadd+0x2e6>
 80057a2:	2838      	cmp	r0, #56	@ 0x38
 80057a4:	dd00      	ble.n	80057a8 <__aeabi_dadd+0x68>
 80057a6:	e26a      	b.n	8005c7e <__aeabi_dadd+0x53e>
 80057a8:	0003      	movs	r3, r0
 80057aa:	e164      	b.n	8005a76 <__aeabi_dadd+0x336>
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d100      	bne.n	80057b2 <__aeabi_dadd+0x72>
 80057b0:	e0b1      	b.n	8005916 <__aeabi_dadd+0x1d6>
 80057b2:	1bbb      	subs	r3, r7, r6
 80057b4:	2e00      	cmp	r6, #0
 80057b6:	d000      	beq.n	80057ba <__aeabi_dadd+0x7a>
 80057b8:	e1e1      	b.n	8005b7e <__aeabi_dadd+0x43e>
 80057ba:	4664      	mov	r4, ip
 80057bc:	432c      	orrs	r4, r5
 80057be:	d100      	bne.n	80057c2 <__aeabi_dadd+0x82>
 80057c0:	e276      	b.n	8005cb0 <__aeabi_dadd+0x570>
 80057c2:	1e5c      	subs	r4, r3, #1
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d100      	bne.n	80057ca <__aeabi_dadd+0x8a>
 80057c8:	e2e8      	b.n	8005d9c <__aeabi_dadd+0x65c>
 80057ca:	4ea5      	ldr	r6, [pc, #660]	@ (8005a60 <__aeabi_dadd+0x320>)
 80057cc:	42b3      	cmp	r3, r6
 80057ce:	d100      	bne.n	80057d2 <__aeabi_dadd+0x92>
 80057d0:	e2b7      	b.n	8005d42 <__aeabi_dadd+0x602>
 80057d2:	2c38      	cmp	r4, #56	@ 0x38
 80057d4:	dc00      	bgt.n	80057d8 <__aeabi_dadd+0x98>
 80057d6:	e36b      	b.n	8005eb0 <__aeabi_dadd+0x770>
 80057d8:	1e54      	subs	r4, r2, #1
 80057da:	42a2      	cmp	r2, r4
 80057dc:	4192      	sbcs	r2, r2
 80057de:	4252      	negs	r2, r2
 80057e0:	1a8d      	subs	r5, r1, r2
 80057e2:	46a0      	mov	r8, r4
 80057e4:	001e      	movs	r6, r3
 80057e6:	0004      	movs	r4, r0
 80057e8:	022a      	lsls	r2, r5, #8
 80057ea:	d468      	bmi.n	80058be <__aeabi_dadd+0x17e>
 80057ec:	4643      	mov	r3, r8
 80057ee:	1d1f      	adds	r7, r3, #4
 80057f0:	4547      	cmp	r7, r8
 80057f2:	419b      	sbcs	r3, r3
 80057f4:	425b      	negs	r3, r3
 80057f6:	18ed      	adds	r5, r5, r3
 80057f8:	022b      	lsls	r3, r5, #8
 80057fa:	d400      	bmi.n	80057fe <__aeabi_dadd+0xbe>
 80057fc:	e39d      	b.n	8005f3a <__aeabi_dadd+0x7fa>
 80057fe:	4a98      	ldr	r2, [pc, #608]	@ (8005a60 <__aeabi_dadd+0x320>)
 8005800:	3601      	adds	r6, #1
 8005802:	4296      	cmp	r6, r2
 8005804:	d100      	bne.n	8005808 <__aeabi_dadd+0xc8>
 8005806:	e0eb      	b.n	80059e0 <__aeabi_dadd+0x2a0>
 8005808:	4a96      	ldr	r2, [pc, #600]	@ (8005a64 <__aeabi_dadd+0x324>)
 800580a:	0573      	lsls	r3, r6, #21
 800580c:	402a      	ands	r2, r5
 800580e:	0d5b      	lsrs	r3, r3, #21
 8005810:	0751      	lsls	r1, r2, #29
 8005812:	08ff      	lsrs	r7, r7, #3
 8005814:	0252      	lsls	r2, r2, #9
 8005816:	430f      	orrs	r7, r1
 8005818:	0b12      	lsrs	r2, r2, #12
 800581a:	051b      	lsls	r3, r3, #20
 800581c:	4313      	orrs	r3, r2
 800581e:	07e4      	lsls	r4, r4, #31
 8005820:	4323      	orrs	r3, r4
 8005822:	0038      	movs	r0, r7
 8005824:	0019      	movs	r1, r3
 8005826:	b002      	add	sp, #8
 8005828:	bce0      	pop	{r5, r6, r7}
 800582a:	46ba      	mov	sl, r7
 800582c:	46b1      	mov	r9, r6
 800582e:	46a8      	mov	r8, r5
 8005830:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005832:	2b00      	cmp	r3, #0
 8005834:	dc00      	bgt.n	8005838 <__aeabi_dadd+0xf8>
 8005836:	e0d7      	b.n	80059e8 <__aeabi_dadd+0x2a8>
 8005838:	2f00      	cmp	r7, #0
 800583a:	d000      	beq.n	800583e <__aeabi_dadd+0xfe>
 800583c:	e09a      	b.n	8005974 <__aeabi_dadd+0x234>
 800583e:	0008      	movs	r0, r1
 8005840:	4310      	orrs	r0, r2
 8005842:	d100      	bne.n	8005846 <__aeabi_dadd+0x106>
 8005844:	e0ff      	b.n	8005a46 <__aeabi_dadd+0x306>
 8005846:	1e58      	subs	r0, r3, #1
 8005848:	2b01      	cmp	r3, #1
 800584a:	d100      	bne.n	800584e <__aeabi_dadd+0x10e>
 800584c:	e248      	b.n	8005ce0 <__aeabi_dadd+0x5a0>
 800584e:	4f84      	ldr	r7, [pc, #528]	@ (8005a60 <__aeabi_dadd+0x320>)
 8005850:	42bb      	cmp	r3, r7
 8005852:	d100      	bne.n	8005856 <__aeabi_dadd+0x116>
 8005854:	e0e7      	b.n	8005a26 <__aeabi_dadd+0x2e6>
 8005856:	2838      	cmp	r0, #56	@ 0x38
 8005858:	dc00      	bgt.n	800585c <__aeabi_dadd+0x11c>
 800585a:	e2b8      	b.n	8005dce <__aeabi_dadd+0x68e>
 800585c:	2280      	movs	r2, #128	@ 0x80
 800585e:	0412      	lsls	r2, r2, #16
 8005860:	4215      	tst	r5, r2
 8005862:	d100      	bne.n	8005866 <__aeabi_dadd+0x126>
 8005864:	e349      	b.n	8005efa <__aeabi_dadd+0x7ba>
 8005866:	001e      	movs	r6, r3
 8005868:	2300      	movs	r3, #0
 800586a:	0015      	movs	r5, r2
 800586c:	4698      	mov	r8, r3
 800586e:	4b7c      	ldr	r3, [pc, #496]	@ (8005a60 <__aeabi_dadd+0x320>)
 8005870:	3601      	adds	r6, #1
 8005872:	429e      	cmp	r6, r3
 8005874:	d100      	bne.n	8005878 <__aeabi_dadd+0x138>
 8005876:	e0b3      	b.n	80059e0 <__aeabi_dadd+0x2a0>
 8005878:	4b7a      	ldr	r3, [pc, #488]	@ (8005a64 <__aeabi_dadd+0x324>)
 800587a:	2101      	movs	r1, #1
 800587c:	401d      	ands	r5, r3
 800587e:	4643      	mov	r3, r8
 8005880:	085a      	lsrs	r2, r3, #1
 8005882:	4019      	ands	r1, r3
 8005884:	07ef      	lsls	r7, r5, #31
 8005886:	430a      	orrs	r2, r1
 8005888:	4317      	orrs	r7, r2
 800588a:	086d      	lsrs	r5, r5, #1
 800588c:	077b      	lsls	r3, r7, #29
 800588e:	d0b3      	beq.n	80057f8 <__aeabi_dadd+0xb8>
 8005890:	230f      	movs	r3, #15
 8005892:	403b      	ands	r3, r7
 8005894:	2b04      	cmp	r3, #4
 8005896:	d0af      	beq.n	80057f8 <__aeabi_dadd+0xb8>
 8005898:	46b8      	mov	r8, r7
 800589a:	e7a7      	b.n	80057ec <__aeabi_dadd+0xac>
 800589c:	4870      	ldr	r0, [pc, #448]	@ (8005a60 <__aeabi_dadd+0x320>)
 800589e:	4286      	cmp	r6, r0
 80058a0:	d100      	bne.n	80058a4 <__aeabi_dadd+0x164>
 80058a2:	e0c0      	b.n	8005a26 <__aeabi_dadd+0x2e6>
 80058a4:	2b38      	cmp	r3, #56	@ 0x38
 80058a6:	dc00      	bgt.n	80058aa <__aeabi_dadd+0x16a>
 80058a8:	e0e2      	b.n	8005a70 <__aeabi_dadd+0x330>
 80058aa:	2301      	movs	r3, #1
 80058ac:	425b      	negs	r3, r3
 80058ae:	4463      	add	r3, ip
 80058b0:	459c      	cmp	ip, r3
 80058b2:	4180      	sbcs	r0, r0
 80058b4:	4240      	negs	r0, r0
 80058b6:	1a2d      	subs	r5, r5, r0
 80058b8:	4698      	mov	r8, r3
 80058ba:	022b      	lsls	r3, r5, #8
 80058bc:	d596      	bpl.n	80057ec <__aeabi_dadd+0xac>
 80058be:	2301      	movs	r3, #1
 80058c0:	425b      	negs	r3, r3
 80058c2:	4698      	mov	r8, r3
 80058c4:	4d68      	ldr	r5, [pc, #416]	@ (8005a68 <__aeabi_dadd+0x328>)
 80058c6:	0028      	movs	r0, r5
 80058c8:	f7fa fdc0 	bl	800044c <__clzsi2>
 80058cc:	0003      	movs	r3, r0
 80058ce:	3b08      	subs	r3, #8
 80058d0:	2120      	movs	r1, #32
 80058d2:	4640      	mov	r0, r8
 80058d4:	1aca      	subs	r2, r1, r3
 80058d6:	40d0      	lsrs	r0, r2
 80058d8:	0002      	movs	r2, r0
 80058da:	4640      	mov	r0, r8
 80058dc:	409d      	lsls	r5, r3
 80058de:	4098      	lsls	r0, r3
 80058e0:	432a      	orrs	r2, r5
 80058e2:	4680      	mov	r8, r0
 80058e4:	42b3      	cmp	r3, r6
 80058e6:	da00      	bge.n	80058ea <__aeabi_dadd+0x1aa>
 80058e8:	e172      	b.n	8005bd0 <__aeabi_dadd+0x490>
 80058ea:	1b98      	subs	r0, r3, r6
 80058ec:	4643      	mov	r3, r8
 80058ee:	3001      	adds	r0, #1
 80058f0:	1a09      	subs	r1, r1, r0
 80058f2:	4645      	mov	r5, r8
 80058f4:	408b      	lsls	r3, r1
 80058f6:	40c5      	lsrs	r5, r0
 80058f8:	1e5e      	subs	r6, r3, #1
 80058fa:	41b3      	sbcs	r3, r6
 80058fc:	0017      	movs	r7, r2
 80058fe:	408f      	lsls	r7, r1
 8005900:	432b      	orrs	r3, r5
 8005902:	431f      	orrs	r7, r3
 8005904:	40c2      	lsrs	r2, r0
 8005906:	003b      	movs	r3, r7
 8005908:	0015      	movs	r5, r2
 800590a:	2600      	movs	r6, #0
 800590c:	4313      	orrs	r3, r2
 800590e:	d1bd      	bne.n	800588c <__aeabi_dadd+0x14c>
 8005910:	2700      	movs	r7, #0
 8005912:	2200      	movs	r2, #0
 8005914:	e781      	b.n	800581a <__aeabi_dadd+0xda>
 8005916:	4f55      	ldr	r7, [pc, #340]	@ (8005a6c <__aeabi_dadd+0x32c>)
 8005918:	1c73      	adds	r3, r6, #1
 800591a:	423b      	tst	r3, r7
 800591c:	d000      	beq.n	8005920 <__aeabi_dadd+0x1e0>
 800591e:	e11b      	b.n	8005b58 <__aeabi_dadd+0x418>
 8005920:	4663      	mov	r3, ip
 8005922:	000f      	movs	r7, r1
 8005924:	432b      	orrs	r3, r5
 8005926:	4317      	orrs	r7, r2
 8005928:	2e00      	cmp	r6, #0
 800592a:	d000      	beq.n	800592e <__aeabi_dadd+0x1ee>
 800592c:	e1c4      	b.n	8005cb8 <__aeabi_dadd+0x578>
 800592e:	2b00      	cmp	r3, #0
 8005930:	d100      	bne.n	8005934 <__aeabi_dadd+0x1f4>
 8005932:	e245      	b.n	8005dc0 <__aeabi_dadd+0x680>
 8005934:	2f00      	cmp	r7, #0
 8005936:	d100      	bne.n	800593a <__aeabi_dadd+0x1fa>
 8005938:	e107      	b.n	8005b4a <__aeabi_dadd+0x40a>
 800593a:	4663      	mov	r3, ip
 800593c:	1a9b      	subs	r3, r3, r2
 800593e:	4698      	mov	r8, r3
 8005940:	45c4      	cmp	ip, r8
 8005942:	41b6      	sbcs	r6, r6
 8005944:	1a6b      	subs	r3, r5, r1
 8005946:	4276      	negs	r6, r6
 8005948:	1b9b      	subs	r3, r3, r6
 800594a:	2680      	movs	r6, #128	@ 0x80
 800594c:	0436      	lsls	r6, r6, #16
 800594e:	4233      	tst	r3, r6
 8005950:	d100      	bne.n	8005954 <__aeabi_dadd+0x214>
 8005952:	e2cb      	b.n	8005eec <__aeabi_dadd+0x7ac>
 8005954:	4663      	mov	r3, ip
 8005956:	1ad3      	subs	r3, r2, r3
 8005958:	429a      	cmp	r2, r3
 800595a:	4192      	sbcs	r2, r2
 800595c:	001f      	movs	r7, r3
 800595e:	1b49      	subs	r1, r1, r5
 8005960:	4252      	negs	r2, r2
 8005962:	1a8a      	subs	r2, r1, r2
 8005964:	469c      	mov	ip, r3
 8005966:	4317      	orrs	r7, r2
 8005968:	d000      	beq.n	800596c <__aeabi_dadd+0x22c>
 800596a:	e2ed      	b.n	8005f48 <__aeabi_dadd+0x808>
 800596c:	0004      	movs	r4, r0
 800596e:	2300      	movs	r3, #0
 8005970:	2200      	movs	r2, #0
 8005972:	e752      	b.n	800581a <__aeabi_dadd+0xda>
 8005974:	483a      	ldr	r0, [pc, #232]	@ (8005a60 <__aeabi_dadd+0x320>)
 8005976:	4286      	cmp	r6, r0
 8005978:	d055      	beq.n	8005a26 <__aeabi_dadd+0x2e6>
 800597a:	2b38      	cmp	r3, #56	@ 0x38
 800597c:	dd00      	ble.n	8005980 <__aeabi_dadd+0x240>
 800597e:	e148      	b.n	8005c12 <__aeabi_dadd+0x4d2>
 8005980:	2080      	movs	r0, #128	@ 0x80
 8005982:	0400      	lsls	r0, r0, #16
 8005984:	4301      	orrs	r1, r0
 8005986:	2b1f      	cmp	r3, #31
 8005988:	dd00      	ble.n	800598c <__aeabi_dadd+0x24c>
 800598a:	e1e3      	b.n	8005d54 <__aeabi_dadd+0x614>
 800598c:	2720      	movs	r7, #32
 800598e:	1af8      	subs	r0, r7, r3
 8005990:	4682      	mov	sl, r0
 8005992:	0008      	movs	r0, r1
 8005994:	4657      	mov	r7, sl
 8005996:	40b8      	lsls	r0, r7
 8005998:	4681      	mov	r9, r0
 800599a:	0010      	movs	r0, r2
 800599c:	464f      	mov	r7, r9
 800599e:	40d8      	lsrs	r0, r3
 80059a0:	4307      	orrs	r7, r0
 80059a2:	0038      	movs	r0, r7
 80059a4:	4657      	mov	r7, sl
 80059a6:	40ba      	lsls	r2, r7
 80059a8:	40d9      	lsrs	r1, r3
 80059aa:	1e57      	subs	r7, r2, #1
 80059ac:	41ba      	sbcs	r2, r7
 80059ae:	186d      	adds	r5, r5, r1
 80059b0:	4310      	orrs	r0, r2
 80059b2:	4460      	add	r0, ip
 80059b4:	4680      	mov	r8, r0
 80059b6:	45e0      	cmp	r8, ip
 80059b8:	4180      	sbcs	r0, r0
 80059ba:	4240      	negs	r0, r0
 80059bc:	182d      	adds	r5, r5, r0
 80059be:	022b      	lsls	r3, r5, #8
 80059c0:	d500      	bpl.n	80059c4 <__aeabi_dadd+0x284>
 80059c2:	e754      	b.n	800586e <__aeabi_dadd+0x12e>
 80059c4:	4643      	mov	r3, r8
 80059c6:	075b      	lsls	r3, r3, #29
 80059c8:	d100      	bne.n	80059cc <__aeabi_dadd+0x28c>
 80059ca:	e2b9      	b.n	8005f40 <__aeabi_dadd+0x800>
 80059cc:	230f      	movs	r3, #15
 80059ce:	4642      	mov	r2, r8
 80059d0:	4013      	ands	r3, r2
 80059d2:	2b04      	cmp	r3, #4
 80059d4:	d000      	beq.n	80059d8 <__aeabi_dadd+0x298>
 80059d6:	e709      	b.n	80057ec <__aeabi_dadd+0xac>
 80059d8:	0033      	movs	r3, r6
 80059da:	4642      	mov	r2, r8
 80059dc:	08d2      	lsrs	r2, r2, #3
 80059de:	e034      	b.n	8005a4a <__aeabi_dadd+0x30a>
 80059e0:	0033      	movs	r3, r6
 80059e2:	2200      	movs	r2, #0
 80059e4:	2700      	movs	r7, #0
 80059e6:	e718      	b.n	800581a <__aeabi_dadd+0xda>
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d100      	bne.n	80059ee <__aeabi_dadd+0x2ae>
 80059ec:	e08f      	b.n	8005b0e <__aeabi_dadd+0x3ce>
 80059ee:	1bbb      	subs	r3, r7, r6
 80059f0:	2e00      	cmp	r6, #0
 80059f2:	d000      	beq.n	80059f6 <__aeabi_dadd+0x2b6>
 80059f4:	e133      	b.n	8005c5e <__aeabi_dadd+0x51e>
 80059f6:	4660      	mov	r0, ip
 80059f8:	4328      	orrs	r0, r5
 80059fa:	d100      	bne.n	80059fe <__aeabi_dadd+0x2be>
 80059fc:	e240      	b.n	8005e80 <__aeabi_dadd+0x740>
 80059fe:	1e58      	subs	r0, r3, #1
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d100      	bne.n	8005a06 <__aeabi_dadd+0x2c6>
 8005a04:	e20a      	b.n	8005e1c <__aeabi_dadd+0x6dc>
 8005a06:	4e16      	ldr	r6, [pc, #88]	@ (8005a60 <__aeabi_dadd+0x320>)
 8005a08:	42b3      	cmp	r3, r6
 8005a0a:	d100      	bne.n	8005a0e <__aeabi_dadd+0x2ce>
 8005a0c:	e285      	b.n	8005f1a <__aeabi_dadd+0x7da>
 8005a0e:	2838      	cmp	r0, #56	@ 0x38
 8005a10:	dc00      	bgt.n	8005a14 <__aeabi_dadd+0x2d4>
 8005a12:	e287      	b.n	8005f24 <__aeabi_dadd+0x7e4>
 8005a14:	2580      	movs	r5, #128	@ 0x80
 8005a16:	042d      	lsls	r5, r5, #16
 8005a18:	4229      	tst	r1, r5
 8005a1a:	d100      	bne.n	8005a1e <__aeabi_dadd+0x2de>
 8005a1c:	e29c      	b.n	8005f58 <__aeabi_dadd+0x818>
 8005a1e:	001e      	movs	r6, r3
 8005a20:	2300      	movs	r3, #0
 8005a22:	4698      	mov	r8, r3
 8005a24:	e723      	b.n	800586e <__aeabi_dadd+0x12e>
 8005a26:	4663      	mov	r3, ip
 8005a28:	076e      	lsls	r6, r5, #29
 8005a2a:	08d8      	lsrs	r0, r3, #3
 8005a2c:	4306      	orrs	r6, r0
 8005a2e:	08ed      	lsrs	r5, r5, #3
 8005a30:	0037      	movs	r7, r6
 8005a32:	432f      	orrs	r7, r5
 8005a34:	d011      	beq.n	8005a5a <__aeabi_dadd+0x31a>
 8005a36:	2280      	movs	r2, #128	@ 0x80
 8005a38:	0312      	lsls	r2, r2, #12
 8005a3a:	432a      	orrs	r2, r5
 8005a3c:	0312      	lsls	r2, r2, #12
 8005a3e:	0037      	movs	r7, r6
 8005a40:	4b07      	ldr	r3, [pc, #28]	@ (8005a60 <__aeabi_dadd+0x320>)
 8005a42:	0b12      	lsrs	r2, r2, #12
 8005a44:	e6e9      	b.n	800581a <__aeabi_dadd+0xda>
 8005a46:	4662      	mov	r2, ip
 8005a48:	08d2      	lsrs	r2, r2, #3
 8005a4a:	076e      	lsls	r6, r5, #29
 8005a4c:	4316      	orrs	r6, r2
 8005a4e:	4a04      	ldr	r2, [pc, #16]	@ (8005a60 <__aeabi_dadd+0x320>)
 8005a50:	08ed      	lsrs	r5, r5, #3
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d0ec      	beq.n	8005a30 <__aeabi_dadd+0x2f0>
 8005a56:	0037      	movs	r7, r6
 8005a58:	e0d6      	b.n	8005c08 <__aeabi_dadd+0x4c8>
 8005a5a:	4b01      	ldr	r3, [pc, #4]	@ (8005a60 <__aeabi_dadd+0x320>)
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	e6dc      	b.n	800581a <__aeabi_dadd+0xda>
 8005a60:	000007ff 	.word	0x000007ff
 8005a64:	ff7fffff 	.word	0xff7fffff
 8005a68:	007fffff 	.word	0x007fffff
 8005a6c:	000007fe 	.word	0x000007fe
 8005a70:	2080      	movs	r0, #128	@ 0x80
 8005a72:	0400      	lsls	r0, r0, #16
 8005a74:	4301      	orrs	r1, r0
 8005a76:	2b1f      	cmp	r3, #31
 8005a78:	dd00      	ble.n	8005a7c <__aeabi_dadd+0x33c>
 8005a7a:	e0b1      	b.n	8005be0 <__aeabi_dadd+0x4a0>
 8005a7c:	2720      	movs	r7, #32
 8005a7e:	1af8      	subs	r0, r7, r3
 8005a80:	4682      	mov	sl, r0
 8005a82:	0008      	movs	r0, r1
 8005a84:	4657      	mov	r7, sl
 8005a86:	40b8      	lsls	r0, r7
 8005a88:	4681      	mov	r9, r0
 8005a8a:	0010      	movs	r0, r2
 8005a8c:	464f      	mov	r7, r9
 8005a8e:	40d8      	lsrs	r0, r3
 8005a90:	4307      	orrs	r7, r0
 8005a92:	0038      	movs	r0, r7
 8005a94:	4657      	mov	r7, sl
 8005a96:	40ba      	lsls	r2, r7
 8005a98:	40d9      	lsrs	r1, r3
 8005a9a:	1e57      	subs	r7, r2, #1
 8005a9c:	41ba      	sbcs	r2, r7
 8005a9e:	1a6d      	subs	r5, r5, r1
 8005aa0:	4310      	orrs	r0, r2
 8005aa2:	4663      	mov	r3, ip
 8005aa4:	1a1b      	subs	r3, r3, r0
 8005aa6:	459c      	cmp	ip, r3
 8005aa8:	4180      	sbcs	r0, r0
 8005aaa:	4698      	mov	r8, r3
 8005aac:	4240      	negs	r0, r0
 8005aae:	1a2d      	subs	r5, r5, r0
 8005ab0:	022b      	lsls	r3, r5, #8
 8005ab2:	d587      	bpl.n	80059c4 <__aeabi_dadd+0x284>
 8005ab4:	026d      	lsls	r5, r5, #9
 8005ab6:	0a6d      	lsrs	r5, r5, #9
 8005ab8:	2d00      	cmp	r5, #0
 8005aba:	d000      	beq.n	8005abe <__aeabi_dadd+0x37e>
 8005abc:	e703      	b.n	80058c6 <__aeabi_dadd+0x186>
 8005abe:	4640      	mov	r0, r8
 8005ac0:	f7fa fcc4 	bl	800044c <__clzsi2>
 8005ac4:	0003      	movs	r3, r0
 8005ac6:	3318      	adds	r3, #24
 8005ac8:	2b1f      	cmp	r3, #31
 8005aca:	dc00      	bgt.n	8005ace <__aeabi_dadd+0x38e>
 8005acc:	e700      	b.n	80058d0 <__aeabi_dadd+0x190>
 8005ace:	4642      	mov	r2, r8
 8005ad0:	3808      	subs	r0, #8
 8005ad2:	4082      	lsls	r2, r0
 8005ad4:	429e      	cmp	r6, r3
 8005ad6:	dd00      	ble.n	8005ada <__aeabi_dadd+0x39a>
 8005ad8:	e091      	b.n	8005bfe <__aeabi_dadd+0x4be>
 8005ada:	1b9b      	subs	r3, r3, r6
 8005adc:	1c58      	adds	r0, r3, #1
 8005ade:	281f      	cmp	r0, #31
 8005ae0:	dc00      	bgt.n	8005ae4 <__aeabi_dadd+0x3a4>
 8005ae2:	e1f8      	b.n	8005ed6 <__aeabi_dadd+0x796>
 8005ae4:	0017      	movs	r7, r2
 8005ae6:	3b1f      	subs	r3, #31
 8005ae8:	40df      	lsrs	r7, r3
 8005aea:	2820      	cmp	r0, #32
 8005aec:	d005      	beq.n	8005afa <__aeabi_dadd+0x3ba>
 8005aee:	2340      	movs	r3, #64	@ 0x40
 8005af0:	1a1b      	subs	r3, r3, r0
 8005af2:	409a      	lsls	r2, r3
 8005af4:	1e53      	subs	r3, r2, #1
 8005af6:	419a      	sbcs	r2, r3
 8005af8:	4317      	orrs	r7, r2
 8005afa:	2f00      	cmp	r7, #0
 8005afc:	d03c      	beq.n	8005b78 <__aeabi_dadd+0x438>
 8005afe:	2600      	movs	r6, #0
 8005b00:	077b      	lsls	r3, r7, #29
 8005b02:	d000      	beq.n	8005b06 <__aeabi_dadd+0x3c6>
 8005b04:	e6c4      	b.n	8005890 <__aeabi_dadd+0x150>
 8005b06:	0035      	movs	r5, r6
 8005b08:	46b8      	mov	r8, r7
 8005b0a:	0033      	movs	r3, r6
 8005b0c:	e765      	b.n	80059da <__aeabi_dadd+0x29a>
 8005b0e:	48cb      	ldr	r0, [pc, #812]	@ (8005e3c <__aeabi_dadd+0x6fc>)
 8005b10:	1c73      	adds	r3, r6, #1
 8005b12:	4203      	tst	r3, r0
 8005b14:	d000      	beq.n	8005b18 <__aeabi_dadd+0x3d8>
 8005b16:	e085      	b.n	8005c24 <__aeabi_dadd+0x4e4>
 8005b18:	4663      	mov	r3, ip
 8005b1a:	432b      	orrs	r3, r5
 8005b1c:	2e00      	cmp	r6, #0
 8005b1e:	d000      	beq.n	8005b22 <__aeabi_dadd+0x3e2>
 8005b20:	e192      	b.n	8005e48 <__aeabi_dadd+0x708>
 8005b22:	000f      	movs	r7, r1
 8005b24:	4317      	orrs	r7, r2
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d100      	bne.n	8005b2c <__aeabi_dadd+0x3ec>
 8005b2a:	e1d8      	b.n	8005ede <__aeabi_dadd+0x79e>
 8005b2c:	2f00      	cmp	r7, #0
 8005b2e:	d00c      	beq.n	8005b4a <__aeabi_dadd+0x40a>
 8005b30:	4462      	add	r2, ip
 8005b32:	4562      	cmp	r2, ip
 8005b34:	4180      	sbcs	r0, r0
 8005b36:	186d      	adds	r5, r5, r1
 8005b38:	4240      	negs	r0, r0
 8005b3a:	182d      	adds	r5, r5, r0
 8005b3c:	022b      	lsls	r3, r5, #8
 8005b3e:	d500      	bpl.n	8005b42 <__aeabi_dadd+0x402>
 8005b40:	e1f2      	b.n	8005f28 <__aeabi_dadd+0x7e8>
 8005b42:	0017      	movs	r7, r2
 8005b44:	4694      	mov	ip, r2
 8005b46:	432f      	orrs	r7, r5
 8005b48:	d016      	beq.n	8005b78 <__aeabi_dadd+0x438>
 8005b4a:	4663      	mov	r3, ip
 8005b4c:	076f      	lsls	r7, r5, #29
 8005b4e:	08d8      	lsrs	r0, r3, #3
 8005b50:	4307      	orrs	r7, r0
 8005b52:	2300      	movs	r3, #0
 8005b54:	08ed      	lsrs	r5, r5, #3
 8005b56:	e057      	b.n	8005c08 <__aeabi_dadd+0x4c8>
 8005b58:	4663      	mov	r3, ip
 8005b5a:	1a9b      	subs	r3, r3, r2
 8005b5c:	4698      	mov	r8, r3
 8005b5e:	45c4      	cmp	ip, r8
 8005b60:	41bf      	sbcs	r7, r7
 8005b62:	1a6b      	subs	r3, r5, r1
 8005b64:	427f      	negs	r7, r7
 8005b66:	1bdb      	subs	r3, r3, r7
 8005b68:	021f      	lsls	r7, r3, #8
 8005b6a:	d500      	bpl.n	8005b6e <__aeabi_dadd+0x42e>
 8005b6c:	e0ae      	b.n	8005ccc <__aeabi_dadd+0x58c>
 8005b6e:	4647      	mov	r7, r8
 8005b70:	001d      	movs	r5, r3
 8005b72:	431f      	orrs	r7, r3
 8005b74:	d1a0      	bne.n	8005ab8 <__aeabi_dadd+0x378>
 8005b76:	2400      	movs	r4, #0
 8005b78:	2300      	movs	r3, #0
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	e64d      	b.n	800581a <__aeabi_dadd+0xda>
 8005b7e:	4cb0      	ldr	r4, [pc, #704]	@ (8005e40 <__aeabi_dadd+0x700>)
 8005b80:	42a7      	cmp	r7, r4
 8005b82:	d100      	bne.n	8005b86 <__aeabi_dadd+0x446>
 8005b84:	e0dd      	b.n	8005d42 <__aeabi_dadd+0x602>
 8005b86:	2b38      	cmp	r3, #56	@ 0x38
 8005b88:	dd00      	ble.n	8005b8c <__aeabi_dadd+0x44c>
 8005b8a:	e085      	b.n	8005c98 <__aeabi_dadd+0x558>
 8005b8c:	2480      	movs	r4, #128	@ 0x80
 8005b8e:	0424      	lsls	r4, r4, #16
 8005b90:	4325      	orrs	r5, r4
 8005b92:	2b1f      	cmp	r3, #31
 8005b94:	dd00      	ble.n	8005b98 <__aeabi_dadd+0x458>
 8005b96:	e0ec      	b.n	8005d72 <__aeabi_dadd+0x632>
 8005b98:	2620      	movs	r6, #32
 8005b9a:	1af4      	subs	r4, r6, r3
 8005b9c:	46a1      	mov	r9, r4
 8005b9e:	002c      	movs	r4, r5
 8005ba0:	464e      	mov	r6, r9
 8005ba2:	40b4      	lsls	r4, r6
 8005ba4:	4666      	mov	r6, ip
 8005ba6:	40de      	lsrs	r6, r3
 8005ba8:	4334      	orrs	r4, r6
 8005baa:	46a0      	mov	r8, r4
 8005bac:	4666      	mov	r6, ip
 8005bae:	464c      	mov	r4, r9
 8005bb0:	40a6      	lsls	r6, r4
 8005bb2:	40dd      	lsrs	r5, r3
 8005bb4:	1e74      	subs	r4, r6, #1
 8005bb6:	41a6      	sbcs	r6, r4
 8005bb8:	4644      	mov	r4, r8
 8005bba:	1b49      	subs	r1, r1, r5
 8005bbc:	4334      	orrs	r4, r6
 8005bbe:	1b13      	subs	r3, r2, r4
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	4192      	sbcs	r2, r2
 8005bc4:	4252      	negs	r2, r2
 8005bc6:	4698      	mov	r8, r3
 8005bc8:	0004      	movs	r4, r0
 8005bca:	003e      	movs	r6, r7
 8005bcc:	1a8d      	subs	r5, r1, r2
 8005bce:	e76f      	b.n	8005ab0 <__aeabi_dadd+0x370>
 8005bd0:	1af6      	subs	r6, r6, r3
 8005bd2:	0003      	movs	r3, r0
 8005bd4:	4d9b      	ldr	r5, [pc, #620]	@ (8005e44 <__aeabi_dadd+0x704>)
 8005bd6:	4015      	ands	r5, r2
 8005bd8:	075b      	lsls	r3, r3, #29
 8005bda:	d000      	beq.n	8005bde <__aeabi_dadd+0x49e>
 8005bdc:	e6f6      	b.n	80059cc <__aeabi_dadd+0x28c>
 8005bde:	e6fb      	b.n	80059d8 <__aeabi_dadd+0x298>
 8005be0:	0018      	movs	r0, r3
 8005be2:	000f      	movs	r7, r1
 8005be4:	3820      	subs	r0, #32
 8005be6:	40c7      	lsrs	r7, r0
 8005be8:	2b20      	cmp	r3, #32
 8005bea:	d003      	beq.n	8005bf4 <__aeabi_dadd+0x4b4>
 8005bec:	2040      	movs	r0, #64	@ 0x40
 8005bee:	1ac3      	subs	r3, r0, r3
 8005bf0:	4099      	lsls	r1, r3
 8005bf2:	430a      	orrs	r2, r1
 8005bf4:	1e53      	subs	r3, r2, #1
 8005bf6:	419a      	sbcs	r2, r3
 8005bf8:	0010      	movs	r0, r2
 8005bfa:	4338      	orrs	r0, r7
 8005bfc:	e751      	b.n	8005aa2 <__aeabi_dadd+0x362>
 8005bfe:	4991      	ldr	r1, [pc, #580]	@ (8005e44 <__aeabi_dadd+0x704>)
 8005c00:	1af3      	subs	r3, r6, r3
 8005c02:	400a      	ands	r2, r1
 8005c04:	0757      	lsls	r7, r2, #29
 8005c06:	08d5      	lsrs	r5, r2, #3
 8005c08:	032a      	lsls	r2, r5, #12
 8005c0a:	055b      	lsls	r3, r3, #21
 8005c0c:	0b12      	lsrs	r2, r2, #12
 8005c0e:	0d5b      	lsrs	r3, r3, #21
 8005c10:	e603      	b.n	800581a <__aeabi_dadd+0xda>
 8005c12:	2380      	movs	r3, #128	@ 0x80
 8005c14:	041b      	lsls	r3, r3, #16
 8005c16:	421d      	tst	r5, r3
 8005c18:	d100      	bne.n	8005c1c <__aeabi_dadd+0x4dc>
 8005c1a:	e0bb      	b.n	8005d94 <__aeabi_dadd+0x654>
 8005c1c:	001d      	movs	r5, r3
 8005c1e:	2300      	movs	r3, #0
 8005c20:	4698      	mov	r8, r3
 8005c22:	e624      	b.n	800586e <__aeabi_dadd+0x12e>
 8005c24:	4886      	ldr	r0, [pc, #536]	@ (8005e40 <__aeabi_dadd+0x700>)
 8005c26:	4283      	cmp	r3, r0
 8005c28:	d100      	bne.n	8005c2c <__aeabi_dadd+0x4ec>
 8005c2a:	e6da      	b.n	80059e2 <__aeabi_dadd+0x2a2>
 8005c2c:	4462      	add	r2, ip
 8005c2e:	4562      	cmp	r2, ip
 8005c30:	4180      	sbcs	r0, r0
 8005c32:	1869      	adds	r1, r5, r1
 8005c34:	4240      	negs	r0, r0
 8005c36:	1809      	adds	r1, r1, r0
 8005c38:	07c8      	lsls	r0, r1, #31
 8005c3a:	0852      	lsrs	r2, r2, #1
 8005c3c:	4310      	orrs	r0, r2
 8005c3e:	4680      	mov	r8, r0
 8005c40:	084d      	lsrs	r5, r1, #1
 8005c42:	0752      	lsls	r2, r2, #29
 8005c44:	d005      	beq.n	8005c52 <__aeabi_dadd+0x512>
 8005c46:	220f      	movs	r2, #15
 8005c48:	001e      	movs	r6, r3
 8005c4a:	4002      	ands	r2, r0
 8005c4c:	2a04      	cmp	r2, #4
 8005c4e:	d000      	beq.n	8005c52 <__aeabi_dadd+0x512>
 8005c50:	e5cc      	b.n	80057ec <__aeabi_dadd+0xac>
 8005c52:	4642      	mov	r2, r8
 8005c54:	076f      	lsls	r7, r5, #29
 8005c56:	08d2      	lsrs	r2, r2, #3
 8005c58:	4317      	orrs	r7, r2
 8005c5a:	090d      	lsrs	r5, r1, #4
 8005c5c:	e7d4      	b.n	8005c08 <__aeabi_dadd+0x4c8>
 8005c5e:	4878      	ldr	r0, [pc, #480]	@ (8005e40 <__aeabi_dadd+0x700>)
 8005c60:	4287      	cmp	r7, r0
 8005c62:	d100      	bne.n	8005c66 <__aeabi_dadd+0x526>
 8005c64:	e0d5      	b.n	8005e12 <__aeabi_dadd+0x6d2>
 8005c66:	2b38      	cmp	r3, #56	@ 0x38
 8005c68:	dc00      	bgt.n	8005c6c <__aeabi_dadd+0x52c>
 8005c6a:	e0b2      	b.n	8005dd2 <__aeabi_dadd+0x692>
 8005c6c:	2580      	movs	r5, #128	@ 0x80
 8005c6e:	042d      	lsls	r5, r5, #16
 8005c70:	4229      	tst	r1, r5
 8005c72:	d100      	bne.n	8005c76 <__aeabi_dadd+0x536>
 8005c74:	e14c      	b.n	8005f10 <__aeabi_dadd+0x7d0>
 8005c76:	2300      	movs	r3, #0
 8005c78:	003e      	movs	r6, r7
 8005c7a:	4698      	mov	r8, r3
 8005c7c:	e5f7      	b.n	800586e <__aeabi_dadd+0x12e>
 8005c7e:	2201      	movs	r2, #1
 8005c80:	4252      	negs	r2, r2
 8005c82:	4462      	add	r2, ip
 8005c84:	4594      	cmp	ip, r2
 8005c86:	4180      	sbcs	r0, r0
 8005c88:	4240      	negs	r0, r0
 8005c8a:	1a2d      	subs	r5, r5, r0
 8005c8c:	4690      	mov	r8, r2
 8005c8e:	001e      	movs	r6, r3
 8005c90:	022a      	lsls	r2, r5, #8
 8005c92:	d500      	bpl.n	8005c96 <__aeabi_dadd+0x556>
 8005c94:	e613      	b.n	80058be <__aeabi_dadd+0x17e>
 8005c96:	e5a9      	b.n	80057ec <__aeabi_dadd+0xac>
 8005c98:	1e53      	subs	r3, r2, #1
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	4192      	sbcs	r2, r2
 8005c9e:	4252      	negs	r2, r2
 8005ca0:	1a8d      	subs	r5, r1, r2
 8005ca2:	4698      	mov	r8, r3
 8005ca4:	0004      	movs	r4, r0
 8005ca6:	003e      	movs	r6, r7
 8005ca8:	022b      	lsls	r3, r5, #8
 8005caa:	d500      	bpl.n	8005cae <__aeabi_dadd+0x56e>
 8005cac:	e607      	b.n	80058be <__aeabi_dadd+0x17e>
 8005cae:	e59d      	b.n	80057ec <__aeabi_dadd+0xac>
 8005cb0:	0004      	movs	r4, r0
 8005cb2:	000d      	movs	r5, r1
 8005cb4:	08d2      	lsrs	r2, r2, #3
 8005cb6:	e6c8      	b.n	8005a4a <__aeabi_dadd+0x30a>
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d000      	beq.n	8005cbe <__aeabi_dadd+0x57e>
 8005cbc:	e0e3      	b.n	8005e86 <__aeabi_dadd+0x746>
 8005cbe:	2f00      	cmp	r7, #0
 8005cc0:	d13f      	bne.n	8005d42 <__aeabi_dadd+0x602>
 8005cc2:	2280      	movs	r2, #128	@ 0x80
 8005cc4:	2400      	movs	r4, #0
 8005cc6:	4b5e      	ldr	r3, [pc, #376]	@ (8005e40 <__aeabi_dadd+0x700>)
 8005cc8:	0312      	lsls	r2, r2, #12
 8005cca:	e5a6      	b.n	800581a <__aeabi_dadd+0xda>
 8005ccc:	4663      	mov	r3, ip
 8005cce:	1ad3      	subs	r3, r2, r3
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	4192      	sbcs	r2, r2
 8005cd4:	1b4d      	subs	r5, r1, r5
 8005cd6:	4252      	negs	r2, r2
 8005cd8:	4698      	mov	r8, r3
 8005cda:	0004      	movs	r4, r0
 8005cdc:	1aad      	subs	r5, r5, r2
 8005cde:	e6eb      	b.n	8005ab8 <__aeabi_dadd+0x378>
 8005ce0:	4462      	add	r2, ip
 8005ce2:	0016      	movs	r6, r2
 8005ce4:	4566      	cmp	r6, ip
 8005ce6:	4180      	sbcs	r0, r0
 8005ce8:	186a      	adds	r2, r5, r1
 8005cea:	4240      	negs	r0, r0
 8005cec:	1812      	adds	r2, r2, r0
 8005cee:	0213      	lsls	r3, r2, #8
 8005cf0:	d400      	bmi.n	8005cf4 <__aeabi_dadd+0x5b4>
 8005cf2:	e09d      	b.n	8005e30 <__aeabi_dadd+0x6f0>
 8005cf4:	4953      	ldr	r1, [pc, #332]	@ (8005e44 <__aeabi_dadd+0x704>)
 8005cf6:	0873      	lsrs	r3, r6, #1
 8005cf8:	400a      	ands	r2, r1
 8005cfa:	07d1      	lsls	r1, r2, #31
 8005cfc:	4319      	orrs	r1, r3
 8005cfe:	0857      	lsrs	r7, r2, #1
 8005d00:	075b      	lsls	r3, r3, #29
 8005d02:	d100      	bne.n	8005d06 <__aeabi_dadd+0x5c6>
 8005d04:	e0fe      	b.n	8005f04 <__aeabi_dadd+0x7c4>
 8005d06:	230f      	movs	r3, #15
 8005d08:	400b      	ands	r3, r1
 8005d0a:	2b04      	cmp	r3, #4
 8005d0c:	d100      	bne.n	8005d10 <__aeabi_dadd+0x5d0>
 8005d0e:	e0f9      	b.n	8005f04 <__aeabi_dadd+0x7c4>
 8005d10:	1d0b      	adds	r3, r1, #4
 8005d12:	4698      	mov	r8, r3
 8005d14:	4588      	cmp	r8, r1
 8005d16:	41ad      	sbcs	r5, r5
 8005d18:	426d      	negs	r5, r5
 8005d1a:	2302      	movs	r3, #2
 8005d1c:	19ed      	adds	r5, r5, r7
 8005d1e:	e65c      	b.n	80059da <__aeabi_dadd+0x29a>
 8005d20:	4663      	mov	r3, ip
 8005d22:	1a9b      	subs	r3, r3, r2
 8005d24:	459c      	cmp	ip, r3
 8005d26:	4180      	sbcs	r0, r0
 8005d28:	1a6d      	subs	r5, r5, r1
 8005d2a:	4240      	negs	r0, r0
 8005d2c:	1a2d      	subs	r5, r5, r0
 8005d2e:	4698      	mov	r8, r3
 8005d30:	022b      	lsls	r3, r5, #8
 8005d32:	d40d      	bmi.n	8005d50 <__aeabi_dadd+0x610>
 8005d34:	4643      	mov	r3, r8
 8005d36:	076f      	lsls	r7, r5, #29
 8005d38:	08db      	lsrs	r3, r3, #3
 8005d3a:	431f      	orrs	r7, r3
 8005d3c:	08ed      	lsrs	r5, r5, #3
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e762      	b.n	8005c08 <__aeabi_dadd+0x4c8>
 8005d42:	074e      	lsls	r6, r1, #29
 8005d44:	08d2      	lsrs	r2, r2, #3
 8005d46:	0004      	movs	r4, r0
 8005d48:	4316      	orrs	r6, r2
 8005d4a:	08cd      	lsrs	r5, r1, #3
 8005d4c:	e670      	b.n	8005a30 <__aeabi_dadd+0x2f0>
 8005d4e:	0004      	movs	r4, r0
 8005d50:	2601      	movs	r6, #1
 8005d52:	e6af      	b.n	8005ab4 <__aeabi_dadd+0x374>
 8005d54:	0018      	movs	r0, r3
 8005d56:	000f      	movs	r7, r1
 8005d58:	3820      	subs	r0, #32
 8005d5a:	40c7      	lsrs	r7, r0
 8005d5c:	2b20      	cmp	r3, #32
 8005d5e:	d003      	beq.n	8005d68 <__aeabi_dadd+0x628>
 8005d60:	2040      	movs	r0, #64	@ 0x40
 8005d62:	1ac3      	subs	r3, r0, r3
 8005d64:	4099      	lsls	r1, r3
 8005d66:	430a      	orrs	r2, r1
 8005d68:	1e53      	subs	r3, r2, #1
 8005d6a:	419a      	sbcs	r2, r3
 8005d6c:	0010      	movs	r0, r2
 8005d6e:	4338      	orrs	r0, r7
 8005d70:	e61f      	b.n	80059b2 <__aeabi_dadd+0x272>
 8005d72:	001c      	movs	r4, r3
 8005d74:	002e      	movs	r6, r5
 8005d76:	3c20      	subs	r4, #32
 8005d78:	40e6      	lsrs	r6, r4
 8005d7a:	2b20      	cmp	r3, #32
 8005d7c:	d005      	beq.n	8005d8a <__aeabi_dadd+0x64a>
 8005d7e:	2440      	movs	r4, #64	@ 0x40
 8005d80:	1ae3      	subs	r3, r4, r3
 8005d82:	409d      	lsls	r5, r3
 8005d84:	4663      	mov	r3, ip
 8005d86:	432b      	orrs	r3, r5
 8005d88:	469c      	mov	ip, r3
 8005d8a:	4664      	mov	r4, ip
 8005d8c:	1e63      	subs	r3, r4, #1
 8005d8e:	419c      	sbcs	r4, r3
 8005d90:	4334      	orrs	r4, r6
 8005d92:	e714      	b.n	8005bbe <__aeabi_dadd+0x47e>
 8005d94:	2301      	movs	r3, #1
 8005d96:	4463      	add	r3, ip
 8005d98:	4698      	mov	r8, r3
 8005d9a:	e527      	b.n	80057ec <__aeabi_dadd+0xac>
 8005d9c:	4663      	mov	r3, ip
 8005d9e:	1ad3      	subs	r3, r2, r3
 8005da0:	429a      	cmp	r2, r3
 8005da2:	4192      	sbcs	r2, r2
 8005da4:	1b4d      	subs	r5, r1, r5
 8005da6:	4252      	negs	r2, r2
 8005da8:	1aad      	subs	r5, r5, r2
 8005daa:	4698      	mov	r8, r3
 8005dac:	022b      	lsls	r3, r5, #8
 8005dae:	d4ce      	bmi.n	8005d4e <__aeabi_dadd+0x60e>
 8005db0:	4643      	mov	r3, r8
 8005db2:	076f      	lsls	r7, r5, #29
 8005db4:	08db      	lsrs	r3, r3, #3
 8005db6:	431f      	orrs	r7, r3
 8005db8:	0004      	movs	r4, r0
 8005dba:	2301      	movs	r3, #1
 8005dbc:	08ed      	lsrs	r5, r5, #3
 8005dbe:	e723      	b.n	8005c08 <__aeabi_dadd+0x4c8>
 8005dc0:	2f00      	cmp	r7, #0
 8005dc2:	d100      	bne.n	8005dc6 <__aeabi_dadd+0x686>
 8005dc4:	e6d7      	b.n	8005b76 <__aeabi_dadd+0x436>
 8005dc6:	0004      	movs	r4, r0
 8005dc8:	000d      	movs	r5, r1
 8005dca:	4694      	mov	ip, r2
 8005dcc:	e6bd      	b.n	8005b4a <__aeabi_dadd+0x40a>
 8005dce:	0003      	movs	r3, r0
 8005dd0:	e5d9      	b.n	8005986 <__aeabi_dadd+0x246>
 8005dd2:	2080      	movs	r0, #128	@ 0x80
 8005dd4:	0400      	lsls	r0, r0, #16
 8005dd6:	4305      	orrs	r5, r0
 8005dd8:	2b1f      	cmp	r3, #31
 8005dda:	dc6b      	bgt.n	8005eb4 <__aeabi_dadd+0x774>
 8005ddc:	2020      	movs	r0, #32
 8005dde:	1ac0      	subs	r0, r0, r3
 8005de0:	4680      	mov	r8, r0
 8005de2:	0028      	movs	r0, r5
 8005de4:	4646      	mov	r6, r8
 8005de6:	40b0      	lsls	r0, r6
 8005de8:	4666      	mov	r6, ip
 8005dea:	40de      	lsrs	r6, r3
 8005dec:	4306      	orrs	r6, r0
 8005dee:	46b1      	mov	r9, r6
 8005df0:	4660      	mov	r0, ip
 8005df2:	4646      	mov	r6, r8
 8005df4:	40b0      	lsls	r0, r6
 8005df6:	40dd      	lsrs	r5, r3
 8005df8:	1e46      	subs	r6, r0, #1
 8005dfa:	41b0      	sbcs	r0, r6
 8005dfc:	464e      	mov	r6, r9
 8005dfe:	1949      	adds	r1, r1, r5
 8005e00:	4330      	orrs	r0, r6
 8005e02:	4680      	mov	r8, r0
 8005e04:	4490      	add	r8, r2
 8005e06:	4590      	cmp	r8, r2
 8005e08:	4192      	sbcs	r2, r2
 8005e0a:	4252      	negs	r2, r2
 8005e0c:	003e      	movs	r6, r7
 8005e0e:	1855      	adds	r5, r2, r1
 8005e10:	e5d5      	b.n	80059be <__aeabi_dadd+0x27e>
 8005e12:	074e      	lsls	r6, r1, #29
 8005e14:	08d2      	lsrs	r2, r2, #3
 8005e16:	4316      	orrs	r6, r2
 8005e18:	08cd      	lsrs	r5, r1, #3
 8005e1a:	e609      	b.n	8005a30 <__aeabi_dadd+0x2f0>
 8005e1c:	4663      	mov	r3, ip
 8005e1e:	189e      	adds	r6, r3, r2
 8005e20:	4296      	cmp	r6, r2
 8005e22:	4192      	sbcs	r2, r2
 8005e24:	1869      	adds	r1, r5, r1
 8005e26:	4252      	negs	r2, r2
 8005e28:	188a      	adds	r2, r1, r2
 8005e2a:	0213      	lsls	r3, r2, #8
 8005e2c:	d500      	bpl.n	8005e30 <__aeabi_dadd+0x6f0>
 8005e2e:	e761      	b.n	8005cf4 <__aeabi_dadd+0x5b4>
 8005e30:	0757      	lsls	r7, r2, #29
 8005e32:	08f6      	lsrs	r6, r6, #3
 8005e34:	2301      	movs	r3, #1
 8005e36:	4337      	orrs	r7, r6
 8005e38:	08d5      	lsrs	r5, r2, #3
 8005e3a:	e6e5      	b.n	8005c08 <__aeabi_dadd+0x4c8>
 8005e3c:	000007fe 	.word	0x000007fe
 8005e40:	000007ff 	.word	0x000007ff
 8005e44:	ff7fffff 	.word	0xff7fffff
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d0e2      	beq.n	8005e12 <__aeabi_dadd+0x6d2>
 8005e4c:	4663      	mov	r3, ip
 8005e4e:	08de      	lsrs	r6, r3, #3
 8005e50:	076b      	lsls	r3, r5, #29
 8005e52:	431e      	orrs	r6, r3
 8005e54:	000b      	movs	r3, r1
 8005e56:	08ed      	lsrs	r5, r5, #3
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	d100      	bne.n	8005e5e <__aeabi_dadd+0x71e>
 8005e5c:	e5e8      	b.n	8005a30 <__aeabi_dadd+0x2f0>
 8005e5e:	2380      	movs	r3, #128	@ 0x80
 8005e60:	031b      	lsls	r3, r3, #12
 8005e62:	421d      	tst	r5, r3
 8005e64:	d006      	beq.n	8005e74 <__aeabi_dadd+0x734>
 8005e66:	08c8      	lsrs	r0, r1, #3
 8005e68:	4218      	tst	r0, r3
 8005e6a:	d103      	bne.n	8005e74 <__aeabi_dadd+0x734>
 8005e6c:	0005      	movs	r5, r0
 8005e6e:	08d6      	lsrs	r6, r2, #3
 8005e70:	0749      	lsls	r1, r1, #29
 8005e72:	430e      	orrs	r6, r1
 8005e74:	0f73      	lsrs	r3, r6, #29
 8005e76:	00f6      	lsls	r6, r6, #3
 8005e78:	08f6      	lsrs	r6, r6, #3
 8005e7a:	075b      	lsls	r3, r3, #29
 8005e7c:	431e      	orrs	r6, r3
 8005e7e:	e5d7      	b.n	8005a30 <__aeabi_dadd+0x2f0>
 8005e80:	000d      	movs	r5, r1
 8005e82:	08d2      	lsrs	r2, r2, #3
 8005e84:	e5e1      	b.n	8005a4a <__aeabi_dadd+0x30a>
 8005e86:	4663      	mov	r3, ip
 8005e88:	08de      	lsrs	r6, r3, #3
 8005e8a:	076b      	lsls	r3, r5, #29
 8005e8c:	431e      	orrs	r6, r3
 8005e8e:	08ed      	lsrs	r5, r5, #3
 8005e90:	2f00      	cmp	r7, #0
 8005e92:	d100      	bne.n	8005e96 <__aeabi_dadd+0x756>
 8005e94:	e5cc      	b.n	8005a30 <__aeabi_dadd+0x2f0>
 8005e96:	2380      	movs	r3, #128	@ 0x80
 8005e98:	031b      	lsls	r3, r3, #12
 8005e9a:	421d      	tst	r5, r3
 8005e9c:	d0ea      	beq.n	8005e74 <__aeabi_dadd+0x734>
 8005e9e:	08cf      	lsrs	r7, r1, #3
 8005ea0:	421f      	tst	r7, r3
 8005ea2:	d1e7      	bne.n	8005e74 <__aeabi_dadd+0x734>
 8005ea4:	08d6      	lsrs	r6, r2, #3
 8005ea6:	0749      	lsls	r1, r1, #29
 8005ea8:	0004      	movs	r4, r0
 8005eaa:	003d      	movs	r5, r7
 8005eac:	430e      	orrs	r6, r1
 8005eae:	e7e1      	b.n	8005e74 <__aeabi_dadd+0x734>
 8005eb0:	0023      	movs	r3, r4
 8005eb2:	e66e      	b.n	8005b92 <__aeabi_dadd+0x452>
 8005eb4:	0018      	movs	r0, r3
 8005eb6:	002e      	movs	r6, r5
 8005eb8:	3820      	subs	r0, #32
 8005eba:	40c6      	lsrs	r6, r0
 8005ebc:	2b20      	cmp	r3, #32
 8005ebe:	d005      	beq.n	8005ecc <__aeabi_dadd+0x78c>
 8005ec0:	2040      	movs	r0, #64	@ 0x40
 8005ec2:	1ac3      	subs	r3, r0, r3
 8005ec4:	409d      	lsls	r5, r3
 8005ec6:	4663      	mov	r3, ip
 8005ec8:	432b      	orrs	r3, r5
 8005eca:	469c      	mov	ip, r3
 8005ecc:	4660      	mov	r0, ip
 8005ece:	1e43      	subs	r3, r0, #1
 8005ed0:	4198      	sbcs	r0, r3
 8005ed2:	4330      	orrs	r0, r6
 8005ed4:	e795      	b.n	8005e02 <__aeabi_dadd+0x6c2>
 8005ed6:	2120      	movs	r1, #32
 8005ed8:	2300      	movs	r3, #0
 8005eda:	1a09      	subs	r1, r1, r0
 8005edc:	e50e      	b.n	80058fc <__aeabi_dadd+0x1bc>
 8005ede:	2300      	movs	r3, #0
 8005ee0:	2f00      	cmp	r7, #0
 8005ee2:	d100      	bne.n	8005ee6 <__aeabi_dadd+0x7a6>
 8005ee4:	e5ba      	b.n	8005a5c <__aeabi_dadd+0x31c>
 8005ee6:	000d      	movs	r5, r1
 8005ee8:	4690      	mov	r8, r2
 8005eea:	e576      	b.n	80059da <__aeabi_dadd+0x29a>
 8005eec:	4647      	mov	r7, r8
 8005eee:	431f      	orrs	r7, r3
 8005ef0:	d100      	bne.n	8005ef4 <__aeabi_dadd+0x7b4>
 8005ef2:	e640      	b.n	8005b76 <__aeabi_dadd+0x436>
 8005ef4:	001d      	movs	r5, r3
 8005ef6:	46c4      	mov	ip, r8
 8005ef8:	e627      	b.n	8005b4a <__aeabi_dadd+0x40a>
 8005efa:	2201      	movs	r2, #1
 8005efc:	4462      	add	r2, ip
 8005efe:	4690      	mov	r8, r2
 8005f00:	001e      	movs	r6, r3
 8005f02:	e473      	b.n	80057ec <__aeabi_dadd+0xac>
 8005f04:	08c9      	lsrs	r1, r1, #3
 8005f06:	077f      	lsls	r7, r7, #29
 8005f08:	2302      	movs	r3, #2
 8005f0a:	430f      	orrs	r7, r1
 8005f0c:	0915      	lsrs	r5, r2, #4
 8005f0e:	e67b      	b.n	8005c08 <__aeabi_dadd+0x4c8>
 8005f10:	1c53      	adds	r3, r2, #1
 8005f12:	4698      	mov	r8, r3
 8005f14:	000d      	movs	r5, r1
 8005f16:	003e      	movs	r6, r7
 8005f18:	e468      	b.n	80057ec <__aeabi_dadd+0xac>
 8005f1a:	08d6      	lsrs	r6, r2, #3
 8005f1c:	074b      	lsls	r3, r1, #29
 8005f1e:	431e      	orrs	r6, r3
 8005f20:	08cd      	lsrs	r5, r1, #3
 8005f22:	e585      	b.n	8005a30 <__aeabi_dadd+0x2f0>
 8005f24:	0003      	movs	r3, r0
 8005f26:	e757      	b.n	8005dd8 <__aeabi_dadd+0x698>
 8005f28:	4b11      	ldr	r3, [pc, #68]	@ (8005f70 <__aeabi_dadd+0x830>)
 8005f2a:	08d2      	lsrs	r2, r2, #3
 8005f2c:	402b      	ands	r3, r5
 8005f2e:	075f      	lsls	r7, r3, #29
 8005f30:	4317      	orrs	r7, r2
 8005f32:	025a      	lsls	r2, r3, #9
 8005f34:	0b12      	lsrs	r2, r2, #12
 8005f36:	2301      	movs	r3, #1
 8005f38:	e46f      	b.n	800581a <__aeabi_dadd+0xda>
 8005f3a:	0033      	movs	r3, r6
 8005f3c:	46b8      	mov	r8, r7
 8005f3e:	e54c      	b.n	80059da <__aeabi_dadd+0x29a>
 8005f40:	4643      	mov	r3, r8
 8005f42:	08da      	lsrs	r2, r3, #3
 8005f44:	0033      	movs	r3, r6
 8005f46:	e580      	b.n	8005a4a <__aeabi_dadd+0x30a>
 8005f48:	4232      	tst	r2, r6
 8005f4a:	d00a      	beq.n	8005f62 <__aeabi_dadd+0x822>
 8005f4c:	4b08      	ldr	r3, [pc, #32]	@ (8005f70 <__aeabi_dadd+0x830>)
 8005f4e:	0004      	movs	r4, r0
 8005f50:	401a      	ands	r2, r3
 8005f52:	4667      	mov	r7, ip
 8005f54:	2301      	movs	r3, #1
 8005f56:	e45b      	b.n	8005810 <__aeabi_dadd+0xd0>
 8005f58:	3201      	adds	r2, #1
 8005f5a:	4690      	mov	r8, r2
 8005f5c:	000d      	movs	r5, r1
 8005f5e:	001e      	movs	r6, r3
 8005f60:	e444      	b.n	80057ec <__aeabi_dadd+0xac>
 8005f62:	08db      	lsrs	r3, r3, #3
 8005f64:	0757      	lsls	r7, r2, #29
 8005f66:	431f      	orrs	r7, r3
 8005f68:	0004      	movs	r4, r0
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	08d5      	lsrs	r5, r2, #3
 8005f6e:	e64b      	b.n	8005c08 <__aeabi_dadd+0x4c8>
 8005f70:	ff7fffff 	.word	0xff7fffff

08005f74 <__aeabi_ddiv>:
 8005f74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f76:	46de      	mov	lr, fp
 8005f78:	4645      	mov	r5, r8
 8005f7a:	4657      	mov	r7, sl
 8005f7c:	464e      	mov	r6, r9
 8005f7e:	b5e0      	push	{r5, r6, r7, lr}
 8005f80:	b087      	sub	sp, #28
 8005f82:	9200      	str	r2, [sp, #0]
 8005f84:	9301      	str	r3, [sp, #4]
 8005f86:	030b      	lsls	r3, r1, #12
 8005f88:	0b1b      	lsrs	r3, r3, #12
 8005f8a:	469b      	mov	fp, r3
 8005f8c:	0fca      	lsrs	r2, r1, #31
 8005f8e:	004b      	lsls	r3, r1, #1
 8005f90:	0004      	movs	r4, r0
 8005f92:	4680      	mov	r8, r0
 8005f94:	0d5b      	lsrs	r3, r3, #21
 8005f96:	9202      	str	r2, [sp, #8]
 8005f98:	d100      	bne.n	8005f9c <__aeabi_ddiv+0x28>
 8005f9a:	e0bf      	b.n	800611c <__aeabi_ddiv+0x1a8>
 8005f9c:	4a8f      	ldr	r2, [pc, #572]	@ (80061dc <__aeabi_ddiv+0x268>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d038      	beq.n	8006014 <__aeabi_ddiv+0xa0>
 8005fa2:	4659      	mov	r1, fp
 8005fa4:	0f42      	lsrs	r2, r0, #29
 8005fa6:	00c9      	lsls	r1, r1, #3
 8005fa8:	430a      	orrs	r2, r1
 8005faa:	2180      	movs	r1, #128	@ 0x80
 8005fac:	0409      	lsls	r1, r1, #16
 8005fae:	4311      	orrs	r1, r2
 8005fb0:	00c2      	lsls	r2, r0, #3
 8005fb2:	4690      	mov	r8, r2
 8005fb4:	4a8a      	ldr	r2, [pc, #552]	@ (80061e0 <__aeabi_ddiv+0x26c>)
 8005fb6:	4689      	mov	r9, r1
 8005fb8:	4692      	mov	sl, r2
 8005fba:	449a      	add	sl, r3
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	2400      	movs	r4, #0
 8005fc0:	9303      	str	r3, [sp, #12]
 8005fc2:	9e00      	ldr	r6, [sp, #0]
 8005fc4:	9f01      	ldr	r7, [sp, #4]
 8005fc6:	033b      	lsls	r3, r7, #12
 8005fc8:	0b1b      	lsrs	r3, r3, #12
 8005fca:	007a      	lsls	r2, r7, #1
 8005fcc:	0030      	movs	r0, r6
 8005fce:	469b      	mov	fp, r3
 8005fd0:	0d52      	lsrs	r2, r2, #21
 8005fd2:	0ffd      	lsrs	r5, r7, #31
 8005fd4:	2a00      	cmp	r2, #0
 8005fd6:	d100      	bne.n	8005fda <__aeabi_ddiv+0x66>
 8005fd8:	e07f      	b.n	80060da <__aeabi_ddiv+0x166>
 8005fda:	4b80      	ldr	r3, [pc, #512]	@ (80061dc <__aeabi_ddiv+0x268>)
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d06e      	beq.n	80060be <__aeabi_ddiv+0x14a>
 8005fe0:	4659      	mov	r1, fp
 8005fe2:	0f73      	lsrs	r3, r6, #29
 8005fe4:	00c9      	lsls	r1, r1, #3
 8005fe6:	430b      	orrs	r3, r1
 8005fe8:	2180      	movs	r1, #128	@ 0x80
 8005fea:	0409      	lsls	r1, r1, #16
 8005fec:	4319      	orrs	r1, r3
 8005fee:	468b      	mov	fp, r1
 8005ff0:	497b      	ldr	r1, [pc, #492]	@ (80061e0 <__aeabi_ddiv+0x26c>)
 8005ff2:	00f3      	lsls	r3, r6, #3
 8005ff4:	468c      	mov	ip, r1
 8005ff6:	4651      	mov	r1, sl
 8005ff8:	4462      	add	r2, ip
 8005ffa:	1a8a      	subs	r2, r1, r2
 8005ffc:	4692      	mov	sl, r2
 8005ffe:	2100      	movs	r1, #0
 8006000:	9e02      	ldr	r6, [sp, #8]
 8006002:	406e      	eors	r6, r5
 8006004:	b2f6      	uxtb	r6, r6
 8006006:	2c0f      	cmp	r4, #15
 8006008:	d900      	bls.n	800600c <__aeabi_ddiv+0x98>
 800600a:	e0f9      	b.n	8006200 <__aeabi_ddiv+0x28c>
 800600c:	4a75      	ldr	r2, [pc, #468]	@ (80061e4 <__aeabi_ddiv+0x270>)
 800600e:	00a4      	lsls	r4, r4, #2
 8006010:	5912      	ldr	r2, [r2, r4]
 8006012:	4697      	mov	pc, r2
 8006014:	465a      	mov	r2, fp
 8006016:	4302      	orrs	r2, r0
 8006018:	4691      	mov	r9, r2
 800601a:	d000      	beq.n	800601e <__aeabi_ddiv+0xaa>
 800601c:	e0b6      	b.n	800618c <__aeabi_ddiv+0x218>
 800601e:	469a      	mov	sl, r3
 8006020:	2302      	movs	r3, #2
 8006022:	4690      	mov	r8, r2
 8006024:	2408      	movs	r4, #8
 8006026:	9303      	str	r3, [sp, #12]
 8006028:	e7cb      	b.n	8005fc2 <__aeabi_ddiv+0x4e>
 800602a:	002e      	movs	r6, r5
 800602c:	2100      	movs	r1, #0
 800602e:	2300      	movs	r3, #0
 8006030:	2200      	movs	r2, #0
 8006032:	4688      	mov	r8, r1
 8006034:	051b      	lsls	r3, r3, #20
 8006036:	4313      	orrs	r3, r2
 8006038:	07f6      	lsls	r6, r6, #31
 800603a:	4333      	orrs	r3, r6
 800603c:	4640      	mov	r0, r8
 800603e:	0019      	movs	r1, r3
 8006040:	b007      	add	sp, #28
 8006042:	bcf0      	pop	{r4, r5, r6, r7}
 8006044:	46bb      	mov	fp, r7
 8006046:	46b2      	mov	sl, r6
 8006048:	46a9      	mov	r9, r5
 800604a:	46a0      	mov	r8, r4
 800604c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800604e:	46cb      	mov	fp, r9
 8006050:	4643      	mov	r3, r8
 8006052:	9d02      	ldr	r5, [sp, #8]
 8006054:	9903      	ldr	r1, [sp, #12]
 8006056:	2902      	cmp	r1, #2
 8006058:	d100      	bne.n	800605c <__aeabi_ddiv+0xe8>
 800605a:	e1fa      	b.n	8006452 <__aeabi_ddiv+0x4de>
 800605c:	2903      	cmp	r1, #3
 800605e:	d100      	bne.n	8006062 <__aeabi_ddiv+0xee>
 8006060:	e0a1      	b.n	80061a6 <__aeabi_ddiv+0x232>
 8006062:	2901      	cmp	r1, #1
 8006064:	d0e1      	beq.n	800602a <__aeabi_ddiv+0xb6>
 8006066:	4a60      	ldr	r2, [pc, #384]	@ (80061e8 <__aeabi_ddiv+0x274>)
 8006068:	4452      	add	r2, sl
 800606a:	4690      	mov	r8, r2
 800606c:	4644      	mov	r4, r8
 800606e:	2c00      	cmp	r4, #0
 8006070:	dc00      	bgt.n	8006074 <__aeabi_ddiv+0x100>
 8006072:	e200      	b.n	8006476 <__aeabi_ddiv+0x502>
 8006074:	075a      	lsls	r2, r3, #29
 8006076:	d004      	beq.n	8006082 <__aeabi_ddiv+0x10e>
 8006078:	220f      	movs	r2, #15
 800607a:	401a      	ands	r2, r3
 800607c:	2a04      	cmp	r2, #4
 800607e:	d000      	beq.n	8006082 <__aeabi_ddiv+0x10e>
 8006080:	e27f      	b.n	8006582 <__aeabi_ddiv+0x60e>
 8006082:	002e      	movs	r6, r5
 8006084:	08da      	lsrs	r2, r3, #3
 8006086:	465b      	mov	r3, fp
 8006088:	01db      	lsls	r3, r3, #7
 800608a:	d506      	bpl.n	800609a <__aeabi_ddiv+0x126>
 800608c:	4659      	mov	r1, fp
 800608e:	4b57      	ldr	r3, [pc, #348]	@ (80061ec <__aeabi_ddiv+0x278>)
 8006090:	2480      	movs	r4, #128	@ 0x80
 8006092:	4019      	ands	r1, r3
 8006094:	468b      	mov	fp, r1
 8006096:	00e4      	lsls	r4, r4, #3
 8006098:	4454      	add	r4, sl
 800609a:	4b55      	ldr	r3, [pc, #340]	@ (80061f0 <__aeabi_ddiv+0x27c>)
 800609c:	429c      	cmp	r4, r3
 800609e:	dc09      	bgt.n	80060b4 <__aeabi_ddiv+0x140>
 80060a0:	465b      	mov	r3, fp
 80060a2:	075b      	lsls	r3, r3, #29
 80060a4:	4313      	orrs	r3, r2
 80060a6:	4698      	mov	r8, r3
 80060a8:	465b      	mov	r3, fp
 80060aa:	0564      	lsls	r4, r4, #21
 80060ac:	025a      	lsls	r2, r3, #9
 80060ae:	0b12      	lsrs	r2, r2, #12
 80060b0:	0d63      	lsrs	r3, r4, #21
 80060b2:	e7bf      	b.n	8006034 <__aeabi_ddiv+0xc0>
 80060b4:	2100      	movs	r1, #0
 80060b6:	2200      	movs	r2, #0
 80060b8:	4688      	mov	r8, r1
 80060ba:	4b48      	ldr	r3, [pc, #288]	@ (80061dc <__aeabi_ddiv+0x268>)
 80060bc:	e7ba      	b.n	8006034 <__aeabi_ddiv+0xc0>
 80060be:	465b      	mov	r3, fp
 80060c0:	9a00      	ldr	r2, [sp, #0]
 80060c2:	4313      	orrs	r3, r2
 80060c4:	4a4b      	ldr	r2, [pc, #300]	@ (80061f4 <__aeabi_ddiv+0x280>)
 80060c6:	4694      	mov	ip, r2
 80060c8:	44e2      	add	sl, ip
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d159      	bne.n	8006182 <__aeabi_ddiv+0x20e>
 80060ce:	2202      	movs	r2, #2
 80060d0:	4314      	orrs	r4, r2
 80060d2:	2200      	movs	r2, #0
 80060d4:	2102      	movs	r1, #2
 80060d6:	4693      	mov	fp, r2
 80060d8:	e792      	b.n	8006000 <__aeabi_ddiv+0x8c>
 80060da:	465b      	mov	r3, fp
 80060dc:	9a00      	ldr	r2, [sp, #0]
 80060de:	4313      	orrs	r3, r2
 80060e0:	d049      	beq.n	8006176 <__aeabi_ddiv+0x202>
 80060e2:	465b      	mov	r3, fp
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d100      	bne.n	80060ea <__aeabi_ddiv+0x176>
 80060e8:	e1a4      	b.n	8006434 <__aeabi_ddiv+0x4c0>
 80060ea:	4658      	mov	r0, fp
 80060ec:	f7fa f9ae 	bl	800044c <__clzsi2>
 80060f0:	0003      	movs	r3, r0
 80060f2:	0002      	movs	r2, r0
 80060f4:	3b0b      	subs	r3, #11
 80060f6:	271d      	movs	r7, #29
 80060f8:	9e00      	ldr	r6, [sp, #0]
 80060fa:	1afb      	subs	r3, r7, r3
 80060fc:	0011      	movs	r1, r2
 80060fe:	4658      	mov	r0, fp
 8006100:	40de      	lsrs	r6, r3
 8006102:	3908      	subs	r1, #8
 8006104:	4088      	lsls	r0, r1
 8006106:	0033      	movs	r3, r6
 8006108:	4303      	orrs	r3, r0
 800610a:	469b      	mov	fp, r3
 800610c:	9b00      	ldr	r3, [sp, #0]
 800610e:	408b      	lsls	r3, r1
 8006110:	4939      	ldr	r1, [pc, #228]	@ (80061f8 <__aeabi_ddiv+0x284>)
 8006112:	4452      	add	r2, sl
 8006114:	468a      	mov	sl, r1
 8006116:	2100      	movs	r1, #0
 8006118:	4492      	add	sl, r2
 800611a:	e771      	b.n	8006000 <__aeabi_ddiv+0x8c>
 800611c:	465b      	mov	r3, fp
 800611e:	4303      	orrs	r3, r0
 8006120:	4699      	mov	r9, r3
 8006122:	d021      	beq.n	8006168 <__aeabi_ddiv+0x1f4>
 8006124:	465b      	mov	r3, fp
 8006126:	2b00      	cmp	r3, #0
 8006128:	d100      	bne.n	800612c <__aeabi_ddiv+0x1b8>
 800612a:	e171      	b.n	8006410 <__aeabi_ddiv+0x49c>
 800612c:	4658      	mov	r0, fp
 800612e:	f7fa f98d 	bl	800044c <__clzsi2>
 8006132:	230b      	movs	r3, #11
 8006134:	425b      	negs	r3, r3
 8006136:	469c      	mov	ip, r3
 8006138:	0002      	movs	r2, r0
 800613a:	4484      	add	ip, r0
 800613c:	4666      	mov	r6, ip
 800613e:	231d      	movs	r3, #29
 8006140:	1b9b      	subs	r3, r3, r6
 8006142:	0026      	movs	r6, r4
 8006144:	0011      	movs	r1, r2
 8006146:	4658      	mov	r0, fp
 8006148:	40de      	lsrs	r6, r3
 800614a:	3908      	subs	r1, #8
 800614c:	4088      	lsls	r0, r1
 800614e:	0033      	movs	r3, r6
 8006150:	4303      	orrs	r3, r0
 8006152:	4699      	mov	r9, r3
 8006154:	0023      	movs	r3, r4
 8006156:	408b      	lsls	r3, r1
 8006158:	4698      	mov	r8, r3
 800615a:	4b28      	ldr	r3, [pc, #160]	@ (80061fc <__aeabi_ddiv+0x288>)
 800615c:	2400      	movs	r4, #0
 800615e:	1a9b      	subs	r3, r3, r2
 8006160:	469a      	mov	sl, r3
 8006162:	2300      	movs	r3, #0
 8006164:	9303      	str	r3, [sp, #12]
 8006166:	e72c      	b.n	8005fc2 <__aeabi_ddiv+0x4e>
 8006168:	2300      	movs	r3, #0
 800616a:	4698      	mov	r8, r3
 800616c:	469a      	mov	sl, r3
 800616e:	3301      	adds	r3, #1
 8006170:	2404      	movs	r4, #4
 8006172:	9303      	str	r3, [sp, #12]
 8006174:	e725      	b.n	8005fc2 <__aeabi_ddiv+0x4e>
 8006176:	2201      	movs	r2, #1
 8006178:	4314      	orrs	r4, r2
 800617a:	2200      	movs	r2, #0
 800617c:	2101      	movs	r1, #1
 800617e:	4693      	mov	fp, r2
 8006180:	e73e      	b.n	8006000 <__aeabi_ddiv+0x8c>
 8006182:	2303      	movs	r3, #3
 8006184:	2103      	movs	r1, #3
 8006186:	431c      	orrs	r4, r3
 8006188:	0033      	movs	r3, r6
 800618a:	e739      	b.n	8006000 <__aeabi_ddiv+0x8c>
 800618c:	469a      	mov	sl, r3
 800618e:	2303      	movs	r3, #3
 8006190:	46d9      	mov	r9, fp
 8006192:	240c      	movs	r4, #12
 8006194:	9303      	str	r3, [sp, #12]
 8006196:	e714      	b.n	8005fc2 <__aeabi_ddiv+0x4e>
 8006198:	2300      	movs	r3, #0
 800619a:	2280      	movs	r2, #128	@ 0x80
 800619c:	4698      	mov	r8, r3
 800619e:	2600      	movs	r6, #0
 80061a0:	4b0e      	ldr	r3, [pc, #56]	@ (80061dc <__aeabi_ddiv+0x268>)
 80061a2:	0312      	lsls	r2, r2, #12
 80061a4:	e746      	b.n	8006034 <__aeabi_ddiv+0xc0>
 80061a6:	2280      	movs	r2, #128	@ 0x80
 80061a8:	4659      	mov	r1, fp
 80061aa:	0312      	lsls	r2, r2, #12
 80061ac:	430a      	orrs	r2, r1
 80061ae:	0312      	lsls	r2, r2, #12
 80061b0:	4698      	mov	r8, r3
 80061b2:	002e      	movs	r6, r5
 80061b4:	4b09      	ldr	r3, [pc, #36]	@ (80061dc <__aeabi_ddiv+0x268>)
 80061b6:	0b12      	lsrs	r2, r2, #12
 80061b8:	e73c      	b.n	8006034 <__aeabi_ddiv+0xc0>
 80061ba:	2280      	movs	r2, #128	@ 0x80
 80061bc:	4649      	mov	r1, r9
 80061be:	0312      	lsls	r2, r2, #12
 80061c0:	4211      	tst	r1, r2
 80061c2:	d002      	beq.n	80061ca <__aeabi_ddiv+0x256>
 80061c4:	4659      	mov	r1, fp
 80061c6:	4211      	tst	r1, r2
 80061c8:	d0f0      	beq.n	80061ac <__aeabi_ddiv+0x238>
 80061ca:	2280      	movs	r2, #128	@ 0x80
 80061cc:	464b      	mov	r3, r9
 80061ce:	0312      	lsls	r2, r2, #12
 80061d0:	431a      	orrs	r2, r3
 80061d2:	0312      	lsls	r2, r2, #12
 80061d4:	9e02      	ldr	r6, [sp, #8]
 80061d6:	4b01      	ldr	r3, [pc, #4]	@ (80061dc <__aeabi_ddiv+0x268>)
 80061d8:	0b12      	lsrs	r2, r2, #12
 80061da:	e72b      	b.n	8006034 <__aeabi_ddiv+0xc0>
 80061dc:	000007ff 	.word	0x000007ff
 80061e0:	fffffc01 	.word	0xfffffc01
 80061e4:	08007ae8 	.word	0x08007ae8
 80061e8:	000003ff 	.word	0x000003ff
 80061ec:	feffffff 	.word	0xfeffffff
 80061f0:	000007fe 	.word	0x000007fe
 80061f4:	fffff801 	.word	0xfffff801
 80061f8:	000003f3 	.word	0x000003f3
 80061fc:	fffffc0d 	.word	0xfffffc0d
 8006200:	45cb      	cmp	fp, r9
 8006202:	d200      	bcs.n	8006206 <__aeabi_ddiv+0x292>
 8006204:	e0fa      	b.n	80063fc <__aeabi_ddiv+0x488>
 8006206:	d100      	bne.n	800620a <__aeabi_ddiv+0x296>
 8006208:	e0f5      	b.n	80063f6 <__aeabi_ddiv+0x482>
 800620a:	2201      	movs	r2, #1
 800620c:	4252      	negs	r2, r2
 800620e:	4694      	mov	ip, r2
 8006210:	2200      	movs	r2, #0
 8006212:	4644      	mov	r4, r8
 8006214:	4648      	mov	r0, r9
 8006216:	4690      	mov	r8, r2
 8006218:	44e2      	add	sl, ip
 800621a:	465a      	mov	r2, fp
 800621c:	0e1f      	lsrs	r7, r3, #24
 800621e:	0212      	lsls	r2, r2, #8
 8006220:	021b      	lsls	r3, r3, #8
 8006222:	9302      	str	r3, [sp, #8]
 8006224:	0c13      	lsrs	r3, r2, #16
 8006226:	4699      	mov	r9, r3
 8006228:	4317      	orrs	r7, r2
 800622a:	043b      	lsls	r3, r7, #16
 800622c:	0c1b      	lsrs	r3, r3, #16
 800622e:	4649      	mov	r1, r9
 8006230:	9300      	str	r3, [sp, #0]
 8006232:	f7f9 ffdd 	bl	80001f0 <__aeabi_uidivmod>
 8006236:	9a00      	ldr	r2, [sp, #0]
 8006238:	040b      	lsls	r3, r1, #16
 800623a:	4342      	muls	r2, r0
 800623c:	0c21      	lsrs	r1, r4, #16
 800623e:	0005      	movs	r5, r0
 8006240:	4319      	orrs	r1, r3
 8006242:	428a      	cmp	r2, r1
 8006244:	d907      	bls.n	8006256 <__aeabi_ddiv+0x2e2>
 8006246:	19c9      	adds	r1, r1, r7
 8006248:	3d01      	subs	r5, #1
 800624a:	428f      	cmp	r7, r1
 800624c:	d803      	bhi.n	8006256 <__aeabi_ddiv+0x2e2>
 800624e:	428a      	cmp	r2, r1
 8006250:	d901      	bls.n	8006256 <__aeabi_ddiv+0x2e2>
 8006252:	1e85      	subs	r5, r0, #2
 8006254:	19c9      	adds	r1, r1, r7
 8006256:	1a88      	subs	r0, r1, r2
 8006258:	4649      	mov	r1, r9
 800625a:	f7f9 ffc9 	bl	80001f0 <__aeabi_uidivmod>
 800625e:	9a00      	ldr	r2, [sp, #0]
 8006260:	0424      	lsls	r4, r4, #16
 8006262:	4342      	muls	r2, r0
 8006264:	0409      	lsls	r1, r1, #16
 8006266:	0c24      	lsrs	r4, r4, #16
 8006268:	0003      	movs	r3, r0
 800626a:	430c      	orrs	r4, r1
 800626c:	42a2      	cmp	r2, r4
 800626e:	d904      	bls.n	800627a <__aeabi_ddiv+0x306>
 8006270:	19e4      	adds	r4, r4, r7
 8006272:	3b01      	subs	r3, #1
 8006274:	42a7      	cmp	r7, r4
 8006276:	d800      	bhi.n	800627a <__aeabi_ddiv+0x306>
 8006278:	e0f7      	b.n	800646a <__aeabi_ddiv+0x4f6>
 800627a:	9902      	ldr	r1, [sp, #8]
 800627c:	1aa0      	subs	r0, r4, r2
 800627e:	042d      	lsls	r5, r5, #16
 8006280:	0c0c      	lsrs	r4, r1, #16
 8006282:	0409      	lsls	r1, r1, #16
 8006284:	431d      	orrs	r5, r3
 8006286:	0c09      	lsrs	r1, r1, #16
 8006288:	0c2a      	lsrs	r2, r5, #16
 800628a:	042b      	lsls	r3, r5, #16
 800628c:	46ab      	mov	fp, r5
 800628e:	000d      	movs	r5, r1
 8006290:	0c1b      	lsrs	r3, r3, #16
 8006292:	435d      	muls	r5, r3
 8006294:	9105      	str	r1, [sp, #20]
 8006296:	4363      	muls	r3, r4
 8006298:	4351      	muls	r1, r2
 800629a:	9404      	str	r4, [sp, #16]
 800629c:	4362      	muls	r2, r4
 800629e:	185b      	adds	r3, r3, r1
 80062a0:	0c2c      	lsrs	r4, r5, #16
 80062a2:	18e3      	adds	r3, r4, r3
 80062a4:	4299      	cmp	r1, r3
 80062a6:	d903      	bls.n	80062b0 <__aeabi_ddiv+0x33c>
 80062a8:	2180      	movs	r1, #128	@ 0x80
 80062aa:	0249      	lsls	r1, r1, #9
 80062ac:	468c      	mov	ip, r1
 80062ae:	4462      	add	r2, ip
 80062b0:	0c19      	lsrs	r1, r3, #16
 80062b2:	042d      	lsls	r5, r5, #16
 80062b4:	041b      	lsls	r3, r3, #16
 80062b6:	0c2d      	lsrs	r5, r5, #16
 80062b8:	188a      	adds	r2, r1, r2
 80062ba:	195d      	adds	r5, r3, r5
 80062bc:	4290      	cmp	r0, r2
 80062be:	d200      	bcs.n	80062c2 <__aeabi_ddiv+0x34e>
 80062c0:	e087      	b.n	80063d2 <__aeabi_ddiv+0x45e>
 80062c2:	d100      	bne.n	80062c6 <__aeabi_ddiv+0x352>
 80062c4:	e082      	b.n	80063cc <__aeabi_ddiv+0x458>
 80062c6:	4643      	mov	r3, r8
 80062c8:	1b5d      	subs	r5, r3, r5
 80062ca:	45a8      	cmp	r8, r5
 80062cc:	419b      	sbcs	r3, r3
 80062ce:	1a80      	subs	r0, r0, r2
 80062d0:	425b      	negs	r3, r3
 80062d2:	1ac0      	subs	r0, r0, r3
 80062d4:	4bb1      	ldr	r3, [pc, #708]	@ (800659c <__aeabi_ddiv+0x628>)
 80062d6:	4453      	add	r3, sl
 80062d8:	4698      	mov	r8, r3
 80062da:	001c      	movs	r4, r3
 80062dc:	4287      	cmp	r7, r0
 80062de:	d100      	bne.n	80062e2 <__aeabi_ddiv+0x36e>
 80062e0:	e10c      	b.n	80064fc <__aeabi_ddiv+0x588>
 80062e2:	4649      	mov	r1, r9
 80062e4:	f7f9 ff84 	bl	80001f0 <__aeabi_uidivmod>
 80062e8:	0002      	movs	r2, r0
 80062ea:	9b00      	ldr	r3, [sp, #0]
 80062ec:	9003      	str	r0, [sp, #12]
 80062ee:	435a      	muls	r2, r3
 80062f0:	040b      	lsls	r3, r1, #16
 80062f2:	0c29      	lsrs	r1, r5, #16
 80062f4:	4319      	orrs	r1, r3
 80062f6:	428a      	cmp	r2, r1
 80062f8:	d90a      	bls.n	8006310 <__aeabi_ddiv+0x39c>
 80062fa:	0003      	movs	r3, r0
 80062fc:	19c9      	adds	r1, r1, r7
 80062fe:	3b01      	subs	r3, #1
 8006300:	9303      	str	r3, [sp, #12]
 8006302:	428f      	cmp	r7, r1
 8006304:	d804      	bhi.n	8006310 <__aeabi_ddiv+0x39c>
 8006306:	428a      	cmp	r2, r1
 8006308:	d902      	bls.n	8006310 <__aeabi_ddiv+0x39c>
 800630a:	1e83      	subs	r3, r0, #2
 800630c:	9303      	str	r3, [sp, #12]
 800630e:	19c9      	adds	r1, r1, r7
 8006310:	1a88      	subs	r0, r1, r2
 8006312:	4649      	mov	r1, r9
 8006314:	f7f9 ff6c 	bl	80001f0 <__aeabi_uidivmod>
 8006318:	000a      	movs	r2, r1
 800631a:	0412      	lsls	r2, r2, #16
 800631c:	4694      	mov	ip, r2
 800631e:	042a      	lsls	r2, r5, #16
 8006320:	4665      	mov	r5, ip
 8006322:	9900      	ldr	r1, [sp, #0]
 8006324:	0c12      	lsrs	r2, r2, #16
 8006326:	4341      	muls	r1, r0
 8006328:	0003      	movs	r3, r0
 800632a:	432a      	orrs	r2, r5
 800632c:	4291      	cmp	r1, r2
 800632e:	d907      	bls.n	8006340 <__aeabi_ddiv+0x3cc>
 8006330:	19d2      	adds	r2, r2, r7
 8006332:	3801      	subs	r0, #1
 8006334:	4297      	cmp	r7, r2
 8006336:	d803      	bhi.n	8006340 <__aeabi_ddiv+0x3cc>
 8006338:	4291      	cmp	r1, r2
 800633a:	d901      	bls.n	8006340 <__aeabi_ddiv+0x3cc>
 800633c:	1e98      	subs	r0, r3, #2
 800633e:	19d2      	adds	r2, r2, r7
 8006340:	9b03      	ldr	r3, [sp, #12]
 8006342:	1a52      	subs	r2, r2, r1
 8006344:	041b      	lsls	r3, r3, #16
 8006346:	4303      	orrs	r3, r0
 8006348:	9805      	ldr	r0, [sp, #20]
 800634a:	0c19      	lsrs	r1, r3, #16
 800634c:	0005      	movs	r5, r0
 800634e:	468c      	mov	ip, r1
 8006350:	0419      	lsls	r1, r3, #16
 8006352:	0c09      	lsrs	r1, r1, #16
 8006354:	434d      	muls	r5, r1
 8006356:	4689      	mov	r9, r1
 8006358:	4661      	mov	r1, ip
 800635a:	9500      	str	r5, [sp, #0]
 800635c:	4665      	mov	r5, ip
 800635e:	4348      	muls	r0, r1
 8006360:	9904      	ldr	r1, [sp, #16]
 8006362:	434d      	muls	r5, r1
 8006364:	46ac      	mov	ip, r5
 8006366:	464d      	mov	r5, r9
 8006368:	434d      	muls	r5, r1
 800636a:	1829      	adds	r1, r5, r0
 800636c:	9d00      	ldr	r5, [sp, #0]
 800636e:	0c2d      	lsrs	r5, r5, #16
 8006370:	46a9      	mov	r9, r5
 8006372:	4449      	add	r1, r9
 8006374:	4288      	cmp	r0, r1
 8006376:	d903      	bls.n	8006380 <__aeabi_ddiv+0x40c>
 8006378:	2080      	movs	r0, #128	@ 0x80
 800637a:	0240      	lsls	r0, r0, #9
 800637c:	4681      	mov	r9, r0
 800637e:	44cc      	add	ip, r9
 8006380:	9d00      	ldr	r5, [sp, #0]
 8006382:	0c08      	lsrs	r0, r1, #16
 8006384:	042d      	lsls	r5, r5, #16
 8006386:	0409      	lsls	r1, r1, #16
 8006388:	0c2d      	lsrs	r5, r5, #16
 800638a:	4460      	add	r0, ip
 800638c:	194d      	adds	r5, r1, r5
 800638e:	4282      	cmp	r2, r0
 8006390:	d30f      	bcc.n	80063b2 <__aeabi_ddiv+0x43e>
 8006392:	d00b      	beq.n	80063ac <__aeabi_ddiv+0x438>
 8006394:	2201      	movs	r2, #1
 8006396:	4313      	orrs	r3, r2
 8006398:	4a81      	ldr	r2, [pc, #516]	@ (80065a0 <__aeabi_ddiv+0x62c>)
 800639a:	4592      	cmp	sl, r2
 800639c:	db6c      	blt.n	8006478 <__aeabi_ddiv+0x504>
 800639e:	1d1a      	adds	r2, r3, #4
 80063a0:	429a      	cmp	r2, r3
 80063a2:	419b      	sbcs	r3, r3
 80063a4:	425b      	negs	r3, r3
 80063a6:	08d2      	lsrs	r2, r2, #3
 80063a8:	449b      	add	fp, r3
 80063aa:	e66c      	b.n	8006086 <__aeabi_ddiv+0x112>
 80063ac:	2d00      	cmp	r5, #0
 80063ae:	d100      	bne.n	80063b2 <__aeabi_ddiv+0x43e>
 80063b0:	e093      	b.n	80064da <__aeabi_ddiv+0x566>
 80063b2:	1e59      	subs	r1, r3, #1
 80063b4:	18ba      	adds	r2, r7, r2
 80063b6:	468c      	mov	ip, r1
 80063b8:	42ba      	cmp	r2, r7
 80063ba:	d200      	bcs.n	80063be <__aeabi_ddiv+0x44a>
 80063bc:	e085      	b.n	80064ca <__aeabi_ddiv+0x556>
 80063be:	4282      	cmp	r2, r0
 80063c0:	d200      	bcs.n	80063c4 <__aeabi_ddiv+0x450>
 80063c2:	e0c7      	b.n	8006554 <__aeabi_ddiv+0x5e0>
 80063c4:	d100      	bne.n	80063c8 <__aeabi_ddiv+0x454>
 80063c6:	e0d5      	b.n	8006574 <__aeabi_ddiv+0x600>
 80063c8:	000b      	movs	r3, r1
 80063ca:	e7e3      	b.n	8006394 <__aeabi_ddiv+0x420>
 80063cc:	45a8      	cmp	r8, r5
 80063ce:	d300      	bcc.n	80063d2 <__aeabi_ddiv+0x45e>
 80063d0:	e779      	b.n	80062c6 <__aeabi_ddiv+0x352>
 80063d2:	465b      	mov	r3, fp
 80063d4:	1e59      	subs	r1, r3, #1
 80063d6:	9b02      	ldr	r3, [sp, #8]
 80063d8:	469c      	mov	ip, r3
 80063da:	44e0      	add	r8, ip
 80063dc:	001c      	movs	r4, r3
 80063de:	4598      	cmp	r8, r3
 80063e0:	419b      	sbcs	r3, r3
 80063e2:	425b      	negs	r3, r3
 80063e4:	19db      	adds	r3, r3, r7
 80063e6:	18c0      	adds	r0, r0, r3
 80063e8:	4287      	cmp	r7, r0
 80063ea:	d238      	bcs.n	800645e <__aeabi_ddiv+0x4ea>
 80063ec:	4282      	cmp	r2, r0
 80063ee:	d878      	bhi.n	80064e2 <__aeabi_ddiv+0x56e>
 80063f0:	d075      	beq.n	80064de <__aeabi_ddiv+0x56a>
 80063f2:	468b      	mov	fp, r1
 80063f4:	e767      	b.n	80062c6 <__aeabi_ddiv+0x352>
 80063f6:	4543      	cmp	r3, r8
 80063f8:	d900      	bls.n	80063fc <__aeabi_ddiv+0x488>
 80063fa:	e706      	b.n	800620a <__aeabi_ddiv+0x296>
 80063fc:	464a      	mov	r2, r9
 80063fe:	07d4      	lsls	r4, r2, #31
 8006400:	0850      	lsrs	r0, r2, #1
 8006402:	4642      	mov	r2, r8
 8006404:	0852      	lsrs	r2, r2, #1
 8006406:	4314      	orrs	r4, r2
 8006408:	4642      	mov	r2, r8
 800640a:	07d2      	lsls	r2, r2, #31
 800640c:	4690      	mov	r8, r2
 800640e:	e704      	b.n	800621a <__aeabi_ddiv+0x2a6>
 8006410:	f7fa f81c 	bl	800044c <__clzsi2>
 8006414:	2315      	movs	r3, #21
 8006416:	469c      	mov	ip, r3
 8006418:	4484      	add	ip, r0
 800641a:	0002      	movs	r2, r0
 800641c:	4663      	mov	r3, ip
 800641e:	3220      	adds	r2, #32
 8006420:	2b1c      	cmp	r3, #28
 8006422:	dc00      	bgt.n	8006426 <__aeabi_ddiv+0x4b2>
 8006424:	e68a      	b.n	800613c <__aeabi_ddiv+0x1c8>
 8006426:	0023      	movs	r3, r4
 8006428:	3808      	subs	r0, #8
 800642a:	4083      	lsls	r3, r0
 800642c:	4699      	mov	r9, r3
 800642e:	2300      	movs	r3, #0
 8006430:	4698      	mov	r8, r3
 8006432:	e692      	b.n	800615a <__aeabi_ddiv+0x1e6>
 8006434:	f7fa f80a 	bl	800044c <__clzsi2>
 8006438:	0003      	movs	r3, r0
 800643a:	0002      	movs	r2, r0
 800643c:	3315      	adds	r3, #21
 800643e:	3220      	adds	r2, #32
 8006440:	2b1c      	cmp	r3, #28
 8006442:	dc00      	bgt.n	8006446 <__aeabi_ddiv+0x4d2>
 8006444:	e657      	b.n	80060f6 <__aeabi_ddiv+0x182>
 8006446:	9900      	ldr	r1, [sp, #0]
 8006448:	3808      	subs	r0, #8
 800644a:	4081      	lsls	r1, r0
 800644c:	2300      	movs	r3, #0
 800644e:	468b      	mov	fp, r1
 8006450:	e65e      	b.n	8006110 <__aeabi_ddiv+0x19c>
 8006452:	2100      	movs	r1, #0
 8006454:	002e      	movs	r6, r5
 8006456:	2200      	movs	r2, #0
 8006458:	4688      	mov	r8, r1
 800645a:	4b52      	ldr	r3, [pc, #328]	@ (80065a4 <__aeabi_ddiv+0x630>)
 800645c:	e5ea      	b.n	8006034 <__aeabi_ddiv+0xc0>
 800645e:	4287      	cmp	r7, r0
 8006460:	d1c7      	bne.n	80063f2 <__aeabi_ddiv+0x47e>
 8006462:	4544      	cmp	r4, r8
 8006464:	d9c2      	bls.n	80063ec <__aeabi_ddiv+0x478>
 8006466:	468b      	mov	fp, r1
 8006468:	e72d      	b.n	80062c6 <__aeabi_ddiv+0x352>
 800646a:	42a2      	cmp	r2, r4
 800646c:	d800      	bhi.n	8006470 <__aeabi_ddiv+0x4fc>
 800646e:	e704      	b.n	800627a <__aeabi_ddiv+0x306>
 8006470:	1e83      	subs	r3, r0, #2
 8006472:	19e4      	adds	r4, r4, r7
 8006474:	e701      	b.n	800627a <__aeabi_ddiv+0x306>
 8006476:	002e      	movs	r6, r5
 8006478:	2201      	movs	r2, #1
 800647a:	4641      	mov	r1, r8
 800647c:	1a52      	subs	r2, r2, r1
 800647e:	2a38      	cmp	r2, #56	@ 0x38
 8006480:	dd00      	ble.n	8006484 <__aeabi_ddiv+0x510>
 8006482:	e5d3      	b.n	800602c <__aeabi_ddiv+0xb8>
 8006484:	2a1f      	cmp	r2, #31
 8006486:	dc3f      	bgt.n	8006508 <__aeabi_ddiv+0x594>
 8006488:	4847      	ldr	r0, [pc, #284]	@ (80065a8 <__aeabi_ddiv+0x634>)
 800648a:	001c      	movs	r4, r3
 800648c:	4450      	add	r0, sl
 800648e:	4659      	mov	r1, fp
 8006490:	4083      	lsls	r3, r0
 8006492:	4081      	lsls	r1, r0
 8006494:	40d4      	lsrs	r4, r2
 8006496:	1e58      	subs	r0, r3, #1
 8006498:	4183      	sbcs	r3, r0
 800649a:	4321      	orrs	r1, r4
 800649c:	430b      	orrs	r3, r1
 800649e:	4659      	mov	r1, fp
 80064a0:	40d1      	lsrs	r1, r2
 80064a2:	000a      	movs	r2, r1
 80064a4:	0759      	lsls	r1, r3, #29
 80064a6:	d009      	beq.n	80064bc <__aeabi_ddiv+0x548>
 80064a8:	210f      	movs	r1, #15
 80064aa:	4019      	ands	r1, r3
 80064ac:	2904      	cmp	r1, #4
 80064ae:	d005      	beq.n	80064bc <__aeabi_ddiv+0x548>
 80064b0:	1d19      	adds	r1, r3, #4
 80064b2:	4299      	cmp	r1, r3
 80064b4:	419b      	sbcs	r3, r3
 80064b6:	425b      	negs	r3, r3
 80064b8:	18d2      	adds	r2, r2, r3
 80064ba:	000b      	movs	r3, r1
 80064bc:	0211      	lsls	r1, r2, #8
 80064be:	d568      	bpl.n	8006592 <__aeabi_ddiv+0x61e>
 80064c0:	2100      	movs	r1, #0
 80064c2:	2301      	movs	r3, #1
 80064c4:	2200      	movs	r2, #0
 80064c6:	4688      	mov	r8, r1
 80064c8:	e5b4      	b.n	8006034 <__aeabi_ddiv+0xc0>
 80064ca:	000b      	movs	r3, r1
 80064cc:	4282      	cmp	r2, r0
 80064ce:	d000      	beq.n	80064d2 <__aeabi_ddiv+0x55e>
 80064d0:	e760      	b.n	8006394 <__aeabi_ddiv+0x420>
 80064d2:	9a02      	ldr	r2, [sp, #8]
 80064d4:	4295      	cmp	r5, r2
 80064d6:	d000      	beq.n	80064da <__aeabi_ddiv+0x566>
 80064d8:	e75c      	b.n	8006394 <__aeabi_ddiv+0x420>
 80064da:	0035      	movs	r5, r6
 80064dc:	e5c6      	b.n	800606c <__aeabi_ddiv+0xf8>
 80064de:	4545      	cmp	r5, r8
 80064e0:	d987      	bls.n	80063f2 <__aeabi_ddiv+0x47e>
 80064e2:	2302      	movs	r3, #2
 80064e4:	425b      	negs	r3, r3
 80064e6:	469c      	mov	ip, r3
 80064e8:	9b02      	ldr	r3, [sp, #8]
 80064ea:	44e3      	add	fp, ip
 80064ec:	469c      	mov	ip, r3
 80064ee:	44e0      	add	r8, ip
 80064f0:	4598      	cmp	r8, r3
 80064f2:	419b      	sbcs	r3, r3
 80064f4:	425b      	negs	r3, r3
 80064f6:	19db      	adds	r3, r3, r7
 80064f8:	18c0      	adds	r0, r0, r3
 80064fa:	e6e4      	b.n	80062c6 <__aeabi_ddiv+0x352>
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	dd36      	ble.n	800656e <__aeabi_ddiv+0x5fa>
 8006500:	2301      	movs	r3, #1
 8006502:	2200      	movs	r2, #0
 8006504:	449b      	add	fp, r3
 8006506:	e5be      	b.n	8006086 <__aeabi_ddiv+0x112>
 8006508:	211f      	movs	r1, #31
 800650a:	4640      	mov	r0, r8
 800650c:	4249      	negs	r1, r1
 800650e:	1a09      	subs	r1, r1, r0
 8006510:	4658      	mov	r0, fp
 8006512:	40c8      	lsrs	r0, r1
 8006514:	0001      	movs	r1, r0
 8006516:	2a20      	cmp	r2, #32
 8006518:	d004      	beq.n	8006524 <__aeabi_ddiv+0x5b0>
 800651a:	4658      	mov	r0, fp
 800651c:	4a23      	ldr	r2, [pc, #140]	@ (80065ac <__aeabi_ddiv+0x638>)
 800651e:	4452      	add	r2, sl
 8006520:	4090      	lsls	r0, r2
 8006522:	4303      	orrs	r3, r0
 8006524:	1e5a      	subs	r2, r3, #1
 8006526:	4193      	sbcs	r3, r2
 8006528:	2007      	movs	r0, #7
 800652a:	430b      	orrs	r3, r1
 800652c:	0001      	movs	r1, r0
 800652e:	2200      	movs	r2, #0
 8006530:	4019      	ands	r1, r3
 8006532:	4218      	tst	r0, r3
 8006534:	d009      	beq.n	800654a <__aeabi_ddiv+0x5d6>
 8006536:	210f      	movs	r1, #15
 8006538:	4019      	ands	r1, r3
 800653a:	2904      	cmp	r1, #4
 800653c:	d01f      	beq.n	800657e <__aeabi_ddiv+0x60a>
 800653e:	1d18      	adds	r0, r3, #4
 8006540:	4298      	cmp	r0, r3
 8006542:	4189      	sbcs	r1, r1
 8006544:	0003      	movs	r3, r0
 8006546:	4249      	negs	r1, r1
 8006548:	0749      	lsls	r1, r1, #29
 800654a:	08db      	lsrs	r3, r3, #3
 800654c:	430b      	orrs	r3, r1
 800654e:	4698      	mov	r8, r3
 8006550:	2300      	movs	r3, #0
 8006552:	e56f      	b.n	8006034 <__aeabi_ddiv+0xc0>
 8006554:	9902      	ldr	r1, [sp, #8]
 8006556:	3b02      	subs	r3, #2
 8006558:	0049      	lsls	r1, r1, #1
 800655a:	468c      	mov	ip, r1
 800655c:	9902      	ldr	r1, [sp, #8]
 800655e:	458c      	cmp	ip, r1
 8006560:	4189      	sbcs	r1, r1
 8006562:	4249      	negs	r1, r1
 8006564:	19c9      	adds	r1, r1, r7
 8006566:	1852      	adds	r2, r2, r1
 8006568:	4661      	mov	r1, ip
 800656a:	9102      	str	r1, [sp, #8]
 800656c:	e7ae      	b.n	80064cc <__aeabi_ddiv+0x558>
 800656e:	2301      	movs	r3, #1
 8006570:	425b      	negs	r3, r3
 8006572:	e781      	b.n	8006478 <__aeabi_ddiv+0x504>
 8006574:	9902      	ldr	r1, [sp, #8]
 8006576:	42a9      	cmp	r1, r5
 8006578:	d3ec      	bcc.n	8006554 <__aeabi_ddiv+0x5e0>
 800657a:	4663      	mov	r3, ip
 800657c:	e7a9      	b.n	80064d2 <__aeabi_ddiv+0x55e>
 800657e:	2100      	movs	r1, #0
 8006580:	e7e3      	b.n	800654a <__aeabi_ddiv+0x5d6>
 8006582:	1d1a      	adds	r2, r3, #4
 8006584:	429a      	cmp	r2, r3
 8006586:	419b      	sbcs	r3, r3
 8006588:	425b      	negs	r3, r3
 800658a:	002e      	movs	r6, r5
 800658c:	08d2      	lsrs	r2, r2, #3
 800658e:	449b      	add	fp, r3
 8006590:	e579      	b.n	8006086 <__aeabi_ddiv+0x112>
 8006592:	0751      	lsls	r1, r2, #29
 8006594:	0252      	lsls	r2, r2, #9
 8006596:	0b12      	lsrs	r2, r2, #12
 8006598:	e7d7      	b.n	800654a <__aeabi_ddiv+0x5d6>
 800659a:	46c0      	nop			@ (mov r8, r8)
 800659c:	000003ff 	.word	0x000003ff
 80065a0:	fffffc02 	.word	0xfffffc02
 80065a4:	000007ff 	.word	0x000007ff
 80065a8:	0000041e 	.word	0x0000041e
 80065ac:	0000043e 	.word	0x0000043e

080065b0 <__eqdf2>:
 80065b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065b2:	4657      	mov	r7, sl
 80065b4:	46de      	mov	lr, fp
 80065b6:	464e      	mov	r6, r9
 80065b8:	4645      	mov	r5, r8
 80065ba:	b5e0      	push	{r5, r6, r7, lr}
 80065bc:	000d      	movs	r5, r1
 80065be:	0004      	movs	r4, r0
 80065c0:	0fe8      	lsrs	r0, r5, #31
 80065c2:	4683      	mov	fp, r0
 80065c4:	0309      	lsls	r1, r1, #12
 80065c6:	0fd8      	lsrs	r0, r3, #31
 80065c8:	0b09      	lsrs	r1, r1, #12
 80065ca:	4682      	mov	sl, r0
 80065cc:	481a      	ldr	r0, [pc, #104]	@ (8006638 <__eqdf2+0x88>)
 80065ce:	468c      	mov	ip, r1
 80065d0:	031f      	lsls	r7, r3, #12
 80065d2:	0069      	lsls	r1, r5, #1
 80065d4:	005e      	lsls	r6, r3, #1
 80065d6:	0d49      	lsrs	r1, r1, #21
 80065d8:	0b3f      	lsrs	r7, r7, #12
 80065da:	0d76      	lsrs	r6, r6, #21
 80065dc:	4281      	cmp	r1, r0
 80065de:	d01a      	beq.n	8006616 <__eqdf2+0x66>
 80065e0:	4286      	cmp	r6, r0
 80065e2:	d011      	beq.n	8006608 <__eqdf2+0x58>
 80065e4:	2001      	movs	r0, #1
 80065e6:	42b1      	cmp	r1, r6
 80065e8:	d10f      	bne.n	800660a <__eqdf2+0x5a>
 80065ea:	45bc      	cmp	ip, r7
 80065ec:	d10d      	bne.n	800660a <__eqdf2+0x5a>
 80065ee:	42a2      	cmp	r2, r4
 80065f0:	d10b      	bne.n	800660a <__eqdf2+0x5a>
 80065f2:	45d3      	cmp	fp, sl
 80065f4:	d01e      	beq.n	8006634 <__eqdf2+0x84>
 80065f6:	2900      	cmp	r1, #0
 80065f8:	d107      	bne.n	800660a <__eqdf2+0x5a>
 80065fa:	4661      	mov	r1, ip
 80065fc:	4311      	orrs	r1, r2
 80065fe:	000a      	movs	r2, r1
 8006600:	1e53      	subs	r3, r2, #1
 8006602:	419a      	sbcs	r2, r3
 8006604:	0010      	movs	r0, r2
 8006606:	e000      	b.n	800660a <__eqdf2+0x5a>
 8006608:	2001      	movs	r0, #1
 800660a:	bcf0      	pop	{r4, r5, r6, r7}
 800660c:	46bb      	mov	fp, r7
 800660e:	46b2      	mov	sl, r6
 8006610:	46a9      	mov	r9, r5
 8006612:	46a0      	mov	r8, r4
 8006614:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006616:	2001      	movs	r0, #1
 8006618:	428e      	cmp	r6, r1
 800661a:	d1f6      	bne.n	800660a <__eqdf2+0x5a>
 800661c:	4661      	mov	r1, ip
 800661e:	4339      	orrs	r1, r7
 8006620:	000f      	movs	r7, r1
 8006622:	4317      	orrs	r7, r2
 8006624:	4327      	orrs	r7, r4
 8006626:	d1f0      	bne.n	800660a <__eqdf2+0x5a>
 8006628:	465b      	mov	r3, fp
 800662a:	4652      	mov	r2, sl
 800662c:	1a98      	subs	r0, r3, r2
 800662e:	1e43      	subs	r3, r0, #1
 8006630:	4198      	sbcs	r0, r3
 8006632:	e7ea      	b.n	800660a <__eqdf2+0x5a>
 8006634:	2000      	movs	r0, #0
 8006636:	e7e8      	b.n	800660a <__eqdf2+0x5a>
 8006638:	000007ff 	.word	0x000007ff

0800663c <__gedf2>:
 800663c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800663e:	4657      	mov	r7, sl
 8006640:	464e      	mov	r6, r9
 8006642:	4645      	mov	r5, r8
 8006644:	46de      	mov	lr, fp
 8006646:	b5e0      	push	{r5, r6, r7, lr}
 8006648:	000d      	movs	r5, r1
 800664a:	030e      	lsls	r6, r1, #12
 800664c:	0049      	lsls	r1, r1, #1
 800664e:	0d49      	lsrs	r1, r1, #21
 8006650:	468a      	mov	sl, r1
 8006652:	0fdf      	lsrs	r7, r3, #31
 8006654:	0fe9      	lsrs	r1, r5, #31
 8006656:	46bc      	mov	ip, r7
 8006658:	b083      	sub	sp, #12
 800665a:	4f2f      	ldr	r7, [pc, #188]	@ (8006718 <__gedf2+0xdc>)
 800665c:	0004      	movs	r4, r0
 800665e:	4680      	mov	r8, r0
 8006660:	9101      	str	r1, [sp, #4]
 8006662:	0058      	lsls	r0, r3, #1
 8006664:	0319      	lsls	r1, r3, #12
 8006666:	4691      	mov	r9, r2
 8006668:	0b36      	lsrs	r6, r6, #12
 800666a:	0b09      	lsrs	r1, r1, #12
 800666c:	0d40      	lsrs	r0, r0, #21
 800666e:	45ba      	cmp	sl, r7
 8006670:	d01d      	beq.n	80066ae <__gedf2+0x72>
 8006672:	42b8      	cmp	r0, r7
 8006674:	d00d      	beq.n	8006692 <__gedf2+0x56>
 8006676:	4657      	mov	r7, sl
 8006678:	2f00      	cmp	r7, #0
 800667a:	d12a      	bne.n	80066d2 <__gedf2+0x96>
 800667c:	4334      	orrs	r4, r6
 800667e:	2800      	cmp	r0, #0
 8006680:	d124      	bne.n	80066cc <__gedf2+0x90>
 8006682:	430a      	orrs	r2, r1
 8006684:	d036      	beq.n	80066f4 <__gedf2+0xb8>
 8006686:	2c00      	cmp	r4, #0
 8006688:	d141      	bne.n	800670e <__gedf2+0xd2>
 800668a:	4663      	mov	r3, ip
 800668c:	0058      	lsls	r0, r3, #1
 800668e:	3801      	subs	r0, #1
 8006690:	e015      	b.n	80066be <__gedf2+0x82>
 8006692:	4311      	orrs	r1, r2
 8006694:	d138      	bne.n	8006708 <__gedf2+0xcc>
 8006696:	4653      	mov	r3, sl
 8006698:	2b00      	cmp	r3, #0
 800669a:	d101      	bne.n	80066a0 <__gedf2+0x64>
 800669c:	4326      	orrs	r6, r4
 800669e:	d0f4      	beq.n	800668a <__gedf2+0x4e>
 80066a0:	9b01      	ldr	r3, [sp, #4]
 80066a2:	4563      	cmp	r3, ip
 80066a4:	d107      	bne.n	80066b6 <__gedf2+0x7a>
 80066a6:	9b01      	ldr	r3, [sp, #4]
 80066a8:	0058      	lsls	r0, r3, #1
 80066aa:	3801      	subs	r0, #1
 80066ac:	e007      	b.n	80066be <__gedf2+0x82>
 80066ae:	4326      	orrs	r6, r4
 80066b0:	d12a      	bne.n	8006708 <__gedf2+0xcc>
 80066b2:	4550      	cmp	r0, sl
 80066b4:	d021      	beq.n	80066fa <__gedf2+0xbe>
 80066b6:	2001      	movs	r0, #1
 80066b8:	9b01      	ldr	r3, [sp, #4]
 80066ba:	425f      	negs	r7, r3
 80066bc:	4338      	orrs	r0, r7
 80066be:	b003      	add	sp, #12
 80066c0:	bcf0      	pop	{r4, r5, r6, r7}
 80066c2:	46bb      	mov	fp, r7
 80066c4:	46b2      	mov	sl, r6
 80066c6:	46a9      	mov	r9, r5
 80066c8:	46a0      	mov	r8, r4
 80066ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066cc:	2c00      	cmp	r4, #0
 80066ce:	d0dc      	beq.n	800668a <__gedf2+0x4e>
 80066d0:	e7e6      	b.n	80066a0 <__gedf2+0x64>
 80066d2:	2800      	cmp	r0, #0
 80066d4:	d0ef      	beq.n	80066b6 <__gedf2+0x7a>
 80066d6:	9b01      	ldr	r3, [sp, #4]
 80066d8:	4563      	cmp	r3, ip
 80066da:	d1ec      	bne.n	80066b6 <__gedf2+0x7a>
 80066dc:	4582      	cmp	sl, r0
 80066de:	dcea      	bgt.n	80066b6 <__gedf2+0x7a>
 80066e0:	dbe1      	blt.n	80066a6 <__gedf2+0x6a>
 80066e2:	428e      	cmp	r6, r1
 80066e4:	d8e7      	bhi.n	80066b6 <__gedf2+0x7a>
 80066e6:	d1de      	bne.n	80066a6 <__gedf2+0x6a>
 80066e8:	45c8      	cmp	r8, r9
 80066ea:	d8e4      	bhi.n	80066b6 <__gedf2+0x7a>
 80066ec:	2000      	movs	r0, #0
 80066ee:	45c8      	cmp	r8, r9
 80066f0:	d2e5      	bcs.n	80066be <__gedf2+0x82>
 80066f2:	e7d8      	b.n	80066a6 <__gedf2+0x6a>
 80066f4:	2c00      	cmp	r4, #0
 80066f6:	d0e2      	beq.n	80066be <__gedf2+0x82>
 80066f8:	e7dd      	b.n	80066b6 <__gedf2+0x7a>
 80066fa:	4311      	orrs	r1, r2
 80066fc:	d104      	bne.n	8006708 <__gedf2+0xcc>
 80066fe:	9b01      	ldr	r3, [sp, #4]
 8006700:	4563      	cmp	r3, ip
 8006702:	d1d8      	bne.n	80066b6 <__gedf2+0x7a>
 8006704:	2000      	movs	r0, #0
 8006706:	e7da      	b.n	80066be <__gedf2+0x82>
 8006708:	2002      	movs	r0, #2
 800670a:	4240      	negs	r0, r0
 800670c:	e7d7      	b.n	80066be <__gedf2+0x82>
 800670e:	9b01      	ldr	r3, [sp, #4]
 8006710:	4563      	cmp	r3, ip
 8006712:	d0e6      	beq.n	80066e2 <__gedf2+0xa6>
 8006714:	e7cf      	b.n	80066b6 <__gedf2+0x7a>
 8006716:	46c0      	nop			@ (mov r8, r8)
 8006718:	000007ff 	.word	0x000007ff

0800671c <__ledf2>:
 800671c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800671e:	4657      	mov	r7, sl
 8006720:	464e      	mov	r6, r9
 8006722:	4645      	mov	r5, r8
 8006724:	46de      	mov	lr, fp
 8006726:	b5e0      	push	{r5, r6, r7, lr}
 8006728:	000d      	movs	r5, r1
 800672a:	030e      	lsls	r6, r1, #12
 800672c:	0049      	lsls	r1, r1, #1
 800672e:	0d49      	lsrs	r1, r1, #21
 8006730:	468a      	mov	sl, r1
 8006732:	0fdf      	lsrs	r7, r3, #31
 8006734:	0fe9      	lsrs	r1, r5, #31
 8006736:	46bc      	mov	ip, r7
 8006738:	b083      	sub	sp, #12
 800673a:	4f2e      	ldr	r7, [pc, #184]	@ (80067f4 <__ledf2+0xd8>)
 800673c:	0004      	movs	r4, r0
 800673e:	4680      	mov	r8, r0
 8006740:	9101      	str	r1, [sp, #4]
 8006742:	0058      	lsls	r0, r3, #1
 8006744:	0319      	lsls	r1, r3, #12
 8006746:	4691      	mov	r9, r2
 8006748:	0b36      	lsrs	r6, r6, #12
 800674a:	0b09      	lsrs	r1, r1, #12
 800674c:	0d40      	lsrs	r0, r0, #21
 800674e:	45ba      	cmp	sl, r7
 8006750:	d01e      	beq.n	8006790 <__ledf2+0x74>
 8006752:	42b8      	cmp	r0, r7
 8006754:	d00d      	beq.n	8006772 <__ledf2+0x56>
 8006756:	4657      	mov	r7, sl
 8006758:	2f00      	cmp	r7, #0
 800675a:	d127      	bne.n	80067ac <__ledf2+0x90>
 800675c:	4334      	orrs	r4, r6
 800675e:	2800      	cmp	r0, #0
 8006760:	d133      	bne.n	80067ca <__ledf2+0xae>
 8006762:	430a      	orrs	r2, r1
 8006764:	d034      	beq.n	80067d0 <__ledf2+0xb4>
 8006766:	2c00      	cmp	r4, #0
 8006768:	d140      	bne.n	80067ec <__ledf2+0xd0>
 800676a:	4663      	mov	r3, ip
 800676c:	0058      	lsls	r0, r3, #1
 800676e:	3801      	subs	r0, #1
 8006770:	e015      	b.n	800679e <__ledf2+0x82>
 8006772:	4311      	orrs	r1, r2
 8006774:	d112      	bne.n	800679c <__ledf2+0x80>
 8006776:	4653      	mov	r3, sl
 8006778:	2b00      	cmp	r3, #0
 800677a:	d101      	bne.n	8006780 <__ledf2+0x64>
 800677c:	4326      	orrs	r6, r4
 800677e:	d0f4      	beq.n	800676a <__ledf2+0x4e>
 8006780:	9b01      	ldr	r3, [sp, #4]
 8006782:	4563      	cmp	r3, ip
 8006784:	d01d      	beq.n	80067c2 <__ledf2+0xa6>
 8006786:	2001      	movs	r0, #1
 8006788:	9b01      	ldr	r3, [sp, #4]
 800678a:	425f      	negs	r7, r3
 800678c:	4338      	orrs	r0, r7
 800678e:	e006      	b.n	800679e <__ledf2+0x82>
 8006790:	4326      	orrs	r6, r4
 8006792:	d103      	bne.n	800679c <__ledf2+0x80>
 8006794:	4550      	cmp	r0, sl
 8006796:	d1f6      	bne.n	8006786 <__ledf2+0x6a>
 8006798:	4311      	orrs	r1, r2
 800679a:	d01c      	beq.n	80067d6 <__ledf2+0xba>
 800679c:	2002      	movs	r0, #2
 800679e:	b003      	add	sp, #12
 80067a0:	bcf0      	pop	{r4, r5, r6, r7}
 80067a2:	46bb      	mov	fp, r7
 80067a4:	46b2      	mov	sl, r6
 80067a6:	46a9      	mov	r9, r5
 80067a8:	46a0      	mov	r8, r4
 80067aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067ac:	2800      	cmp	r0, #0
 80067ae:	d0ea      	beq.n	8006786 <__ledf2+0x6a>
 80067b0:	9b01      	ldr	r3, [sp, #4]
 80067b2:	4563      	cmp	r3, ip
 80067b4:	d1e7      	bne.n	8006786 <__ledf2+0x6a>
 80067b6:	4582      	cmp	sl, r0
 80067b8:	dce5      	bgt.n	8006786 <__ledf2+0x6a>
 80067ba:	db02      	blt.n	80067c2 <__ledf2+0xa6>
 80067bc:	428e      	cmp	r6, r1
 80067be:	d8e2      	bhi.n	8006786 <__ledf2+0x6a>
 80067c0:	d00e      	beq.n	80067e0 <__ledf2+0xc4>
 80067c2:	9b01      	ldr	r3, [sp, #4]
 80067c4:	0058      	lsls	r0, r3, #1
 80067c6:	3801      	subs	r0, #1
 80067c8:	e7e9      	b.n	800679e <__ledf2+0x82>
 80067ca:	2c00      	cmp	r4, #0
 80067cc:	d0cd      	beq.n	800676a <__ledf2+0x4e>
 80067ce:	e7d7      	b.n	8006780 <__ledf2+0x64>
 80067d0:	2c00      	cmp	r4, #0
 80067d2:	d0e4      	beq.n	800679e <__ledf2+0x82>
 80067d4:	e7d7      	b.n	8006786 <__ledf2+0x6a>
 80067d6:	9b01      	ldr	r3, [sp, #4]
 80067d8:	2000      	movs	r0, #0
 80067da:	4563      	cmp	r3, ip
 80067dc:	d0df      	beq.n	800679e <__ledf2+0x82>
 80067de:	e7d2      	b.n	8006786 <__ledf2+0x6a>
 80067e0:	45c8      	cmp	r8, r9
 80067e2:	d8d0      	bhi.n	8006786 <__ledf2+0x6a>
 80067e4:	2000      	movs	r0, #0
 80067e6:	45c8      	cmp	r8, r9
 80067e8:	d2d9      	bcs.n	800679e <__ledf2+0x82>
 80067ea:	e7ea      	b.n	80067c2 <__ledf2+0xa6>
 80067ec:	9b01      	ldr	r3, [sp, #4]
 80067ee:	4563      	cmp	r3, ip
 80067f0:	d0e4      	beq.n	80067bc <__ledf2+0xa0>
 80067f2:	e7c8      	b.n	8006786 <__ledf2+0x6a>
 80067f4:	000007ff 	.word	0x000007ff

080067f8 <__aeabi_dmul>:
 80067f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067fa:	4657      	mov	r7, sl
 80067fc:	464e      	mov	r6, r9
 80067fe:	4645      	mov	r5, r8
 8006800:	46de      	mov	lr, fp
 8006802:	b5e0      	push	{r5, r6, r7, lr}
 8006804:	001f      	movs	r7, r3
 8006806:	030b      	lsls	r3, r1, #12
 8006808:	0b1b      	lsrs	r3, r3, #12
 800680a:	0016      	movs	r6, r2
 800680c:	4698      	mov	r8, r3
 800680e:	0fca      	lsrs	r2, r1, #31
 8006810:	004b      	lsls	r3, r1, #1
 8006812:	0004      	movs	r4, r0
 8006814:	4692      	mov	sl, r2
 8006816:	b085      	sub	sp, #20
 8006818:	0d5b      	lsrs	r3, r3, #21
 800681a:	d100      	bne.n	800681e <__aeabi_dmul+0x26>
 800681c:	e1c2      	b.n	8006ba4 <__aeabi_dmul+0x3ac>
 800681e:	4acc      	ldr	r2, [pc, #816]	@ (8006b50 <__aeabi_dmul+0x358>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d100      	bne.n	8006826 <__aeabi_dmul+0x2e>
 8006824:	e128      	b.n	8006a78 <__aeabi_dmul+0x280>
 8006826:	4641      	mov	r1, r8
 8006828:	0f42      	lsrs	r2, r0, #29
 800682a:	00c9      	lsls	r1, r1, #3
 800682c:	430a      	orrs	r2, r1
 800682e:	2180      	movs	r1, #128	@ 0x80
 8006830:	0409      	lsls	r1, r1, #16
 8006832:	4311      	orrs	r1, r2
 8006834:	00c2      	lsls	r2, r0, #3
 8006836:	4691      	mov	r9, r2
 8006838:	4ac6      	ldr	r2, [pc, #792]	@ (8006b54 <__aeabi_dmul+0x35c>)
 800683a:	4688      	mov	r8, r1
 800683c:	4693      	mov	fp, r2
 800683e:	449b      	add	fp, r3
 8006840:	2300      	movs	r3, #0
 8006842:	2500      	movs	r5, #0
 8006844:	9301      	str	r3, [sp, #4]
 8006846:	033c      	lsls	r4, r7, #12
 8006848:	007a      	lsls	r2, r7, #1
 800684a:	0ffb      	lsrs	r3, r7, #31
 800684c:	0030      	movs	r0, r6
 800684e:	0b24      	lsrs	r4, r4, #12
 8006850:	0d52      	lsrs	r2, r2, #21
 8006852:	9300      	str	r3, [sp, #0]
 8006854:	d100      	bne.n	8006858 <__aeabi_dmul+0x60>
 8006856:	e185      	b.n	8006b64 <__aeabi_dmul+0x36c>
 8006858:	4bbd      	ldr	r3, [pc, #756]	@ (8006b50 <__aeabi_dmul+0x358>)
 800685a:	429a      	cmp	r2, r3
 800685c:	d100      	bne.n	8006860 <__aeabi_dmul+0x68>
 800685e:	e160      	b.n	8006b22 <__aeabi_dmul+0x32a>
 8006860:	4bbc      	ldr	r3, [pc, #752]	@ (8006b54 <__aeabi_dmul+0x35c>)
 8006862:	469c      	mov	ip, r3
 8006864:	4462      	add	r2, ip
 8006866:	4493      	add	fp, r2
 8006868:	2d0a      	cmp	r5, #10
 800686a:	dd00      	ble.n	800686e <__aeabi_dmul+0x76>
 800686c:	e114      	b.n	8006a98 <__aeabi_dmul+0x2a0>
 800686e:	0f73      	lsrs	r3, r6, #29
 8006870:	00e4      	lsls	r4, r4, #3
 8006872:	431c      	orrs	r4, r3
 8006874:	2380      	movs	r3, #128	@ 0x80
 8006876:	041b      	lsls	r3, r3, #16
 8006878:	4323      	orrs	r3, r4
 800687a:	00f0      	lsls	r0, r6, #3
 800687c:	4652      	mov	r2, sl
 800687e:	9900      	ldr	r1, [sp, #0]
 8006880:	2600      	movs	r6, #0
 8006882:	404a      	eors	r2, r1
 8006884:	4692      	mov	sl, r2
 8006886:	2d02      	cmp	r5, #2
 8006888:	dd11      	ble.n	80068ae <__aeabi_dmul+0xb6>
 800688a:	2201      	movs	r2, #1
 800688c:	40aa      	lsls	r2, r5
 800688e:	21a6      	movs	r1, #166	@ 0xa6
 8006890:	0014      	movs	r4, r2
 8006892:	00c9      	lsls	r1, r1, #3
 8006894:	400c      	ands	r4, r1
 8006896:	420a      	tst	r2, r1
 8006898:	d000      	beq.n	800689c <__aeabi_dmul+0xa4>
 800689a:	e0fd      	b.n	8006a98 <__aeabi_dmul+0x2a0>
 800689c:	2190      	movs	r1, #144	@ 0x90
 800689e:	0089      	lsls	r1, r1, #2
 80068a0:	420a      	tst	r2, r1
 80068a2:	d000      	beq.n	80068a6 <__aeabi_dmul+0xae>
 80068a4:	e1d4      	b.n	8006c50 <__aeabi_dmul+0x458>
 80068a6:	2188      	movs	r1, #136	@ 0x88
 80068a8:	4211      	tst	r1, r2
 80068aa:	d000      	beq.n	80068ae <__aeabi_dmul+0xb6>
 80068ac:	e0ef      	b.n	8006a8e <__aeabi_dmul+0x296>
 80068ae:	4649      	mov	r1, r9
 80068b0:	464a      	mov	r2, r9
 80068b2:	0409      	lsls	r1, r1, #16
 80068b4:	0c14      	lsrs	r4, r2, #16
 80068b6:	0c09      	lsrs	r1, r1, #16
 80068b8:	0c02      	lsrs	r2, r0, #16
 80068ba:	000f      	movs	r7, r1
 80068bc:	0015      	movs	r5, r2
 80068be:	0400      	lsls	r0, r0, #16
 80068c0:	0c00      	lsrs	r0, r0, #16
 80068c2:	4365      	muls	r5, r4
 80068c4:	4347      	muls	r7, r0
 80068c6:	9501      	str	r5, [sp, #4]
 80068c8:	46b9      	mov	r9, r7
 80068ca:	002f      	movs	r7, r5
 80068cc:	000d      	movs	r5, r1
 80068ce:	0006      	movs	r6, r0
 80068d0:	4355      	muls	r5, r2
 80068d2:	46ac      	mov	ip, r5
 80068d4:	464d      	mov	r5, r9
 80068d6:	4366      	muls	r6, r4
 80068d8:	0c2d      	lsrs	r5, r5, #16
 80068da:	44b4      	add	ip, r6
 80068dc:	4465      	add	r5, ip
 80068de:	42ae      	cmp	r6, r5
 80068e0:	d905      	bls.n	80068ee <__aeabi_dmul+0xf6>
 80068e2:	003e      	movs	r6, r7
 80068e4:	2780      	movs	r7, #128	@ 0x80
 80068e6:	027f      	lsls	r7, r7, #9
 80068e8:	46bc      	mov	ip, r7
 80068ea:	4466      	add	r6, ip
 80068ec:	9601      	str	r6, [sp, #4]
 80068ee:	464f      	mov	r7, r9
 80068f0:	043f      	lsls	r7, r7, #16
 80068f2:	0c3f      	lsrs	r7, r7, #16
 80068f4:	0c2e      	lsrs	r6, r5, #16
 80068f6:	042d      	lsls	r5, r5, #16
 80068f8:	19ed      	adds	r5, r5, r7
 80068fa:	9502      	str	r5, [sp, #8]
 80068fc:	0c1d      	lsrs	r5, r3, #16
 80068fe:	041b      	lsls	r3, r3, #16
 8006900:	0c1b      	lsrs	r3, r3, #16
 8006902:	9500      	str	r5, [sp, #0]
 8006904:	001d      	movs	r5, r3
 8006906:	001f      	movs	r7, r3
 8006908:	4365      	muls	r5, r4
 800690a:	434f      	muls	r7, r1
 800690c:	46ac      	mov	ip, r5
 800690e:	9d00      	ldr	r5, [sp, #0]
 8006910:	4369      	muls	r1, r5
 8006912:	436c      	muls	r4, r5
 8006914:	0c3d      	lsrs	r5, r7, #16
 8006916:	46a9      	mov	r9, r5
 8006918:	4461      	add	r1, ip
 800691a:	4449      	add	r1, r9
 800691c:	458c      	cmp	ip, r1
 800691e:	d903      	bls.n	8006928 <__aeabi_dmul+0x130>
 8006920:	2580      	movs	r5, #128	@ 0x80
 8006922:	026d      	lsls	r5, r5, #9
 8006924:	46ac      	mov	ip, r5
 8006926:	4464      	add	r4, ip
 8006928:	043f      	lsls	r7, r7, #16
 800692a:	0c0d      	lsrs	r5, r1, #16
 800692c:	0c3f      	lsrs	r7, r7, #16
 800692e:	0409      	lsls	r1, r1, #16
 8006930:	19c9      	adds	r1, r1, r7
 8006932:	46ac      	mov	ip, r5
 8006934:	1875      	adds	r5, r6, r1
 8006936:	9503      	str	r5, [sp, #12]
 8006938:	4645      	mov	r5, r8
 800693a:	042e      	lsls	r6, r5, #16
 800693c:	0c36      	lsrs	r6, r6, #16
 800693e:	0c2f      	lsrs	r7, r5, #16
 8006940:	0035      	movs	r5, r6
 8006942:	4345      	muls	r5, r0
 8006944:	4378      	muls	r0, r7
 8006946:	4680      	mov	r8, r0
 8006948:	0038      	movs	r0, r7
 800694a:	4464      	add	r4, ip
 800694c:	46ac      	mov	ip, r5
 800694e:	0c2d      	lsrs	r5, r5, #16
 8006950:	46a9      	mov	r9, r5
 8006952:	4350      	muls	r0, r2
 8006954:	4372      	muls	r2, r6
 8006956:	4442      	add	r2, r8
 8006958:	444a      	add	r2, r9
 800695a:	4590      	cmp	r8, r2
 800695c:	d903      	bls.n	8006966 <__aeabi_dmul+0x16e>
 800695e:	2580      	movs	r5, #128	@ 0x80
 8006960:	026d      	lsls	r5, r5, #9
 8006962:	46a8      	mov	r8, r5
 8006964:	4440      	add	r0, r8
 8006966:	0c15      	lsrs	r5, r2, #16
 8006968:	46a8      	mov	r8, r5
 800696a:	4665      	mov	r5, ip
 800696c:	042d      	lsls	r5, r5, #16
 800696e:	0c2d      	lsrs	r5, r5, #16
 8006970:	46ac      	mov	ip, r5
 8006972:	0035      	movs	r5, r6
 8006974:	435d      	muls	r5, r3
 8006976:	0412      	lsls	r2, r2, #16
 8006978:	4462      	add	r2, ip
 800697a:	46ac      	mov	ip, r5
 800697c:	437b      	muls	r3, r7
 800697e:	9d00      	ldr	r5, [sp, #0]
 8006980:	4440      	add	r0, r8
 8006982:	4698      	mov	r8, r3
 8006984:	002b      	movs	r3, r5
 8006986:	436e      	muls	r6, r5
 8006988:	4665      	mov	r5, ip
 800698a:	437b      	muls	r3, r7
 800698c:	4446      	add	r6, r8
 800698e:	0c2d      	lsrs	r5, r5, #16
 8006990:	19ad      	adds	r5, r5, r6
 8006992:	001f      	movs	r7, r3
 8006994:	9300      	str	r3, [sp, #0]
 8006996:	45a8      	cmp	r8, r5
 8006998:	d904      	bls.n	80069a4 <__aeabi_dmul+0x1ac>
 800699a:	2380      	movs	r3, #128	@ 0x80
 800699c:	025b      	lsls	r3, r3, #9
 800699e:	4698      	mov	r8, r3
 80069a0:	4447      	add	r7, r8
 80069a2:	9700      	str	r7, [sp, #0]
 80069a4:	9b03      	ldr	r3, [sp, #12]
 80069a6:	9e01      	ldr	r6, [sp, #4]
 80069a8:	4698      	mov	r8, r3
 80069aa:	042b      	lsls	r3, r5, #16
 80069ac:	4446      	add	r6, r8
 80069ae:	4698      	mov	r8, r3
 80069b0:	4663      	mov	r3, ip
 80069b2:	428e      	cmp	r6, r1
 80069b4:	4189      	sbcs	r1, r1
 80069b6:	041b      	lsls	r3, r3, #16
 80069b8:	0c1b      	lsrs	r3, r3, #16
 80069ba:	4443      	add	r3, r8
 80069bc:	18b6      	adds	r6, r6, r2
 80069be:	4249      	negs	r1, r1
 80069c0:	191b      	adds	r3, r3, r4
 80069c2:	185f      	adds	r7, r3, r1
 80069c4:	4296      	cmp	r6, r2
 80069c6:	4192      	sbcs	r2, r2
 80069c8:	46bc      	mov	ip, r7
 80069ca:	4252      	negs	r2, r2
 80069cc:	4680      	mov	r8, r0
 80069ce:	4691      	mov	r9, r2
 80069d0:	458c      	cmp	ip, r1
 80069d2:	4189      	sbcs	r1, r1
 80069d4:	42a3      	cmp	r3, r4
 80069d6:	419b      	sbcs	r3, r3
 80069d8:	44e0      	add	r8, ip
 80069da:	44c1      	add	r9, r8
 80069dc:	4249      	negs	r1, r1
 80069de:	425b      	negs	r3, r3
 80069e0:	4591      	cmp	r9, r2
 80069e2:	4192      	sbcs	r2, r2
 80069e4:	430b      	orrs	r3, r1
 80069e6:	4580      	cmp	r8, r0
 80069e8:	4189      	sbcs	r1, r1
 80069ea:	0c2d      	lsrs	r5, r5, #16
 80069ec:	4249      	negs	r1, r1
 80069ee:	4252      	negs	r2, r2
 80069f0:	430a      	orrs	r2, r1
 80069f2:	195b      	adds	r3, r3, r5
 80069f4:	189b      	adds	r3, r3, r2
 80069f6:	9a00      	ldr	r2, [sp, #0]
 80069f8:	9902      	ldr	r1, [sp, #8]
 80069fa:	4694      	mov	ip, r2
 80069fc:	464a      	mov	r2, r9
 80069fe:	4463      	add	r3, ip
 8006a00:	025b      	lsls	r3, r3, #9
 8006a02:	0dd2      	lsrs	r2, r2, #23
 8006a04:	431a      	orrs	r2, r3
 8006a06:	4690      	mov	r8, r2
 8006a08:	0272      	lsls	r2, r6, #9
 8006a0a:	430a      	orrs	r2, r1
 8006a0c:	1e51      	subs	r1, r2, #1
 8006a0e:	418a      	sbcs	r2, r1
 8006a10:	0df6      	lsrs	r6, r6, #23
 8006a12:	4316      	orrs	r6, r2
 8006a14:	464a      	mov	r2, r9
 8006a16:	0252      	lsls	r2, r2, #9
 8006a18:	4316      	orrs	r6, r2
 8006a1a:	46b1      	mov	r9, r6
 8006a1c:	01db      	lsls	r3, r3, #7
 8006a1e:	d454      	bmi.n	8006aca <__aeabi_dmul+0x2d2>
 8006a20:	4a4d      	ldr	r2, [pc, #308]	@ (8006b58 <__aeabi_dmul+0x360>)
 8006a22:	445a      	add	r2, fp
 8006a24:	2a00      	cmp	r2, #0
 8006a26:	dc00      	bgt.n	8006a2a <__aeabi_dmul+0x232>
 8006a28:	e118      	b.n	8006c5c <__aeabi_dmul+0x464>
 8006a2a:	0033      	movs	r3, r6
 8006a2c:	075b      	lsls	r3, r3, #29
 8006a2e:	d015      	beq.n	8006a5c <__aeabi_dmul+0x264>
 8006a30:	210f      	movs	r1, #15
 8006a32:	465b      	mov	r3, fp
 8006a34:	4031      	ands	r1, r6
 8006a36:	2904      	cmp	r1, #4
 8006a38:	d010      	beq.n	8006a5c <__aeabi_dmul+0x264>
 8006a3a:	4649      	mov	r1, r9
 8006a3c:	1d08      	adds	r0, r1, #4
 8006a3e:	4548      	cmp	r0, r9
 8006a40:	4189      	sbcs	r1, r1
 8006a42:	4681      	mov	r9, r0
 8006a44:	4249      	negs	r1, r1
 8006a46:	4488      	add	r8, r1
 8006a48:	4641      	mov	r1, r8
 8006a4a:	01c9      	lsls	r1, r1, #7
 8006a4c:	d506      	bpl.n	8006a5c <__aeabi_dmul+0x264>
 8006a4e:	4641      	mov	r1, r8
 8006a50:	4a42      	ldr	r2, [pc, #264]	@ (8006b5c <__aeabi_dmul+0x364>)
 8006a52:	4011      	ands	r1, r2
 8006a54:	2280      	movs	r2, #128	@ 0x80
 8006a56:	4688      	mov	r8, r1
 8006a58:	00d2      	lsls	r2, r2, #3
 8006a5a:	189a      	adds	r2, r3, r2
 8006a5c:	4b40      	ldr	r3, [pc, #256]	@ (8006b60 <__aeabi_dmul+0x368>)
 8006a5e:	429a      	cmp	r2, r3
 8006a60:	dd00      	ble.n	8006a64 <__aeabi_dmul+0x26c>
 8006a62:	e12b      	b.n	8006cbc <__aeabi_dmul+0x4c4>
 8006a64:	4641      	mov	r1, r8
 8006a66:	464b      	mov	r3, r9
 8006a68:	074c      	lsls	r4, r1, #29
 8006a6a:	08db      	lsrs	r3, r3, #3
 8006a6c:	431c      	orrs	r4, r3
 8006a6e:	0552      	lsls	r2, r2, #21
 8006a70:	024b      	lsls	r3, r1, #9
 8006a72:	0b1b      	lsrs	r3, r3, #12
 8006a74:	0d52      	lsrs	r2, r2, #21
 8006a76:	e01a      	b.n	8006aae <__aeabi_dmul+0x2b6>
 8006a78:	4642      	mov	r2, r8
 8006a7a:	4302      	orrs	r2, r0
 8006a7c:	4691      	mov	r9, r2
 8006a7e:	d000      	beq.n	8006a82 <__aeabi_dmul+0x28a>
 8006a80:	e0e0      	b.n	8006c44 <__aeabi_dmul+0x44c>
 8006a82:	469b      	mov	fp, r3
 8006a84:	2302      	movs	r3, #2
 8006a86:	4690      	mov	r8, r2
 8006a88:	2508      	movs	r5, #8
 8006a8a:	9301      	str	r3, [sp, #4]
 8006a8c:	e6db      	b.n	8006846 <__aeabi_dmul+0x4e>
 8006a8e:	9a00      	ldr	r2, [sp, #0]
 8006a90:	4698      	mov	r8, r3
 8006a92:	4692      	mov	sl, r2
 8006a94:	4681      	mov	r9, r0
 8006a96:	9601      	str	r6, [sp, #4]
 8006a98:	9b01      	ldr	r3, [sp, #4]
 8006a9a:	2b02      	cmp	r3, #2
 8006a9c:	d100      	bne.n	8006aa0 <__aeabi_dmul+0x2a8>
 8006a9e:	e10d      	b.n	8006cbc <__aeabi_dmul+0x4c4>
 8006aa0:	2b03      	cmp	r3, #3
 8006aa2:	d035      	beq.n	8006b10 <__aeabi_dmul+0x318>
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	d11b      	bne.n	8006ae0 <__aeabi_dmul+0x2e8>
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	2300      	movs	r3, #0
 8006aac:	2400      	movs	r4, #0
 8006aae:	0512      	lsls	r2, r2, #20
 8006ab0:	431a      	orrs	r2, r3
 8006ab2:	4653      	mov	r3, sl
 8006ab4:	07db      	lsls	r3, r3, #31
 8006ab6:	431a      	orrs	r2, r3
 8006ab8:	0020      	movs	r0, r4
 8006aba:	0011      	movs	r1, r2
 8006abc:	b005      	add	sp, #20
 8006abe:	bcf0      	pop	{r4, r5, r6, r7}
 8006ac0:	46bb      	mov	fp, r7
 8006ac2:	46b2      	mov	sl, r6
 8006ac4:	46a9      	mov	r9, r5
 8006ac6:	46a0      	mov	r8, r4
 8006ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006aca:	2201      	movs	r2, #1
 8006acc:	0873      	lsrs	r3, r6, #1
 8006ace:	4032      	ands	r2, r6
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	4642      	mov	r2, r8
 8006ad4:	07d2      	lsls	r2, r2, #31
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	4699      	mov	r9, r3
 8006ada:	4643      	mov	r3, r8
 8006adc:	085b      	lsrs	r3, r3, #1
 8006ade:	4698      	mov	r8, r3
 8006ae0:	2280      	movs	r2, #128	@ 0x80
 8006ae2:	465b      	mov	r3, fp
 8006ae4:	00d2      	lsls	r2, r2, #3
 8006ae6:	445a      	add	r2, fp
 8006ae8:	3301      	adds	r3, #1
 8006aea:	2a00      	cmp	r2, #0
 8006aec:	dc00      	bgt.n	8006af0 <__aeabi_dmul+0x2f8>
 8006aee:	e0b6      	b.n	8006c5e <__aeabi_dmul+0x466>
 8006af0:	4649      	mov	r1, r9
 8006af2:	0749      	lsls	r1, r1, #29
 8006af4:	d0a8      	beq.n	8006a48 <__aeabi_dmul+0x250>
 8006af6:	210f      	movs	r1, #15
 8006af8:	4648      	mov	r0, r9
 8006afa:	4001      	ands	r1, r0
 8006afc:	2904      	cmp	r1, #4
 8006afe:	d19c      	bne.n	8006a3a <__aeabi_dmul+0x242>
 8006b00:	e7a2      	b.n	8006a48 <__aeabi_dmul+0x250>
 8006b02:	2d0f      	cmp	r5, #15
 8006b04:	d100      	bne.n	8006b08 <__aeabi_dmul+0x310>
 8006b06:	e0fd      	b.n	8006d04 <__aeabi_dmul+0x50c>
 8006b08:	9b00      	ldr	r3, [sp, #0]
 8006b0a:	46a0      	mov	r8, r4
 8006b0c:	469a      	mov	sl, r3
 8006b0e:	46b1      	mov	r9, r6
 8006b10:	2380      	movs	r3, #128	@ 0x80
 8006b12:	4642      	mov	r2, r8
 8006b14:	031b      	lsls	r3, r3, #12
 8006b16:	4313      	orrs	r3, r2
 8006b18:	031b      	lsls	r3, r3, #12
 8006b1a:	464c      	mov	r4, r9
 8006b1c:	4a0c      	ldr	r2, [pc, #48]	@ (8006b50 <__aeabi_dmul+0x358>)
 8006b1e:	0b1b      	lsrs	r3, r3, #12
 8006b20:	e7c5      	b.n	8006aae <__aeabi_dmul+0x2b6>
 8006b22:	490b      	ldr	r1, [pc, #44]	@ (8006b50 <__aeabi_dmul+0x358>)
 8006b24:	0033      	movs	r3, r6
 8006b26:	468c      	mov	ip, r1
 8006b28:	4323      	orrs	r3, r4
 8006b2a:	44e3      	add	fp, ip
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d177      	bne.n	8006c20 <__aeabi_dmul+0x428>
 8006b30:	2102      	movs	r1, #2
 8006b32:	4329      	orrs	r1, r5
 8006b34:	290a      	cmp	r1, #10
 8006b36:	dcaf      	bgt.n	8006a98 <__aeabi_dmul+0x2a0>
 8006b38:	4650      	mov	r0, sl
 8006b3a:	9c00      	ldr	r4, [sp, #0]
 8006b3c:	4060      	eors	r0, r4
 8006b3e:	4682      	mov	sl, r0
 8006b40:	2d00      	cmp	r5, #0
 8006b42:	d100      	bne.n	8006b46 <__aeabi_dmul+0x34e>
 8006b44:	e10e      	b.n	8006d64 <__aeabi_dmul+0x56c>
 8006b46:	000d      	movs	r5, r1
 8006b48:	2000      	movs	r0, #0
 8006b4a:	2602      	movs	r6, #2
 8006b4c:	e69d      	b.n	800688a <__aeabi_dmul+0x92>
 8006b4e:	46c0      	nop			@ (mov r8, r8)
 8006b50:	000007ff 	.word	0x000007ff
 8006b54:	fffffc01 	.word	0xfffffc01
 8006b58:	000003ff 	.word	0x000003ff
 8006b5c:	feffffff 	.word	0xfeffffff
 8006b60:	000007fe 	.word	0x000007fe
 8006b64:	0023      	movs	r3, r4
 8006b66:	4333      	orrs	r3, r6
 8006b68:	d04b      	beq.n	8006c02 <__aeabi_dmul+0x40a>
 8006b6a:	2c00      	cmp	r4, #0
 8006b6c:	d100      	bne.n	8006b70 <__aeabi_dmul+0x378>
 8006b6e:	e0bb      	b.n	8006ce8 <__aeabi_dmul+0x4f0>
 8006b70:	0020      	movs	r0, r4
 8006b72:	f7f9 fc6b 	bl	800044c <__clzsi2>
 8006b76:	0003      	movs	r3, r0
 8006b78:	0002      	movs	r2, r0
 8006b7a:	3b0b      	subs	r3, #11
 8006b7c:	201d      	movs	r0, #29
 8006b7e:	1ac3      	subs	r3, r0, r3
 8006b80:	0030      	movs	r0, r6
 8006b82:	40d8      	lsrs	r0, r3
 8006b84:	0011      	movs	r1, r2
 8006b86:	0003      	movs	r3, r0
 8006b88:	0030      	movs	r0, r6
 8006b8a:	3908      	subs	r1, #8
 8006b8c:	408c      	lsls	r4, r1
 8006b8e:	4088      	lsls	r0, r1
 8006b90:	4323      	orrs	r3, r4
 8006b92:	4659      	mov	r1, fp
 8006b94:	1a8a      	subs	r2, r1, r2
 8006b96:	4978      	ldr	r1, [pc, #480]	@ (8006d78 <__aeabi_dmul+0x580>)
 8006b98:	468b      	mov	fp, r1
 8006b9a:	4493      	add	fp, r2
 8006b9c:	2d0a      	cmp	r5, #10
 8006b9e:	dc00      	bgt.n	8006ba2 <__aeabi_dmul+0x3aa>
 8006ba0:	e66c      	b.n	800687c <__aeabi_dmul+0x84>
 8006ba2:	e779      	b.n	8006a98 <__aeabi_dmul+0x2a0>
 8006ba4:	4643      	mov	r3, r8
 8006ba6:	4303      	orrs	r3, r0
 8006ba8:	4699      	mov	r9, r3
 8006baa:	d023      	beq.n	8006bf4 <__aeabi_dmul+0x3fc>
 8006bac:	4643      	mov	r3, r8
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d100      	bne.n	8006bb4 <__aeabi_dmul+0x3bc>
 8006bb2:	e087      	b.n	8006cc4 <__aeabi_dmul+0x4cc>
 8006bb4:	4640      	mov	r0, r8
 8006bb6:	f7f9 fc49 	bl	800044c <__clzsi2>
 8006bba:	230b      	movs	r3, #11
 8006bbc:	425b      	negs	r3, r3
 8006bbe:	469c      	mov	ip, r3
 8006bc0:	0002      	movs	r2, r0
 8006bc2:	4484      	add	ip, r0
 8006bc4:	0011      	movs	r1, r2
 8006bc6:	4640      	mov	r0, r8
 8006bc8:	3908      	subs	r1, #8
 8006bca:	4088      	lsls	r0, r1
 8006bcc:	231d      	movs	r3, #29
 8006bce:	4680      	mov	r8, r0
 8006bd0:	4660      	mov	r0, ip
 8006bd2:	1a1b      	subs	r3, r3, r0
 8006bd4:	0020      	movs	r0, r4
 8006bd6:	40d8      	lsrs	r0, r3
 8006bd8:	0003      	movs	r3, r0
 8006bda:	4640      	mov	r0, r8
 8006bdc:	4303      	orrs	r3, r0
 8006bde:	4698      	mov	r8, r3
 8006be0:	0023      	movs	r3, r4
 8006be2:	408b      	lsls	r3, r1
 8006be4:	4699      	mov	r9, r3
 8006be6:	4b64      	ldr	r3, [pc, #400]	@ (8006d78 <__aeabi_dmul+0x580>)
 8006be8:	2500      	movs	r5, #0
 8006bea:	1a9b      	subs	r3, r3, r2
 8006bec:	469b      	mov	fp, r3
 8006bee:	2300      	movs	r3, #0
 8006bf0:	9301      	str	r3, [sp, #4]
 8006bf2:	e628      	b.n	8006846 <__aeabi_dmul+0x4e>
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	4698      	mov	r8, r3
 8006bf8:	469b      	mov	fp, r3
 8006bfa:	3301      	adds	r3, #1
 8006bfc:	2504      	movs	r5, #4
 8006bfe:	9301      	str	r3, [sp, #4]
 8006c00:	e621      	b.n	8006846 <__aeabi_dmul+0x4e>
 8006c02:	2201      	movs	r2, #1
 8006c04:	4315      	orrs	r5, r2
 8006c06:	2d0a      	cmp	r5, #10
 8006c08:	dd00      	ble.n	8006c0c <__aeabi_dmul+0x414>
 8006c0a:	e745      	b.n	8006a98 <__aeabi_dmul+0x2a0>
 8006c0c:	4652      	mov	r2, sl
 8006c0e:	9900      	ldr	r1, [sp, #0]
 8006c10:	404a      	eors	r2, r1
 8006c12:	4692      	mov	sl, r2
 8006c14:	2d02      	cmp	r5, #2
 8006c16:	dc00      	bgt.n	8006c1a <__aeabi_dmul+0x422>
 8006c18:	e746      	b.n	8006aa8 <__aeabi_dmul+0x2b0>
 8006c1a:	2000      	movs	r0, #0
 8006c1c:	2601      	movs	r6, #1
 8006c1e:	e634      	b.n	800688a <__aeabi_dmul+0x92>
 8006c20:	2303      	movs	r3, #3
 8006c22:	431d      	orrs	r5, r3
 8006c24:	2d0a      	cmp	r5, #10
 8006c26:	dd00      	ble.n	8006c2a <__aeabi_dmul+0x432>
 8006c28:	e76b      	b.n	8006b02 <__aeabi_dmul+0x30a>
 8006c2a:	4653      	mov	r3, sl
 8006c2c:	9a00      	ldr	r2, [sp, #0]
 8006c2e:	2188      	movs	r1, #136	@ 0x88
 8006c30:	4053      	eors	r3, r2
 8006c32:	2201      	movs	r2, #1
 8006c34:	40aa      	lsls	r2, r5
 8006c36:	469a      	mov	sl, r3
 8006c38:	2603      	movs	r6, #3
 8006c3a:	0023      	movs	r3, r4
 8006c3c:	4211      	tst	r1, r2
 8006c3e:	d100      	bne.n	8006c42 <__aeabi_dmul+0x44a>
 8006c40:	e635      	b.n	80068ae <__aeabi_dmul+0xb6>
 8006c42:	e724      	b.n	8006a8e <__aeabi_dmul+0x296>
 8006c44:	469b      	mov	fp, r3
 8006c46:	2303      	movs	r3, #3
 8006c48:	4681      	mov	r9, r0
 8006c4a:	250c      	movs	r5, #12
 8006c4c:	9301      	str	r3, [sp, #4]
 8006c4e:	e5fa      	b.n	8006846 <__aeabi_dmul+0x4e>
 8006c50:	2300      	movs	r3, #0
 8006c52:	469a      	mov	sl, r3
 8006c54:	2380      	movs	r3, #128	@ 0x80
 8006c56:	4a49      	ldr	r2, [pc, #292]	@ (8006d7c <__aeabi_dmul+0x584>)
 8006c58:	031b      	lsls	r3, r3, #12
 8006c5a:	e728      	b.n	8006aae <__aeabi_dmul+0x2b6>
 8006c5c:	465b      	mov	r3, fp
 8006c5e:	2101      	movs	r1, #1
 8006c60:	1a89      	subs	r1, r1, r2
 8006c62:	2938      	cmp	r1, #56	@ 0x38
 8006c64:	dd00      	ble.n	8006c68 <__aeabi_dmul+0x470>
 8006c66:	e71f      	b.n	8006aa8 <__aeabi_dmul+0x2b0>
 8006c68:	291f      	cmp	r1, #31
 8006c6a:	dd5a      	ble.n	8006d22 <__aeabi_dmul+0x52a>
 8006c6c:	201f      	movs	r0, #31
 8006c6e:	4240      	negs	r0, r0
 8006c70:	1a82      	subs	r2, r0, r2
 8006c72:	4640      	mov	r0, r8
 8006c74:	40d0      	lsrs	r0, r2
 8006c76:	2920      	cmp	r1, #32
 8006c78:	d008      	beq.n	8006c8c <__aeabi_dmul+0x494>
 8006c7a:	4a41      	ldr	r2, [pc, #260]	@ (8006d80 <__aeabi_dmul+0x588>)
 8006c7c:	4694      	mov	ip, r2
 8006c7e:	4642      	mov	r2, r8
 8006c80:	4463      	add	r3, ip
 8006c82:	409a      	lsls	r2, r3
 8006c84:	0013      	movs	r3, r2
 8006c86:	464a      	mov	r2, r9
 8006c88:	431a      	orrs	r2, r3
 8006c8a:	4691      	mov	r9, r2
 8006c8c:	464a      	mov	r2, r9
 8006c8e:	2107      	movs	r1, #7
 8006c90:	1e53      	subs	r3, r2, #1
 8006c92:	419a      	sbcs	r2, r3
 8006c94:	000c      	movs	r4, r1
 8006c96:	4302      	orrs	r2, r0
 8006c98:	2300      	movs	r3, #0
 8006c9a:	4014      	ands	r4, r2
 8006c9c:	4211      	tst	r1, r2
 8006c9e:	d009      	beq.n	8006cb4 <__aeabi_dmul+0x4bc>
 8006ca0:	3108      	adds	r1, #8
 8006ca2:	4011      	ands	r1, r2
 8006ca4:	2904      	cmp	r1, #4
 8006ca6:	d060      	beq.n	8006d6a <__aeabi_dmul+0x572>
 8006ca8:	1d11      	adds	r1, r2, #4
 8006caa:	4291      	cmp	r1, r2
 8006cac:	41a4      	sbcs	r4, r4
 8006cae:	000a      	movs	r2, r1
 8006cb0:	4264      	negs	r4, r4
 8006cb2:	0764      	lsls	r4, r4, #29
 8006cb4:	08d2      	lsrs	r2, r2, #3
 8006cb6:	4314      	orrs	r4, r2
 8006cb8:	2200      	movs	r2, #0
 8006cba:	e6f8      	b.n	8006aae <__aeabi_dmul+0x2b6>
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	2400      	movs	r4, #0
 8006cc0:	4a2e      	ldr	r2, [pc, #184]	@ (8006d7c <__aeabi_dmul+0x584>)
 8006cc2:	e6f4      	b.n	8006aae <__aeabi_dmul+0x2b6>
 8006cc4:	f7f9 fbc2 	bl	800044c <__clzsi2>
 8006cc8:	2315      	movs	r3, #21
 8006cca:	469c      	mov	ip, r3
 8006ccc:	4484      	add	ip, r0
 8006cce:	0002      	movs	r2, r0
 8006cd0:	4663      	mov	r3, ip
 8006cd2:	3220      	adds	r2, #32
 8006cd4:	2b1c      	cmp	r3, #28
 8006cd6:	dc00      	bgt.n	8006cda <__aeabi_dmul+0x4e2>
 8006cd8:	e774      	b.n	8006bc4 <__aeabi_dmul+0x3cc>
 8006cda:	2300      	movs	r3, #0
 8006cdc:	4699      	mov	r9, r3
 8006cde:	0023      	movs	r3, r4
 8006ce0:	3808      	subs	r0, #8
 8006ce2:	4083      	lsls	r3, r0
 8006ce4:	4698      	mov	r8, r3
 8006ce6:	e77e      	b.n	8006be6 <__aeabi_dmul+0x3ee>
 8006ce8:	f7f9 fbb0 	bl	800044c <__clzsi2>
 8006cec:	0003      	movs	r3, r0
 8006cee:	0002      	movs	r2, r0
 8006cf0:	3315      	adds	r3, #21
 8006cf2:	3220      	adds	r2, #32
 8006cf4:	2b1c      	cmp	r3, #28
 8006cf6:	dc00      	bgt.n	8006cfa <__aeabi_dmul+0x502>
 8006cf8:	e740      	b.n	8006b7c <__aeabi_dmul+0x384>
 8006cfa:	0033      	movs	r3, r6
 8006cfc:	3808      	subs	r0, #8
 8006cfe:	4083      	lsls	r3, r0
 8006d00:	2000      	movs	r0, #0
 8006d02:	e746      	b.n	8006b92 <__aeabi_dmul+0x39a>
 8006d04:	2380      	movs	r3, #128	@ 0x80
 8006d06:	4642      	mov	r2, r8
 8006d08:	031b      	lsls	r3, r3, #12
 8006d0a:	421a      	tst	r2, r3
 8006d0c:	d100      	bne.n	8006d10 <__aeabi_dmul+0x518>
 8006d0e:	e6ff      	b.n	8006b10 <__aeabi_dmul+0x318>
 8006d10:	421c      	tst	r4, r3
 8006d12:	d000      	beq.n	8006d16 <__aeabi_dmul+0x51e>
 8006d14:	e6fc      	b.n	8006b10 <__aeabi_dmul+0x318>
 8006d16:	9a00      	ldr	r2, [sp, #0]
 8006d18:	4323      	orrs	r3, r4
 8006d1a:	4692      	mov	sl, r2
 8006d1c:	0034      	movs	r4, r6
 8006d1e:	4a17      	ldr	r2, [pc, #92]	@ (8006d7c <__aeabi_dmul+0x584>)
 8006d20:	e6c5      	b.n	8006aae <__aeabi_dmul+0x2b6>
 8006d22:	4a18      	ldr	r2, [pc, #96]	@ (8006d84 <__aeabi_dmul+0x58c>)
 8006d24:	4640      	mov	r0, r8
 8006d26:	4694      	mov	ip, r2
 8006d28:	464a      	mov	r2, r9
 8006d2a:	4463      	add	r3, ip
 8006d2c:	4098      	lsls	r0, r3
 8006d2e:	40ca      	lsrs	r2, r1
 8006d30:	4310      	orrs	r0, r2
 8006d32:	464a      	mov	r2, r9
 8006d34:	409a      	lsls	r2, r3
 8006d36:	1e53      	subs	r3, r2, #1
 8006d38:	419a      	sbcs	r2, r3
 8006d3a:	4643      	mov	r3, r8
 8006d3c:	4302      	orrs	r2, r0
 8006d3e:	40cb      	lsrs	r3, r1
 8006d40:	0751      	lsls	r1, r2, #29
 8006d42:	d009      	beq.n	8006d58 <__aeabi_dmul+0x560>
 8006d44:	210f      	movs	r1, #15
 8006d46:	4011      	ands	r1, r2
 8006d48:	2904      	cmp	r1, #4
 8006d4a:	d005      	beq.n	8006d58 <__aeabi_dmul+0x560>
 8006d4c:	1d11      	adds	r1, r2, #4
 8006d4e:	4291      	cmp	r1, r2
 8006d50:	4192      	sbcs	r2, r2
 8006d52:	4252      	negs	r2, r2
 8006d54:	189b      	adds	r3, r3, r2
 8006d56:	000a      	movs	r2, r1
 8006d58:	0219      	lsls	r1, r3, #8
 8006d5a:	d508      	bpl.n	8006d6e <__aeabi_dmul+0x576>
 8006d5c:	2201      	movs	r2, #1
 8006d5e:	2300      	movs	r3, #0
 8006d60:	2400      	movs	r4, #0
 8006d62:	e6a4      	b.n	8006aae <__aeabi_dmul+0x2b6>
 8006d64:	2300      	movs	r3, #0
 8006d66:	2400      	movs	r4, #0
 8006d68:	e6a1      	b.n	8006aae <__aeabi_dmul+0x2b6>
 8006d6a:	2400      	movs	r4, #0
 8006d6c:	e7a2      	b.n	8006cb4 <__aeabi_dmul+0x4bc>
 8006d6e:	075c      	lsls	r4, r3, #29
 8006d70:	025b      	lsls	r3, r3, #9
 8006d72:	0b1b      	lsrs	r3, r3, #12
 8006d74:	e79e      	b.n	8006cb4 <__aeabi_dmul+0x4bc>
 8006d76:	46c0      	nop			@ (mov r8, r8)
 8006d78:	fffffc0d 	.word	0xfffffc0d
 8006d7c:	000007ff 	.word	0x000007ff
 8006d80:	0000043e 	.word	0x0000043e
 8006d84:	0000041e 	.word	0x0000041e

08006d88 <__aeabi_dsub>:
 8006d88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d8a:	464e      	mov	r6, r9
 8006d8c:	4645      	mov	r5, r8
 8006d8e:	46de      	mov	lr, fp
 8006d90:	4657      	mov	r7, sl
 8006d92:	b5e0      	push	{r5, r6, r7, lr}
 8006d94:	b083      	sub	sp, #12
 8006d96:	9000      	str	r0, [sp, #0]
 8006d98:	9101      	str	r1, [sp, #4]
 8006d9a:	030d      	lsls	r5, r1, #12
 8006d9c:	004e      	lsls	r6, r1, #1
 8006d9e:	9901      	ldr	r1, [sp, #4]
 8006da0:	0d76      	lsrs	r6, r6, #21
 8006da2:	0fcc      	lsrs	r4, r1, #31
 8006da4:	0a69      	lsrs	r1, r5, #9
 8006da6:	9d00      	ldr	r5, [sp, #0]
 8006da8:	0f6d      	lsrs	r5, r5, #29
 8006daa:	430d      	orrs	r5, r1
 8006dac:	9900      	ldr	r1, [sp, #0]
 8006dae:	9200      	str	r2, [sp, #0]
 8006db0:	9301      	str	r3, [sp, #4]
 8006db2:	00c8      	lsls	r0, r1, #3
 8006db4:	0319      	lsls	r1, r3, #12
 8006db6:	9b01      	ldr	r3, [sp, #4]
 8006db8:	4acb      	ldr	r2, [pc, #812]	@ (80070e8 <__aeabi_dsub+0x360>)
 8006dba:	005b      	lsls	r3, r3, #1
 8006dbc:	0d5b      	lsrs	r3, r3, #21
 8006dbe:	4699      	mov	r9, r3
 8006dc0:	9b01      	ldr	r3, [sp, #4]
 8006dc2:	4683      	mov	fp, r0
 8006dc4:	0fdb      	lsrs	r3, r3, #31
 8006dc6:	4698      	mov	r8, r3
 8006dc8:	0a4b      	lsrs	r3, r1, #9
 8006dca:	9900      	ldr	r1, [sp, #0]
 8006dcc:	0f49      	lsrs	r1, r1, #29
 8006dce:	4319      	orrs	r1, r3
 8006dd0:	9b00      	ldr	r3, [sp, #0]
 8006dd2:	00db      	lsls	r3, r3, #3
 8006dd4:	469c      	mov	ip, r3
 8006dd6:	469a      	mov	sl, r3
 8006dd8:	4591      	cmp	r9, r2
 8006dda:	d100      	bne.n	8006dde <__aeabi_dsub+0x56>
 8006ddc:	e073      	b.n	8006ec6 <__aeabi_dsub+0x13e>
 8006dde:	2301      	movs	r3, #1
 8006de0:	4647      	mov	r7, r8
 8006de2:	405f      	eors	r7, r3
 8006de4:	464b      	mov	r3, r9
 8006de6:	46b8      	mov	r8, r7
 8006de8:	1af3      	subs	r3, r6, r3
 8006dea:	42bc      	cmp	r4, r7
 8006dec:	d016      	beq.n	8006e1c <__aeabi_dsub+0x94>
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	dc00      	bgt.n	8006df4 <__aeabi_dsub+0x6c>
 8006df2:	e29a      	b.n	800732a <__aeabi_dsub+0x5a2>
 8006df4:	464f      	mov	r7, r9
 8006df6:	2f00      	cmp	r7, #0
 8006df8:	d000      	beq.n	8006dfc <__aeabi_dsub+0x74>
 8006dfa:	e082      	b.n	8006f02 <__aeabi_dsub+0x17a>
 8006dfc:	4667      	mov	r7, ip
 8006dfe:	430f      	orrs	r7, r1
 8006e00:	d100      	bne.n	8006e04 <__aeabi_dsub+0x7c>
 8006e02:	e13a      	b.n	800707a <__aeabi_dsub+0x2f2>
 8006e04:	1e5f      	subs	r7, r3, #1
 8006e06:	2b01      	cmp	r3, #1
 8006e08:	d100      	bne.n	8006e0c <__aeabi_dsub+0x84>
 8006e0a:	e2a4      	b.n	8007356 <__aeabi_dsub+0x5ce>
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d100      	bne.n	8006e12 <__aeabi_dsub+0x8a>
 8006e10:	e12e      	b.n	8007070 <__aeabi_dsub+0x2e8>
 8006e12:	2f38      	cmp	r7, #56	@ 0x38
 8006e14:	dd00      	ble.n	8006e18 <__aeabi_dsub+0x90>
 8006e16:	e243      	b.n	80072a0 <__aeabi_dsub+0x518>
 8006e18:	003b      	movs	r3, r7
 8006e1a:	e13e      	b.n	800709a <__aeabi_dsub+0x312>
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	dc00      	bgt.n	8006e22 <__aeabi_dsub+0x9a>
 8006e20:	e2d7      	b.n	80073d2 <__aeabi_dsub+0x64a>
 8006e22:	464f      	mov	r7, r9
 8006e24:	2f00      	cmp	r7, #0
 8006e26:	d000      	beq.n	8006e2a <__aeabi_dsub+0xa2>
 8006e28:	e0f8      	b.n	800701c <__aeabi_dsub+0x294>
 8006e2a:	4667      	mov	r7, ip
 8006e2c:	430f      	orrs	r7, r1
 8006e2e:	d100      	bne.n	8006e32 <__aeabi_dsub+0xaa>
 8006e30:	e123      	b.n	800707a <__aeabi_dsub+0x2f2>
 8006e32:	1e5f      	subs	r7, r3, #1
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	d100      	bne.n	8006e3a <__aeabi_dsub+0xb2>
 8006e38:	e257      	b.n	80072ea <__aeabi_dsub+0x562>
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d100      	bne.n	8006e40 <__aeabi_dsub+0xb8>
 8006e3e:	e117      	b.n	8007070 <__aeabi_dsub+0x2e8>
 8006e40:	2f38      	cmp	r7, #56	@ 0x38
 8006e42:	dc00      	bgt.n	8006e46 <__aeabi_dsub+0xbe>
 8006e44:	e304      	b.n	8007450 <__aeabi_dsub+0x6c8>
 8006e46:	2280      	movs	r2, #128	@ 0x80
 8006e48:	0412      	lsls	r2, r2, #16
 8006e4a:	4215      	tst	r5, r2
 8006e4c:	d100      	bne.n	8006e50 <__aeabi_dsub+0xc8>
 8006e4e:	e3aa      	b.n	80075a6 <__aeabi_dsub+0x81e>
 8006e50:	001e      	movs	r6, r3
 8006e52:	0015      	movs	r5, r2
 8006e54:	2700      	movs	r7, #0
 8006e56:	4ba4      	ldr	r3, [pc, #656]	@ (80070e8 <__aeabi_dsub+0x360>)
 8006e58:	3601      	adds	r6, #1
 8006e5a:	429e      	cmp	r6, r3
 8006e5c:	d100      	bne.n	8006e60 <__aeabi_dsub+0xd8>
 8006e5e:	e103      	b.n	8007068 <__aeabi_dsub+0x2e0>
 8006e60:	2201      	movs	r2, #1
 8006e62:	4ba2      	ldr	r3, [pc, #648]	@ (80070ec <__aeabi_dsub+0x364>)
 8006e64:	403a      	ands	r2, r7
 8006e66:	401d      	ands	r5, r3
 8006e68:	0879      	lsrs	r1, r7, #1
 8006e6a:	4311      	orrs	r1, r2
 8006e6c:	07ea      	lsls	r2, r5, #31
 8006e6e:	430a      	orrs	r2, r1
 8006e70:	086d      	lsrs	r5, r5, #1
 8006e72:	0753      	lsls	r3, r2, #29
 8006e74:	d009      	beq.n	8006e8a <__aeabi_dsub+0x102>
 8006e76:	230f      	movs	r3, #15
 8006e78:	4013      	ands	r3, r2
 8006e7a:	2b04      	cmp	r3, #4
 8006e7c:	d005      	beq.n	8006e8a <__aeabi_dsub+0x102>
 8006e7e:	0017      	movs	r7, r2
 8006e80:	1d3a      	adds	r2, r7, #4
 8006e82:	42ba      	cmp	r2, r7
 8006e84:	41bf      	sbcs	r7, r7
 8006e86:	427f      	negs	r7, r7
 8006e88:	19ed      	adds	r5, r5, r7
 8006e8a:	022b      	lsls	r3, r5, #8
 8006e8c:	d400      	bmi.n	8006e90 <__aeabi_dsub+0x108>
 8006e8e:	e377      	b.n	8007580 <__aeabi_dsub+0x7f8>
 8006e90:	4995      	ldr	r1, [pc, #596]	@ (80070e8 <__aeabi_dsub+0x360>)
 8006e92:	3601      	adds	r6, #1
 8006e94:	428e      	cmp	r6, r1
 8006e96:	d100      	bne.n	8006e9a <__aeabi_dsub+0x112>
 8006e98:	e0e6      	b.n	8007068 <__aeabi_dsub+0x2e0>
 8006e9a:	4994      	ldr	r1, [pc, #592]	@ (80070ec <__aeabi_dsub+0x364>)
 8006e9c:	0573      	lsls	r3, r6, #21
 8006e9e:	400d      	ands	r5, r1
 8006ea0:	0d5b      	lsrs	r3, r3, #21
 8006ea2:	0769      	lsls	r1, r5, #29
 8006ea4:	08d2      	lsrs	r2, r2, #3
 8006ea6:	026d      	lsls	r5, r5, #9
 8006ea8:	430a      	orrs	r2, r1
 8006eaa:	0b2d      	lsrs	r5, r5, #12
 8006eac:	051b      	lsls	r3, r3, #20
 8006eae:	432b      	orrs	r3, r5
 8006eb0:	07e4      	lsls	r4, r4, #31
 8006eb2:	4323      	orrs	r3, r4
 8006eb4:	0010      	movs	r0, r2
 8006eb6:	0019      	movs	r1, r3
 8006eb8:	b003      	add	sp, #12
 8006eba:	bcf0      	pop	{r4, r5, r6, r7}
 8006ebc:	46bb      	mov	fp, r7
 8006ebe:	46b2      	mov	sl, r6
 8006ec0:	46a9      	mov	r9, r5
 8006ec2:	46a0      	mov	r8, r4
 8006ec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ec6:	4b8a      	ldr	r3, [pc, #552]	@ (80070f0 <__aeabi_dsub+0x368>)
 8006ec8:	18f2      	adds	r2, r6, r3
 8006eca:	4663      	mov	r3, ip
 8006ecc:	430b      	orrs	r3, r1
 8006ece:	d04c      	beq.n	8006f6a <__aeabi_dsub+0x1e2>
 8006ed0:	4544      	cmp	r4, r8
 8006ed2:	d050      	beq.n	8006f76 <__aeabi_dsub+0x1ee>
 8006ed4:	2a00      	cmp	r2, #0
 8006ed6:	d06c      	beq.n	8006fb2 <__aeabi_dsub+0x22a>
 8006ed8:	2e00      	cmp	r6, #0
 8006eda:	d100      	bne.n	8006ede <__aeabi_dsub+0x156>
 8006edc:	e17d      	b.n	80071da <__aeabi_dsub+0x452>
 8006ede:	4663      	mov	r3, ip
 8006ee0:	4644      	mov	r4, r8
 8006ee2:	074f      	lsls	r7, r1, #29
 8006ee4:	08da      	lsrs	r2, r3, #3
 8006ee6:	4317      	orrs	r7, r2
 8006ee8:	08c8      	lsrs	r0, r1, #3
 8006eea:	003a      	movs	r2, r7
 8006eec:	4302      	orrs	r2, r0
 8006eee:	d100      	bne.n	8006ef2 <__aeabi_dsub+0x16a>
 8006ef0:	e0cd      	b.n	800708e <__aeabi_dsub+0x306>
 8006ef2:	2580      	movs	r5, #128	@ 0x80
 8006ef4:	032d      	lsls	r5, r5, #12
 8006ef6:	4305      	orrs	r5, r0
 8006ef8:	032d      	lsls	r5, r5, #12
 8006efa:	003a      	movs	r2, r7
 8006efc:	4b7a      	ldr	r3, [pc, #488]	@ (80070e8 <__aeabi_dsub+0x360>)
 8006efe:	0b2d      	lsrs	r5, r5, #12
 8006f00:	e7d4      	b.n	8006eac <__aeabi_dsub+0x124>
 8006f02:	4296      	cmp	r6, r2
 8006f04:	d100      	bne.n	8006f08 <__aeabi_dsub+0x180>
 8006f06:	e0b3      	b.n	8007070 <__aeabi_dsub+0x2e8>
 8006f08:	2b38      	cmp	r3, #56	@ 0x38
 8006f0a:	dc00      	bgt.n	8006f0e <__aeabi_dsub+0x186>
 8006f0c:	e0c2      	b.n	8007094 <__aeabi_dsub+0x30c>
 8006f0e:	1e47      	subs	r7, r0, #1
 8006f10:	42b8      	cmp	r0, r7
 8006f12:	4180      	sbcs	r0, r0
 8006f14:	4240      	negs	r0, r0
 8006f16:	1a2d      	subs	r5, r5, r0
 8006f18:	022b      	lsls	r3, r5, #8
 8006f1a:	d5b1      	bpl.n	8006e80 <__aeabi_dsub+0xf8>
 8006f1c:	2701      	movs	r7, #1
 8006f1e:	4d75      	ldr	r5, [pc, #468]	@ (80070f4 <__aeabi_dsub+0x36c>)
 8006f20:	427f      	negs	r7, r7
 8006f22:	0028      	movs	r0, r5
 8006f24:	f7f9 fa92 	bl	800044c <__clzsi2>
 8006f28:	3808      	subs	r0, #8
 8006f2a:	2320      	movs	r3, #32
 8006f2c:	0039      	movs	r1, r7
 8006f2e:	1a1a      	subs	r2, r3, r0
 8006f30:	4085      	lsls	r5, r0
 8006f32:	40d1      	lsrs	r1, r2
 8006f34:	4087      	lsls	r7, r0
 8006f36:	4329      	orrs	r1, r5
 8006f38:	42b0      	cmp	r0, r6
 8006f3a:	da00      	bge.n	8006f3e <__aeabi_dsub+0x1b6>
 8006f3c:	e145      	b.n	80071ca <__aeabi_dsub+0x442>
 8006f3e:	1b80      	subs	r0, r0, r6
 8006f40:	3001      	adds	r0, #1
 8006f42:	1a1b      	subs	r3, r3, r0
 8006f44:	003d      	movs	r5, r7
 8006f46:	409f      	lsls	r7, r3
 8006f48:	40c5      	lsrs	r5, r0
 8006f4a:	1e7a      	subs	r2, r7, #1
 8006f4c:	4197      	sbcs	r7, r2
 8006f4e:	000a      	movs	r2, r1
 8006f50:	409a      	lsls	r2, r3
 8006f52:	432f      	orrs	r7, r5
 8006f54:	433a      	orrs	r2, r7
 8006f56:	40c1      	lsrs	r1, r0
 8006f58:	0013      	movs	r3, r2
 8006f5a:	000d      	movs	r5, r1
 8006f5c:	2600      	movs	r6, #0
 8006f5e:	430b      	orrs	r3, r1
 8006f60:	d000      	beq.n	8006f64 <__aeabi_dsub+0x1dc>
 8006f62:	e786      	b.n	8006e72 <__aeabi_dsub+0xea>
 8006f64:	2200      	movs	r2, #0
 8006f66:	2500      	movs	r5, #0
 8006f68:	e7a0      	b.n	8006eac <__aeabi_dsub+0x124>
 8006f6a:	4647      	mov	r7, r8
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	405f      	eors	r7, r3
 8006f70:	46b8      	mov	r8, r7
 8006f72:	4544      	cmp	r4, r8
 8006f74:	d1ae      	bne.n	8006ed4 <__aeabi_dsub+0x14c>
 8006f76:	2a00      	cmp	r2, #0
 8006f78:	d100      	bne.n	8006f7c <__aeabi_dsub+0x1f4>
 8006f7a:	e0ef      	b.n	800715c <__aeabi_dsub+0x3d4>
 8006f7c:	2e00      	cmp	r6, #0
 8006f7e:	d000      	beq.n	8006f82 <__aeabi_dsub+0x1fa>
 8006f80:	e188      	b.n	8007294 <__aeabi_dsub+0x50c>
 8006f82:	464b      	mov	r3, r9
 8006f84:	002a      	movs	r2, r5
 8006f86:	4302      	orrs	r2, r0
 8006f88:	d100      	bne.n	8006f8c <__aeabi_dsub+0x204>
 8006f8a:	e2a0      	b.n	80074ce <__aeabi_dsub+0x746>
 8006f8c:	1e5a      	subs	r2, r3, #1
 8006f8e:	2b01      	cmp	r3, #1
 8006f90:	d100      	bne.n	8006f94 <__aeabi_dsub+0x20c>
 8006f92:	e2b7      	b.n	8007504 <__aeabi_dsub+0x77c>
 8006f94:	4e54      	ldr	r6, [pc, #336]	@ (80070e8 <__aeabi_dsub+0x360>)
 8006f96:	42b3      	cmp	r3, r6
 8006f98:	d100      	bne.n	8006f9c <__aeabi_dsub+0x214>
 8006f9a:	e17b      	b.n	8007294 <__aeabi_dsub+0x50c>
 8006f9c:	2a38      	cmp	r2, #56	@ 0x38
 8006f9e:	dc00      	bgt.n	8006fa2 <__aeabi_dsub+0x21a>
 8006fa0:	e312      	b.n	80075c8 <__aeabi_dsub+0x840>
 8006fa2:	2580      	movs	r5, #128	@ 0x80
 8006fa4:	042d      	lsls	r5, r5, #16
 8006fa6:	4229      	tst	r1, r5
 8006fa8:	d100      	bne.n	8006fac <__aeabi_dsub+0x224>
 8006faa:	e312      	b.n	80075d2 <__aeabi_dsub+0x84a>
 8006fac:	001e      	movs	r6, r3
 8006fae:	2700      	movs	r7, #0
 8006fb0:	e751      	b.n	8006e56 <__aeabi_dsub+0xce>
 8006fb2:	4a51      	ldr	r2, [pc, #324]	@ (80070f8 <__aeabi_dsub+0x370>)
 8006fb4:	1c73      	adds	r3, r6, #1
 8006fb6:	4213      	tst	r3, r2
 8006fb8:	d000      	beq.n	8006fbc <__aeabi_dsub+0x234>
 8006fba:	e0f4      	b.n	80071a6 <__aeabi_dsub+0x41e>
 8006fbc:	4662      	mov	r2, ip
 8006fbe:	002b      	movs	r3, r5
 8006fc0:	430a      	orrs	r2, r1
 8006fc2:	4303      	orrs	r3, r0
 8006fc4:	2e00      	cmp	r6, #0
 8006fc6:	d000      	beq.n	8006fca <__aeabi_dsub+0x242>
 8006fc8:	e174      	b.n	80072b4 <__aeabi_dsub+0x52c>
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d100      	bne.n	8006fd0 <__aeabi_dsub+0x248>
 8006fce:	e223      	b.n	8007418 <__aeabi_dsub+0x690>
 8006fd0:	2a00      	cmp	r2, #0
 8006fd2:	d100      	bne.n	8006fd6 <__aeabi_dsub+0x24e>
 8006fd4:	e0e0      	b.n	8007198 <__aeabi_dsub+0x410>
 8006fd6:	4663      	mov	r3, ip
 8006fd8:	1ac7      	subs	r7, r0, r3
 8006fda:	42b8      	cmp	r0, r7
 8006fdc:	4192      	sbcs	r2, r2
 8006fde:	2680      	movs	r6, #128	@ 0x80
 8006fe0:	1a6b      	subs	r3, r5, r1
 8006fe2:	4252      	negs	r2, r2
 8006fe4:	1a9b      	subs	r3, r3, r2
 8006fe6:	0436      	lsls	r6, r6, #16
 8006fe8:	4233      	tst	r3, r6
 8006fea:	d100      	bne.n	8006fee <__aeabi_dsub+0x266>
 8006fec:	e2c1      	b.n	8007572 <__aeabi_dsub+0x7ea>
 8006fee:	4663      	mov	r3, ip
 8006ff0:	1a18      	subs	r0, r3, r0
 8006ff2:	4584      	cmp	ip, r0
 8006ff4:	4192      	sbcs	r2, r2
 8006ff6:	1b4d      	subs	r5, r1, r5
 8006ff8:	4252      	negs	r2, r2
 8006ffa:	1aad      	subs	r5, r5, r2
 8006ffc:	2401      	movs	r4, #1
 8006ffe:	0002      	movs	r2, r0
 8007000:	4643      	mov	r3, r8
 8007002:	432a      	orrs	r2, r5
 8007004:	401c      	ands	r4, r3
 8007006:	2a00      	cmp	r2, #0
 8007008:	d100      	bne.n	800700c <__aeabi_dsub+0x284>
 800700a:	e0db      	b.n	80071c4 <__aeabi_dsub+0x43c>
 800700c:	4235      	tst	r5, r6
 800700e:	d100      	bne.n	8007012 <__aeabi_dsub+0x28a>
 8007010:	e2e9      	b.n	80075e6 <__aeabi_dsub+0x85e>
 8007012:	4b36      	ldr	r3, [pc, #216]	@ (80070ec <__aeabi_dsub+0x364>)
 8007014:	0002      	movs	r2, r0
 8007016:	401d      	ands	r5, r3
 8007018:	2301      	movs	r3, #1
 800701a:	e742      	b.n	8006ea2 <__aeabi_dsub+0x11a>
 800701c:	4296      	cmp	r6, r2
 800701e:	d027      	beq.n	8007070 <__aeabi_dsub+0x2e8>
 8007020:	2b38      	cmp	r3, #56	@ 0x38
 8007022:	dd00      	ble.n	8007026 <__aeabi_dsub+0x29e>
 8007024:	e111      	b.n	800724a <__aeabi_dsub+0x4c2>
 8007026:	2280      	movs	r2, #128	@ 0x80
 8007028:	0412      	lsls	r2, r2, #16
 800702a:	4311      	orrs	r1, r2
 800702c:	2b1f      	cmp	r3, #31
 800702e:	dd00      	ble.n	8007032 <__aeabi_dsub+0x2aa>
 8007030:	e1a1      	b.n	8007376 <__aeabi_dsub+0x5ee>
 8007032:	2220      	movs	r2, #32
 8007034:	000f      	movs	r7, r1
 8007036:	1ad2      	subs	r2, r2, r3
 8007038:	4691      	mov	r9, r2
 800703a:	4097      	lsls	r7, r2
 800703c:	4662      	mov	r2, ip
 800703e:	40da      	lsrs	r2, r3
 8007040:	4317      	orrs	r7, r2
 8007042:	46b8      	mov	r8, r7
 8007044:	4662      	mov	r2, ip
 8007046:	464f      	mov	r7, r9
 8007048:	40ba      	lsls	r2, r7
 800704a:	40d9      	lsrs	r1, r3
 800704c:	1e57      	subs	r7, r2, #1
 800704e:	41ba      	sbcs	r2, r7
 8007050:	4647      	mov	r7, r8
 8007052:	186d      	adds	r5, r5, r1
 8007054:	4317      	orrs	r7, r2
 8007056:	183f      	adds	r7, r7, r0
 8007058:	4287      	cmp	r7, r0
 800705a:	4180      	sbcs	r0, r0
 800705c:	4240      	negs	r0, r0
 800705e:	182d      	adds	r5, r5, r0
 8007060:	022b      	lsls	r3, r5, #8
 8007062:	d500      	bpl.n	8007066 <__aeabi_dsub+0x2de>
 8007064:	e6f7      	b.n	8006e56 <__aeabi_dsub+0xce>
 8007066:	e034      	b.n	80070d2 <__aeabi_dsub+0x34a>
 8007068:	0033      	movs	r3, r6
 800706a:	2500      	movs	r5, #0
 800706c:	2200      	movs	r2, #0
 800706e:	e71d      	b.n	8006eac <__aeabi_dsub+0x124>
 8007070:	08c0      	lsrs	r0, r0, #3
 8007072:	076f      	lsls	r7, r5, #29
 8007074:	4307      	orrs	r7, r0
 8007076:	08e8      	lsrs	r0, r5, #3
 8007078:	e737      	b.n	8006eea <__aeabi_dsub+0x162>
 800707a:	08c7      	lsrs	r7, r0, #3
 800707c:	076a      	lsls	r2, r5, #29
 800707e:	4317      	orrs	r7, r2
 8007080:	4a19      	ldr	r2, [pc, #100]	@ (80070e8 <__aeabi_dsub+0x360>)
 8007082:	08e8      	lsrs	r0, r5, #3
 8007084:	4293      	cmp	r3, r2
 8007086:	d100      	bne.n	800708a <__aeabi_dsub+0x302>
 8007088:	e72f      	b.n	8006eea <__aeabi_dsub+0x162>
 800708a:	003a      	movs	r2, r7
 800708c:	e0d8      	b.n	8007240 <__aeabi_dsub+0x4b8>
 800708e:	4b16      	ldr	r3, [pc, #88]	@ (80070e8 <__aeabi_dsub+0x360>)
 8007090:	2500      	movs	r5, #0
 8007092:	e70b      	b.n	8006eac <__aeabi_dsub+0x124>
 8007094:	2280      	movs	r2, #128	@ 0x80
 8007096:	0412      	lsls	r2, r2, #16
 8007098:	4311      	orrs	r1, r2
 800709a:	2b1f      	cmp	r3, #31
 800709c:	dd00      	ble.n	80070a0 <__aeabi_dsub+0x318>
 800709e:	e0b7      	b.n	8007210 <__aeabi_dsub+0x488>
 80070a0:	2220      	movs	r2, #32
 80070a2:	000f      	movs	r7, r1
 80070a4:	1ad2      	subs	r2, r2, r3
 80070a6:	4691      	mov	r9, r2
 80070a8:	4097      	lsls	r7, r2
 80070aa:	4662      	mov	r2, ip
 80070ac:	40da      	lsrs	r2, r3
 80070ae:	4317      	orrs	r7, r2
 80070b0:	46b8      	mov	r8, r7
 80070b2:	4662      	mov	r2, ip
 80070b4:	464f      	mov	r7, r9
 80070b6:	40ba      	lsls	r2, r7
 80070b8:	40d9      	lsrs	r1, r3
 80070ba:	1e57      	subs	r7, r2, #1
 80070bc:	41ba      	sbcs	r2, r7
 80070be:	4647      	mov	r7, r8
 80070c0:	1a6d      	subs	r5, r5, r1
 80070c2:	4317      	orrs	r7, r2
 80070c4:	1bc7      	subs	r7, r0, r7
 80070c6:	42b8      	cmp	r0, r7
 80070c8:	4180      	sbcs	r0, r0
 80070ca:	4240      	negs	r0, r0
 80070cc:	1a2d      	subs	r5, r5, r0
 80070ce:	022b      	lsls	r3, r5, #8
 80070d0:	d416      	bmi.n	8007100 <__aeabi_dsub+0x378>
 80070d2:	077b      	lsls	r3, r7, #29
 80070d4:	d100      	bne.n	80070d8 <__aeabi_dsub+0x350>
 80070d6:	e279      	b.n	80075cc <__aeabi_dsub+0x844>
 80070d8:	230f      	movs	r3, #15
 80070da:	403b      	ands	r3, r7
 80070dc:	2b04      	cmp	r3, #4
 80070de:	d000      	beq.n	80070e2 <__aeabi_dsub+0x35a>
 80070e0:	e6ce      	b.n	8006e80 <__aeabi_dsub+0xf8>
 80070e2:	0033      	movs	r3, r6
 80070e4:	08ff      	lsrs	r7, r7, #3
 80070e6:	e7c9      	b.n	800707c <__aeabi_dsub+0x2f4>
 80070e8:	000007ff 	.word	0x000007ff
 80070ec:	ff7fffff 	.word	0xff7fffff
 80070f0:	fffff801 	.word	0xfffff801
 80070f4:	007fffff 	.word	0x007fffff
 80070f8:	000007fe 	.word	0x000007fe
 80070fc:	4644      	mov	r4, r8
 80070fe:	2601      	movs	r6, #1
 8007100:	026d      	lsls	r5, r5, #9
 8007102:	0a6d      	lsrs	r5, r5, #9
 8007104:	2d00      	cmp	r5, #0
 8007106:	d000      	beq.n	800710a <__aeabi_dsub+0x382>
 8007108:	e70b      	b.n	8006f22 <__aeabi_dsub+0x19a>
 800710a:	0038      	movs	r0, r7
 800710c:	f7f9 f99e 	bl	800044c <__clzsi2>
 8007110:	0003      	movs	r3, r0
 8007112:	3018      	adds	r0, #24
 8007114:	281f      	cmp	r0, #31
 8007116:	dc00      	bgt.n	800711a <__aeabi_dsub+0x392>
 8007118:	e707      	b.n	8006f2a <__aeabi_dsub+0x1a2>
 800711a:	0039      	movs	r1, r7
 800711c:	3b08      	subs	r3, #8
 800711e:	4099      	lsls	r1, r3
 8007120:	4286      	cmp	r6, r0
 8007122:	dd00      	ble.n	8007126 <__aeabi_dsub+0x39e>
 8007124:	e087      	b.n	8007236 <__aeabi_dsub+0x4ae>
 8007126:	1b83      	subs	r3, r0, r6
 8007128:	1c58      	adds	r0, r3, #1
 800712a:	281f      	cmp	r0, #31
 800712c:	dc00      	bgt.n	8007130 <__aeabi_dsub+0x3a8>
 800712e:	e214      	b.n	800755a <__aeabi_dsub+0x7d2>
 8007130:	000a      	movs	r2, r1
 8007132:	3b1f      	subs	r3, #31
 8007134:	40da      	lsrs	r2, r3
 8007136:	2820      	cmp	r0, #32
 8007138:	d005      	beq.n	8007146 <__aeabi_dsub+0x3be>
 800713a:	2340      	movs	r3, #64	@ 0x40
 800713c:	1a1b      	subs	r3, r3, r0
 800713e:	4099      	lsls	r1, r3
 8007140:	1e4b      	subs	r3, r1, #1
 8007142:	4199      	sbcs	r1, r3
 8007144:	430a      	orrs	r2, r1
 8007146:	2a00      	cmp	r2, #0
 8007148:	d03c      	beq.n	80071c4 <__aeabi_dsub+0x43c>
 800714a:	2600      	movs	r6, #0
 800714c:	0753      	lsls	r3, r2, #29
 800714e:	d000      	beq.n	8007152 <__aeabi_dsub+0x3ca>
 8007150:	e691      	b.n	8006e76 <__aeabi_dsub+0xee>
 8007152:	0017      	movs	r7, r2
 8007154:	0035      	movs	r5, r6
 8007156:	0033      	movs	r3, r6
 8007158:	08ff      	lsrs	r7, r7, #3
 800715a:	e78f      	b.n	800707c <__aeabi_dsub+0x2f4>
 800715c:	4aca      	ldr	r2, [pc, #808]	@ (8007488 <__aeabi_dsub+0x700>)
 800715e:	1c73      	adds	r3, r6, #1
 8007160:	4213      	tst	r3, r2
 8007162:	d17a      	bne.n	800725a <__aeabi_dsub+0x4d2>
 8007164:	002b      	movs	r3, r5
 8007166:	4303      	orrs	r3, r0
 8007168:	2e00      	cmp	r6, #0
 800716a:	d000      	beq.n	800716e <__aeabi_dsub+0x3e6>
 800716c:	e192      	b.n	8007494 <__aeabi_dsub+0x70c>
 800716e:	4662      	mov	r2, ip
 8007170:	430a      	orrs	r2, r1
 8007172:	2b00      	cmp	r3, #0
 8007174:	d100      	bne.n	8007178 <__aeabi_dsub+0x3f0>
 8007176:	e1f4      	b.n	8007562 <__aeabi_dsub+0x7da>
 8007178:	2a00      	cmp	r2, #0
 800717a:	d00d      	beq.n	8007198 <__aeabi_dsub+0x410>
 800717c:	4663      	mov	r3, ip
 800717e:	18c7      	adds	r7, r0, r3
 8007180:	4287      	cmp	r7, r0
 8007182:	4180      	sbcs	r0, r0
 8007184:	186d      	adds	r5, r5, r1
 8007186:	4240      	negs	r0, r0
 8007188:	182d      	adds	r5, r5, r0
 800718a:	022b      	lsls	r3, r5, #8
 800718c:	d500      	bpl.n	8007190 <__aeabi_dsub+0x408>
 800718e:	e212      	b.n	80075b6 <__aeabi_dsub+0x82e>
 8007190:	003a      	movs	r2, r7
 8007192:	46bb      	mov	fp, r7
 8007194:	432a      	orrs	r2, r5
 8007196:	d015      	beq.n	80071c4 <__aeabi_dsub+0x43c>
 8007198:	465b      	mov	r3, fp
 800719a:	076a      	lsls	r2, r5, #29
 800719c:	08df      	lsrs	r7, r3, #3
 800719e:	433a      	orrs	r2, r7
 80071a0:	2300      	movs	r3, #0
 80071a2:	08e8      	lsrs	r0, r5, #3
 80071a4:	e04c      	b.n	8007240 <__aeabi_dsub+0x4b8>
 80071a6:	4663      	mov	r3, ip
 80071a8:	1ac7      	subs	r7, r0, r3
 80071aa:	42b8      	cmp	r0, r7
 80071ac:	4192      	sbcs	r2, r2
 80071ae:	1a6b      	subs	r3, r5, r1
 80071b0:	4252      	negs	r2, r2
 80071b2:	1a9b      	subs	r3, r3, r2
 80071b4:	021a      	lsls	r2, r3, #8
 80071b6:	d500      	bpl.n	80071ba <__aeabi_dsub+0x432>
 80071b8:	e087      	b.n	80072ca <__aeabi_dsub+0x542>
 80071ba:	003a      	movs	r2, r7
 80071bc:	001d      	movs	r5, r3
 80071be:	431a      	orrs	r2, r3
 80071c0:	d1a0      	bne.n	8007104 <__aeabi_dsub+0x37c>
 80071c2:	2400      	movs	r4, #0
 80071c4:	2300      	movs	r3, #0
 80071c6:	2500      	movs	r5, #0
 80071c8:	e670      	b.n	8006eac <__aeabi_dsub+0x124>
 80071ca:	4db0      	ldr	r5, [pc, #704]	@ (800748c <__aeabi_dsub+0x704>)
 80071cc:	1a36      	subs	r6, r6, r0
 80071ce:	400d      	ands	r5, r1
 80071d0:	077b      	lsls	r3, r7, #29
 80071d2:	d000      	beq.n	80071d6 <__aeabi_dsub+0x44e>
 80071d4:	e780      	b.n	80070d8 <__aeabi_dsub+0x350>
 80071d6:	0033      	movs	r3, r6
 80071d8:	e784      	b.n	80070e4 <__aeabi_dsub+0x35c>
 80071da:	464b      	mov	r3, r9
 80071dc:	002a      	movs	r2, r5
 80071de:	4302      	orrs	r2, r0
 80071e0:	d07e      	beq.n	80072e0 <__aeabi_dsub+0x558>
 80071e2:	1e5a      	subs	r2, r3, #1
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	d100      	bne.n	80071ea <__aeabi_dsub+0x462>
 80071e8:	e11f      	b.n	800742a <__aeabi_dsub+0x6a2>
 80071ea:	4ca9      	ldr	r4, [pc, #676]	@ (8007490 <__aeabi_dsub+0x708>)
 80071ec:	42a3      	cmp	r3, r4
 80071ee:	d100      	bne.n	80071f2 <__aeabi_dsub+0x46a>
 80071f0:	e198      	b.n	8007524 <__aeabi_dsub+0x79c>
 80071f2:	2a38      	cmp	r2, #56	@ 0x38
 80071f4:	dc00      	bgt.n	80071f8 <__aeabi_dsub+0x470>
 80071f6:	e19c      	b.n	8007532 <__aeabi_dsub+0x7aa>
 80071f8:	4662      	mov	r2, ip
 80071fa:	1e57      	subs	r7, r2, #1
 80071fc:	45bc      	cmp	ip, r7
 80071fe:	4192      	sbcs	r2, r2
 8007200:	4252      	negs	r2, r2
 8007202:	1a8d      	subs	r5, r1, r2
 8007204:	4644      	mov	r4, r8
 8007206:	001e      	movs	r6, r3
 8007208:	022a      	lsls	r2, r5, #8
 800720a:	d500      	bpl.n	800720e <__aeabi_dsub+0x486>
 800720c:	e686      	b.n	8006f1c <__aeabi_dsub+0x194>
 800720e:	e637      	b.n	8006e80 <__aeabi_dsub+0xf8>
 8007210:	001a      	movs	r2, r3
 8007212:	000f      	movs	r7, r1
 8007214:	3a20      	subs	r2, #32
 8007216:	40d7      	lsrs	r7, r2
 8007218:	46b8      	mov	r8, r7
 800721a:	2b20      	cmp	r3, #32
 800721c:	d005      	beq.n	800722a <__aeabi_dsub+0x4a2>
 800721e:	2240      	movs	r2, #64	@ 0x40
 8007220:	1ad3      	subs	r3, r2, r3
 8007222:	4099      	lsls	r1, r3
 8007224:	4663      	mov	r3, ip
 8007226:	430b      	orrs	r3, r1
 8007228:	469a      	mov	sl, r3
 800722a:	4657      	mov	r7, sl
 800722c:	1e7b      	subs	r3, r7, #1
 800722e:	419f      	sbcs	r7, r3
 8007230:	4643      	mov	r3, r8
 8007232:	431f      	orrs	r7, r3
 8007234:	e746      	b.n	80070c4 <__aeabi_dsub+0x33c>
 8007236:	4a95      	ldr	r2, [pc, #596]	@ (800748c <__aeabi_dsub+0x704>)
 8007238:	1a33      	subs	r3, r6, r0
 800723a:	4011      	ands	r1, r2
 800723c:	074a      	lsls	r2, r1, #29
 800723e:	08c8      	lsrs	r0, r1, #3
 8007240:	0305      	lsls	r5, r0, #12
 8007242:	055b      	lsls	r3, r3, #21
 8007244:	0b2d      	lsrs	r5, r5, #12
 8007246:	0d5b      	lsrs	r3, r3, #21
 8007248:	e630      	b.n	8006eac <__aeabi_dsub+0x124>
 800724a:	2380      	movs	r3, #128	@ 0x80
 800724c:	041b      	lsls	r3, r3, #16
 800724e:	421d      	tst	r5, r3
 8007250:	d100      	bne.n	8007254 <__aeabi_dsub+0x4cc>
 8007252:	e0fb      	b.n	800744c <__aeabi_dsub+0x6c4>
 8007254:	001d      	movs	r5, r3
 8007256:	2700      	movs	r7, #0
 8007258:	e5fd      	b.n	8006e56 <__aeabi_dsub+0xce>
 800725a:	4a8d      	ldr	r2, [pc, #564]	@ (8007490 <__aeabi_dsub+0x708>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d100      	bne.n	8007262 <__aeabi_dsub+0x4da>
 8007260:	e703      	b.n	800706a <__aeabi_dsub+0x2e2>
 8007262:	4662      	mov	r2, ip
 8007264:	1882      	adds	r2, r0, r2
 8007266:	4282      	cmp	r2, r0
 8007268:	4180      	sbcs	r0, r0
 800726a:	1869      	adds	r1, r5, r1
 800726c:	4240      	negs	r0, r0
 800726e:	1808      	adds	r0, r1, r0
 8007270:	07c7      	lsls	r7, r0, #31
 8007272:	0852      	lsrs	r2, r2, #1
 8007274:	4317      	orrs	r7, r2
 8007276:	0845      	lsrs	r5, r0, #1
 8007278:	0752      	lsls	r2, r2, #29
 800727a:	d400      	bmi.n	800727e <__aeabi_dsub+0x4f6>
 800727c:	e1ae      	b.n	80075dc <__aeabi_dsub+0x854>
 800727e:	220f      	movs	r2, #15
 8007280:	001e      	movs	r6, r3
 8007282:	403a      	ands	r2, r7
 8007284:	2a04      	cmp	r2, #4
 8007286:	d000      	beq.n	800728a <__aeabi_dsub+0x502>
 8007288:	e5fa      	b.n	8006e80 <__aeabi_dsub+0xf8>
 800728a:	08ff      	lsrs	r7, r7, #3
 800728c:	076a      	lsls	r2, r5, #29
 800728e:	433a      	orrs	r2, r7
 8007290:	0900      	lsrs	r0, r0, #4
 8007292:	e7d5      	b.n	8007240 <__aeabi_dsub+0x4b8>
 8007294:	4663      	mov	r3, ip
 8007296:	074f      	lsls	r7, r1, #29
 8007298:	08da      	lsrs	r2, r3, #3
 800729a:	4317      	orrs	r7, r2
 800729c:	08c8      	lsrs	r0, r1, #3
 800729e:	e624      	b.n	8006eea <__aeabi_dsub+0x162>
 80072a0:	1e47      	subs	r7, r0, #1
 80072a2:	42b8      	cmp	r0, r7
 80072a4:	4180      	sbcs	r0, r0
 80072a6:	4240      	negs	r0, r0
 80072a8:	1a2d      	subs	r5, r5, r0
 80072aa:	001e      	movs	r6, r3
 80072ac:	022a      	lsls	r2, r5, #8
 80072ae:	d500      	bpl.n	80072b2 <__aeabi_dsub+0x52a>
 80072b0:	e634      	b.n	8006f1c <__aeabi_dsub+0x194>
 80072b2:	e5e5      	b.n	8006e80 <__aeabi_dsub+0xf8>
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d000      	beq.n	80072ba <__aeabi_dsub+0x532>
 80072b8:	e10d      	b.n	80074d6 <__aeabi_dsub+0x74e>
 80072ba:	2a00      	cmp	r2, #0
 80072bc:	d000      	beq.n	80072c0 <__aeabi_dsub+0x538>
 80072be:	e169      	b.n	8007594 <__aeabi_dsub+0x80c>
 80072c0:	2580      	movs	r5, #128	@ 0x80
 80072c2:	2400      	movs	r4, #0
 80072c4:	4b72      	ldr	r3, [pc, #456]	@ (8007490 <__aeabi_dsub+0x708>)
 80072c6:	032d      	lsls	r5, r5, #12
 80072c8:	e5f0      	b.n	8006eac <__aeabi_dsub+0x124>
 80072ca:	4663      	mov	r3, ip
 80072cc:	1a1f      	subs	r7, r3, r0
 80072ce:	45bc      	cmp	ip, r7
 80072d0:	4192      	sbcs	r2, r2
 80072d2:	2401      	movs	r4, #1
 80072d4:	4643      	mov	r3, r8
 80072d6:	1b4d      	subs	r5, r1, r5
 80072d8:	4252      	negs	r2, r2
 80072da:	1aad      	subs	r5, r5, r2
 80072dc:	401c      	ands	r4, r3
 80072de:	e711      	b.n	8007104 <__aeabi_dsub+0x37c>
 80072e0:	4662      	mov	r2, ip
 80072e2:	4644      	mov	r4, r8
 80072e4:	000d      	movs	r5, r1
 80072e6:	08d7      	lsrs	r7, r2, #3
 80072e8:	e6c8      	b.n	800707c <__aeabi_dsub+0x2f4>
 80072ea:	4663      	mov	r3, ip
 80072ec:	18c6      	adds	r6, r0, r3
 80072ee:	4286      	cmp	r6, r0
 80072f0:	4180      	sbcs	r0, r0
 80072f2:	1869      	adds	r1, r5, r1
 80072f4:	4240      	negs	r0, r0
 80072f6:	1809      	adds	r1, r1, r0
 80072f8:	020b      	lsls	r3, r1, #8
 80072fa:	d400      	bmi.n	80072fe <__aeabi_dsub+0x576>
 80072fc:	e10c      	b.n	8007518 <__aeabi_dsub+0x790>
 80072fe:	4b63      	ldr	r3, [pc, #396]	@ (800748c <__aeabi_dsub+0x704>)
 8007300:	0870      	lsrs	r0, r6, #1
 8007302:	4019      	ands	r1, r3
 8007304:	07cb      	lsls	r3, r1, #31
 8007306:	4303      	orrs	r3, r0
 8007308:	084a      	lsrs	r2, r1, #1
 800730a:	0740      	lsls	r0, r0, #29
 800730c:	d400      	bmi.n	8007310 <__aeabi_dsub+0x588>
 800730e:	e13b      	b.n	8007588 <__aeabi_dsub+0x800>
 8007310:	200f      	movs	r0, #15
 8007312:	4018      	ands	r0, r3
 8007314:	2804      	cmp	r0, #4
 8007316:	d100      	bne.n	800731a <__aeabi_dsub+0x592>
 8007318:	e136      	b.n	8007588 <__aeabi_dsub+0x800>
 800731a:	1d1f      	adds	r7, r3, #4
 800731c:	429f      	cmp	r7, r3
 800731e:	41ad      	sbcs	r5, r5
 8007320:	426d      	negs	r5, r5
 8007322:	2302      	movs	r3, #2
 8007324:	18ad      	adds	r5, r5, r2
 8007326:	08ff      	lsrs	r7, r7, #3
 8007328:	e6a8      	b.n	800707c <__aeabi_dsub+0x2f4>
 800732a:	2b00      	cmp	r3, #0
 800732c:	d100      	bne.n	8007330 <__aeabi_dsub+0x5a8>
 800732e:	e640      	b.n	8006fb2 <__aeabi_dsub+0x22a>
 8007330:	464b      	mov	r3, r9
 8007332:	1b9b      	subs	r3, r3, r6
 8007334:	2e00      	cmp	r6, #0
 8007336:	d100      	bne.n	800733a <__aeabi_dsub+0x5b2>
 8007338:	e750      	b.n	80071dc <__aeabi_dsub+0x454>
 800733a:	2b38      	cmp	r3, #56	@ 0x38
 800733c:	dd2e      	ble.n	800739c <__aeabi_dsub+0x614>
 800733e:	4663      	mov	r3, ip
 8007340:	1e5f      	subs	r7, r3, #1
 8007342:	45bc      	cmp	ip, r7
 8007344:	4192      	sbcs	r2, r2
 8007346:	4252      	negs	r2, r2
 8007348:	1a8d      	subs	r5, r1, r2
 800734a:	4644      	mov	r4, r8
 800734c:	464e      	mov	r6, r9
 800734e:	022b      	lsls	r3, r5, #8
 8007350:	d500      	bpl.n	8007354 <__aeabi_dsub+0x5cc>
 8007352:	e5e3      	b.n	8006f1c <__aeabi_dsub+0x194>
 8007354:	e594      	b.n	8006e80 <__aeabi_dsub+0xf8>
 8007356:	4663      	mov	r3, ip
 8007358:	1ac7      	subs	r7, r0, r3
 800735a:	42b8      	cmp	r0, r7
 800735c:	4180      	sbcs	r0, r0
 800735e:	1a6d      	subs	r5, r5, r1
 8007360:	4240      	negs	r0, r0
 8007362:	1a2d      	subs	r5, r5, r0
 8007364:	022b      	lsls	r3, r5, #8
 8007366:	d500      	bpl.n	800736a <__aeabi_dsub+0x5e2>
 8007368:	e6c9      	b.n	80070fe <__aeabi_dsub+0x376>
 800736a:	076a      	lsls	r2, r5, #29
 800736c:	08ff      	lsrs	r7, r7, #3
 800736e:	2301      	movs	r3, #1
 8007370:	433a      	orrs	r2, r7
 8007372:	08e8      	lsrs	r0, r5, #3
 8007374:	e764      	b.n	8007240 <__aeabi_dsub+0x4b8>
 8007376:	001a      	movs	r2, r3
 8007378:	000f      	movs	r7, r1
 800737a:	3a20      	subs	r2, #32
 800737c:	40d7      	lsrs	r7, r2
 800737e:	46b8      	mov	r8, r7
 8007380:	2b20      	cmp	r3, #32
 8007382:	d005      	beq.n	8007390 <__aeabi_dsub+0x608>
 8007384:	2240      	movs	r2, #64	@ 0x40
 8007386:	1ad3      	subs	r3, r2, r3
 8007388:	4099      	lsls	r1, r3
 800738a:	4663      	mov	r3, ip
 800738c:	430b      	orrs	r3, r1
 800738e:	469a      	mov	sl, r3
 8007390:	4657      	mov	r7, sl
 8007392:	1e7b      	subs	r3, r7, #1
 8007394:	419f      	sbcs	r7, r3
 8007396:	4643      	mov	r3, r8
 8007398:	431f      	orrs	r7, r3
 800739a:	e65c      	b.n	8007056 <__aeabi_dsub+0x2ce>
 800739c:	2280      	movs	r2, #128	@ 0x80
 800739e:	003c      	movs	r4, r7
 80073a0:	0412      	lsls	r2, r2, #16
 80073a2:	4315      	orrs	r5, r2
 80073a4:	2b1f      	cmp	r3, #31
 80073a6:	dc26      	bgt.n	80073f6 <__aeabi_dsub+0x66e>
 80073a8:	2220      	movs	r2, #32
 80073aa:	002f      	movs	r7, r5
 80073ac:	1ad2      	subs	r2, r2, r3
 80073ae:	0006      	movs	r6, r0
 80073b0:	4090      	lsls	r0, r2
 80073b2:	4097      	lsls	r7, r2
 80073b4:	40de      	lsrs	r6, r3
 80073b6:	1e42      	subs	r2, r0, #1
 80073b8:	4190      	sbcs	r0, r2
 80073ba:	40dd      	lsrs	r5, r3
 80073bc:	4337      	orrs	r7, r6
 80073be:	4307      	orrs	r7, r0
 80073c0:	1b49      	subs	r1, r1, r5
 80073c2:	4663      	mov	r3, ip
 80073c4:	1bdf      	subs	r7, r3, r7
 80073c6:	45bc      	cmp	ip, r7
 80073c8:	4192      	sbcs	r2, r2
 80073ca:	4252      	negs	r2, r2
 80073cc:	464e      	mov	r6, r9
 80073ce:	1a8d      	subs	r5, r1, r2
 80073d0:	e67d      	b.n	80070ce <__aeabi_dsub+0x346>
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d100      	bne.n	80073d8 <__aeabi_dsub+0x650>
 80073d6:	e6c1      	b.n	800715c <__aeabi_dsub+0x3d4>
 80073d8:	464b      	mov	r3, r9
 80073da:	1b9b      	subs	r3, r3, r6
 80073dc:	2e00      	cmp	r6, #0
 80073de:	d100      	bne.n	80073e2 <__aeabi_dsub+0x65a>
 80073e0:	e5d0      	b.n	8006f84 <__aeabi_dsub+0x1fc>
 80073e2:	2b38      	cmp	r3, #56	@ 0x38
 80073e4:	dd36      	ble.n	8007454 <__aeabi_dsub+0x6cc>
 80073e6:	2580      	movs	r5, #128	@ 0x80
 80073e8:	042d      	lsls	r5, r5, #16
 80073ea:	4229      	tst	r1, r5
 80073ec:	d100      	bne.n	80073f0 <__aeabi_dsub+0x668>
 80073ee:	e0dd      	b.n	80075ac <__aeabi_dsub+0x824>
 80073f0:	464e      	mov	r6, r9
 80073f2:	2700      	movs	r7, #0
 80073f4:	e52f      	b.n	8006e56 <__aeabi_dsub+0xce>
 80073f6:	001a      	movs	r2, r3
 80073f8:	002e      	movs	r6, r5
 80073fa:	3a20      	subs	r2, #32
 80073fc:	40d6      	lsrs	r6, r2
 80073fe:	2b20      	cmp	r3, #32
 8007400:	d005      	beq.n	800740e <__aeabi_dsub+0x686>
 8007402:	2240      	movs	r2, #64	@ 0x40
 8007404:	1ad3      	subs	r3, r2, r3
 8007406:	409d      	lsls	r5, r3
 8007408:	002f      	movs	r7, r5
 800740a:	4307      	orrs	r7, r0
 800740c:	46bb      	mov	fp, r7
 800740e:	465f      	mov	r7, fp
 8007410:	1e7b      	subs	r3, r7, #1
 8007412:	419f      	sbcs	r7, r3
 8007414:	4337      	orrs	r7, r6
 8007416:	e7d4      	b.n	80073c2 <__aeabi_dsub+0x63a>
 8007418:	2a00      	cmp	r2, #0
 800741a:	d100      	bne.n	800741e <__aeabi_dsub+0x696>
 800741c:	e6d1      	b.n	80071c2 <__aeabi_dsub+0x43a>
 800741e:	2401      	movs	r4, #1
 8007420:	4643      	mov	r3, r8
 8007422:	000d      	movs	r5, r1
 8007424:	46e3      	mov	fp, ip
 8007426:	401c      	ands	r4, r3
 8007428:	e6b6      	b.n	8007198 <__aeabi_dsub+0x410>
 800742a:	4663      	mov	r3, ip
 800742c:	1a1f      	subs	r7, r3, r0
 800742e:	45bc      	cmp	ip, r7
 8007430:	4192      	sbcs	r2, r2
 8007432:	1b4d      	subs	r5, r1, r5
 8007434:	4252      	negs	r2, r2
 8007436:	1aad      	subs	r5, r5, r2
 8007438:	022b      	lsls	r3, r5, #8
 800743a:	d500      	bpl.n	800743e <__aeabi_dsub+0x6b6>
 800743c:	e65e      	b.n	80070fc <__aeabi_dsub+0x374>
 800743e:	076a      	lsls	r2, r5, #29
 8007440:	08ff      	lsrs	r7, r7, #3
 8007442:	4644      	mov	r4, r8
 8007444:	2301      	movs	r3, #1
 8007446:	433a      	orrs	r2, r7
 8007448:	08e8      	lsrs	r0, r5, #3
 800744a:	e6f9      	b.n	8007240 <__aeabi_dsub+0x4b8>
 800744c:	1c47      	adds	r7, r0, #1
 800744e:	e517      	b.n	8006e80 <__aeabi_dsub+0xf8>
 8007450:	003b      	movs	r3, r7
 8007452:	e5eb      	b.n	800702c <__aeabi_dsub+0x2a4>
 8007454:	2280      	movs	r2, #128	@ 0x80
 8007456:	0412      	lsls	r2, r2, #16
 8007458:	4315      	orrs	r5, r2
 800745a:	2b1f      	cmp	r3, #31
 800745c:	dc6c      	bgt.n	8007538 <__aeabi_dsub+0x7b0>
 800745e:	2220      	movs	r2, #32
 8007460:	002f      	movs	r7, r5
 8007462:	1ad2      	subs	r2, r2, r3
 8007464:	0006      	movs	r6, r0
 8007466:	4090      	lsls	r0, r2
 8007468:	4097      	lsls	r7, r2
 800746a:	40de      	lsrs	r6, r3
 800746c:	1e42      	subs	r2, r0, #1
 800746e:	4190      	sbcs	r0, r2
 8007470:	40dd      	lsrs	r5, r3
 8007472:	4337      	orrs	r7, r6
 8007474:	4307      	orrs	r7, r0
 8007476:	1949      	adds	r1, r1, r5
 8007478:	4467      	add	r7, ip
 800747a:	4567      	cmp	r7, ip
 800747c:	4192      	sbcs	r2, r2
 800747e:	4252      	negs	r2, r2
 8007480:	464e      	mov	r6, r9
 8007482:	1855      	adds	r5, r2, r1
 8007484:	e5ec      	b.n	8007060 <__aeabi_dsub+0x2d8>
 8007486:	46c0      	nop			@ (mov r8, r8)
 8007488:	000007fe 	.word	0x000007fe
 800748c:	ff7fffff 	.word	0xff7fffff
 8007490:	000007ff 	.word	0x000007ff
 8007494:	2b00      	cmp	r3, #0
 8007496:	d100      	bne.n	800749a <__aeabi_dsub+0x712>
 8007498:	e6fc      	b.n	8007294 <__aeabi_dsub+0x50c>
 800749a:	08c7      	lsrs	r7, r0, #3
 800749c:	076b      	lsls	r3, r5, #29
 800749e:	431f      	orrs	r7, r3
 80074a0:	4663      	mov	r3, ip
 80074a2:	08e8      	lsrs	r0, r5, #3
 80074a4:	430b      	orrs	r3, r1
 80074a6:	d100      	bne.n	80074aa <__aeabi_dsub+0x722>
 80074a8:	e51f      	b.n	8006eea <__aeabi_dsub+0x162>
 80074aa:	2380      	movs	r3, #128	@ 0x80
 80074ac:	031b      	lsls	r3, r3, #12
 80074ae:	4218      	tst	r0, r3
 80074b0:	d007      	beq.n	80074c2 <__aeabi_dsub+0x73a>
 80074b2:	08ca      	lsrs	r2, r1, #3
 80074b4:	421a      	tst	r2, r3
 80074b6:	d104      	bne.n	80074c2 <__aeabi_dsub+0x73a>
 80074b8:	4663      	mov	r3, ip
 80074ba:	0010      	movs	r0, r2
 80074bc:	08df      	lsrs	r7, r3, #3
 80074be:	0749      	lsls	r1, r1, #29
 80074c0:	430f      	orrs	r7, r1
 80074c2:	0f7b      	lsrs	r3, r7, #29
 80074c4:	00ff      	lsls	r7, r7, #3
 80074c6:	08ff      	lsrs	r7, r7, #3
 80074c8:	075b      	lsls	r3, r3, #29
 80074ca:	431f      	orrs	r7, r3
 80074cc:	e50d      	b.n	8006eea <__aeabi_dsub+0x162>
 80074ce:	4662      	mov	r2, ip
 80074d0:	000d      	movs	r5, r1
 80074d2:	08d7      	lsrs	r7, r2, #3
 80074d4:	e5d2      	b.n	800707c <__aeabi_dsub+0x2f4>
 80074d6:	08c7      	lsrs	r7, r0, #3
 80074d8:	076b      	lsls	r3, r5, #29
 80074da:	431f      	orrs	r7, r3
 80074dc:	08e8      	lsrs	r0, r5, #3
 80074de:	2a00      	cmp	r2, #0
 80074e0:	d100      	bne.n	80074e4 <__aeabi_dsub+0x75c>
 80074e2:	e502      	b.n	8006eea <__aeabi_dsub+0x162>
 80074e4:	2380      	movs	r3, #128	@ 0x80
 80074e6:	031b      	lsls	r3, r3, #12
 80074e8:	4218      	tst	r0, r3
 80074ea:	d0ea      	beq.n	80074c2 <__aeabi_dsub+0x73a>
 80074ec:	08ca      	lsrs	r2, r1, #3
 80074ee:	421a      	tst	r2, r3
 80074f0:	d1e7      	bne.n	80074c2 <__aeabi_dsub+0x73a>
 80074f2:	4663      	mov	r3, ip
 80074f4:	2401      	movs	r4, #1
 80074f6:	08df      	lsrs	r7, r3, #3
 80074f8:	4643      	mov	r3, r8
 80074fa:	0749      	lsls	r1, r1, #29
 80074fc:	0010      	movs	r0, r2
 80074fe:	430f      	orrs	r7, r1
 8007500:	401c      	ands	r4, r3
 8007502:	e7de      	b.n	80074c2 <__aeabi_dsub+0x73a>
 8007504:	4460      	add	r0, ip
 8007506:	4560      	cmp	r0, ip
 8007508:	4192      	sbcs	r2, r2
 800750a:	1869      	adds	r1, r5, r1
 800750c:	4252      	negs	r2, r2
 800750e:	1889      	adds	r1, r1, r2
 8007510:	0006      	movs	r6, r0
 8007512:	020b      	lsls	r3, r1, #8
 8007514:	d500      	bpl.n	8007518 <__aeabi_dsub+0x790>
 8007516:	e6f2      	b.n	80072fe <__aeabi_dsub+0x576>
 8007518:	074a      	lsls	r2, r1, #29
 800751a:	08f6      	lsrs	r6, r6, #3
 800751c:	2301      	movs	r3, #1
 800751e:	4332      	orrs	r2, r6
 8007520:	08c8      	lsrs	r0, r1, #3
 8007522:	e68d      	b.n	8007240 <__aeabi_dsub+0x4b8>
 8007524:	4663      	mov	r3, ip
 8007526:	08df      	lsrs	r7, r3, #3
 8007528:	074b      	lsls	r3, r1, #29
 800752a:	4644      	mov	r4, r8
 800752c:	431f      	orrs	r7, r3
 800752e:	08c8      	lsrs	r0, r1, #3
 8007530:	e4db      	b.n	8006eea <__aeabi_dsub+0x162>
 8007532:	4644      	mov	r4, r8
 8007534:	0013      	movs	r3, r2
 8007536:	e735      	b.n	80073a4 <__aeabi_dsub+0x61c>
 8007538:	001a      	movs	r2, r3
 800753a:	002e      	movs	r6, r5
 800753c:	3a20      	subs	r2, #32
 800753e:	40d6      	lsrs	r6, r2
 8007540:	2b20      	cmp	r3, #32
 8007542:	d005      	beq.n	8007550 <__aeabi_dsub+0x7c8>
 8007544:	2240      	movs	r2, #64	@ 0x40
 8007546:	1ad3      	subs	r3, r2, r3
 8007548:	409d      	lsls	r5, r3
 800754a:	002f      	movs	r7, r5
 800754c:	4307      	orrs	r7, r0
 800754e:	46bb      	mov	fp, r7
 8007550:	465f      	mov	r7, fp
 8007552:	1e7b      	subs	r3, r7, #1
 8007554:	419f      	sbcs	r7, r3
 8007556:	4337      	orrs	r7, r6
 8007558:	e78e      	b.n	8007478 <__aeabi_dsub+0x6f0>
 800755a:	2320      	movs	r3, #32
 800755c:	2700      	movs	r7, #0
 800755e:	1a1b      	subs	r3, r3, r0
 8007560:	e4f5      	b.n	8006f4e <__aeabi_dsub+0x1c6>
 8007562:	2300      	movs	r3, #0
 8007564:	2a00      	cmp	r2, #0
 8007566:	d100      	bne.n	800756a <__aeabi_dsub+0x7e2>
 8007568:	e592      	b.n	8007090 <__aeabi_dsub+0x308>
 800756a:	4667      	mov	r7, ip
 800756c:	000d      	movs	r5, r1
 800756e:	08ff      	lsrs	r7, r7, #3
 8007570:	e584      	b.n	800707c <__aeabi_dsub+0x2f4>
 8007572:	003a      	movs	r2, r7
 8007574:	431a      	orrs	r2, r3
 8007576:	d100      	bne.n	800757a <__aeabi_dsub+0x7f2>
 8007578:	e623      	b.n	80071c2 <__aeabi_dsub+0x43a>
 800757a:	001d      	movs	r5, r3
 800757c:	46bb      	mov	fp, r7
 800757e:	e60b      	b.n	8007198 <__aeabi_dsub+0x410>
 8007580:	0017      	movs	r7, r2
 8007582:	0033      	movs	r3, r6
 8007584:	08ff      	lsrs	r7, r7, #3
 8007586:	e579      	b.n	800707c <__aeabi_dsub+0x2f4>
 8007588:	08db      	lsrs	r3, r3, #3
 800758a:	0752      	lsls	r2, r2, #29
 800758c:	431a      	orrs	r2, r3
 800758e:	0908      	lsrs	r0, r1, #4
 8007590:	2302      	movs	r3, #2
 8007592:	e655      	b.n	8007240 <__aeabi_dsub+0x4b8>
 8007594:	4663      	mov	r3, ip
 8007596:	2401      	movs	r4, #1
 8007598:	08da      	lsrs	r2, r3, #3
 800759a:	4643      	mov	r3, r8
 800759c:	074f      	lsls	r7, r1, #29
 800759e:	4317      	orrs	r7, r2
 80075a0:	08c8      	lsrs	r0, r1, #3
 80075a2:	401c      	ands	r4, r3
 80075a4:	e4a1      	b.n	8006eea <__aeabi_dsub+0x162>
 80075a6:	001e      	movs	r6, r3
 80075a8:	1c47      	adds	r7, r0, #1
 80075aa:	e469      	b.n	8006e80 <__aeabi_dsub+0xf8>
 80075ac:	4667      	mov	r7, ip
 80075ae:	000d      	movs	r5, r1
 80075b0:	464e      	mov	r6, r9
 80075b2:	3701      	adds	r7, #1
 80075b4:	e464      	b.n	8006e80 <__aeabi_dsub+0xf8>
 80075b6:	4b0f      	ldr	r3, [pc, #60]	@ (80075f4 <__aeabi_dsub+0x86c>)
 80075b8:	08ff      	lsrs	r7, r7, #3
 80075ba:	401d      	ands	r5, r3
 80075bc:	076a      	lsls	r2, r5, #29
 80075be:	026d      	lsls	r5, r5, #9
 80075c0:	2301      	movs	r3, #1
 80075c2:	433a      	orrs	r2, r7
 80075c4:	0b2d      	lsrs	r5, r5, #12
 80075c6:	e471      	b.n	8006eac <__aeabi_dsub+0x124>
 80075c8:	0013      	movs	r3, r2
 80075ca:	e746      	b.n	800745a <__aeabi_dsub+0x6d2>
 80075cc:	0033      	movs	r3, r6
 80075ce:	08ff      	lsrs	r7, r7, #3
 80075d0:	e554      	b.n	800707c <__aeabi_dsub+0x2f4>
 80075d2:	4667      	mov	r7, ip
 80075d4:	000d      	movs	r5, r1
 80075d6:	001e      	movs	r6, r3
 80075d8:	3701      	adds	r7, #1
 80075da:	e451      	b.n	8006e80 <__aeabi_dsub+0xf8>
 80075dc:	076a      	lsls	r2, r5, #29
 80075de:	08ff      	lsrs	r7, r7, #3
 80075e0:	433a      	orrs	r2, r7
 80075e2:	0900      	lsrs	r0, r0, #4
 80075e4:	e62c      	b.n	8007240 <__aeabi_dsub+0x4b8>
 80075e6:	08c0      	lsrs	r0, r0, #3
 80075e8:	076a      	lsls	r2, r5, #29
 80075ea:	4302      	orrs	r2, r0
 80075ec:	2300      	movs	r3, #0
 80075ee:	08e8      	lsrs	r0, r5, #3
 80075f0:	e626      	b.n	8007240 <__aeabi_dsub+0x4b8>
 80075f2:	46c0      	nop			@ (mov r8, r8)
 80075f4:	ff7fffff 	.word	0xff7fffff

080075f8 <__aeabi_dcmpun>:
 80075f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075fa:	46c6      	mov	lr, r8
 80075fc:	031e      	lsls	r6, r3, #12
 80075fe:	0b36      	lsrs	r6, r6, #12
 8007600:	46b0      	mov	r8, r6
 8007602:	4e0d      	ldr	r6, [pc, #52]	@ (8007638 <__aeabi_dcmpun+0x40>)
 8007604:	030c      	lsls	r4, r1, #12
 8007606:	004d      	lsls	r5, r1, #1
 8007608:	005f      	lsls	r7, r3, #1
 800760a:	b500      	push	{lr}
 800760c:	0b24      	lsrs	r4, r4, #12
 800760e:	0d6d      	lsrs	r5, r5, #21
 8007610:	0d7f      	lsrs	r7, r7, #21
 8007612:	42b5      	cmp	r5, r6
 8007614:	d00b      	beq.n	800762e <__aeabi_dcmpun+0x36>
 8007616:	4908      	ldr	r1, [pc, #32]	@ (8007638 <__aeabi_dcmpun+0x40>)
 8007618:	2000      	movs	r0, #0
 800761a:	428f      	cmp	r7, r1
 800761c:	d104      	bne.n	8007628 <__aeabi_dcmpun+0x30>
 800761e:	4646      	mov	r6, r8
 8007620:	4316      	orrs	r6, r2
 8007622:	0030      	movs	r0, r6
 8007624:	1e43      	subs	r3, r0, #1
 8007626:	4198      	sbcs	r0, r3
 8007628:	bc80      	pop	{r7}
 800762a:	46b8      	mov	r8, r7
 800762c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800762e:	4304      	orrs	r4, r0
 8007630:	2001      	movs	r0, #1
 8007632:	2c00      	cmp	r4, #0
 8007634:	d1f8      	bne.n	8007628 <__aeabi_dcmpun+0x30>
 8007636:	e7ee      	b.n	8007616 <__aeabi_dcmpun+0x1e>
 8007638:	000007ff 	.word	0x000007ff

0800763c <__aeabi_d2iz>:
 800763c:	000b      	movs	r3, r1
 800763e:	0002      	movs	r2, r0
 8007640:	b570      	push	{r4, r5, r6, lr}
 8007642:	4d16      	ldr	r5, [pc, #88]	@ (800769c <__aeabi_d2iz+0x60>)
 8007644:	030c      	lsls	r4, r1, #12
 8007646:	b082      	sub	sp, #8
 8007648:	0049      	lsls	r1, r1, #1
 800764a:	2000      	movs	r0, #0
 800764c:	9200      	str	r2, [sp, #0]
 800764e:	9301      	str	r3, [sp, #4]
 8007650:	0b24      	lsrs	r4, r4, #12
 8007652:	0d49      	lsrs	r1, r1, #21
 8007654:	0fde      	lsrs	r6, r3, #31
 8007656:	42a9      	cmp	r1, r5
 8007658:	dd04      	ble.n	8007664 <__aeabi_d2iz+0x28>
 800765a:	4811      	ldr	r0, [pc, #68]	@ (80076a0 <__aeabi_d2iz+0x64>)
 800765c:	4281      	cmp	r1, r0
 800765e:	dd03      	ble.n	8007668 <__aeabi_d2iz+0x2c>
 8007660:	4b10      	ldr	r3, [pc, #64]	@ (80076a4 <__aeabi_d2iz+0x68>)
 8007662:	18f0      	adds	r0, r6, r3
 8007664:	b002      	add	sp, #8
 8007666:	bd70      	pop	{r4, r5, r6, pc}
 8007668:	2080      	movs	r0, #128	@ 0x80
 800766a:	0340      	lsls	r0, r0, #13
 800766c:	4320      	orrs	r0, r4
 800766e:	4c0e      	ldr	r4, [pc, #56]	@ (80076a8 <__aeabi_d2iz+0x6c>)
 8007670:	1a64      	subs	r4, r4, r1
 8007672:	2c1f      	cmp	r4, #31
 8007674:	dd08      	ble.n	8007688 <__aeabi_d2iz+0x4c>
 8007676:	4b0d      	ldr	r3, [pc, #52]	@ (80076ac <__aeabi_d2iz+0x70>)
 8007678:	1a5b      	subs	r3, r3, r1
 800767a:	40d8      	lsrs	r0, r3
 800767c:	0003      	movs	r3, r0
 800767e:	4258      	negs	r0, r3
 8007680:	2e00      	cmp	r6, #0
 8007682:	d1ef      	bne.n	8007664 <__aeabi_d2iz+0x28>
 8007684:	0018      	movs	r0, r3
 8007686:	e7ed      	b.n	8007664 <__aeabi_d2iz+0x28>
 8007688:	4b09      	ldr	r3, [pc, #36]	@ (80076b0 <__aeabi_d2iz+0x74>)
 800768a:	9a00      	ldr	r2, [sp, #0]
 800768c:	469c      	mov	ip, r3
 800768e:	0003      	movs	r3, r0
 8007690:	4461      	add	r1, ip
 8007692:	408b      	lsls	r3, r1
 8007694:	40e2      	lsrs	r2, r4
 8007696:	4313      	orrs	r3, r2
 8007698:	e7f1      	b.n	800767e <__aeabi_d2iz+0x42>
 800769a:	46c0      	nop			@ (mov r8, r8)
 800769c:	000003fe 	.word	0x000003fe
 80076a0:	0000041d 	.word	0x0000041d
 80076a4:	7fffffff 	.word	0x7fffffff
 80076a8:	00000433 	.word	0x00000433
 80076ac:	00000413 	.word	0x00000413
 80076b0:	fffffbed 	.word	0xfffffbed

080076b4 <__aeabi_i2d>:
 80076b4:	b570      	push	{r4, r5, r6, lr}
 80076b6:	2800      	cmp	r0, #0
 80076b8:	d016      	beq.n	80076e8 <__aeabi_i2d+0x34>
 80076ba:	17c3      	asrs	r3, r0, #31
 80076bc:	18c5      	adds	r5, r0, r3
 80076be:	405d      	eors	r5, r3
 80076c0:	0fc4      	lsrs	r4, r0, #31
 80076c2:	0028      	movs	r0, r5
 80076c4:	f7f8 fec2 	bl	800044c <__clzsi2>
 80076c8:	4b10      	ldr	r3, [pc, #64]	@ (800770c <__aeabi_i2d+0x58>)
 80076ca:	1a1b      	subs	r3, r3, r0
 80076cc:	055b      	lsls	r3, r3, #21
 80076ce:	0d5b      	lsrs	r3, r3, #21
 80076d0:	280a      	cmp	r0, #10
 80076d2:	dc14      	bgt.n	80076fe <__aeabi_i2d+0x4a>
 80076d4:	0002      	movs	r2, r0
 80076d6:	002e      	movs	r6, r5
 80076d8:	3215      	adds	r2, #21
 80076da:	4096      	lsls	r6, r2
 80076dc:	220b      	movs	r2, #11
 80076de:	1a12      	subs	r2, r2, r0
 80076e0:	40d5      	lsrs	r5, r2
 80076e2:	032d      	lsls	r5, r5, #12
 80076e4:	0b2d      	lsrs	r5, r5, #12
 80076e6:	e003      	b.n	80076f0 <__aeabi_i2d+0x3c>
 80076e8:	2400      	movs	r4, #0
 80076ea:	2300      	movs	r3, #0
 80076ec:	2500      	movs	r5, #0
 80076ee:	2600      	movs	r6, #0
 80076f0:	051b      	lsls	r3, r3, #20
 80076f2:	432b      	orrs	r3, r5
 80076f4:	07e4      	lsls	r4, r4, #31
 80076f6:	4323      	orrs	r3, r4
 80076f8:	0030      	movs	r0, r6
 80076fa:	0019      	movs	r1, r3
 80076fc:	bd70      	pop	{r4, r5, r6, pc}
 80076fe:	380b      	subs	r0, #11
 8007700:	4085      	lsls	r5, r0
 8007702:	032d      	lsls	r5, r5, #12
 8007704:	2600      	movs	r6, #0
 8007706:	0b2d      	lsrs	r5, r5, #12
 8007708:	e7f2      	b.n	80076f0 <__aeabi_i2d+0x3c>
 800770a:	46c0      	nop			@ (mov r8, r8)
 800770c:	0000041e 	.word	0x0000041e

08007710 <_init>:
 8007710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007712:	46c0      	nop			@ (mov r8, r8)
 8007714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007716:	bc08      	pop	{r3}
 8007718:	469e      	mov	lr, r3
 800771a:	4770      	bx	lr

0800771c <_fini>:
 800771c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800771e:	46c0      	nop			@ (mov r8, r8)
 8007720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007722:	bc08      	pop	{r3}
 8007724:	469e      	mov	lr, r3
 8007726:	4770      	bx	lr
