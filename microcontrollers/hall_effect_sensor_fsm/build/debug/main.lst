ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.arch armv6s-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Core/Src/main.c"
  18              		.section	.text.__NVIC_SystemReset,"ax",%progbits
  19              		.align	1
  20              		.syntax unified
  21              		.code	16
  22              		.thumb_func
  24              	__NVIC_SystemReset:
  25              	.LFB39:
  26              		.file 2 "Drivers/CMSIS/Include/core_cm0plus.h"
   1:Drivers/CMSIS/Include/core_cm0plus.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/core_cm0plus.h ****  * @file     core_cm0plus.h
   3:Drivers/CMSIS/Include/core_cm0plus.h ****  * @brief    CMSIS Cortex-M0+ Core Peripheral Access Layer Header File
   4:Drivers/CMSIS/Include/core_cm0plus.h ****  * @version  V5.0.9
   5:Drivers/CMSIS/Include/core_cm0plus.h ****  * @date     21. August 2019
   6:Drivers/CMSIS/Include/core_cm0plus.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/core_cm0plus.h **** /*
   8:Drivers/CMSIS/Include/core_cm0plus.h ****  * Copyright (c) 2009-2019 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/core_cm0plus.h ****  *
  10:Drivers/CMSIS/Include/core_cm0plus.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/core_cm0plus.h ****  *
  12:Drivers/CMSIS/Include/core_cm0plus.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/core_cm0plus.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/core_cm0plus.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/core_cm0plus.h ****  *
  16:Drivers/CMSIS/Include/core_cm0plus.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/core_cm0plus.h ****  *
  18:Drivers/CMSIS/Include/core_cm0plus.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/core_cm0plus.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/core_cm0plus.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/core_cm0plus.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/core_cm0plus.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/core_cm0plus.h ****  */
  24:Drivers/CMSIS/Include/core_cm0plus.h **** 
  25:Drivers/CMSIS/Include/core_cm0plus.h **** #if   defined ( __ICCARM__ )
  26:Drivers/CMSIS/Include/core_cm0plus.h ****   #pragma system_include         /* treat file as system include file for MISRA check */
  27:Drivers/CMSIS/Include/core_cm0plus.h **** #elif defined (__clang__)
  28:Drivers/CMSIS/Include/core_cm0plus.h ****   #pragma clang system_header   /* treat file as system include file */
  29:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
  30:Drivers/CMSIS/Include/core_cm0plus.h **** 
  31:Drivers/CMSIS/Include/core_cm0plus.h **** #ifndef __CORE_CM0PLUS_H_GENERIC
  32:Drivers/CMSIS/Include/core_cm0plus.h **** #define __CORE_CM0PLUS_H_GENERIC
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s 			page 2


  33:Drivers/CMSIS/Include/core_cm0plus.h **** 
  34:Drivers/CMSIS/Include/core_cm0plus.h **** #include <stdint.h>
  35:Drivers/CMSIS/Include/core_cm0plus.h **** 
  36:Drivers/CMSIS/Include/core_cm0plus.h **** #ifdef __cplusplus
  37:Drivers/CMSIS/Include/core_cm0plus.h ****  extern "C" {
  38:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
  39:Drivers/CMSIS/Include/core_cm0plus.h **** 
  40:Drivers/CMSIS/Include/core_cm0plus.h **** /**
  41:Drivers/CMSIS/Include/core_cm0plus.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  42:Drivers/CMSIS/Include/core_cm0plus.h ****   CMSIS violates the following MISRA-C:2004 rules:
  43:Drivers/CMSIS/Include/core_cm0plus.h **** 
  44:Drivers/CMSIS/Include/core_cm0plus.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  45:Drivers/CMSIS/Include/core_cm0plus.h ****      Function definitions in header files are used to allow 'inlining'.
  46:Drivers/CMSIS/Include/core_cm0plus.h **** 
  47:Drivers/CMSIS/Include/core_cm0plus.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  48:Drivers/CMSIS/Include/core_cm0plus.h ****      Unions are used for effective representation of core registers.
  49:Drivers/CMSIS/Include/core_cm0plus.h **** 
  50:Drivers/CMSIS/Include/core_cm0plus.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  51:Drivers/CMSIS/Include/core_cm0plus.h ****      Function-like macros are used to allow more efficient code.
  52:Drivers/CMSIS/Include/core_cm0plus.h ****  */
  53:Drivers/CMSIS/Include/core_cm0plus.h **** 
  54:Drivers/CMSIS/Include/core_cm0plus.h **** 
  55:Drivers/CMSIS/Include/core_cm0plus.h **** /*******************************************************************************
  56:Drivers/CMSIS/Include/core_cm0plus.h ****  *                 CMSIS definitions
  57:Drivers/CMSIS/Include/core_cm0plus.h ****  ******************************************************************************/
  58:Drivers/CMSIS/Include/core_cm0plus.h **** /**
  59:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup Cortex-M0+
  60:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
  61:Drivers/CMSIS/Include/core_cm0plus.h ****  */
  62:Drivers/CMSIS/Include/core_cm0plus.h **** 
  63:Drivers/CMSIS/Include/core_cm0plus.h **** #include "cmsis_version.h"
  64:Drivers/CMSIS/Include/core_cm0plus.h ****  
  65:Drivers/CMSIS/Include/core_cm0plus.h **** /*  CMSIS CM0+ definitions */
  66:Drivers/CMSIS/Include/core_cm0plus.h **** #define __CM0PLUS_CMSIS_VERSION_MAIN (__CM_CMSIS_VERSION_MAIN)                  /*!< \deprecated [3
  67:Drivers/CMSIS/Include/core_cm0plus.h **** #define __CM0PLUS_CMSIS_VERSION_SUB  (__CM_CMSIS_VERSION_SUB)                   /*!< \deprecated [1
  68:Drivers/CMSIS/Include/core_cm0plus.h **** #define __CM0PLUS_CMSIS_VERSION      ((__CM0PLUS_CMSIS_VERSION_MAIN << 16U) | \
  69:Drivers/CMSIS/Include/core_cm0plus.h ****                                        __CM0PLUS_CMSIS_VERSION_SUB           )  /*!< \deprecated CM
  70:Drivers/CMSIS/Include/core_cm0plus.h **** 
  71:Drivers/CMSIS/Include/core_cm0plus.h **** #define __CORTEX_M                   (0U)                                       /*!< Cortex-M Core 
  72:Drivers/CMSIS/Include/core_cm0plus.h **** 
  73:Drivers/CMSIS/Include/core_cm0plus.h **** /** __FPU_USED indicates whether an FPU is used or not.
  74:Drivers/CMSIS/Include/core_cm0plus.h ****     This core does not support an FPU at all
  75:Drivers/CMSIS/Include/core_cm0plus.h **** */
  76:Drivers/CMSIS/Include/core_cm0plus.h **** #define __FPU_USED       0U
  77:Drivers/CMSIS/Include/core_cm0plus.h **** 
  78:Drivers/CMSIS/Include/core_cm0plus.h **** #if defined ( __CC_ARM )
  79:Drivers/CMSIS/Include/core_cm0plus.h ****   #if defined __TARGET_FPU_VFP
  80:Drivers/CMSIS/Include/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  81:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
  82:Drivers/CMSIS/Include/core_cm0plus.h **** 
  83:Drivers/CMSIS/Include/core_cm0plus.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  84:Drivers/CMSIS/Include/core_cm0plus.h ****   #if defined __ARM_FP
  85:Drivers/CMSIS/Include/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  86:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
  87:Drivers/CMSIS/Include/core_cm0plus.h **** 
  88:Drivers/CMSIS/Include/core_cm0plus.h **** #elif defined ( __GNUC__ )
  89:Drivers/CMSIS/Include/core_cm0plus.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s 			page 3


  90:Drivers/CMSIS/Include/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  91:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
  92:Drivers/CMSIS/Include/core_cm0plus.h **** 
  93:Drivers/CMSIS/Include/core_cm0plus.h **** #elif defined ( __ICCARM__ )
  94:Drivers/CMSIS/Include/core_cm0plus.h ****   #if defined __ARMVFP__
  95:Drivers/CMSIS/Include/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  96:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
  97:Drivers/CMSIS/Include/core_cm0plus.h **** 
  98:Drivers/CMSIS/Include/core_cm0plus.h **** #elif defined ( __TI_ARM__ )
  99:Drivers/CMSIS/Include/core_cm0plus.h ****   #if defined __TI_VFP_SUPPORT__
 100:Drivers/CMSIS/Include/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 101:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 102:Drivers/CMSIS/Include/core_cm0plus.h **** 
 103:Drivers/CMSIS/Include/core_cm0plus.h **** #elif defined ( __TASKING__ )
 104:Drivers/CMSIS/Include/core_cm0plus.h ****   #if defined __FPU_VFP__
 105:Drivers/CMSIS/Include/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 106:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 107:Drivers/CMSIS/Include/core_cm0plus.h **** 
 108:Drivers/CMSIS/Include/core_cm0plus.h **** #elif defined ( __CSMC__ )
 109:Drivers/CMSIS/Include/core_cm0plus.h ****   #if ( __CSMC__ & 0x400U)
 110:Drivers/CMSIS/Include/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 111:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 112:Drivers/CMSIS/Include/core_cm0plus.h **** 
 113:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 114:Drivers/CMSIS/Include/core_cm0plus.h **** 
 115:Drivers/CMSIS/Include/core_cm0plus.h **** #include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
 116:Drivers/CMSIS/Include/core_cm0plus.h **** 
 117:Drivers/CMSIS/Include/core_cm0plus.h **** 
 118:Drivers/CMSIS/Include/core_cm0plus.h **** #ifdef __cplusplus
 119:Drivers/CMSIS/Include/core_cm0plus.h **** }
 120:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 121:Drivers/CMSIS/Include/core_cm0plus.h **** 
 122:Drivers/CMSIS/Include/core_cm0plus.h **** #endif /* __CORE_CM0PLUS_H_GENERIC */
 123:Drivers/CMSIS/Include/core_cm0plus.h **** 
 124:Drivers/CMSIS/Include/core_cm0plus.h **** #ifndef __CMSIS_GENERIC
 125:Drivers/CMSIS/Include/core_cm0plus.h **** 
 126:Drivers/CMSIS/Include/core_cm0plus.h **** #ifndef __CORE_CM0PLUS_H_DEPENDANT
 127:Drivers/CMSIS/Include/core_cm0plus.h **** #define __CORE_CM0PLUS_H_DEPENDANT
 128:Drivers/CMSIS/Include/core_cm0plus.h **** 
 129:Drivers/CMSIS/Include/core_cm0plus.h **** #ifdef __cplusplus
 130:Drivers/CMSIS/Include/core_cm0plus.h ****  extern "C" {
 131:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 132:Drivers/CMSIS/Include/core_cm0plus.h **** 
 133:Drivers/CMSIS/Include/core_cm0plus.h **** /* check device defines and use defaults */
 134:Drivers/CMSIS/Include/core_cm0plus.h **** #if defined __CHECK_DEVICE_DEFINES
 135:Drivers/CMSIS/Include/core_cm0plus.h ****   #ifndef __CM0PLUS_REV
 136:Drivers/CMSIS/Include/core_cm0plus.h ****     #define __CM0PLUS_REV             0x0000U
 137:Drivers/CMSIS/Include/core_cm0plus.h ****     #warning "__CM0PLUS_REV not defined in device header file; using default!"
 138:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 139:Drivers/CMSIS/Include/core_cm0plus.h **** 
 140:Drivers/CMSIS/Include/core_cm0plus.h ****   #ifndef __MPU_PRESENT
 141:Drivers/CMSIS/Include/core_cm0plus.h ****     #define __MPU_PRESENT             0U
 142:Drivers/CMSIS/Include/core_cm0plus.h ****     #warning "__MPU_PRESENT not defined in device header file; using default!"
 143:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 144:Drivers/CMSIS/Include/core_cm0plus.h **** 
 145:Drivers/CMSIS/Include/core_cm0plus.h ****   #ifndef __VTOR_PRESENT
 146:Drivers/CMSIS/Include/core_cm0plus.h ****     #define __VTOR_PRESENT            0U
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s 			page 4


 147:Drivers/CMSIS/Include/core_cm0plus.h ****     #warning "__VTOR_PRESENT not defined in device header file; using default!"
 148:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 149:Drivers/CMSIS/Include/core_cm0plus.h **** 
 150:Drivers/CMSIS/Include/core_cm0plus.h ****   #ifndef __NVIC_PRIO_BITS
 151:Drivers/CMSIS/Include/core_cm0plus.h ****     #define __NVIC_PRIO_BITS          2U
 152:Drivers/CMSIS/Include/core_cm0plus.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 153:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 154:Drivers/CMSIS/Include/core_cm0plus.h **** 
 155:Drivers/CMSIS/Include/core_cm0plus.h ****   #ifndef __Vendor_SysTickConfig
 156:Drivers/CMSIS/Include/core_cm0plus.h ****     #define __Vendor_SysTickConfig    0U
 157:Drivers/CMSIS/Include/core_cm0plus.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 158:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 159:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 160:Drivers/CMSIS/Include/core_cm0plus.h **** 
 161:Drivers/CMSIS/Include/core_cm0plus.h **** /* IO definitions (access restrictions to peripheral registers) */
 162:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 163:Drivers/CMSIS/Include/core_cm0plus.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 164:Drivers/CMSIS/Include/core_cm0plus.h **** 
 165:Drivers/CMSIS/Include/core_cm0plus.h ****     <strong>IO Type Qualifiers</strong> are used
 166:Drivers/CMSIS/Include/core_cm0plus.h ****     \li to specify the access to peripheral variables.
 167:Drivers/CMSIS/Include/core_cm0plus.h ****     \li for automatic generation of peripheral register debug information.
 168:Drivers/CMSIS/Include/core_cm0plus.h **** */
 169:Drivers/CMSIS/Include/core_cm0plus.h **** #ifdef __cplusplus
 170:Drivers/CMSIS/Include/core_cm0plus.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 171:Drivers/CMSIS/Include/core_cm0plus.h **** #else
 172:Drivers/CMSIS/Include/core_cm0plus.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 173:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 174:Drivers/CMSIS/Include/core_cm0plus.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 175:Drivers/CMSIS/Include/core_cm0plus.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 176:Drivers/CMSIS/Include/core_cm0plus.h **** 
 177:Drivers/CMSIS/Include/core_cm0plus.h **** /* following defines should be used for structure members */
 178:Drivers/CMSIS/Include/core_cm0plus.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 179:Drivers/CMSIS/Include/core_cm0plus.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 180:Drivers/CMSIS/Include/core_cm0plus.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 181:Drivers/CMSIS/Include/core_cm0plus.h **** 
 182:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} end of group Cortex-M0+ */
 183:Drivers/CMSIS/Include/core_cm0plus.h **** 
 184:Drivers/CMSIS/Include/core_cm0plus.h **** 
 185:Drivers/CMSIS/Include/core_cm0plus.h **** 
 186:Drivers/CMSIS/Include/core_cm0plus.h **** /*******************************************************************************
 187:Drivers/CMSIS/Include/core_cm0plus.h ****  *                 Register Abstraction
 188:Drivers/CMSIS/Include/core_cm0plus.h ****   Core Register contain:
 189:Drivers/CMSIS/Include/core_cm0plus.h ****   - Core Register
 190:Drivers/CMSIS/Include/core_cm0plus.h ****   - Core NVIC Register
 191:Drivers/CMSIS/Include/core_cm0plus.h ****   - Core SCB Register
 192:Drivers/CMSIS/Include/core_cm0plus.h ****   - Core SysTick Register
 193:Drivers/CMSIS/Include/core_cm0plus.h ****   - Core MPU Register
 194:Drivers/CMSIS/Include/core_cm0plus.h ****  ******************************************************************************/
 195:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 196:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 197:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 198:Drivers/CMSIS/Include/core_cm0plus.h **** */
 199:Drivers/CMSIS/Include/core_cm0plus.h **** 
 200:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 201:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup    CMSIS_core_register
 202:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 203:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief      Core Register type definitions.
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s 			page 5


 204:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
 205:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 206:Drivers/CMSIS/Include/core_cm0plus.h **** 
 207:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 208:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 209:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 210:Drivers/CMSIS/Include/core_cm0plus.h **** typedef union
 211:Drivers/CMSIS/Include/core_cm0plus.h **** {
 212:Drivers/CMSIS/Include/core_cm0plus.h ****   struct
 213:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 214:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
 215:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 216:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 217:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 218:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 219:Drivers/CMSIS/Include/core_cm0plus.h ****   } b;                                   /*!< Structure used for bit  access */
 220:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t w;                            /*!< Type      used for word access */
 221:Drivers/CMSIS/Include/core_cm0plus.h **** } APSR_Type;
 222:Drivers/CMSIS/Include/core_cm0plus.h **** 
 223:Drivers/CMSIS/Include/core_cm0plus.h **** /* APSR Register Definitions */
 224:Drivers/CMSIS/Include/core_cm0plus.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 225:Drivers/CMSIS/Include/core_cm0plus.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 226:Drivers/CMSIS/Include/core_cm0plus.h **** 
 227:Drivers/CMSIS/Include/core_cm0plus.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 228:Drivers/CMSIS/Include/core_cm0plus.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 229:Drivers/CMSIS/Include/core_cm0plus.h **** 
 230:Drivers/CMSIS/Include/core_cm0plus.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 231:Drivers/CMSIS/Include/core_cm0plus.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 232:Drivers/CMSIS/Include/core_cm0plus.h **** 
 233:Drivers/CMSIS/Include/core_cm0plus.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 234:Drivers/CMSIS/Include/core_cm0plus.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 235:Drivers/CMSIS/Include/core_cm0plus.h **** 
 236:Drivers/CMSIS/Include/core_cm0plus.h **** 
 237:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 238:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 239:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 240:Drivers/CMSIS/Include/core_cm0plus.h **** typedef union
 241:Drivers/CMSIS/Include/core_cm0plus.h **** {
 242:Drivers/CMSIS/Include/core_cm0plus.h ****   struct
 243:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 244:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 245:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 246:Drivers/CMSIS/Include/core_cm0plus.h ****   } b;                                   /*!< Structure used for bit  access */
 247:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t w;                            /*!< Type      used for word access */
 248:Drivers/CMSIS/Include/core_cm0plus.h **** } IPSR_Type;
 249:Drivers/CMSIS/Include/core_cm0plus.h **** 
 250:Drivers/CMSIS/Include/core_cm0plus.h **** /* IPSR Register Definitions */
 251:Drivers/CMSIS/Include/core_cm0plus.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 252:Drivers/CMSIS/Include/core_cm0plus.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 253:Drivers/CMSIS/Include/core_cm0plus.h **** 
 254:Drivers/CMSIS/Include/core_cm0plus.h **** 
 255:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 256:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 257:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 258:Drivers/CMSIS/Include/core_cm0plus.h **** typedef union
 259:Drivers/CMSIS/Include/core_cm0plus.h **** {
 260:Drivers/CMSIS/Include/core_cm0plus.h ****   struct
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s 			page 6


 261:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 262:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 263:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
 264:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 265:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
 266:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 267:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 268:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 269:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 270:Drivers/CMSIS/Include/core_cm0plus.h ****   } b;                                   /*!< Structure used for bit  access */
 271:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t w;                            /*!< Type      used for word access */
 272:Drivers/CMSIS/Include/core_cm0plus.h **** } xPSR_Type;
 273:Drivers/CMSIS/Include/core_cm0plus.h **** 
 274:Drivers/CMSIS/Include/core_cm0plus.h **** /* xPSR Register Definitions */
 275:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 276:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 277:Drivers/CMSIS/Include/core_cm0plus.h **** 
 278:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 279:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 280:Drivers/CMSIS/Include/core_cm0plus.h **** 
 281:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 282:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 283:Drivers/CMSIS/Include/core_cm0plus.h **** 
 284:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 285:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 286:Drivers/CMSIS/Include/core_cm0plus.h **** 
 287:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 288:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 289:Drivers/CMSIS/Include/core_cm0plus.h **** 
 290:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 291:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 292:Drivers/CMSIS/Include/core_cm0plus.h **** 
 293:Drivers/CMSIS/Include/core_cm0plus.h **** 
 294:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 295:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief  Union type to access the Control Registers (CONTROL).
 296:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 297:Drivers/CMSIS/Include/core_cm0plus.h **** typedef union
 298:Drivers/CMSIS/Include/core_cm0plus.h **** {
 299:Drivers/CMSIS/Include/core_cm0plus.h ****   struct
 300:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 301:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 302:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 303:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 304:Drivers/CMSIS/Include/core_cm0plus.h ****   } b;                                   /*!< Structure used for bit  access */
 305:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t w;                            /*!< Type      used for word access */
 306:Drivers/CMSIS/Include/core_cm0plus.h **** } CONTROL_Type;
 307:Drivers/CMSIS/Include/core_cm0plus.h **** 
 308:Drivers/CMSIS/Include/core_cm0plus.h **** /* CONTROL Register Definitions */
 309:Drivers/CMSIS/Include/core_cm0plus.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 310:Drivers/CMSIS/Include/core_cm0plus.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 311:Drivers/CMSIS/Include/core_cm0plus.h **** 
 312:Drivers/CMSIS/Include/core_cm0plus.h **** #define CONTROL_nPRIV_Pos                   0U                                            /*!< CONT
 313:Drivers/CMSIS/Include/core_cm0plus.h **** #define CONTROL_nPRIV_Msk                  (1UL /*<< CONTROL_nPRIV_Pos*/)                 /*!< CONT
 314:Drivers/CMSIS/Include/core_cm0plus.h **** 
 315:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} end of group CMSIS_CORE */
 316:Drivers/CMSIS/Include/core_cm0plus.h **** 
 317:Drivers/CMSIS/Include/core_cm0plus.h **** 
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s 			page 7


 318:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 319:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup    CMSIS_core_register
 320:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 321:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief      Type definitions for the NVIC Registers
 322:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
 323:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 324:Drivers/CMSIS/Include/core_cm0plus.h **** 
 325:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 326:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 327:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 328:Drivers/CMSIS/Include/core_cm0plus.h **** typedef struct
 329:Drivers/CMSIS/Include/core_cm0plus.h **** {
 330:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 331:Drivers/CMSIS/Include/core_cm0plus.h ****         uint32_t RESERVED0[31U];
 332:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 333:Drivers/CMSIS/Include/core_cm0plus.h ****         uint32_t RESERVED1[31U];
 334:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 335:Drivers/CMSIS/Include/core_cm0plus.h ****         uint32_t RESERVED2[31U];
 336:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 337:Drivers/CMSIS/Include/core_cm0plus.h ****         uint32_t RESERVED3[31U];
 338:Drivers/CMSIS/Include/core_cm0plus.h ****         uint32_t RESERVED4[64U];
 339:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
 340:Drivers/CMSIS/Include/core_cm0plus.h **** }  NVIC_Type;
 341:Drivers/CMSIS/Include/core_cm0plus.h **** 
 342:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} end of group CMSIS_NVIC */
 343:Drivers/CMSIS/Include/core_cm0plus.h **** 
 344:Drivers/CMSIS/Include/core_cm0plus.h **** 
 345:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 346:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup  CMSIS_core_register
 347:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 348:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief    Type definitions for the System Control Block Registers
 349:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
 350:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 351:Drivers/CMSIS/Include/core_cm0plus.h **** 
 352:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 353:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief  Structure type to access the System Control Block (SCB).
 354:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 355:Drivers/CMSIS/Include/core_cm0plus.h **** typedef struct
 356:Drivers/CMSIS/Include/core_cm0plus.h **** {
 357:Drivers/CMSIS/Include/core_cm0plus.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 358:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 359:Drivers/CMSIS/Include/core_cm0plus.h **** #if defined (__VTOR_PRESENT) && (__VTOR_PRESENT == 1U)
 360:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t VTOR;                   /*!< Offset: 0x008 (R/W)  Vector Table Offset Register */
 361:Drivers/CMSIS/Include/core_cm0plus.h **** #else
 362:Drivers/CMSIS/Include/core_cm0plus.h ****         uint32_t RESERVED0;
 363:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 364:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 365:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 366:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 367:Drivers/CMSIS/Include/core_cm0plus.h ****         uint32_t RESERVED1;
 368:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registe
 369:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 370:Drivers/CMSIS/Include/core_cm0plus.h **** } SCB_Type;
 371:Drivers/CMSIS/Include/core_cm0plus.h **** 
 372:Drivers/CMSIS/Include/core_cm0plus.h **** /* SCB CPUID Register Definitions */
 373:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 374:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s 			page 8


 375:Drivers/CMSIS/Include/core_cm0plus.h **** 
 376:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 377:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 378:Drivers/CMSIS/Include/core_cm0plus.h **** 
 379:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 380:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 381:Drivers/CMSIS/Include/core_cm0plus.h **** 
 382:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 383:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 384:Drivers/CMSIS/Include/core_cm0plus.h **** 
 385:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 386:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 387:Drivers/CMSIS/Include/core_cm0plus.h **** 
 388:Drivers/CMSIS/Include/core_cm0plus.h **** /* SCB Interrupt Control State Register Definitions */
 389:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 390:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 391:Drivers/CMSIS/Include/core_cm0plus.h **** 
 392:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 393:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 394:Drivers/CMSIS/Include/core_cm0plus.h **** 
 395:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 396:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 397:Drivers/CMSIS/Include/core_cm0plus.h **** 
 398:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 399:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 400:Drivers/CMSIS/Include/core_cm0plus.h **** 
 401:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 402:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 403:Drivers/CMSIS/Include/core_cm0plus.h **** 
 404:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 405:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 406:Drivers/CMSIS/Include/core_cm0plus.h **** 
 407:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 408:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 409:Drivers/CMSIS/Include/core_cm0plus.h **** 
 410:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 411:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 412:Drivers/CMSIS/Include/core_cm0plus.h **** 
 413:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 414:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 415:Drivers/CMSIS/Include/core_cm0plus.h **** 
 416:Drivers/CMSIS/Include/core_cm0plus.h **** #if defined (__VTOR_PRESENT) && (__VTOR_PRESENT == 1U)
 417:Drivers/CMSIS/Include/core_cm0plus.h **** /* SCB Interrupt Control State Register Definitions */
 418:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_VTOR_TBLOFF_Pos                 8U                                            /*!< SCB 
 419:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_VTOR_TBLOFF_Msk                (0xFFFFFFUL << SCB_VTOR_TBLOFF_Pos)            /*!< SCB 
 420:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 421:Drivers/CMSIS/Include/core_cm0plus.h **** 
 422:Drivers/CMSIS/Include/core_cm0plus.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 423:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 424:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 425:Drivers/CMSIS/Include/core_cm0plus.h **** 
 426:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 427:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 428:Drivers/CMSIS/Include/core_cm0plus.h **** 
 429:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 430:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 431:Drivers/CMSIS/Include/core_cm0plus.h **** 
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s 			page 9


 432:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 433:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 434:Drivers/CMSIS/Include/core_cm0plus.h **** 
 435:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 436:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 437:Drivers/CMSIS/Include/core_cm0plus.h **** 
 438:Drivers/CMSIS/Include/core_cm0plus.h **** /* SCB System Control Register Definitions */
 439:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 440:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 441:Drivers/CMSIS/Include/core_cm0plus.h **** 
 442:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 443:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 444:Drivers/CMSIS/Include/core_cm0plus.h **** 
 445:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 446:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 447:Drivers/CMSIS/Include/core_cm0plus.h **** 
 448:Drivers/CMSIS/Include/core_cm0plus.h **** /* SCB Configuration Control Register Definitions */
 449:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 450:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 451:Drivers/CMSIS/Include/core_cm0plus.h **** 
 452:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 453:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 454:Drivers/CMSIS/Include/core_cm0plus.h **** 
 455:Drivers/CMSIS/Include/core_cm0plus.h **** /* SCB System Handler Control and State Register Definitions */
 456:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 457:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 458:Drivers/CMSIS/Include/core_cm0plus.h **** 
 459:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} end of group CMSIS_SCB */
 460:Drivers/CMSIS/Include/core_cm0plus.h **** 
 461:Drivers/CMSIS/Include/core_cm0plus.h **** 
 462:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 463:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup  CMSIS_core_register
 464:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 465:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief    Type definitions for the System Timer Registers.
 466:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
 467:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 468:Drivers/CMSIS/Include/core_cm0plus.h **** 
 469:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 470:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief  Structure type to access the System Timer (SysTick).
 471:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 472:Drivers/CMSIS/Include/core_cm0plus.h **** typedef struct
 473:Drivers/CMSIS/Include/core_cm0plus.h **** {
 474:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 475:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 476:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 477:Drivers/CMSIS/Include/core_cm0plus.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 478:Drivers/CMSIS/Include/core_cm0plus.h **** } SysTick_Type;
 479:Drivers/CMSIS/Include/core_cm0plus.h **** 
 480:Drivers/CMSIS/Include/core_cm0plus.h **** /* SysTick Control / Status Register Definitions */
 481:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 482:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 483:Drivers/CMSIS/Include/core_cm0plus.h **** 
 484:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 485:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 486:Drivers/CMSIS/Include/core_cm0plus.h **** 
 487:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 488:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s 			page 10


 489:Drivers/CMSIS/Include/core_cm0plus.h **** 
 490:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 491:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 492:Drivers/CMSIS/Include/core_cm0plus.h **** 
 493:Drivers/CMSIS/Include/core_cm0plus.h **** /* SysTick Reload Register Definitions */
 494:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 495:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 496:Drivers/CMSIS/Include/core_cm0plus.h **** 
 497:Drivers/CMSIS/Include/core_cm0plus.h **** /* SysTick Current Register Definitions */
 498:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 499:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 500:Drivers/CMSIS/Include/core_cm0plus.h **** 
 501:Drivers/CMSIS/Include/core_cm0plus.h **** /* SysTick Calibration Register Definitions */
 502:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 503:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 504:Drivers/CMSIS/Include/core_cm0plus.h **** 
 505:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 506:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 507:Drivers/CMSIS/Include/core_cm0plus.h **** 
 508:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 509:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 510:Drivers/CMSIS/Include/core_cm0plus.h **** 
 511:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} end of group CMSIS_SysTick */
 512:Drivers/CMSIS/Include/core_cm0plus.h **** 
 513:Drivers/CMSIS/Include/core_cm0plus.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
 514:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 515:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup  CMSIS_core_register
 516:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup CMSIS_MPU     Memory Protection Unit (MPU)
 517:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief    Type definitions for the Memory Protection Unit (MPU)
 518:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
 519:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 520:Drivers/CMSIS/Include/core_cm0plus.h **** 
 521:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 522:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief  Structure type to access the Memory Protection Unit (MPU).
 523:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 524:Drivers/CMSIS/Include/core_cm0plus.h **** typedef struct
 525:Drivers/CMSIS/Include/core_cm0plus.h **** {
 526:Drivers/CMSIS/Include/core_cm0plus.h ****   __IM  uint32_t TYPE;                   /*!< Offset: 0x000 (R/ )  MPU Type Register */
 527:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x004 (R/W)  MPU Control Register */
 528:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t RNR;                    /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register */
 529:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t RBAR;                   /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
 530:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t RASR;                   /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
 531:Drivers/CMSIS/Include/core_cm0plus.h **** } MPU_Type;
 532:Drivers/CMSIS/Include/core_cm0plus.h **** 
 533:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_TYPE_RALIASES                  1U
 534:Drivers/CMSIS/Include/core_cm0plus.h **** 
 535:Drivers/CMSIS/Include/core_cm0plus.h **** /* MPU Type Register Definitions */
 536:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_TYPE_IREGION_Pos               16U                                            /*!< MPU 
 537:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
 538:Drivers/CMSIS/Include/core_cm0plus.h **** 
 539:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_TYPE_DREGION_Pos                8U                                            /*!< MPU 
 540:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
 541:Drivers/CMSIS/Include/core_cm0plus.h **** 
 542:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_TYPE_SEPARATE_Pos               0U                                            /*!< MPU 
 543:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL /*<< MPU_TYPE_SEPARATE_Pos*/)             /*!< MPU 
 544:Drivers/CMSIS/Include/core_cm0plus.h **** 
 545:Drivers/CMSIS/Include/core_cm0plus.h **** /* MPU Control Register Definitions */
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s 			page 11


 546:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2U                                            /*!< MPU 
 547:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
 548:Drivers/CMSIS/Include/core_cm0plus.h **** 
 549:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_CTRL_HFNMIENA_Pos               1U                                            /*!< MPU 
 550:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
 551:Drivers/CMSIS/Include/core_cm0plus.h **** 
 552:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_CTRL_ENABLE_Pos                 0U                                            /*!< MPU 
 553:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_CTRL_ENABLE_Msk                (1UL /*<< MPU_CTRL_ENABLE_Pos*/)               /*!< MPU 
 554:Drivers/CMSIS/Include/core_cm0plus.h **** 
 555:Drivers/CMSIS/Include/core_cm0plus.h **** /* MPU Region Number Register Definitions */
 556:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RNR_REGION_Pos                  0U                                            /*!< MPU 
 557:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL /*<< MPU_RNR_REGION_Pos*/)             /*!< MPU 
 558:Drivers/CMSIS/Include/core_cm0plus.h **** 
 559:Drivers/CMSIS/Include/core_cm0plus.h **** /* MPU Region Base Address Register Definitions */
 560:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RBAR_ADDR_Pos                   8U                                            /*!< MPU 
 561:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RBAR_ADDR_Msk                  (0xFFFFFFUL << MPU_RBAR_ADDR_Pos)              /*!< MPU 
 562:Drivers/CMSIS/Include/core_cm0plus.h **** 
 563:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RBAR_VALID_Pos                  4U                                            /*!< MPU 
 564:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
 565:Drivers/CMSIS/Include/core_cm0plus.h **** 
 566:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RBAR_REGION_Pos                 0U                                            /*!< MPU 
 567:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RBAR_REGION_Msk                (0xFUL /*<< MPU_RBAR_REGION_Pos*/)             /*!< MPU 
 568:Drivers/CMSIS/Include/core_cm0plus.h **** 
 569:Drivers/CMSIS/Include/core_cm0plus.h **** /* MPU Region Attribute and Size Register Definitions */
 570:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_ATTRS_Pos                 16U                                            /*!< MPU 
 571:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU 
 572:Drivers/CMSIS/Include/core_cm0plus.h **** 
 573:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_XN_Pos                    28U                                            /*!< MPU 
 574:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU 
 575:Drivers/CMSIS/Include/core_cm0plus.h **** 
 576:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_AP_Pos                    24U                                            /*!< MPU 
 577:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_AP_Msk                    (0x7UL << MPU_RASR_AP_Pos)                     /*!< MPU 
 578:Drivers/CMSIS/Include/core_cm0plus.h **** 
 579:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_TEX_Pos                   19U                                            /*!< MPU 
 580:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_TEX_Msk                   (0x7UL << MPU_RASR_TEX_Pos)                    /*!< MPU 
 581:Drivers/CMSIS/Include/core_cm0plus.h **** 
 582:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_S_Pos                     18U                                            /*!< MPU 
 583:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU 
 584:Drivers/CMSIS/Include/core_cm0plus.h **** 
 585:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_C_Pos                     17U                                            /*!< MPU 
 586:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU 
 587:Drivers/CMSIS/Include/core_cm0plus.h **** 
 588:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_B_Pos                     16U                                            /*!< MPU 
 589:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU 
 590:Drivers/CMSIS/Include/core_cm0plus.h **** 
 591:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_SRD_Pos                    8U                                            /*!< MPU 
 592:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
 593:Drivers/CMSIS/Include/core_cm0plus.h **** 
 594:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_SIZE_Pos                   1U                                            /*!< MPU 
 595:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
 596:Drivers/CMSIS/Include/core_cm0plus.h **** 
 597:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_ENABLE_Pos                 0U                                            /*!< MPU 
 598:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_ENABLE_Msk                (1UL /*<< MPU_RASR_ENABLE_Pos*/)               /*!< MPU 
 599:Drivers/CMSIS/Include/core_cm0plus.h **** 
 600:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} end of group CMSIS_MPU */
 601:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 602:Drivers/CMSIS/Include/core_cm0plus.h **** 
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s 			page 12


 603:Drivers/CMSIS/Include/core_cm0plus.h **** 
 604:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 605:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup  CMSIS_core_register
 606:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
 607:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief    Cortex-M0+ Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible ov
 608:Drivers/CMSIS/Include/core_cm0plus.h ****             Therefore they are not covered by the Cortex-M0+ header file.
 609:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
 610:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 611:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} end of group CMSIS_CoreDebug */
 612:Drivers/CMSIS/Include/core_cm0plus.h **** 
 613:Drivers/CMSIS/Include/core_cm0plus.h **** 
 614:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 615:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup    CMSIS_core_register
 616:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
 617:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
 618:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
 619:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 620:Drivers/CMSIS/Include/core_cm0plus.h **** 
 621:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 622:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
 623:Drivers/CMSIS/Include/core_cm0plus.h ****   \param[in] field  Name of the register bit field.
 624:Drivers/CMSIS/Include/core_cm0plus.h ****   \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
 625:Drivers/CMSIS/Include/core_cm0plus.h ****   \return           Masked and shifted value.
 626:Drivers/CMSIS/Include/core_cm0plus.h **** */
 627:Drivers/CMSIS/Include/core_cm0plus.h **** #define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
 628:Drivers/CMSIS/Include/core_cm0plus.h **** 
 629:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 630:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief     Mask and shift a register value to extract a bit filed value.
 631:Drivers/CMSIS/Include/core_cm0plus.h ****   \param[in] field  Name of the register bit field.
 632:Drivers/CMSIS/Include/core_cm0plus.h ****   \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
 633:Drivers/CMSIS/Include/core_cm0plus.h ****   \return           Masked and shifted bit field value.
 634:Drivers/CMSIS/Include/core_cm0plus.h **** */
 635:Drivers/CMSIS/Include/core_cm0plus.h **** #define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
 636:Drivers/CMSIS/Include/core_cm0plus.h **** 
 637:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} end of group CMSIS_core_bitfield */
 638:Drivers/CMSIS/Include/core_cm0plus.h **** 
 639:Drivers/CMSIS/Include/core_cm0plus.h **** 
 640:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 641:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup    CMSIS_core_register
 642:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup   CMSIS_core_base     Core Definitions
 643:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief      Definitions for base addresses, unions, and structures.
 644:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
 645:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 646:Drivers/CMSIS/Include/core_cm0plus.h **** 
 647:Drivers/CMSIS/Include/core_cm0plus.h **** /* Memory mapping of Core Hardware */
 648:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 649:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
 650:Drivers/CMSIS/Include/core_cm0plus.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
 651:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 652:Drivers/CMSIS/Include/core_cm0plus.h **** 
 653:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 654:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 655:Drivers/CMSIS/Include/core_cm0plus.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 656:Drivers/CMSIS/Include/core_cm0plus.h **** 
 657:Drivers/CMSIS/Include/core_cm0plus.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
 658:Drivers/CMSIS/Include/core_cm0plus.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit *
 659:Drivers/CMSIS/Include/core_cm0plus.h ****   #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit *
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s 			page 13


 660:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 661:Drivers/CMSIS/Include/core_cm0plus.h **** 
 662:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} */
 663:Drivers/CMSIS/Include/core_cm0plus.h **** 
 664:Drivers/CMSIS/Include/core_cm0plus.h **** 
 665:Drivers/CMSIS/Include/core_cm0plus.h **** 
 666:Drivers/CMSIS/Include/core_cm0plus.h **** /*******************************************************************************
 667:Drivers/CMSIS/Include/core_cm0plus.h ****  *                Hardware Abstraction Layer
 668:Drivers/CMSIS/Include/core_cm0plus.h ****   Core Function Interface contains:
 669:Drivers/CMSIS/Include/core_cm0plus.h ****   - Core NVIC Functions
 670:Drivers/CMSIS/Include/core_cm0plus.h ****   - Core SysTick Functions
 671:Drivers/CMSIS/Include/core_cm0plus.h ****   - Core Register Access Functions
 672:Drivers/CMSIS/Include/core_cm0plus.h ****  ******************************************************************************/
 673:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 674:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
 675:Drivers/CMSIS/Include/core_cm0plus.h **** */
 676:Drivers/CMSIS/Include/core_cm0plus.h **** 
 677:Drivers/CMSIS/Include/core_cm0plus.h **** 
 678:Drivers/CMSIS/Include/core_cm0plus.h **** 
 679:Drivers/CMSIS/Include/core_cm0plus.h **** /* ##########################   NVIC functions  #################################### */
 680:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 681:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup  CMSIS_Core_FunctionInterface
 682:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
 683:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
 684:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
 685:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 686:Drivers/CMSIS/Include/core_cm0plus.h **** 
 687:Drivers/CMSIS/Include/core_cm0plus.h **** #ifdef CMSIS_NVIC_VIRTUAL
 688:Drivers/CMSIS/Include/core_cm0plus.h ****   #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
 689:Drivers/CMSIS/Include/core_cm0plus.h ****     #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
 690:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 691:Drivers/CMSIS/Include/core_cm0plus.h ****   #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
 692:Drivers/CMSIS/Include/core_cm0plus.h **** #else
 693:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping
 694:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping
 695:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_EnableIRQ              __NVIC_EnableIRQ
 696:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
 697:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_DisableIRQ             __NVIC_DisableIRQ
 698:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
 699:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
 700:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
 701:Drivers/CMSIS/Include/core_cm0plus.h **** /*#define NVIC_GetActive              __NVIC_GetActive             not available for Cortex-M0+ */
 702:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_SetPriority            __NVIC_SetPriority
 703:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_GetPriority            __NVIC_GetPriority
 704:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_SystemReset            __NVIC_SystemReset
 705:Drivers/CMSIS/Include/core_cm0plus.h **** #endif /* CMSIS_NVIC_VIRTUAL */
 706:Drivers/CMSIS/Include/core_cm0plus.h **** 
 707:Drivers/CMSIS/Include/core_cm0plus.h **** #ifdef CMSIS_VECTAB_VIRTUAL
 708:Drivers/CMSIS/Include/core_cm0plus.h ****   #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 709:Drivers/CMSIS/Include/core_cm0plus.h ****     #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
 710:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 711:Drivers/CMSIS/Include/core_cm0plus.h ****   #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 712:Drivers/CMSIS/Include/core_cm0plus.h **** #else
 713:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_SetVector              __NVIC_SetVector
 714:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_GetVector              __NVIC_GetVector
 715:Drivers/CMSIS/Include/core_cm0plus.h **** #endif  /* (CMSIS_VECTAB_VIRTUAL) */
 716:Drivers/CMSIS/Include/core_cm0plus.h **** 
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s 			page 14


 717:Drivers/CMSIS/Include/core_cm0plus.h **** #define NVIC_USER_IRQ_OFFSET          16
 718:Drivers/CMSIS/Include/core_cm0plus.h **** 
 719:Drivers/CMSIS/Include/core_cm0plus.h **** 
 720:Drivers/CMSIS/Include/core_cm0plus.h **** /* The following EXC_RETURN values are saved the LR on exception entry */
 721:Drivers/CMSIS/Include/core_cm0plus.h **** #define EXC_RETURN_HANDLER         (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after ret
 722:Drivers/CMSIS/Include/core_cm0plus.h **** #define EXC_RETURN_THREAD_MSP      (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after retu
 723:Drivers/CMSIS/Include/core_cm0plus.h **** #define EXC_RETURN_THREAD_PSP      (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after retu
 724:Drivers/CMSIS/Include/core_cm0plus.h **** 
 725:Drivers/CMSIS/Include/core_cm0plus.h **** 
 726:Drivers/CMSIS/Include/core_cm0plus.h **** /* Interrupt Priorities are WORD accessible only under Armv6-M                  */
 727:Drivers/CMSIS/Include/core_cm0plus.h **** /* The following MACROS handle generation of the register offset and byte masks */
 728:Drivers/CMSIS/Include/core_cm0plus.h **** #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
 729:Drivers/CMSIS/Include/core_cm0plus.h **** #define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
 730:Drivers/CMSIS/Include/core_cm0plus.h **** #define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
 731:Drivers/CMSIS/Include/core_cm0plus.h **** 
 732:Drivers/CMSIS/Include/core_cm0plus.h **** #define __NVIC_SetPriorityGrouping(X) (void)(X)
 733:Drivers/CMSIS/Include/core_cm0plus.h **** #define __NVIC_GetPriorityGrouping()  (0U)
 734:Drivers/CMSIS/Include/core_cm0plus.h **** 
 735:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 736:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Enable Interrupt
 737:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Enables a device specific interrupt in the NVIC interrupt controller.
 738:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]      IRQn  Device specific interrupt number.
 739:Drivers/CMSIS/Include/core_cm0plus.h ****   \note    IRQn must not be negative.
 740:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 741:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
 742:Drivers/CMSIS/Include/core_cm0plus.h **** {
 743:Drivers/CMSIS/Include/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
 744:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 745:Drivers/CMSIS/Include/core_cm0plus.h ****     __COMPILER_BARRIER();
 746:Drivers/CMSIS/Include/core_cm0plus.h ****     NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 747:Drivers/CMSIS/Include/core_cm0plus.h ****     __COMPILER_BARRIER();
 748:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 749:Drivers/CMSIS/Include/core_cm0plus.h **** }
 750:Drivers/CMSIS/Include/core_cm0plus.h **** 
 751:Drivers/CMSIS/Include/core_cm0plus.h **** 
 752:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 753:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Get Interrupt Enable status
 754:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
 755:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]      IRQn  Device specific interrupt number.
 756:Drivers/CMSIS/Include/core_cm0plus.h ****   \return             0  Interrupt is not enabled.
 757:Drivers/CMSIS/Include/core_cm0plus.h ****   \return             1  Interrupt is enabled.
 758:Drivers/CMSIS/Include/core_cm0plus.h ****   \note    IRQn must not be negative.
 759:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 760:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
 761:Drivers/CMSIS/Include/core_cm0plus.h **** {
 762:Drivers/CMSIS/Include/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
 763:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 764:Drivers/CMSIS/Include/core_cm0plus.h ****     return((uint32_t)(((NVIC->ISER[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 765:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 766:Drivers/CMSIS/Include/core_cm0plus.h ****   else
 767:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 768:Drivers/CMSIS/Include/core_cm0plus.h ****     return(0U);
 769:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 770:Drivers/CMSIS/Include/core_cm0plus.h **** }
 771:Drivers/CMSIS/Include/core_cm0plus.h **** 
 772:Drivers/CMSIS/Include/core_cm0plus.h **** 
 773:Drivers/CMSIS/Include/core_cm0plus.h **** /**
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s 			page 15


 774:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Disable Interrupt
 775:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Disables a device specific interrupt in the NVIC interrupt controller.
 776:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]      IRQn  Device specific interrupt number.
 777:Drivers/CMSIS/Include/core_cm0plus.h ****   \note    IRQn must not be negative.
 778:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 779:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
 780:Drivers/CMSIS/Include/core_cm0plus.h **** {
 781:Drivers/CMSIS/Include/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
 782:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 783:Drivers/CMSIS/Include/core_cm0plus.h ****     NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 784:Drivers/CMSIS/Include/core_cm0plus.h ****     __DSB();
 785:Drivers/CMSIS/Include/core_cm0plus.h ****     __ISB();
 786:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 787:Drivers/CMSIS/Include/core_cm0plus.h **** }
 788:Drivers/CMSIS/Include/core_cm0plus.h **** 
 789:Drivers/CMSIS/Include/core_cm0plus.h **** 
 790:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 791:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Get Pending Interrupt
 792:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Reads the NVIC pending register and returns the pending bit for the specified device spe
 793:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]      IRQn  Device specific interrupt number.
 794:Drivers/CMSIS/Include/core_cm0plus.h ****   \return             0  Interrupt status is not pending.
 795:Drivers/CMSIS/Include/core_cm0plus.h ****   \return             1  Interrupt status is pending.
 796:Drivers/CMSIS/Include/core_cm0plus.h ****   \note    IRQn must not be negative.
 797:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 798:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
 799:Drivers/CMSIS/Include/core_cm0plus.h **** {
 800:Drivers/CMSIS/Include/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
 801:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 802:Drivers/CMSIS/Include/core_cm0plus.h ****     return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 803:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 804:Drivers/CMSIS/Include/core_cm0plus.h ****   else
 805:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 806:Drivers/CMSIS/Include/core_cm0plus.h ****     return(0U);
 807:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 808:Drivers/CMSIS/Include/core_cm0plus.h **** }
 809:Drivers/CMSIS/Include/core_cm0plus.h **** 
 810:Drivers/CMSIS/Include/core_cm0plus.h **** 
 811:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 812:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Set Pending Interrupt
 813:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
 814:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]      IRQn  Device specific interrupt number.
 815:Drivers/CMSIS/Include/core_cm0plus.h ****   \note    IRQn must not be negative.
 816:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 817:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
 818:Drivers/CMSIS/Include/core_cm0plus.h **** {
 819:Drivers/CMSIS/Include/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
 820:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 821:Drivers/CMSIS/Include/core_cm0plus.h ****     NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 822:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 823:Drivers/CMSIS/Include/core_cm0plus.h **** }
 824:Drivers/CMSIS/Include/core_cm0plus.h **** 
 825:Drivers/CMSIS/Include/core_cm0plus.h **** 
 826:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 827:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Clear Pending Interrupt
 828:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
 829:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]      IRQn  Device specific interrupt number.
 830:Drivers/CMSIS/Include/core_cm0plus.h ****   \note    IRQn must not be negative.
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s 			page 16


 831:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 832:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 833:Drivers/CMSIS/Include/core_cm0plus.h **** {
 834:Drivers/CMSIS/Include/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
 835:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 836:Drivers/CMSIS/Include/core_cm0plus.h ****     NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 837:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 838:Drivers/CMSIS/Include/core_cm0plus.h **** }
 839:Drivers/CMSIS/Include/core_cm0plus.h **** 
 840:Drivers/CMSIS/Include/core_cm0plus.h **** 
 841:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 842:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Set Interrupt Priority
 843:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Sets the priority of a device specific interrupt or a processor exception.
 844:Drivers/CMSIS/Include/core_cm0plus.h ****            The interrupt number can be positive to specify a device specific interrupt,
 845:Drivers/CMSIS/Include/core_cm0plus.h ****            or negative to specify a processor exception.
 846:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]      IRQn  Interrupt number.
 847:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]  priority  Priority to set.
 848:Drivers/CMSIS/Include/core_cm0plus.h ****   \note    The priority cannot be set for every processor exception.
 849:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 850:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 851:Drivers/CMSIS/Include/core_cm0plus.h **** {
 852:Drivers/CMSIS/Include/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
 853:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 854:Drivers/CMSIS/Include/core_cm0plus.h ****     NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))
 855:Drivers/CMSIS/Include/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 856:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 857:Drivers/CMSIS/Include/core_cm0plus.h ****   else
 858:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 859:Drivers/CMSIS/Include/core_cm0plus.h ****     SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))
 860:Drivers/CMSIS/Include/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 861:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 862:Drivers/CMSIS/Include/core_cm0plus.h **** }
 863:Drivers/CMSIS/Include/core_cm0plus.h **** 
 864:Drivers/CMSIS/Include/core_cm0plus.h **** 
 865:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 866:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Get Interrupt Priority
 867:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Reads the priority of a device specific interrupt or a processor exception.
 868:Drivers/CMSIS/Include/core_cm0plus.h ****            The interrupt number can be positive to specify a device specific interrupt,
 869:Drivers/CMSIS/Include/core_cm0plus.h ****            or negative to specify a processor exception.
 870:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]   IRQn  Interrupt number.
 871:Drivers/CMSIS/Include/core_cm0plus.h ****   \return             Interrupt Priority.
 872:Drivers/CMSIS/Include/core_cm0plus.h ****                       Value is aligned automatically to the implemented priority bits of the microc
 873:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 874:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
 875:Drivers/CMSIS/Include/core_cm0plus.h **** {
 876:Drivers/CMSIS/Include/core_cm0plus.h **** 
 877:Drivers/CMSIS/Include/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
 878:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 879:Drivers/CMSIS/Include/core_cm0plus.h ****     return((uint32_t)(((NVIC->IP[ _IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U -
 880:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 881:Drivers/CMSIS/Include/core_cm0plus.h ****   else
 882:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 883:Drivers/CMSIS/Include/core_cm0plus.h ****     return((uint32_t)(((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U -
 884:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 885:Drivers/CMSIS/Include/core_cm0plus.h **** }
 886:Drivers/CMSIS/Include/core_cm0plus.h **** 
 887:Drivers/CMSIS/Include/core_cm0plus.h **** 
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s 			page 17


 888:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 889:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Encode Priority
 890:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Encodes the priority for an interrupt with the given priority group,
 891:Drivers/CMSIS/Include/core_cm0plus.h ****            preemptive priority value, and subpriority value.
 892:Drivers/CMSIS/Include/core_cm0plus.h ****            In case of a conflict between priority grouping and available
 893:Drivers/CMSIS/Include/core_cm0plus.h ****            priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
 894:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]     PriorityGroup  Used priority group.
 895:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
 896:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]       SubPriority  Subpriority value (starting from 0).
 897:Drivers/CMSIS/Include/core_cm0plus.h ****   \return                        Encoded priority. Value can be used in the function \ref NVIC_SetP
 898:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 899:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uin
 900:Drivers/CMSIS/Include/core_cm0plus.h **** {
 901:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used   
 902:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t PreemptPriorityBits;
 903:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t SubPriorityBits;
 904:Drivers/CMSIS/Include/core_cm0plus.h **** 
 905:Drivers/CMSIS/Include/core_cm0plus.h ****   PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NV
 906:Drivers/CMSIS/Include/core_cm0plus.h ****   SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint
 907:Drivers/CMSIS/Include/core_cm0plus.h **** 
 908:Drivers/CMSIS/Include/core_cm0plus.h ****   return (
 909:Drivers/CMSIS/Include/core_cm0plus.h ****            ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits
 910:Drivers/CMSIS/Include/core_cm0plus.h ****            ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 911:Drivers/CMSIS/Include/core_cm0plus.h ****          );
 912:Drivers/CMSIS/Include/core_cm0plus.h **** }
 913:Drivers/CMSIS/Include/core_cm0plus.h **** 
 914:Drivers/CMSIS/Include/core_cm0plus.h **** 
 915:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 916:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Decode Priority
 917:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Decodes an interrupt priority value with a given priority group to
 918:Drivers/CMSIS/Include/core_cm0plus.h ****            preemptive priority value and subpriority value.
 919:Drivers/CMSIS/Include/core_cm0plus.h ****            In case of a conflict between priority grouping and available
 920:Drivers/CMSIS/Include/core_cm0plus.h ****            priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.
 921:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]         Priority   Priority value, which can be retrieved with the function \ref NVIC
 922:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]     PriorityGroup  Used priority group.
 923:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
 924:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [out]     pSubPriority  Subpriority value (starting from 0).
 925:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 926:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* cons
 927:Drivers/CMSIS/Include/core_cm0plus.h **** {
 928:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used   
 929:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t PreemptPriorityBits;
 930:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t SubPriorityBits;
 931:Drivers/CMSIS/Include/core_cm0plus.h **** 
 932:Drivers/CMSIS/Include/core_cm0plus.h ****   PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NV
 933:Drivers/CMSIS/Include/core_cm0plus.h ****   SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint
 934:Drivers/CMSIS/Include/core_cm0plus.h **** 
 935:Drivers/CMSIS/Include/core_cm0plus.h ****   *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1
 936:Drivers/CMSIS/Include/core_cm0plus.h ****   *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1
 937:Drivers/CMSIS/Include/core_cm0plus.h **** }
 938:Drivers/CMSIS/Include/core_cm0plus.h **** 
 939:Drivers/CMSIS/Include/core_cm0plus.h **** 
 940:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 941:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Set Interrupt Vector
 942:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Sets an interrupt vector in SRAM based interrupt vector table.
 943:Drivers/CMSIS/Include/core_cm0plus.h ****            The interrupt number can be positive to specify a device specific interrupt,
 944:Drivers/CMSIS/Include/core_cm0plus.h ****            or negative to specify a processor exception.
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s 			page 18


 945:Drivers/CMSIS/Include/core_cm0plus.h ****            VTOR must been relocated to SRAM before.
 946:Drivers/CMSIS/Include/core_cm0plus.h ****            If VTOR is not present address 0 must be mapped to SRAM.
 947:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]   IRQn      Interrupt number
 948:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]   vector    Address of interrupt handler function
 949:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 950:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE void __NVIC_SetVector(IRQn_Type IRQn, uint32_t vector)
 951:Drivers/CMSIS/Include/core_cm0plus.h **** {
 952:Drivers/CMSIS/Include/core_cm0plus.h **** #if defined (__VTOR_PRESENT) && (__VTOR_PRESENT == 1U)
 953:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t *vectors = (uint32_t *)SCB->VTOR;
 954:Drivers/CMSIS/Include/core_cm0plus.h ****   vectors[(int32_t)IRQn + NVIC_USER_IRQ_OFFSET] = vector;
 955:Drivers/CMSIS/Include/core_cm0plus.h **** #else
 956:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t *vectors = (uint32_t *)(NVIC_USER_IRQ_OFFSET << 2);      /* point to 1st user interrupt 
 957:Drivers/CMSIS/Include/core_cm0plus.h ****   *(vectors + (int32_t)IRQn) = vector;                              /* use pointer arithmetic to ac
 958:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 959:Drivers/CMSIS/Include/core_cm0plus.h ****   /* ARM Application Note 321 states that the M0+ does not require the architectural barrier */
 960:Drivers/CMSIS/Include/core_cm0plus.h **** }
 961:Drivers/CMSIS/Include/core_cm0plus.h **** 
 962:Drivers/CMSIS/Include/core_cm0plus.h **** 
 963:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 964:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Get Interrupt Vector
 965:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Reads an interrupt vector from interrupt vector table.
 966:Drivers/CMSIS/Include/core_cm0plus.h ****            The interrupt number can be positive to specify a device specific interrupt,
 967:Drivers/CMSIS/Include/core_cm0plus.h ****            or negative to specify a processor exception.
 968:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]   IRQn      Interrupt number.
 969:Drivers/CMSIS/Include/core_cm0plus.h ****   \return                 Address of interrupt handler function
 970:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 971:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE uint32_t __NVIC_GetVector(IRQn_Type IRQn)
 972:Drivers/CMSIS/Include/core_cm0plus.h **** {
 973:Drivers/CMSIS/Include/core_cm0plus.h **** #if defined (__VTOR_PRESENT) && (__VTOR_PRESENT == 1U)
 974:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t *vectors = (uint32_t *)SCB->VTOR;
 975:Drivers/CMSIS/Include/core_cm0plus.h ****   return vectors[(int32_t)IRQn + NVIC_USER_IRQ_OFFSET];
 976:Drivers/CMSIS/Include/core_cm0plus.h **** #else
 977:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t *vectors = (uint32_t *)(NVIC_USER_IRQ_OFFSET << 2);      /* point to 1st user interrupt 
 978:Drivers/CMSIS/Include/core_cm0plus.h ****   return *(vectors + (int32_t)IRQn);                                /* use pointer arithmetic to ac
 979:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 980:Drivers/CMSIS/Include/core_cm0plus.h **** }
 981:Drivers/CMSIS/Include/core_cm0plus.h **** 
 982:Drivers/CMSIS/Include/core_cm0plus.h **** 
 983:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 984:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   System Reset
 985:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Initiates a system reset request to reset the MCU.
 986:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 987:Drivers/CMSIS/Include/core_cm0plus.h **** __NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
 988:Drivers/CMSIS/Include/core_cm0plus.h **** {
  27              		.loc 2 988 1 view -0
  28              		.cfi_startproc
  29              		@ Volatile: function does not return.
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
 989:Drivers/CMSIS/Include/core_cm0plus.h ****   __DSB();                                                          /* Ensure all outstanding memor
  33              		.loc 2 989 3 view .LVU1
  34              	.LBB8:
  35              	.LBI8:
  36              		.file 3 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s 			page 19


   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.4.1
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     27. May 2021
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s 			page 20


  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s 			page 21


 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s 			page 22


 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
 200:Drivers/CMSIS/Include/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 203:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 204:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 208:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 215:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 223:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 226:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s 			page 23


 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 244:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 245:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 248:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 258:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 265:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
  37              		.loc 3 269 27 view .LVU2
  38              	.LBB9:
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
  39              		.loc 3 271 3 view .LVU3
  40              		.syntax divided
  41              	@ 271 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
  42 0000 BFF34F8F 		dsb 0xF
  43              	@ 0 "" 2
  44              		.thumb
  45              		.syntax unified
  46              	.LBE9:
  47              	.LBE8:
 990:Drivers/CMSIS/Include/core_cm0plus.h ****                                                                        buffered write are completed
 991:Drivers/CMSIS/Include/core_cm0plus.h ****   SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
  48              		.loc 2 991 3 view .LVU4
  49              		.loc 2 991 15 is_stmt 0 view .LVU5
  50 0004 034B     		ldr	r3, .L3
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s 			page 24


  51 0006 044A     		ldr	r2, .L3+4
  52 0008 DA60     		str	r2, [r3, #12]
 992:Drivers/CMSIS/Include/core_cm0plus.h ****                  SCB_AIRCR_SYSRESETREQ_Msk);
 993:Drivers/CMSIS/Include/core_cm0plus.h ****   __DSB();                                                          /* Ensure completion of memory 
  53              		.loc 2 993 3 is_stmt 1 view .LVU6
  54              	.LBB10:
  55              	.LBI10:
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  56              		.loc 3 269 27 view .LVU7
  57              	.LBB11:
  58              		.loc 3 271 3 view .LVU8
  59              		.syntax divided
  60              	@ 271 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
  61 000a BFF34F8F 		dsb 0xF
  62              	@ 0 "" 2
  63              		.thumb
  64              		.syntax unified
  65              	.L2:
  66              	.LBE11:
  67              	.LBE10:
 994:Drivers/CMSIS/Include/core_cm0plus.h **** 
 995:Drivers/CMSIS/Include/core_cm0plus.h ****   for(;;)                                                           /* wait until reset */
  68              		.loc 2 995 3 view .LVU9
 996:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 997:Drivers/CMSIS/Include/core_cm0plus.h ****     __NOP();
  69              		.loc 2 997 5 discriminator 1 view .LVU10
  70              		.syntax divided
  71              	@ 997 "Drivers/CMSIS/Include/core_cm0plus.h" 1
  72 000e C046     		nop
  73              	@ 0 "" 2
 995:Drivers/CMSIS/Include/core_cm0plus.h ****   {
  74              		.loc 2 995 3 view .LVU11
  75              		.thumb
  76              		.syntax unified
  77 0010 FDE7     		b	.L2
  78              	.L4:
  79 0012 C046     		.align	2
  80              	.L3:
  81 0014 00ED00E0 		.word	-536810240
  82 0018 0400FA05 		.word	100270084
  83              		.cfi_endproc
  84              	.LFE39:
  86              		.section	.text.MX_GPIO_Init,"ax",%progbits
  87              		.align	1
  88              		.syntax unified
  89              		.code	16
  90              		.thumb_func
  92              	MX_GPIO_Init:
  93              	.LFB355:
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s 			page 25


   9:Core/Src/main.c ****   * Copyright (c) 2025 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** 
  22:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  23:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  24:Core/Src/main.c **** 
  25:Core/Src/main.c **** #include <string.h>
  26:Core/Src/main.c **** #include <stdio.h>
  27:Core/Src/main.c **** #include <stdlib.h>
  28:Core/Src/main.c **** #include <time.h>
  29:Core/Src/main.c **** #include <stdbool.h>
  30:Core/Src/main.c **** #include "fsm.h"
  31:Core/Src/main.c **** 
  32:Core/Src/main.c **** /* USER CODE END Includes */
  33:Core/Src/main.c **** 
  34:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  35:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  36:Core/Src/main.c **** 
  37:Core/Src/main.c **** /* USER CODE END PTD */
  38:Core/Src/main.c **** 
  39:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  40:Core/Src/main.c **** /* USER CODE BEGIN PD */
  41:Core/Src/main.c **** 
  42:Core/Src/main.c **** #define M_PI 3.14159265358979323846
  43:Core/Src/main.c **** 
  44:Core/Src/main.c **** #define ADC_BUF_LEN 64
  45:Core/Src/main.c **** #define RX_BUF_LEN 64
  46:Core/Src/main.c **** #define FILTER_LEN 150
  47:Core/Src/main.c **** 
  48:Core/Src/main.c **** /* USER CODE END PD */
  49:Core/Src/main.c **** 
  50:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  51:Core/Src/main.c **** /* USER CODE BEGIN PM */
  52:Core/Src/main.c **** 
  53:Core/Src/main.c **** /* USER CODE END PM */
  54:Core/Src/main.c **** 
  55:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  56:Core/Src/main.c **** 
  57:Core/Src/main.c **** ADC_HandleTypeDef hadc1;
  58:Core/Src/main.c **** DMA_HandleTypeDef hdma_adc1;
  59:Core/Src/main.c **** 
  60:Core/Src/main.c **** TIM_HandleTypeDef htim14;
  61:Core/Src/main.c **** 
  62:Core/Src/main.c **** UART_HandleTypeDef huart2;
  63:Core/Src/main.c **** 
  64:Core/Src/main.c **** /* USER CODE BEGIN PV */
  65:Core/Src/main.c **** 
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s 			page 26


  66:Core/Src/main.c **** // adc buffer
  67:Core/Src/main.c **** uint16_t adc_buf[ADC_BUF_LEN];
  68:Core/Src/main.c **** bool adc_dma_started = false;
  69:Core/Src/main.c **** 
  70:Core/Src/main.c **** // usart
  71:Core/Src/main.c **** uint8_t rx_byte;
  72:Core/Src/main.c **** uint8_t rx_buf[RX_BUF_LEN];
  73:Core/Src/main.c **** uint16_t rx_idx = 0;
  74:Core/Src/main.c **** 
  75:Core/Src/main.c **** // moving average filter
  76:Core/Src/main.c **** uint16_t filter_out = 0;
  77:Core/Src/main.c **** uint16_t filter_buf[FILTER_LEN];
  78:Core/Src/main.c **** uint16_t counter = 0;
  79:Core/Src/main.c **** uint32_t sum = 0;
  80:Core/Src/main.c **** 
  81:Core/Src/main.c **** // level detection in listening state
  82:Core/Src/main.c **** uint32_t hall_high_time = 0;
  83:Core/Src/main.c **** 
  84:Core/Src/main.c **** // available commands
  85:Core/Src/main.c **** typedef enum
  86:Core/Src/main.c **** {
  87:Core/Src/main.c ****   CMD_RAW = 0b00,
  88:Core/Src/main.c ****   CMD_MOVING_AVG = 0b01,
  89:Core/Src/main.c ****   CMD_RAND_NOISE = 0b10
  90:Core/Src/main.c **** } cmd_t;
  91:Core/Src/main.c **** 
  92:Core/Src/main.c **** // default command
  93:Core/Src/main.c **** cmd_t selected_cmd = CMD_RAW;
  94:Core/Src/main.c **** 
  95:Core/Src/main.c **** // List of state functions
  96:Core/Src/main.c **** state_func_t *const state_table[NUM_STATES] = {
  97:Core/Src/main.c ****   do_INIT,         // in state INIT
  98:Core/Src/main.c ****   do_WAIT_REQUEST, // in state WAIT_REQUEST
  99:Core/Src/main.c ****   do_ERROR,        // in state ERROR
 100:Core/Src/main.c ****   do_LISTENING,    // in state LISTENING
 101:Core/Src/main.c ****   do_WARNING,      // in state WARNING
 102:Core/Src/main.c ****   do_PAUSE,        // in state PAUSE
 103:Core/Src/main.c **** };
 104:Core/Src/main.c **** 
 105:Core/Src/main.c **** /* USER CODE END PV */
 106:Core/Src/main.c **** 
 107:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
 108:Core/Src/main.c **** static void MX_GPIO_Init(void);
 109:Core/Src/main.c **** static void MX_DMA_Init(void);
 110:Core/Src/main.c **** /* USER CODE BEGIN PFP */
 111:Core/Src/main.c **** 
 112:Core/Src/main.c **** void print(const char* msg)
 113:Core/Src/main.c **** {
 114:Core/Src/main.c ****   HAL_UART_Transmit_IT(&huart2, (uint8_t*)msg, strlen(msg));
 115:Core/Src/main.c **** }
 116:Core/Src/main.c **** 
 117:Core/Src/main.c **** uint16_t map(uint16_t val, uint16_t in_min, uint16_t in_max, uint16_t out_min, uint16_t out_max)
 118:Core/Src/main.c **** {
 119:Core/Src/main.c ****   // Preso da https://docs.arduino.cc/language-reference/en/functions/math/map/#appendix
 120:Core/Src/main.c **** 
 121:Core/Src/main.c ****   return (val - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 122:Core/Src/main.c **** }
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s 			page 27


 123:Core/Src/main.c **** 
 124:Core/Src/main.c **** uint16_t toMilliVolt(uint16_t val)
 125:Core/Src/main.c **** {
 126:Core/Src/main.c ****   // Del tutto equivalente a map(val, 0, 4095, 0, 5000) ma usato per semplicità
 127:Core/Src/main.c **** 
 128:Core/Src/main.c ****   return (val * 5000) / 4095;
 129:Core/Src/main.c **** }
 130:Core/Src/main.c **** 
 131:Core/Src/main.c **** uint16_t correct(long val)
 132:Core/Src/main.c **** {
 133:Core/Src/main.c ****   if (val < 0) { return (uint16_t)0; }
 134:Core/Src/main.c ****   if (val > 5000) { return (uint16_t)5000; }
 135:Core/Src/main.c ****   return val;
 136:Core/Src/main.c **** }
 137:Core/Src/main.c **** 
 138:Core/Src/main.c **** float gaussian_noise_clt(float mean, float stddev)
 139:Core/Src/main.c **** {
 140:Core/Src/main.c ****   float sum = .0f;
 141:Core/Src/main.c **** 
 142:Core/Src/main.c ****   for (int i = 0; i < 6; i++)
 143:Core/Src/main.c ****   {
 144:Core/Src/main.c ****     sum += ((float)rand() / RAND_MAX);
 145:Core/Src/main.c ****   }
 146:Core/Src/main.c ****   sum -= 3.0f;
 147:Core/Src/main.c **** 
 148:Core/Src/main.c ****   return mean + stddev * sum;
 149:Core/Src/main.c **** }
 150:Core/Src/main.c **** 
 151:Core/Src/main.c **** void start_timer(uint32_t ms)
 152:Core/Src/main.c **** {
 153:Core/Src/main.c ****   uint32_t period = ms - 1;
 154:Core/Src/main.c ****   __HAL_TIM_SET_AUTORELOAD(&htim14, period);
 155:Core/Src/main.c ****   HAL_TIM_Base_Start_IT(&htim14);
 156:Core/Src/main.c **** }
 157:Core/Src/main.c **** 
 158:Core/Src/main.c **** void stop_timer()
 159:Core/Src/main.c **** {
 160:Core/Src/main.c ****   HAL_TIM_Base_Stop_IT(&htim14);
 161:Core/Src/main.c **** }
 162:Core/Src/main.c **** 
 163:Core/Src/main.c **** void cli_process_cmd(const char* cmd)
 164:Core/Src/main.c **** {
 165:Core/Src/main.c ****   if (strcmp(cmd, "raw") == 0) 
 166:Core/Src/main.c ****   {
 167:Core/Src/main.c ****     print("removed all filters\r\n");
 168:Core/Src/main.c ****     selected_cmd = CMD_RAW;
 169:Core/Src/main.c ****   }
 170:Core/Src/main.c ****   else if (strcmp(cmd, "moving average") == 0) 
 171:Core/Src/main.c ****   { 
 172:Core/Src/main.c ****     selected_cmd ^= CMD_MOVING_AVG;
 173:Core/Src/main.c **** 
 174:Core/Src/main.c ****     if (selected_cmd & CMD_MOVING_AVG)
 175:Core/Src/main.c ****     {
 176:Core/Src/main.c ****       print("moving average on\r\n");
 177:Core/Src/main.c ****     }
 178:Core/Src/main.c ****     else
 179:Core/Src/main.c ****     {
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s 			page 28


 180:Core/Src/main.c ****       print("moving average off\r\n");
 181:Core/Src/main.c ****     }
 182:Core/Src/main.c ****   }
 183:Core/Src/main.c ****   else if (strcmp(cmd, "random noise") == 0) 
 184:Core/Src/main.c ****   {
 185:Core/Src/main.c ****     selected_cmd ^= CMD_RAND_NOISE;
 186:Core/Src/main.c **** 
 187:Core/Src/main.c ****     if (selected_cmd & CMD_RAND_NOISE)
 188:Core/Src/main.c ****     {
 189:Core/Src/main.c ****       print("random noise on\r\n");
 190:Core/Src/main.c ****     }
 191:Core/Src/main.c ****     else
 192:Core/Src/main.c ****     {
 193:Core/Src/main.c ****       print("random noise off\r\n");
 194:Core/Src/main.c ****     }
 195:Core/Src/main.c ****   }
 196:Core/Src/main.c ****   else
 197:Core/Src/main.c ****   {
 198:Core/Src/main.c ****     char msg[64];
 199:Core/Src/main.c ****     snprintf(msg, sizeof(msg), "unknown command: %s\r\n", cmd);
 200:Core/Src/main.c ****     print(msg);
 201:Core/Src/main.c ****   }
 202:Core/Src/main.c **** }
 203:Core/Src/main.c **** 
 204:Core/Src/main.c **** /* USER CODE END PFP */
 205:Core/Src/main.c **** 
 206:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
 207:Core/Src/main.c **** /* USER CODE BEGIN 0 */
 208:Core/Src/main.c **** 
 209:Core/Src/main.c **** /* USER CODE END 0 */
 210:Core/Src/main.c **** 
 211:Core/Src/main.c ****   state_t current_state = STATE_INIT;
 212:Core/Src/main.c **** 
 213:Core/Src/main.c **** /**
 214:Core/Src/main.c ****   * @brief  The application entry point.
 215:Core/Src/main.c ****   * @retval int
 216:Core/Src/main.c ****   */
 217:Core/Src/main.c **** int main(void)
 218:Core/Src/main.c **** {
 219:Core/Src/main.c ****   while (1)
 220:Core/Src/main.c ****   {
 221:Core/Src/main.c ****     current_state = run_state(current_state);
 222:Core/Src/main.c ****   }
 223:Core/Src/main.c ****   /* USER CODE END 3 */
 224:Core/Src/main.c **** }
 225:Core/Src/main.c **** 
 226:Core/Src/main.c **** /**
 227:Core/Src/main.c ****   * Enable DMA controller clock
 228:Core/Src/main.c ****   */
 229:Core/Src/main.c **** static void MX_DMA_Init(void)
 230:Core/Src/main.c **** {
 231:Core/Src/main.c ****   /* DMA controller clock enable */
 232:Core/Src/main.c ****   __HAL_RCC_DMA1_CLK_ENABLE();
 233:Core/Src/main.c **** 
 234:Core/Src/main.c ****   /* DMA interrupt init */
 235:Core/Src/main.c ****   /* DMA1_Channel1_IRQn interrupt configuration */
 236:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s 			page 29


 237:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 238:Core/Src/main.c **** }
 239:Core/Src/main.c **** 
 240:Core/Src/main.c **** /**
 241:Core/Src/main.c ****   * @brief GPIO Initialization Function
 242:Core/Src/main.c ****   * @param None
 243:Core/Src/main.c ****   * @retval None
 244:Core/Src/main.c ****   */
 245:Core/Src/main.c **** static void MX_GPIO_Init(void)
 246:Core/Src/main.c **** {
  94              		.loc 1 246 1 view -0
  95              		.cfi_startproc
  96              		@ args = 0, pretend = 0, frame = 32
  97              		@ frame_needed = 0, uses_anonymous_args = 0
  98 0000 10B5     		push	{r4, lr}
  99              		.cfi_def_cfa_offset 8
 100              		.cfi_offset 4, -8
 101              		.cfi_offset 14, -4
 102 0002 88B0     		sub	sp, sp, #32
 103              		.cfi_def_cfa_offset 40
 247:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
 104              		.loc 1 247 3 view .LVU13
 105              		.loc 1 247 20 is_stmt 0 view .LVU14
 106 0004 03AC     		add	r4, sp, #12
 107 0006 1422     		movs	r2, #20
 108 0008 0021     		movs	r1, #0
 109 000a 2000     		movs	r0, r4
 110 000c FFF7FEFF 		bl	memset
 111              	.LVL0:
 248:Core/Src/main.c ****   /* USER CODE BEGIN MX_GPIO_Init_1 */
 249:Core/Src/main.c **** 
 250:Core/Src/main.c ****   /* USER CODE END MX_GPIO_Init_1 */
 251:Core/Src/main.c **** 
 252:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 253:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
 112              		.loc 1 253 3 is_stmt 1 view .LVU15
 113              	.LBB12:
 114              		.loc 1 253 3 view .LVU16
 115              		.loc 1 253 3 view .LVU17
 116 0010 104B     		ldr	r3, .L6
 117 0012 596B     		ldr	r1, [r3, #52]
 118 0014 0422     		movs	r2, #4
 119 0016 1143     		orrs	r1, r2
 120 0018 5963     		str	r1, [r3, #52]
 121              		.loc 1 253 3 view .LVU18
 122 001a 596B     		ldr	r1, [r3, #52]
 123 001c 0A40     		ands	r2, r1
 124 001e 0092     		str	r2, [sp]
 125              		.loc 1 253 3 view .LVU19
 126 0020 009A     		ldr	r2, [sp]
 127              	.LBE12:
 128              		.loc 1 253 3 view .LVU20
 254:Core/Src/main.c ****   __HAL_RCC_GPIOF_CLK_ENABLE();
 129              		.loc 1 254 3 view .LVU21
 130              	.LBB13:
 131              		.loc 1 254 3 view .LVU22
 132              		.loc 1 254 3 view .LVU23
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s 			page 30


 133 0022 596B     		ldr	r1, [r3, #52]
 134 0024 2022     		movs	r2, #32
 135 0026 1143     		orrs	r1, r2
 136 0028 5963     		str	r1, [r3, #52]
 137              		.loc 1 254 3 view .LVU24
 138 002a 596B     		ldr	r1, [r3, #52]
 139 002c 0A40     		ands	r2, r1
 140 002e 0192     		str	r2, [sp, #4]
 141              		.loc 1 254 3 view .LVU25
 142 0030 019A     		ldr	r2, [sp, #4]
 143              	.LBE13:
 144              		.loc 1 254 3 view .LVU26
 255:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 145              		.loc 1 255 3 view .LVU27
 146              	.LBB14:
 147              		.loc 1 255 3 view .LVU28
 148              		.loc 1 255 3 view .LVU29
 149 0032 596B     		ldr	r1, [r3, #52]
 150 0034 0122     		movs	r2, #1
 151 0036 1143     		orrs	r1, r2
 152 0038 5963     		str	r1, [r3, #52]
 153              		.loc 1 255 3 view .LVU30
 154 003a 5B6B     		ldr	r3, [r3, #52]
 155 003c 1340     		ands	r3, r2
 156 003e 0293     		str	r3, [sp, #8]
 157              		.loc 1 255 3 view .LVU31
 158 0040 029B     		ldr	r3, [sp, #8]
 159              	.LBE14:
 160              		.loc 1 255 3 view .LVU32
 256:Core/Src/main.c **** 
 257:Core/Src/main.c ****   /*Configure GPIO pin : HALL_DIGITAL_Pin */
 258:Core/Src/main.c ****   GPIO_InitStruct.Pin = HALL_DIGITAL_Pin;
 161              		.loc 1 258 3 view .LVU33
 162              		.loc 1 258 23 is_stmt 0 view .LVU34
 163 0042 0392     		str	r2, [sp, #12]
 259:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 164              		.loc 1 259 3 is_stmt 1 view .LVU35
 260:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
 165              		.loc 1 260 3 view .LVU36
 166              		.loc 1 260 24 is_stmt 0 view .LVU37
 167 0044 0592     		str	r2, [sp, #20]
 261:Core/Src/main.c ****   HAL_GPIO_Init(HALL_DIGITAL_GPIO_Port, &GPIO_InitStruct);
 168              		.loc 1 261 3 is_stmt 1 view .LVU38
 169 0046 A020     		movs	r0, #160
 170 0048 2100     		movs	r1, r4
 171 004a C005     		lsls	r0, r0, #23
 172 004c FFF7FEFF 		bl	HAL_GPIO_Init
 173              	.LVL1:
 262:Core/Src/main.c **** 
 263:Core/Src/main.c ****   /* USER CODE BEGIN MX_GPIO_Init_2 */
 264:Core/Src/main.c **** 
 265:Core/Src/main.c ****   /* USER CODE END MX_GPIO_Init_2 */
 266:Core/Src/main.c **** }
 174              		.loc 1 266 1 is_stmt 0 view .LVU39
 175 0050 08B0     		add	sp, sp, #32
 176              		@ sp needed
 177 0052 10BD     		pop	{r4, pc}
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s 			page 31


 178              	.L7:
 179              		.align	2
 180              	.L6:
 181 0054 00100240 		.word	1073876992
 182              		.cfi_endproc
 183              	.LFE355:
 185              		.section	.text.MX_DMA_Init,"ax",%progbits
 186              		.align	1
 187              		.syntax unified
 188              		.code	16
 189              		.thumb_func
 191              	MX_DMA_Init:
 192              	.LFB354:
 230:Core/Src/main.c ****   /* DMA controller clock enable */
 193              		.loc 1 230 1 is_stmt 1 view -0
 194              		.cfi_startproc
 195              		@ args = 0, pretend = 0, frame = 8
 196              		@ frame_needed = 0, uses_anonymous_args = 0
 197 0000 00B5     		push	{lr}
 198              		.cfi_def_cfa_offset 4
 199              		.cfi_offset 14, -4
 200 0002 83B0     		sub	sp, sp, #12
 201              		.cfi_def_cfa_offset 16
 232:Core/Src/main.c **** 
 202              		.loc 1 232 3 view .LVU41
 203              	.LBB15:
 232:Core/Src/main.c **** 
 204              		.loc 1 232 3 view .LVU42
 232:Core/Src/main.c **** 
 205              		.loc 1 232 3 view .LVU43
 206 0004 094A     		ldr	r2, .L9
 207 0006 916B     		ldr	r1, [r2, #56]
 208 0008 0123     		movs	r3, #1
 209 000a 1943     		orrs	r1, r3
 210 000c 9163     		str	r1, [r2, #56]
 232:Core/Src/main.c **** 
 211              		.loc 1 232 3 view .LVU44
 212 000e 926B     		ldr	r2, [r2, #56]
 213 0010 1340     		ands	r3, r2
 214 0012 0193     		str	r3, [sp, #4]
 232:Core/Src/main.c **** 
 215              		.loc 1 232 3 view .LVU45
 216 0014 019B     		ldr	r3, [sp, #4]
 217              	.LBE15:
 232:Core/Src/main.c **** 
 218              		.loc 1 232 3 view .LVU46
 236:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 219              		.loc 1 236 3 view .LVU47
 220 0016 0022     		movs	r2, #0
 221 0018 0021     		movs	r1, #0
 222 001a 0920     		movs	r0, #9
 223 001c FFF7FEFF 		bl	HAL_NVIC_SetPriority
 224              	.LVL2:
 237:Core/Src/main.c **** }
 225              		.loc 1 237 3 view .LVU48
 226 0020 0920     		movs	r0, #9
 227 0022 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s 			page 32


 228              	.LVL3:
 238:Core/Src/main.c **** 
 229              		.loc 1 238 1 is_stmt 0 view .LVU49
 230 0026 03B0     		add	sp, sp, #12
 231              		@ sp needed
 232 0028 00BD     		pop	{pc}
 233              	.L10:
 234 002a C046     		.align	2
 235              	.L9:
 236 002c 00100240 		.word	1073876992
 237              		.cfi_endproc
 238              	.LFE354:
 240              		.section	.text.do_INIT,"ax",%progbits
 241              		.align	1
 242              		.global	do_INIT
 243              		.syntax unified
 244              		.code	16
 245              		.thumb_func
 247              	do_INIT:
 248              	.LFB356:
 267:Core/Src/main.c **** 
 268:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 269:Core/Src/main.c **** 
 270:Core/Src/main.c **** state_t do_INIT(void) 
 271:Core/Src/main.c **** {
 249              		.loc 1 271 1 is_stmt 1 view -0
 250              		.cfi_startproc
 251              		@ args = 0, pretend = 0, frame = 64
 252              		@ frame_needed = 0, uses_anonymous_args = 0
 253 0000 30B5     		push	{r4, r5, lr}
 254              		.cfi_def_cfa_offset 12
 255              		.cfi_offset 4, -12
 256              		.cfi_offset 5, -8
 257              		.cfi_offset 14, -4
 258 0002 91B0     		sub	sp, sp, #68
 259              		.cfi_def_cfa_offset 80
 272:Core/Src/main.c ****   state_t next_state = STATE_WAIT_REQUEST;
 260              		.loc 1 272 3 view .LVU51
 261              	.LVL4:
 273:Core/Src/main.c **** 
 274:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 275:Core/Src/main.c **** 
 276:Core/Src/main.c ****   /* USER CODE END 1 */
 277:Core/Src/main.c **** 
 278:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 279:Core/Src/main.c **** 
 280:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 281:Core/Src/main.c ****   if (HAL_Init() != HAL_OK) { next_state = STATE_ERROR; };
 262              		.loc 1 281 3 view .LVU52
 263              		.loc 1 281 7 is_stmt 0 view .LVU53
 264 0004 FFF7FEFF 		bl	HAL_Init
 265              	.LVL5:
 266              		.loc 1 281 6 discriminator 1 view .LVU54
 267 0008 0028     		cmp	r0, #0
 268 000a 00D0     		beq	.LCB193
 269 000c 9AE0     		b	.L20	@long jump
 270              	.LCB193:
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s 			page 33


 272:Core/Src/main.c ****   state_t next_state = STATE_WAIT_REQUEST;
 271              		.loc 1 272 11 view .LVU55
 272 000e 0124     		movs	r4, #1
 273              	.L12:
 274              	.LVL6:
 275              		.loc 1 281 58 is_stmt 1 discriminator 3 view .LVU56
 282:Core/Src/main.c **** 
 283:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 284:Core/Src/main.c **** 
 285:Core/Src/main.c ****   /* USER CODE END Init */
 286:Core/Src/main.c **** 
 287:Core/Src/main.c ****   /* Configure the system clock */
 288:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 276              		.loc 1 288 3 view .LVU57
 277              		.loc 1 288 22 is_stmt 0 view .LVU58
 278 0010 09AD     		add	r5, sp, #36
 279 0012 1C22     		movs	r2, #28
 280 0014 0021     		movs	r1, #0
 281 0016 2800     		movs	r0, r5
 282 0018 FFF7FEFF 		bl	memset
 283              	.LVL7:
 289:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 284              		.loc 1 289 3 is_stmt 1 view .LVU59
 285              		.loc 1 289 22 is_stmt 0 view .LVU60
 286 001c 1422     		movs	r2, #20
 287 001e 0021     		movs	r1, #0
 288 0020 04A8     		add	r0, sp, #16
 289 0022 FFF7FEFF 		bl	memset
 290              	.LVL8:
 290:Core/Src/main.c **** 
 291:Core/Src/main.c ****   __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_1);
 291              		.loc 1 291 3 is_stmt 1 view .LVU61
 292 0026 4949     		ldr	r1, .L29
 293 0028 0B68     		ldr	r3, [r1]
 294 002a 0722     		movs	r2, #7
 295 002c 9343     		bics	r3, r2
 296 002e 063A     		subs	r2, r2, #6
 297 0030 1343     		orrs	r3, r2
 298 0032 0B60     		str	r3, [r1]
 292:Core/Src/main.c **** 
 293:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 294:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 295:Core/Src/main.c ****   */
 296:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 299              		.loc 1 296 3 view .LVU62
 300              		.loc 1 296 36 is_stmt 0 view .LVU63
 301 0034 0992     		str	r2, [sp, #36]
 297:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 302              		.loc 1 297 3 is_stmt 1 view .LVU64
 303              		.loc 1 297 30 is_stmt 0 view .LVU65
 304 0036 8023     		movs	r3, #128
 305 0038 5B02     		lsls	r3, r3, #9
 306 003a 0A93     		str	r3, [sp, #40]
 298:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 307              		.loc 1 298 3 is_stmt 1 view .LVU66
 308              		.loc 1 298 7 is_stmt 0 view .LVU67
 309 003c 2800     		movs	r0, r5
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s 			page 34


 310 003e FFF7FEFF 		bl	HAL_RCC_OscConfig
 311              	.LVL9:
 312              		.loc 1 298 6 discriminator 1 view .LVU68
 313 0042 0028     		cmp	r0, #0
 314 0044 00D0     		beq	.L13
 299:Core/Src/main.c ****   {
 300:Core/Src/main.c ****     next_state = STATE_ERROR;
 315              		.loc 1 300 16 view .LVU69
 316 0046 0224     		movs	r4, #2
 317              	.LVL10:
 318              	.L13:
 301:Core/Src/main.c ****   }
 302:Core/Src/main.c **** 
 303:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 304:Core/Src/main.c ****   */
 305:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 319              		.loc 1 305 3 is_stmt 1 view .LVU70
 320              		.loc 1 305 31 is_stmt 0 view .LVU71
 321 0048 04A8     		add	r0, sp, #16
 322 004a 0723     		movs	r3, #7
 323 004c 0493     		str	r3, [sp, #16]
 306:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1;
 307:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 324              		.loc 1 307 3 is_stmt 1 view .LVU72
 325              		.loc 1 307 34 is_stmt 0 view .LVU73
 326 004e 063B     		subs	r3, r3, #6
 327 0050 4360     		str	r3, [r0, #4]
 308:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 328              		.loc 1 308 3 is_stmt 1 view .LVU74
 329              		.loc 1 308 35 is_stmt 0 view .LVU75
 330 0052 0023     		movs	r3, #0
 331 0054 8360     		str	r3, [r0, #8]
 309:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 332              		.loc 1 309 3 is_stmt 1 view .LVU76
 333              		.loc 1 309 35 is_stmt 0 view .LVU77
 334 0056 C360     		str	r3, [r0, #12]
 310:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 335              		.loc 1 310 3 is_stmt 1 view .LVU78
 336              		.loc 1 310 36 is_stmt 0 view .LVU79
 337 0058 0361     		str	r3, [r0, #16]
 311:Core/Src/main.c **** 
 312:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 338              		.loc 1 312 3 is_stmt 1 view .LVU80
 339              		.loc 1 312 7 is_stmt 0 view .LVU81
 340 005a 0121     		movs	r1, #1
 341 005c FFF7FEFF 		bl	HAL_RCC_ClockConfig
 342              	.LVL11:
 343              		.loc 1 312 6 discriminator 1 view .LVU82
 344 0060 0028     		cmp	r0, #0
 345 0062 00D0     		beq	.L14
 313:Core/Src/main.c ****   {
 314:Core/Src/main.c ****     next_state = STATE_ERROR;
 346              		.loc 1 314 16 view .LVU83
 347 0064 0224     		movs	r4, #2
 348              	.LVL12:
 349              	.L14:
 315:Core/Src/main.c ****   }
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s 			page 35


 316:Core/Src/main.c **** 
 317:Core/Src/main.c **** 
 318:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 319:Core/Src/main.c **** 
 320:Core/Src/main.c ****   /* USER CODE END SysInit */
 321:Core/Src/main.c **** 
 322:Core/Src/main.c ****   /* Initialize all configured peripherals */
 323:Core/Src/main.c ****   MX_GPIO_Init();
 350              		.loc 1 323 3 is_stmt 1 view .LVU84
 351 0066 FFF7FEFF 		bl	MX_GPIO_Init
 352              	.LVL13:
 324:Core/Src/main.c ****   MX_DMA_Init();
 353              		.loc 1 324 3 view .LVU85
 354 006a FFF7FEFF 		bl	MX_DMA_Init
 355              	.LVL14:
 325:Core/Src/main.c ****   
 326:Core/Src/main.c **** 
 327:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 0 */
 328:Core/Src/main.c **** 
 329:Core/Src/main.c ****   /* USER CODE END ADC1_Init 0 */
 330:Core/Src/main.c **** 
 331:Core/Src/main.c ****   ADC_ChannelConfTypeDef sConfig = {0};
 356              		.loc 1 331 3 view .LVU86
 357              		.loc 1 331 26 is_stmt 0 view .LVU87
 358 006e 0C22     		movs	r2, #12
 359 0070 0021     		movs	r1, #0
 360 0072 01A8     		add	r0, sp, #4
 361 0074 FFF7FEFF 		bl	memset
 362              	.LVL15:
 332:Core/Src/main.c **** 
 333:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 1 */
 334:Core/Src/main.c **** 
 335:Core/Src/main.c ****   /* USER CODE END ADC1_Init 1 */
 336:Core/Src/main.c **** 
 337:Core/Src/main.c ****   /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of con
 338:Core/Src/main.c ****   */
 339:Core/Src/main.c ****   hadc1.Instance = ADC1;
 363              		.loc 1 339 3 is_stmt 1 view .LVU88
 364              		.loc 1 339 18 is_stmt 0 view .LVU89
 365 0078 3548     		ldr	r0, .L29+4
 366 007a 364B     		ldr	r3, .L29+8
 367 007c 0360     		str	r3, [r0]
 340:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 368              		.loc 1 340 3 is_stmt 1 view .LVU90
 369              		.loc 1 340 29 is_stmt 0 view .LVU91
 370 007e 8023     		movs	r3, #128
 371 0080 DB05     		lsls	r3, r3, #23
 372 0082 4360     		str	r3, [r0, #4]
 341:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 373              		.loc 1 341 3 is_stmt 1 view .LVU92
 374              		.loc 1 341 25 is_stmt 0 view .LVU93
 375 0084 0023     		movs	r3, #0
 376 0086 8360     		str	r3, [r0, #8]
 342:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 377              		.loc 1 342 3 is_stmt 1 view .LVU94
 378              		.loc 1 342 24 is_stmt 0 view .LVU95
 379 0088 C360     		str	r3, [r0, #12]
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s 			page 36


 343:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ADC_SCAN_SEQ_FIXED;
 380              		.loc 1 343 3 is_stmt 1 view .LVU96
 381              		.loc 1 343 27 is_stmt 0 view .LVU97
 382 008a 8022     		movs	r2, #128
 383 008c 1206     		lsls	r2, r2, #24
 384 008e 0261     		str	r2, [r0, #16]
 344:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 385              		.loc 1 344 3 is_stmt 1 view .LVU98
 386              		.loc 1 344 27 is_stmt 0 view .LVU99
 387 0090 0422     		movs	r2, #4
 388 0092 4261     		str	r2, [r0, #20]
 345:Core/Src/main.c ****   hadc1.Init.LowPowerAutoWait = DISABLE;
 389              		.loc 1 345 3 is_stmt 1 view .LVU100
 390              		.loc 1 345 31 is_stmt 0 view .LVU101
 391 0094 0376     		strb	r3, [r0, #24]
 346:Core/Src/main.c ****   hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 392              		.loc 1 346 3 is_stmt 1 view .LVU102
 393              		.loc 1 346 35 is_stmt 0 view .LVU103
 394 0096 4376     		strb	r3, [r0, #25]
 347:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
 395              		.loc 1 347 3 is_stmt 1 view .LVU104
 396              		.loc 1 347 33 is_stmt 0 view .LVU105
 397 0098 033A     		subs	r2, r2, #3
 398 009a 8276     		strb	r2, [r0, #26]
 348:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 1;
 399              		.loc 1 348 3 is_stmt 1 view .LVU106
 400              		.loc 1 348 30 is_stmt 0 view .LVU107
 401 009c C261     		str	r2, [r0, #28]
 349:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 402              		.loc 1 349 3 is_stmt 1 view .LVU108
 403              		.loc 1 349 31 is_stmt 0 view .LVU109
 404 009e 4362     		str	r3, [r0, #36]
 350:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 405              		.loc 1 350 3 is_stmt 1 view .LVU110
 406              		.loc 1 350 35 is_stmt 0 view .LVU111
 407 00a0 8362     		str	r3, [r0, #40]
 351:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = ENABLE;
 408              		.loc 1 351 3 is_stmt 1 view .LVU112
 409              		.loc 1 351 36 is_stmt 0 view .LVU113
 410 00a2 2C21     		movs	r1, #44
 411 00a4 4254     		strb	r2, [r0, r1]
 352:Core/Src/main.c ****   hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 412              		.loc 1 352 3 is_stmt 1 view .LVU114
 413              		.loc 1 352 22 is_stmt 0 view .LVU115
 414 00a6 0363     		str	r3, [r0, #48]
 353:Core/Src/main.c ****   hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 415              		.loc 1 353 3 is_stmt 1 view .LVU116
 416              		.loc 1 353 34 is_stmt 0 view .LVU117
 417 00a8 4363     		str	r3, [r0, #52]
 354:Core/Src/main.c ****   hadc1.Init.OversamplingMode = DISABLE;
 418              		.loc 1 354 3 is_stmt 1 view .LVU118
 419              		.loc 1 354 31 is_stmt 0 view .LVU119
 420 00aa 3B32     		adds	r2, r2, #59
 421 00ac 8354     		strb	r3, [r0, r2]
 355:Core/Src/main.c ****   hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 422              		.loc 1 355 3 is_stmt 1 view .LVU120
 423              		.loc 1 355 35 is_stmt 0 view .LVU121
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s 			page 37


 424 00ae C364     		str	r3, [r0, #76]
 356:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 425              		.loc 1 356 3 is_stmt 1 view .LVU122
 426              		.loc 1 356 7 is_stmt 0 view .LVU123
 427 00b0 FFF7FEFF 		bl	HAL_ADC_Init
 428              	.LVL16:
 429              		.loc 1 356 6 discriminator 1 view .LVU124
 430 00b4 0028     		cmp	r0, #0
 431 00b6 00D0     		beq	.L15
 357:Core/Src/main.c ****   {
 358:Core/Src/main.c ****     next_state = STATE_ERROR;
 432              		.loc 1 358 16 view .LVU125
 433 00b8 0224     		movs	r4, #2
 434              	.LVL17:
 435              	.L15:
 359:Core/Src/main.c ****   }
 360:Core/Src/main.c **** 
 361:Core/Src/main.c ****   /** Configure Regular Channel
 362:Core/Src/main.c ****   */
 363:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_1;
 436              		.loc 1 363 3 is_stmt 1 view .LVU126
 437              		.loc 1 363 19 is_stmt 0 view .LVU127
 438 00ba 01A9     		add	r1, sp, #4
 439 00bc 264B     		ldr	r3, .L29+12
 440 00be 0193     		str	r3, [sp, #4]
 364:Core/Src/main.c ****   sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 441              		.loc 1 364 3 is_stmt 1 view .LVU128
 442              		.loc 1 364 16 is_stmt 0 view .LVU129
 443 00c0 0123     		movs	r3, #1
 444 00c2 4B60     		str	r3, [r1, #4]
 365:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 445              		.loc 1 365 3 is_stmt 1 view .LVU130
 446              		.loc 1 365 7 is_stmt 0 view .LVU131
 447 00c4 2248     		ldr	r0, .L29+4
 448 00c6 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 449              	.LVL18:
 450              		.loc 1 365 6 discriminator 1 view .LVU132
 451 00ca 0028     		cmp	r0, #0
 452 00cc 00D0     		beq	.L16
 366:Core/Src/main.c ****   {
 367:Core/Src/main.c ****     next_state = STATE_ERROR;
 453              		.loc 1 367 16 view .LVU133
 454 00ce 0224     		movs	r4, #2
 455              	.LVL19:
 456              	.L16:
 368:Core/Src/main.c ****   }
 369:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 2 */
 370:Core/Src/main.c **** 
 371:Core/Src/main.c ****   /* USER CODE END ADC1_Init 2 */
 372:Core/Src/main.c **** 
 373:Core/Src/main.c **** 
 374:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 0 */
 375:Core/Src/main.c **** 
 376:Core/Src/main.c ****   /* USER CODE END USART2_Init 0 */
 377:Core/Src/main.c **** 
 378:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 1 */
 379:Core/Src/main.c **** 
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s 			page 38


 380:Core/Src/main.c ****   /* USER CODE END USART2_Init 1 */
 381:Core/Src/main.c ****   huart2.Instance = USART2;
 457              		.loc 1 381 3 is_stmt 1 view .LVU134
 458              		.loc 1 381 19 is_stmt 0 view .LVU135
 459 00d0 2248     		ldr	r0, .L29+16
 460 00d2 234B     		ldr	r3, .L29+20
 461 00d4 0360     		str	r3, [r0]
 382:Core/Src/main.c ****   huart2.Init.BaudRate = 9600;
 462              		.loc 1 382 3 is_stmt 1 view .LVU136
 463              		.loc 1 382 24 is_stmt 0 view .LVU137
 464 00d6 9623     		movs	r3, #150
 465 00d8 9B01     		lsls	r3, r3, #6
 466 00da 4360     		str	r3, [r0, #4]
 383:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 467              		.loc 1 383 3 is_stmt 1 view .LVU138
 468              		.loc 1 383 26 is_stmt 0 view .LVU139
 469 00dc 0023     		movs	r3, #0
 470 00de 8360     		str	r3, [r0, #8]
 384:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 471              		.loc 1 384 3 is_stmt 1 view .LVU140
 472              		.loc 1 384 24 is_stmt 0 view .LVU141
 473 00e0 C360     		str	r3, [r0, #12]
 385:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 474              		.loc 1 385 3 is_stmt 1 view .LVU142
 475              		.loc 1 385 22 is_stmt 0 view .LVU143
 476 00e2 0361     		str	r3, [r0, #16]
 386:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 477              		.loc 1 386 3 is_stmt 1 view .LVU144
 478              		.loc 1 386 20 is_stmt 0 view .LVU145
 479 00e4 0C22     		movs	r2, #12
 480 00e6 4261     		str	r2, [r0, #20]
 387:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 481              		.loc 1 387 3 is_stmt 1 view .LVU146
 482              		.loc 1 387 25 is_stmt 0 view .LVU147
 483 00e8 8361     		str	r3, [r0, #24]
 388:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 484              		.loc 1 388 3 is_stmt 1 view .LVU148
 485              		.loc 1 388 28 is_stmt 0 view .LVU149
 486 00ea C361     		str	r3, [r0, #28]
 389:Core/Src/main.c ****   huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 487              		.loc 1 389 3 is_stmt 1 view .LVU150
 488              		.loc 1 389 30 is_stmt 0 view .LVU151
 489 00ec 0362     		str	r3, [r0, #32]
 390:Core/Src/main.c ****   huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 490              		.loc 1 390 3 is_stmt 1 view .LVU152
 491              		.loc 1 390 30 is_stmt 0 view .LVU153
 492 00ee 4362     		str	r3, [r0, #36]
 391:Core/Src/main.c ****   huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 493              		.loc 1 391 3 is_stmt 1 view .LVU154
 494              		.loc 1 391 38 is_stmt 0 view .LVU155
 495 00f0 8362     		str	r3, [r0, #40]
 392:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 496              		.loc 1 392 3 is_stmt 1 view .LVU156
 497              		.loc 1 392 7 is_stmt 0 view .LVU157
 498 00f2 FFF7FEFF 		bl	HAL_UART_Init
 499              	.LVL20:
 500              		.loc 1 392 6 discriminator 1 view .LVU158
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s 			page 39


 501 00f6 0028     		cmp	r0, #0
 502 00f8 00D0     		beq	.L17
 393:Core/Src/main.c ****   {
 394:Core/Src/main.c ****     next_state = STATE_ERROR;
 503              		.loc 1 394 16 view .LVU159
 504 00fa 0224     		movs	r4, #2
 505              	.LVL21:
 506              	.L17:
 395:Core/Src/main.c ****   }
 396:Core/Src/main.c **** 
 397:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 2 */
 398:Core/Src/main.c **** 
 399:Core/Src/main.c ****   /* USER CODE END USART2_Init 2 */
 400:Core/Src/main.c **** 
 401:Core/Src/main.c **** 
 402:Core/Src/main.c **** 
 403:Core/Src/main.c ****   /* USER CODE BEGIN TIM14_Init 0 */
 404:Core/Src/main.c **** 
 405:Core/Src/main.c ****   /* USER CODE END TIM14_Init 0 */
 406:Core/Src/main.c **** 
 407:Core/Src/main.c ****   /* USER CODE BEGIN TIM14_Init 1 */
 408:Core/Src/main.c **** 
 409:Core/Src/main.c ****   /* USER CODE END TIM14_Init 1 */
 410:Core/Src/main.c ****   htim14.Instance = TIM14;
 507              		.loc 1 410 3 is_stmt 1 view .LVU160
 508              		.loc 1 410 19 is_stmt 0 view .LVU161
 509 00fc 1948     		ldr	r0, .L29+24
 510 00fe 1A4B     		ldr	r3, .L29+28
 511 0100 0360     		str	r3, [r0]
 411:Core/Src/main.c ****   htim14.Init.Prescaler = 47999;
 512              		.loc 1 411 3 is_stmt 1 view .LVU162
 513              		.loc 1 411 25 is_stmt 0 view .LVU163
 514 0102 1A4B     		ldr	r3, .L29+32
 515 0104 4360     		str	r3, [r0, #4]
 412:Core/Src/main.c ****   htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 516              		.loc 1 412 3 is_stmt 1 view .LVU164
 517              		.loc 1 412 27 is_stmt 0 view .LVU165
 518 0106 0023     		movs	r3, #0
 519 0108 8360     		str	r3, [r0, #8]
 413:Core/Src/main.c ****   htim14.Init.Period = 999;
 520              		.loc 1 413 3 is_stmt 1 view .LVU166
 521              		.loc 1 413 22 is_stmt 0 view .LVU167
 522 010a 194A     		ldr	r2, .L29+36
 523 010c C260     		str	r2, [r0, #12]
 414:Core/Src/main.c ****   htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 524              		.loc 1 414 3 is_stmt 1 view .LVU168
 525              		.loc 1 414 29 is_stmt 0 view .LVU169
 526 010e 0361     		str	r3, [r0, #16]
 415:Core/Src/main.c ****   htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 527              		.loc 1 415 3 is_stmt 1 view .LVU170
 528              		.loc 1 415 33 is_stmt 0 view .LVU171
 529 0110 8361     		str	r3, [r0, #24]
 416:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 530              		.loc 1 416 3 is_stmt 1 view .LVU172
 531              		.loc 1 416 7 is_stmt 0 view .LVU173
 532 0112 FFF7FEFF 		bl	HAL_TIM_Base_Init
 533              	.LVL22:
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s 			page 40


 534              		.loc 1 416 6 discriminator 1 view .LVU174
 535 0116 0028     		cmp	r0, #0
 536 0118 00D0     		beq	.L18
 417:Core/Src/main.c ****   {
 418:Core/Src/main.c ****     next_state = STATE_ERROR;
 537              		.loc 1 418 16 view .LVU175
 538 011a 0224     		movs	r4, #2
 539              	.LVL23:
 540              	.L18:
 419:Core/Src/main.c ****   }
 420:Core/Src/main.c ****   /* USER CODE BEGIN TIM14_Init 2 */
 421:Core/Src/main.c **** 
 422:Core/Src/main.c ****   /* USER CODE END TIM14_Init 2 */
 423:Core/Src/main.c **** 
 424:Core/Src/main.c **** 
 425:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 426:Core/Src/main.c **** 
 427:Core/Src/main.c ****   srand(time(NULL));
 541              		.loc 1 427 3 is_stmt 1 view .LVU176
 542              		.loc 1 427 9 is_stmt 0 view .LVU177
 543 011c 0020     		movs	r0, #0
 544 011e FFF7FEFF 		bl	time
 545              	.LVL24:
 546              		.loc 1 427 3 discriminator 1 view .LVU178
 547 0122 FFF7FEFF 		bl	srand
 548              	.LVL25:
 428:Core/Src/main.c ****   if (HAL_ADCEx_Calibration_Start(&hadc1) != HAL_OK) { next_state = STATE_ERROR; }
 549              		.loc 1 428 3 is_stmt 1 view .LVU179
 550              		.loc 1 428 7 is_stmt 0 view .LVU180
 551 0126 0A48     		ldr	r0, .L29+4
 552 0128 FFF7FEFF 		bl	HAL_ADCEx_Calibration_Start
 553              	.LVL26:
 554              		.loc 1 428 6 discriminator 1 view .LVU181
 555 012c 0028     		cmp	r0, #0
 556 012e 0BD1     		bne	.L28
 557              	.LVL27:
 558              	.L19:
 429:Core/Src/main.c **** 
 430:Core/Src/main.c ****   /* USER CODE END 2 */
 431:Core/Src/main.c **** 
 432:Core/Src/main.c ****   /* Initialize leds */
 433:Core/Src/main.c ****   BSP_LED_Init(LED_GREEN);
 559              		.loc 1 433 3 is_stmt 1 view .LVU182
 560 0130 0020     		movs	r0, #0
 561 0132 FFF7FEFF 		bl	BSP_LED_Init
 562              	.LVL28:
 434:Core/Src/main.c **** 
 435:Core/Src/main.c ****   /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
 436:Core/Src/main.c ****   BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 563              		.loc 1 436 3 view .LVU183
 564 0136 0121     		movs	r1, #1
 565 0138 0020     		movs	r0, #0
 566 013a FFF7FEFF 		bl	BSP_PB_Init
 567              	.LVL29:
 437:Core/Src/main.c **** 
 438:Core/Src/main.c ****   return next_state;
 568              		.loc 1 438 3 view .LVU184
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s 			page 41


 439:Core/Src/main.c **** }
 569              		.loc 1 439 1 is_stmt 0 view .LVU185
 570 013e 2000     		movs	r0, r4
 571 0140 11B0     		add	sp, sp, #68
 572              		@ sp needed
 573              	.LVL30:
 574              		.loc 1 439 1 view .LVU186
 575 0142 30BD     		pop	{r4, r5, pc}
 576              	.LVL31:
 577              	.L20:
 281:Core/Src/main.c **** 
 578              		.loc 1 281 42 discriminator 1 view .LVU187
 579 0144 0224     		movs	r4, #2
 580 0146 63E7     		b	.L12
 581              	.LVL32:
 582              	.L28:
 428:Core/Src/main.c **** 
 583              		.loc 1 428 67 discriminator 1 view .LVU188
 584 0148 0224     		movs	r4, #2
 585              	.LVL33:
 428:Core/Src/main.c **** 
 586              		.loc 1 428 67 discriminator 1 view .LVU189
 587 014a F1E7     		b	.L19
 588              	.L30:
 589              		.align	2
 590              	.L29:
 591 014c 00200240 		.word	1073881088
 592 0150 00000000 		.word	hadc1
 593 0154 00240140 		.word	1073816576
 594 0158 02000004 		.word	67108866
 595 015c 00000000 		.word	huart2
 596 0160 00440040 		.word	1073759232
 597 0164 00000000 		.word	htim14
 598 0168 00200040 		.word	1073750016
 599 016c 7FBB0000 		.word	47999
 600 0170 E7030000 		.word	999
 601              		.cfi_endproc
 602              	.LFE356:
 604              		.section	.text.do_WAIT_REQUEST,"ax",%progbits
 605              		.align	1
 606              		.global	do_WAIT_REQUEST
 607              		.syntax unified
 608              		.code	16
 609              		.thumb_func
 611              	do_WAIT_REQUEST:
 612              	.LFB357:
 440:Core/Src/main.c **** 
 441:Core/Src/main.c **** // Function to be executed in state WAIT_REQUEST
 442:Core/Src/main.c **** // valid return states: STATE_LISTENING, STATE_ERROR
 443:Core/Src/main.c **** state_t do_WAIT_REQUEST(void) 
 444:Core/Src/main.c **** {
 613              		.loc 1 444 1 is_stmt 1 view -0
 614              		.cfi_startproc
 615              		@ args = 0, pretend = 0, frame = 0
 616              		@ frame_needed = 0, uses_anonymous_args = 0
 617 0000 10B5     		push	{r4, lr}
 618              		.cfi_def_cfa_offset 8
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s 			page 42


 619              		.cfi_offset 4, -8
 620              		.cfi_offset 14, -4
 445:Core/Src/main.c ****   state_t next_state = NO_CHANGE;
 621              		.loc 1 445 3 view .LVU191
 622              	.LVL34:
 446:Core/Src/main.c ****   
 447:Core/Src/main.c ****   HAL_UART_Receive_IT(&huart2, &rx_byte, 1);
 623              		.loc 1 447 3 view .LVU192
 624 0002 0849     		ldr	r1, .L35
 625 0004 0848     		ldr	r0, .L35+4
 626 0006 0122     		movs	r2, #1
 627 0008 FFF7FEFF 		bl	HAL_UART_Receive_IT
 628              	.LVL35:
 448:Core/Src/main.c **** 
 449:Core/Src/main.c ****   if (BSP_PB_GetState(BUTTON_USER) == GPIO_PIN_RESET) 
 629              		.loc 1 449 3 view .LVU193
 630              		.loc 1 449 7 is_stmt 0 view .LVU194
 631 000c 0020     		movs	r0, #0
 632 000e FFF7FEFF 		bl	BSP_PB_GetState
 633              	.LVL36:
 634              		.loc 1 449 6 discriminator 1 view .LVU195
 635 0012 0028     		cmp	r0, #0
 636 0014 01D0     		beq	.L34
 445:Core/Src/main.c ****   
 637              		.loc 1 445 11 view .LVU196
 638 0016 0720     		movs	r0, #7
 639              	.LVL37:
 640              	.L32:
 450:Core/Src/main.c ****   {
 451:Core/Src/main.c ****     next_state = STATE_LISTENING;
 452:Core/Src/main.c ****     HAL_Delay(200);
 453:Core/Src/main.c ****   }
 454:Core/Src/main.c **** 
 455:Core/Src/main.c ****   return next_state;
 641              		.loc 1 455 3 is_stmt 1 view .LVU197
 456:Core/Src/main.c **** }
 642              		.loc 1 456 1 is_stmt 0 view .LVU198
 643              		@ sp needed
 644 0018 10BD     		pop	{r4, pc}
 645              	.LVL38:
 646              	.L34:
 451:Core/Src/main.c ****     HAL_Delay(200);
 647              		.loc 1 451 5 is_stmt 1 view .LVU199
 452:Core/Src/main.c ****   }
 648              		.loc 1 452 5 view .LVU200
 649 001a C830     		adds	r0, r0, #200
 650 001c FFF7FEFF 		bl	HAL_Delay
 651              	.LVL39:
 451:Core/Src/main.c ****     HAL_Delay(200);
 652              		.loc 1 451 16 is_stmt 0 view .LVU201
 653 0020 0320     		movs	r0, #3
 654 0022 F9E7     		b	.L32
 655              	.L36:
 656              		.align	2
 657              	.L35:
 658 0024 00000000 		.word	rx_byte
 659 0028 00000000 		.word	huart2
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s 			page 43


 660              		.cfi_endproc
 661              	.LFE357:
 663              		.section	.text.print,"ax",%progbits
 664              		.align	1
 665              		.global	print
 666              		.syntax unified
 667              		.code	16
 668              		.thumb_func
 670              	print:
 671              	.LVL40:
 672              	.LFB345:
 113:Core/Src/main.c ****   HAL_UART_Transmit_IT(&huart2, (uint8_t*)msg, strlen(msg));
 673              		.loc 1 113 1 is_stmt 1 view -0
 674              		.cfi_startproc
 675              		@ args = 0, pretend = 0, frame = 0
 676              		@ frame_needed = 0, uses_anonymous_args = 0
 113:Core/Src/main.c ****   HAL_UART_Transmit_IT(&huart2, (uint8_t*)msg, strlen(msg));
 677              		.loc 1 113 1 is_stmt 0 view .LVU203
 678 0000 10B5     		push	{r4, lr}
 679              		.cfi_def_cfa_offset 8
 680              		.cfi_offset 4, -8
 681              		.cfi_offset 14, -4
 682 0002 0400     		movs	r4, r0
 114:Core/Src/main.c **** }
 683              		.loc 1 114 3 is_stmt 1 view .LVU204
 114:Core/Src/main.c **** }
 684              		.loc 1 114 48 is_stmt 0 view .LVU205
 685 0004 FFF7FEFF 		bl	strlen
 686              	.LVL41:
 114:Core/Src/main.c **** }
 687              		.loc 1 114 3 discriminator 1 view .LVU206
 688 0008 82B2     		uxth	r2, r0
 689 000a 0248     		ldr	r0, .L38
 690 000c 2100     		movs	r1, r4
 691 000e FFF7FEFF 		bl	HAL_UART_Transmit_IT
 692              	.LVL42:
 115:Core/Src/main.c **** 
 693              		.loc 1 115 1 view .LVU207
 694              		@ sp needed
 695              	.LVL43:
 115:Core/Src/main.c **** 
 696              		.loc 1 115 1 view .LVU208
 697 0012 10BD     		pop	{r4, pc}
 698              	.L39:
 699              		.align	2
 700              	.L38:
 701 0014 00000000 		.word	huart2
 702              		.cfi_endproc
 703              	.LFE345:
 705              		.section	.text.map,"ax",%progbits
 706              		.align	1
 707              		.global	map
 708              		.syntax unified
 709              		.code	16
 710              		.thumb_func
 712              	map:
 713              	.LVL44:
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s 			page 44


 714              	.LFB346:
 118:Core/Src/main.c ****   // Preso da https://docs.arduino.cc/language-reference/en/functions/math/map/#appendix
 715              		.loc 1 118 1 is_stmt 1 view -0
 716              		.cfi_startproc
 717              		@ args = 4, pretend = 0, frame = 0
 718              		@ frame_needed = 0, uses_anonymous_args = 0
 118:Core/Src/main.c ****   // Preso da https://docs.arduino.cc/language-reference/en/functions/math/map/#appendix
 719              		.loc 1 118 1 is_stmt 0 view .LVU210
 720 0000 70B5     		push	{r4, r5, r6, lr}
 721              		.cfi_def_cfa_offset 16
 722              		.cfi_offset 4, -16
 723              		.cfi_offset 5, -12
 724              		.cfi_offset 6, -8
 725              		.cfi_offset 14, -4
 726 0002 1C00     		movs	r4, r3
 727 0004 04AB     		add	r3, sp, #16
 728              	.LVL45:
 118:Core/Src/main.c ****   // Preso da https://docs.arduino.cc/language-reference/en/functions/math/map/#appendix
 729              		.loc 1 118 1 view .LVU211
 730 0006 1B88     		ldrh	r3, [r3]
 731              	.LVL46:
 121:Core/Src/main.c **** }
 732              		.loc 1 121 3 is_stmt 1 view .LVU212
 121:Core/Src/main.c **** }
 733              		.loc 1 121 15 is_stmt 0 view .LVU213
 734 0008 451A     		subs	r5, r0, r1
 121:Core/Src/main.c **** }
 735              		.loc 1 121 36 view .LVU214
 736 000a 181B     		subs	r0, r3, r4
 737              	.LVL47:
 121:Core/Src/main.c **** }
 738              		.loc 1 121 25 view .LVU215
 739 000c 6843     		muls	r0, r5
 121:Core/Src/main.c **** }
 740              		.loc 1 121 57 view .LVU216
 741 000e 511A     		subs	r1, r2, r1
 742              	.LVL48:
 121:Core/Src/main.c **** }
 743              		.loc 1 121 47 view .LVU217
 744 0010 FFF7FEFF 		bl	__aeabi_idiv
 745              	.LVL49:
 121:Core/Src/main.c **** }
 746              		.loc 1 121 67 view .LVU218
 747 0014 2018     		adds	r0, r4, r0
 121:Core/Src/main.c **** }
 748              		.loc 1 121 67 discriminator 1 view .LVU219
 749 0016 80B2     		uxth	r0, r0
 122:Core/Src/main.c **** 
 750              		.loc 1 122 1 view .LVU220
 751              		@ sp needed
 752              	.LVL50:
 122:Core/Src/main.c **** 
 753              		.loc 1 122 1 view .LVU221
 754 0018 70BD     		pop	{r4, r5, r6, pc}
 755              		.cfi_endproc
 756              	.LFE346:
 758              		.section	.text.toMilliVolt,"ax",%progbits
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s 			page 45


 759              		.align	1
 760              		.global	toMilliVolt
 761              		.syntax unified
 762              		.code	16
 763              		.thumb_func
 765              	toMilliVolt:
 766              	.LVL51:
 767              	.LFB347:
 125:Core/Src/main.c ****   // Del tutto equivalente a map(val, 0, 4095, 0, 5000) ma usato per semplicità
 768              		.loc 1 125 1 is_stmt 1 view -0
 769              		.cfi_startproc
 770              		@ args = 0, pretend = 0, frame = 0
 771              		@ frame_needed = 0, uses_anonymous_args = 0
 125:Core/Src/main.c ****   // Del tutto equivalente a map(val, 0, 4095, 0, 5000) ma usato per semplicità
 772              		.loc 1 125 1 is_stmt 0 view .LVU223
 773 0000 10B5     		push	{r4, lr}
 774              		.cfi_def_cfa_offset 8
 775              		.cfi_offset 4, -8
 776              		.cfi_offset 14, -4
 128:Core/Src/main.c **** }
 777              		.loc 1 128 3 is_stmt 1 view .LVU224
 128:Core/Src/main.c **** }
 778              		.loc 1 128 15 is_stmt 0 view .LVU225
 779 0002 034B     		ldr	r3, .L42
 780 0004 5843     		muls	r0, r3
 781              	.LVL52:
 128:Core/Src/main.c **** }
 782              		.loc 1 128 23 view .LVU226
 783 0006 0349     		ldr	r1, .L42+4
 784 0008 FFF7FEFF 		bl	__aeabi_idiv
 785              	.LVL53:
 128:Core/Src/main.c **** }
 786              		.loc 1 128 23 discriminator 1 view .LVU227
 787 000c 80B2     		uxth	r0, r0
 129:Core/Src/main.c **** 
 788              		.loc 1 129 1 view .LVU228
 789              		@ sp needed
 790 000e 10BD     		pop	{r4, pc}
 791              	.L43:
 792              		.align	2
 793              	.L42:
 794 0010 88130000 		.word	5000
 795 0014 FF0F0000 		.word	4095
 796              		.cfi_endproc
 797              	.LFE347:
 799              		.section	.text.correct,"ax",%progbits
 800              		.align	1
 801              		.global	correct
 802              		.syntax unified
 803              		.code	16
 804              		.thumb_func
 806              	correct:
 807              	.LVL54:
 808              	.LFB348:
 132:Core/Src/main.c ****   if (val < 0) { return (uint16_t)0; }
 809              		.loc 1 132 1 is_stmt 1 view -0
 810              		.cfi_startproc
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s 			page 46


 811              		@ args = 0, pretend = 0, frame = 0
 812              		@ frame_needed = 0, uses_anonymous_args = 0
 813              		@ link register save eliminated.
 133:Core/Src/main.c ****   if (val > 5000) { return (uint16_t)5000; }
 814              		.loc 1 133 3 view .LVU230
 133:Core/Src/main.c ****   if (val > 5000) { return (uint16_t)5000; }
 815              		.loc 1 133 6 is_stmt 0 view .LVU231
 816 0000 0028     		cmp	r0, #0
 817 0002 04DB     		blt	.L46
 134:Core/Src/main.c ****   return val;
 818              		.loc 1 134 3 is_stmt 1 view .LVU232
 134:Core/Src/main.c ****   return val;
 819              		.loc 1 134 6 is_stmt 0 view .LVU233
 820 0004 044B     		ldr	r3, .L48
 821 0006 9842     		cmp	r0, r3
 822 0008 03DC     		bgt	.L47
 135:Core/Src/main.c **** }
 823              		.loc 1 135 3 is_stmt 1 view .LVU234
 135:Core/Src/main.c **** }
 824              		.loc 1 135 10 is_stmt 0 view .LVU235
 825 000a 80B2     		uxth	r0, r0
 826              	.LVL55:
 827              	.L45:
 136:Core/Src/main.c **** 
 828              		.loc 1 136 1 view .LVU236
 829              		@ sp needed
 830 000c 7047     		bx	lr
 831              	.LVL56:
 832              	.L46:
 133:Core/Src/main.c ****   if (val > 5000) { return (uint16_t)5000; }
 833              		.loc 1 133 25 discriminator 1 view .LVU237
 834 000e 0020     		movs	r0, #0
 835              	.LVL57:
 133:Core/Src/main.c ****   if (val > 5000) { return (uint16_t)5000; }
 836              		.loc 1 133 25 discriminator 1 view .LVU238
 837 0010 FCE7     		b	.L45
 838              	.LVL58:
 839              	.L47:
 134:Core/Src/main.c ****   return val;
 840              		.loc 1 134 28 discriminator 1 view .LVU239
 841 0012 0148     		ldr	r0, .L48
 842              	.LVL59:
 134:Core/Src/main.c ****   return val;
 843              		.loc 1 134 28 discriminator 1 view .LVU240
 844 0014 FAE7     		b	.L45
 845              	.L49:
 846 0016 C046     		.align	2
 847              	.L48:
 848 0018 88130000 		.word	5000
 849              		.cfi_endproc
 850              	.LFE348:
 852              		.section	.text.gaussian_noise_clt,"ax",%progbits
 853              		.align	1
 854              		.global	gaussian_noise_clt
 855              		.syntax unified
 856              		.code	16
 857              		.thumb_func
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s 			page 47


 859              	gaussian_noise_clt:
 860              	.LVL60:
 861              	.LFB349:
 139:Core/Src/main.c ****   float sum = .0f;
 862              		.loc 1 139 1 is_stmt 1 view -0
 863              		.cfi_startproc
 864              		@ args = 0, pretend = 0, frame = 0
 865              		@ frame_needed = 0, uses_anonymous_args = 0
 139:Core/Src/main.c ****   float sum = .0f;
 866              		.loc 1 139 1 is_stmt 0 view .LVU242
 867 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 868              		.cfi_def_cfa_offset 24
 869              		.cfi_offset 3, -24
 870              		.cfi_offset 4, -20
 871              		.cfi_offset 5, -16
 872              		.cfi_offset 6, -12
 873              		.cfi_offset 7, -8
 874              		.cfi_offset 14, -4
 875 0002 061C     		adds	r6, r0, #0
 876 0004 0F1C     		adds	r7, r1, #0
 140:Core/Src/main.c **** 
 877              		.loc 1 140 3 is_stmt 1 view .LVU243
 878              	.LVL61:
 142:Core/Src/main.c ****   {
 879              		.loc 1 142 3 view .LVU244
 880              	.LBB16:
 142:Core/Src/main.c ****   {
 881              		.loc 1 142 8 view .LVU245
 142:Core/Src/main.c ****   {
 882              		.loc 1 142 12 is_stmt 0 view .LVU246
 883 0006 0025     		movs	r5, #0
 884              	.LBE16:
 140:Core/Src/main.c **** 
 885              		.loc 1 140 9 view .LVU247
 886 0008 0024     		movs	r4, #0
 887              	.LBB17:
 142:Core/Src/main.c ****   {
 888              		.loc 1 142 3 view .LVU248
 889 000a 0DE0     		b	.L51
 890              	.LVL62:
 891              	.L52:
 144:Core/Src/main.c ****   }
 892              		.loc 1 144 5 is_stmt 1 view .LVU249
 144:Core/Src/main.c ****   }
 893              		.loc 1 144 20 is_stmt 0 view .LVU250
 894 000c FFF7FEFF 		bl	rand
 895              	.LVL63:
 144:Core/Src/main.c ****   }
 896              		.loc 1 144 13 discriminator 1 view .LVU251
 897 0010 FFF7FEFF 		bl	__aeabi_i2f
 898              	.LVL64:
 144:Core/Src/main.c ****   }
 899              		.loc 1 144 27 discriminator 1 view .LVU252
 900 0014 C021     		movs	r1, #192
 901 0016 8905     		lsls	r1, r1, #22
 902 0018 FFF7FEFF 		bl	__aeabi_fmul
 903              	.LVL65:
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s 			page 48


 904 001c 011C     		adds	r1, r0, #0
 144:Core/Src/main.c ****   }
 905              		.loc 1 144 9 discriminator 1 view .LVU253
 906 001e 201C     		adds	r0, r4, #0
 907 0020 FFF7FEFF 		bl	__aeabi_fadd
 908              	.LVL66:
 909 0024 041C     		adds	r4, r0, #0
 910              	.LVL67:
 142:Core/Src/main.c ****   {
 911              		.loc 1 142 27 is_stmt 1 discriminator 3 view .LVU254
 912 0026 0135     		adds	r5, r5, #1
 913              	.LVL68:
 914              	.L51:
 142:Core/Src/main.c ****   {
 915              		.loc 1 142 21 discriminator 1 view .LVU255
 916 0028 052D     		cmp	r5, #5
 917 002a EFDD     		ble	.L52
 918              	.LBE17:
 146:Core/Src/main.c **** 
 919              		.loc 1 146 3 view .LVU256
 146:Core/Src/main.c **** 
 920              		.loc 1 146 7 is_stmt 0 view .LVU257
 921 002c 0549     		ldr	r1, .L53
 922 002e 201C     		adds	r0, r4, #0
 923 0030 FFF7FEFF 		bl	__aeabi_fsub
 924              	.LVL69:
 148:Core/Src/main.c **** }
 925              		.loc 1 148 3 is_stmt 1 view .LVU258
 148:Core/Src/main.c **** }
 926              		.loc 1 148 24 is_stmt 0 view .LVU259
 927 0034 391C     		adds	r1, r7, #0
 928 0036 FFF7FEFF 		bl	__aeabi_fmul
 929              	.LVL70:
 148:Core/Src/main.c **** }
 930              		.loc 1 148 15 view .LVU260
 931 003a 311C     		adds	r1, r6, #0
 932 003c FFF7FEFF 		bl	__aeabi_fadd
 933              	.LVL71:
 149:Core/Src/main.c **** 
 934              		.loc 1 149 1 view .LVU261
 935              		@ sp needed
 936              	.LVL72:
 937              	.LVL73:
 938              	.LVL74:
 149:Core/Src/main.c **** 
 939              		.loc 1 149 1 view .LVU262
 940 0040 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 941              	.L54:
 942 0042 C046     		.align	2
 943              	.L53:
 944 0044 00004040 		.word	1077936128
 945              		.cfi_endproc
 946              	.LFE349:
 948              		.section	.rodata.do_LISTENING.str1.4,"aMS",%progbits,1
 949              		.align	2
 950              	.LC14:
 951 0000 25752C25 		.ascii	"%u,%u,%u\015\012\000"
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s 			page 49


 951      752C2575 
 951      0D0A00
 952              		.section	.text.do_LISTENING,"ax",%progbits
 953              		.align	1
 954              		.global	do_LISTENING
 955              		.syntax unified
 956              		.code	16
 957              		.thumb_func
 959              	do_LISTENING:
 960              	.LFB358:
 457:Core/Src/main.c **** 
 458:Core/Src/main.c **** // Function to be executed in state LISTENING
 459:Core/Src/main.c **** // valid return states: STATE_WARNING, STATE_ERROR, STATE_PAUSE
 460:Core/Src/main.c **** state_t do_LISTENING(void) 
 461:Core/Src/main.c **** {
 961              		.loc 1 461 1 is_stmt 1 view -0
 962              		.cfi_startproc
 963              		@ args = 0, pretend = 0, frame = 72
 964              		@ frame_needed = 0, uses_anonymous_args = 0
 965 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 966              		.cfi_def_cfa_offset 20
 967              		.cfi_offset 4, -20
 968              		.cfi_offset 5, -16
 969              		.cfi_offset 6, -12
 970              		.cfi_offset 7, -8
 971              		.cfi_offset 14, -4
 972 0002 DE46     		mov	lr, fp
 973 0004 5746     		mov	r7, r10
 974 0006 4E46     		mov	r6, r9
 975 0008 4546     		mov	r5, r8
 976 000a E0B5     		push	{r5, r6, r7, lr}
 977              		.cfi_def_cfa_offset 36
 978              		.cfi_offset 8, -36
 979              		.cfi_offset 9, -32
 980              		.cfi_offset 10, -28
 981              		.cfi_offset 11, -24
 982 000c 95B0     		sub	sp, sp, #84
 983              		.cfi_def_cfa_offset 120
 462:Core/Src/main.c ****   state_t next_state = NO_CHANGE;
 984              		.loc 1 462 3 view .LVU264
 985              	.LVL75:
 463:Core/Src/main.c **** 
 464:Core/Src/main.c ****   BSP_LED_On(LED_GREEN);
 986              		.loc 1 464 3 view .LVU265
 987 000e 0020     		movs	r0, #0
 988 0010 FFF7FEFF 		bl	BSP_LED_On
 989              	.LVL76:
 465:Core/Src/main.c ****   char msg[64];
 990              		.loc 1 465 3 view .LVU266
 466:Core/Src/main.c ****   uint16_t analog_val;
 991              		.loc 1 466 3 view .LVU267
 467:Core/Src/main.c ****   uint16_t analog_mv;
 992              		.loc 1 467 3 view .LVU268
 468:Core/Src/main.c ****   GPIO_PinState digital_val;
 993              		.loc 1 468 3 view .LVU269
 469:Core/Src/main.c ****   filter_out = 0;
 994              		.loc 1 469 3 view .LVU270
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s 			page 50


 995              		.loc 1 469 14 is_stmt 0 view .LVU271
 996 0014 564B     		ldr	r3, .L74
 997 0016 0022     		movs	r2, #0
 998 0018 1A80     		strh	r2, [r3]
 470:Core/Src/main.c **** 
 471:Core/Src/main.c ****   if (!adc_dma_started)
 999              		.loc 1 471 3 is_stmt 1 view .LVU272
 1000              		.loc 1 471 7 is_stmt 0 view .LVU273
 1001 001a 564B     		ldr	r3, .L74+4
 1002 001c 1B78     		ldrb	r3, [r3]
 1003              		.loc 1 471 6 view .LVU274
 1004 001e 002B     		cmp	r3, #0
 1005 0020 57D0     		beq	.L69
 462:Core/Src/main.c **** 
 1006              		.loc 1 462 11 view .LVU275
 1007 0022 0723     		movs	r3, #7
 1008 0024 9946     		mov	r9, r3
 1009              	.LVL77:
 1010              	.L56:
 472:Core/Src/main.c ****   {
 473:Core/Src/main.c ****     if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, ADC_BUF_LEN) != HAL_OK) { next_state = STATE_
 474:Core/Src/main.c ****     adc_dma_started = true;
 475:Core/Src/main.c ****   }
 476:Core/Src/main.c **** 
 477:Core/Src/main.c ****   analog_val = adc_buf[0];
 1011              		.loc 1 477 3 is_stmt 1 view .LVU276
 1012              		.loc 1 477 14 is_stmt 0 view .LVU277
 1013 0026 544B     		ldr	r3, .L74+8
 1014 0028 1888     		ldrh	r0, [r3]
 1015              	.LVL78:
 478:Core/Src/main.c ****   analog_mv = toMilliVolt(analog_val);
 1016              		.loc 1 478 3 is_stmt 1 view .LVU278
 1017              		.loc 1 478 15 is_stmt 0 view .LVU279
 1018 002a FFF7FEFF 		bl	toMilliVolt
 1019              	.LVL79:
 1020              		.loc 1 478 15 view .LVU280
 1021 002e 0400     		movs	r4, r0
 1022 0030 0290     		str	r0, [sp, #8]
 1023              	.LVL80:
 479:Core/Src/main.c ****   digital_val = HAL_GPIO_ReadPin(HALL_DIGITAL_GPIO_Port, HALL_DIGITAL_Pin);
 1024              		.loc 1 479 3 is_stmt 1 view .LVU281
 1025              		.loc 1 479 17 is_stmt 0 view .LVU282
 1026 0032 A020     		movs	r0, #160
 1027 0034 0121     		movs	r1, #1
 1028 0036 C005     		lsls	r0, r0, #23
 1029 0038 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1030              	.LVL81:
 1031 003c 0500     		movs	r5, r0
 1032 003e 0390     		str	r0, [sp, #12]
 1033              	.LVL82:
 480:Core/Src/main.c **** 
 481:Core/Src/main.c ****   if (selected_cmd & CMD_MOVING_AVG)
 1034              		.loc 1 481 3 is_stmt 1 view .LVU283
 1035              		.loc 1 481 20 is_stmt 0 view .LVU284
 1036 0040 4E4B     		ldr	r3, .L74+12
 1037 0042 1E78     		ldrb	r6, [r3]
 1038              		.loc 1 481 6 view .LVU285
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s 			page 51


 1039 0044 F307     		lsls	r3, r6, #31
 1040 0046 1AD5     		bpl	.L58
 482:Core/Src/main.c ****   {
 483:Core/Src/main.c ****     sum += analog_mv - filter_buf[counter];
 1041              		.loc 1 483 5 is_stmt 1 view .LVU286
 1042              		.loc 1 483 34 is_stmt 0 view .LVU287
 1043 0048 4D4B     		ldr	r3, .L74+16
 1044 004a 9A46     		mov	r10, r3
 1045 004c 1F88     		ldrh	r7, [r3]
 1046 004e 4D4B     		ldr	r3, .L74+20
 1047 0050 7A00     		lsls	r2, r7, #1
 1048 0052 9346     		mov	fp, r2
 1049 0054 9846     		mov	r8, r3
 1050 0056 D05A     		ldrh	r0, [r2, r3]
 1051              		.loc 1 483 22 view .LVU288
 1052 0058 201A     		subs	r0, r4, r0
 1053              		.loc 1 483 9 view .LVU289
 1054 005a 4B4B     		ldr	r3, .L74+24
 1055 005c 1A68     		ldr	r2, [r3]
 1056 005e 8018     		adds	r0, r0, r2
 1057 0060 1860     		str	r0, [r3]
 484:Core/Src/main.c ****     filter_out = sum / FILTER_LEN;
 1058              		.loc 1 484 5 is_stmt 1 view .LVU290
 1059              		.loc 1 484 22 is_stmt 0 view .LVU291
 1060 0062 9621     		movs	r1, #150
 1061 0064 FFF7FEFF 		bl	__aeabi_uidiv
 1062              	.LVL83:
 1063              		.loc 1 484 16 view .LVU292
 1064 0068 414B     		ldr	r3, .L74
 1065 006a 1880     		strh	r0, [r3]
 485:Core/Src/main.c ****     filter_buf[counter] = analog_mv;
 1066              		.loc 1 485 5 is_stmt 1 view .LVU293
 1067              		.loc 1 485 25 is_stmt 0 view .LVU294
 1068 006c 4346     		mov	r3, r8
 1069 006e 5A46     		mov	r2, fp
 1070 0070 D452     		strh	r4, [r2, r3]
 486:Core/Src/main.c ****     counter++;
 1071              		.loc 1 486 5 is_stmt 1 view .LVU295
 1072              		.loc 1 486 12 is_stmt 0 view .LVU296
 1073 0072 0137     		adds	r7, r7, #1
 1074 0074 BFB2     		uxth	r7, r7
 1075 0076 5346     		mov	r3, r10
 1076 0078 1F80     		strh	r7, [r3]
 487:Core/Src/main.c ****     if (counter == FILTER_LEN) { counter = 0; }
 1077              		.loc 1 487 5 is_stmt 1 view .LVU297
 1078              		.loc 1 487 8 is_stmt 0 view .LVU298
 1079 007a 962F     		cmp	r7, #150
 1080 007c 39D0     		beq	.L70
 1081              	.L58:
 488:Core/Src/main.c ****   }
 489:Core/Src/main.c **** 
 490:Core/Src/main.c ****   if (selected_cmd & CMD_RAND_NOISE)
 1082              		.loc 1 490 3 is_stmt 1 view .LVU299
 1083              		.loc 1 490 6 is_stmt 0 view .LVU300
 1084 007e B607     		lsls	r6, r6, #30
 1085 0080 3AD4     		bmi	.L71
 1086              	.LVL84:
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s 			page 52


 1087              	.L59:
 491:Core/Src/main.c ****   {
 492:Core/Src/main.c ****     analog_mv = (analog_mv + gaussian_noise_clt(0.0, 100));
 493:Core/Src/main.c ****   }
 494:Core/Src/main.c **** 
 495:Core/Src/main.c ****   if (selected_cmd == CMD_RAW)
 1088              		.loc 1 495 3 is_stmt 1 view .LVU301
 1089              		.loc 1 495 20 is_stmt 0 view .LVU302
 1090 0082 3E4B     		ldr	r3, .L74+12
 1091 0084 1B78     		ldrb	r3, [r3]
 1092              		.loc 1 495 6 view .LVU303
 1093 0086 002B     		cmp	r3, #0
 1094 0088 02D1     		bne	.L60
 496:Core/Src/main.c ****   {
 497:Core/Src/main.c ****     filter_out = 0;
 1095              		.loc 1 497 5 is_stmt 1 view .LVU304
 1096              		.loc 1 497 16 is_stmt 0 view .LVU305
 1097 008a 394B     		ldr	r3, .L74
 1098 008c 0022     		movs	r2, #0
 1099 008e 1A80     		strh	r2, [r3]
 1100              	.L60:
 498:Core/Src/main.c ****   }
 499:Core/Src/main.c **** 
 500:Core/Src/main.c ****   snprintf(msg, sizeof(msg), "%u,%u,%u\r\n", analog_mv, filter_out, digital_val);
 1101              		.loc 1 500 3 is_stmt 1 view .LVU306
 1102 0090 3E4A     		ldr	r2, .L74+28
 1103 0092 04AC     		add	r4, sp, #16
 1104 0094 0195     		str	r5, [sp, #4]
 1105 0096 364B     		ldr	r3, .L74
 1106 0098 1B88     		ldrh	r3, [r3]
 1107 009a 0093     		str	r3, [sp]
 1108 009c 029B     		ldr	r3, [sp, #8]
 1109 009e 4021     		movs	r1, #64
 1110 00a0 2000     		movs	r0, r4
 1111 00a2 FFF7FEFF 		bl	snprintf
 1112              	.LVL85:
 501:Core/Src/main.c ****   print(msg);
 1113              		.loc 1 501 3 view .LVU307
 1114 00a6 2000     		movs	r0, r4
 1115 00a8 FFF7FEFF 		bl	print
 1116              	.LVL86:
 502:Core/Src/main.c **** 
 503:Core/Src/main.c ****   if (digital_val == GPIO_PIN_SET)
 1117              		.loc 1 503 3 view .LVU308
 1118              		.loc 1 503 6 is_stmt 0 view .LVU309
 1119 00ac 039B     		ldr	r3, [sp, #12]
 1120 00ae 012B     		cmp	r3, #1
 1121 00b0 33D0     		beq	.L72
 504:Core/Src/main.c ****   {
 505:Core/Src/main.c ****     if (hall_high_time == 0)
 506:Core/Src/main.c ****     {
 507:Core/Src/main.c ****       hall_high_time = HAL_GetTick();
 508:Core/Src/main.c ****     }
 509:Core/Src/main.c ****     else if (HAL_GetTick() - hall_high_time >= 5000)
 510:Core/Src/main.c ****     {
 511:Core/Src/main.c ****       HAL_ADC_Stop_DMA(&hadc1);
 512:Core/Src/main.c ****       adc_dma_started = false;
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s 			page 53


 513:Core/Src/main.c ****       next_state = STATE_WARNING;
 514:Core/Src/main.c ****       hall_high_time = 0;
 515:Core/Src/main.c ****     }
 516:Core/Src/main.c ****   }
 517:Core/Src/main.c ****   else { hall_high_time = 0; }
 1122              		.loc 1 517 10 is_stmt 1 view .LVU310
 1123              		.loc 1 517 25 is_stmt 0 view .LVU311
 1124 00b2 374B     		ldr	r3, .L74+32
 1125 00b4 0022     		movs	r2, #0
 1126 00b6 1A60     		str	r2, [r3]
 1127              	.LVL87:
 1128              	.L63:
 518:Core/Src/main.c **** 
 519:Core/Src/main.c ****   if (BSP_PB_GetState(BUTTON_USER) == GPIO_PIN_RESET) 
 1129              		.loc 1 519 3 is_stmt 1 view .LVU312
 1130              		.loc 1 519 7 is_stmt 0 view .LVU313
 1131 00b8 0020     		movs	r0, #0
 1132 00ba FFF7FEFF 		bl	BSP_PB_GetState
 1133              	.LVL88:
 1134              		.loc 1 519 6 discriminator 1 view .LVU314
 1135 00be 0028     		cmp	r0, #0
 1136 00c0 47D0     		beq	.L73
 1137              	.LVL89:
 1138              	.L64:
 520:Core/Src/main.c ****   {
 521:Core/Src/main.c ****     HAL_ADC_Stop_DMA(&hadc1);
 522:Core/Src/main.c ****     adc_dma_started = false;
 523:Core/Src/main.c ****     BSP_LED_Off(LED_GREEN);
 524:Core/Src/main.c ****     next_state = STATE_PAUSE;
 525:Core/Src/main.c ****     HAL_Delay(200);
 526:Core/Src/main.c ****   }
 527:Core/Src/main.c ****  
 528:Core/Src/main.c ****   return next_state;
 1139              		.loc 1 528 3 is_stmt 1 view .LVU315
 529:Core/Src/main.c **** }
 1140              		.loc 1 529 1 is_stmt 0 view .LVU316
 1141 00c2 4846     		mov	r0, r9
 1142 00c4 15B0     		add	sp, sp, #84
 1143              		@ sp needed
 1144              	.LVL90:
 1145              	.LVL91:
 1146              		.loc 1 529 1 view .LVU317
 1147 00c6 F0BC     		pop	{r4, r5, r6, r7}
 1148 00c8 BB46     		mov	fp, r7
 1149 00ca B246     		mov	r10, r6
 1150 00cc A946     		mov	r9, r5
 1151 00ce A046     		mov	r8, r4
 1152 00d0 F0BD     		pop	{r4, r5, r6, r7, pc}
 1153              	.LVL92:
 1154              	.L69:
 473:Core/Src/main.c ****     adc_dma_started = true;
 1155              		.loc 1 473 5 is_stmt 1 view .LVU318
 473:Core/Src/main.c ****     adc_dma_started = true;
 1156              		.loc 1 473 9 is_stmt 0 view .LVU319
 1157 00d2 2949     		ldr	r1, .L74+8
 1158 00d4 2F48     		ldr	r0, .L74+36
 1159 00d6 4032     		adds	r2, r2, #64
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s 			page 54


 1160 00d8 FFF7FEFF 		bl	HAL_ADC_Start_DMA
 1161              	.LVL93:
 473:Core/Src/main.c ****     adc_dma_started = true;
 1162              		.loc 1 473 8 discriminator 1 view .LVU320
 1163 00dc 0028     		cmp	r0, #0
 1164 00de 05D1     		bne	.L66
 462:Core/Src/main.c **** 
 1165              		.loc 1 462 11 view .LVU321
 1166 00e0 0723     		movs	r3, #7
 1167 00e2 9946     		mov	r9, r3
 1168              	.L57:
 1169              	.LVL94:
 474:Core/Src/main.c ****   }
 1170              		.loc 1 474 5 is_stmt 1 view .LVU322
 474:Core/Src/main.c ****   }
 1171              		.loc 1 474 21 is_stmt 0 view .LVU323
 1172 00e4 234B     		ldr	r3, .L74+4
 1173 00e6 0122     		movs	r2, #1
 1174 00e8 1A70     		strb	r2, [r3]
 1175 00ea 9CE7     		b	.L56
 1176              	.LVL95:
 1177              	.L66:
 473:Core/Src/main.c ****     adc_dma_started = true;
 1178              		.loc 1 473 92 discriminator 1 view .LVU324
 1179 00ec 0223     		movs	r3, #2
 1180 00ee 9946     		mov	r9, r3
 1181 00f0 F8E7     		b	.L57
 1182              	.LVL96:
 1183              	.L70:
 487:Core/Src/main.c ****   }
 1184              		.loc 1 487 34 is_stmt 1 discriminator 1 view .LVU325
 487:Core/Src/main.c ****   }
 1185              		.loc 1 487 42 is_stmt 0 discriminator 1 view .LVU326
 1186 00f2 0022     		movs	r2, #0
 1187 00f4 1A80     		strh	r2, [r3]
 1188 00f6 C2E7     		b	.L58
 1189              	.L71:
 492:Core/Src/main.c ****   }
 1190              		.loc 1 492 5 is_stmt 1 view .LVU327
 492:Core/Src/main.c ****   }
 1191              		.loc 1 492 28 is_stmt 0 view .LVU328
 1192 00f8 2000     		movs	r0, r4
 1193 00fa FFF7FEFF 		bl	__aeabi_i2f
 1194              	.LVL97:
 1195 00fe 041C     		adds	r4, r0, #0
 1196              	.LVL98:
 492:Core/Src/main.c ****   }
 1197              		.loc 1 492 30 view .LVU329
 1198 0100 2549     		ldr	r1, .L74+40
 1199 0102 0020     		movs	r0, #0
 1200 0104 FFF7FEFF 		bl	gaussian_noise_clt
 1201              	.LVL99:
 1202 0108 011C     		adds	r1, r0, #0
 492:Core/Src/main.c ****   }
 1203              		.loc 1 492 28 discriminator 1 view .LVU330
 1204 010a 201C     		adds	r0, r4, #0
 1205 010c FFF7FEFF 		bl	__aeabi_fadd
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s 			page 55


 1206              	.LVL100:
 492:Core/Src/main.c ****   }
 1207              		.loc 1 492 15 discriminator 1 view .LVU331
 1208 0110 FFF7FEFF 		bl	__aeabi_f2uiz
 1209              	.LVL101:
 1210 0114 83B2     		uxth	r3, r0
 1211 0116 0293     		str	r3, [sp, #8]
 1212              	.LVL102:
 492:Core/Src/main.c ****   }
 1213              		.loc 1 492 15 discriminator 1 view .LVU332
 1214 0118 B3E7     		b	.L59
 1215              	.LVL103:
 1216              	.L72:
 505:Core/Src/main.c ****     {
 1217              		.loc 1 505 5 is_stmt 1 view .LVU333
 505:Core/Src/main.c ****     {
 1218              		.loc 1 505 24 is_stmt 0 view .LVU334
 1219 011a 1D4B     		ldr	r3, .L74+32
 1220 011c 1B68     		ldr	r3, [r3]
 505:Core/Src/main.c ****     {
 1221              		.loc 1 505 8 view .LVU335
 1222 011e 002B     		cmp	r3, #0
 1223 0120 04D1     		bne	.L62
 507:Core/Src/main.c ****     }
 1224              		.loc 1 507 7 is_stmt 1 view .LVU336
 507:Core/Src/main.c ****     }
 1225              		.loc 1 507 24 is_stmt 0 view .LVU337
 1226 0122 FFF7FEFF 		bl	HAL_GetTick
 1227              	.LVL104:
 507:Core/Src/main.c ****     }
 1228              		.loc 1 507 22 discriminator 1 view .LVU338
 1229 0126 1A4B     		ldr	r3, .L74+32
 1230 0128 1860     		str	r0, [r3]
 1231 012a C5E7     		b	.L63
 1232              	.L62:
 509:Core/Src/main.c ****     {
 1233              		.loc 1 509 10 is_stmt 1 view .LVU339
 509:Core/Src/main.c ****     {
 1234              		.loc 1 509 14 is_stmt 0 view .LVU340
 1235 012c FFF7FEFF 		bl	HAL_GetTick
 1236              	.LVL105:
 509:Core/Src/main.c ****     {
 1237              		.loc 1 509 28 discriminator 1 view .LVU341
 1238 0130 174B     		ldr	r3, .L74+32
 1239 0132 1B68     		ldr	r3, [r3]
 1240 0134 C01A     		subs	r0, r0, r3
 509:Core/Src/main.c ****     {
 1241              		.loc 1 509 13 discriminator 1 view .LVU342
 1242 0136 194B     		ldr	r3, .L74+44
 1243 0138 9842     		cmp	r0, r3
 1244 013a BDD9     		bls	.L63
 511:Core/Src/main.c ****       adc_dma_started = false;
 1245              		.loc 1 511 7 is_stmt 1 view .LVU343
 1246 013c 1548     		ldr	r0, .L74+36
 1247 013e FFF7FEFF 		bl	HAL_ADC_Stop_DMA
 1248              	.LVL106:
 512:Core/Src/main.c ****       next_state = STATE_WARNING;
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s 			page 56


 1249              		.loc 1 512 7 view .LVU344
 512:Core/Src/main.c ****       next_state = STATE_WARNING;
 1250              		.loc 1 512 23 is_stmt 0 view .LVU345
 1251 0142 0C4B     		ldr	r3, .L74+4
 1252 0144 0022     		movs	r2, #0
 1253 0146 1A70     		strb	r2, [r3]
 513:Core/Src/main.c ****       hall_high_time = 0;
 1254              		.loc 1 513 7 is_stmt 1 view .LVU346
 1255              	.LVL107:
 514:Core/Src/main.c ****     }
 1256              		.loc 1 514 7 view .LVU347
 514:Core/Src/main.c ****     }
 1257              		.loc 1 514 22 is_stmt 0 view .LVU348
 1258 0148 114B     		ldr	r3, .L74+32
 1259 014a 1A60     		str	r2, [r3]
 513:Core/Src/main.c ****       hall_high_time = 0;
 1260              		.loc 1 513 18 view .LVU349
 1261 014c 0423     		movs	r3, #4
 1262 014e 9946     		mov	r9, r3
 1263 0150 B2E7     		b	.L63
 1264              	.LVL108:
 1265              	.L73:
 521:Core/Src/main.c ****     adc_dma_started = false;
 1266              		.loc 1 521 5 is_stmt 1 view .LVU350
 1267 0152 1048     		ldr	r0, .L74+36
 1268 0154 FFF7FEFF 		bl	HAL_ADC_Stop_DMA
 1269              	.LVL109:
 522:Core/Src/main.c ****     BSP_LED_Off(LED_GREEN);
 1270              		.loc 1 522 5 view .LVU351
 522:Core/Src/main.c ****     BSP_LED_Off(LED_GREEN);
 1271              		.loc 1 522 21 is_stmt 0 view .LVU352
 1272 0158 064B     		ldr	r3, .L74+4
 1273 015a 0022     		movs	r2, #0
 1274 015c 1A70     		strb	r2, [r3]
 523:Core/Src/main.c ****     next_state = STATE_PAUSE;
 1275              		.loc 1 523 5 is_stmt 1 view .LVU353
 1276 015e 0020     		movs	r0, #0
 1277 0160 FFF7FEFF 		bl	BSP_LED_Off
 1278              	.LVL110:
 524:Core/Src/main.c ****     HAL_Delay(200);
 1279              		.loc 1 524 5 view .LVU354
 525:Core/Src/main.c ****   }
 1280              		.loc 1 525 5 view .LVU355
 1281 0164 C820     		movs	r0, #200
 1282 0166 FFF7FEFF 		bl	HAL_Delay
 1283              	.LVL111:
 524:Core/Src/main.c ****     HAL_Delay(200);
 1284              		.loc 1 524 16 is_stmt 0 view .LVU356
 1285 016a 0523     		movs	r3, #5
 1286 016c 9946     		mov	r9, r3
 1287 016e A8E7     		b	.L64
 1288              	.L75:
 1289              		.align	2
 1290              	.L74:
 1291 0170 00000000 		.word	filter_out
 1292 0174 00000000 		.word	adc_dma_started
 1293 0178 00000000 		.word	adc_buf
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s 			page 57


 1294 017c 00000000 		.word	selected_cmd
 1295 0180 00000000 		.word	counter
 1296 0184 00000000 		.word	filter_buf
 1297 0188 00000000 		.word	sum
 1298 018c 00000000 		.word	.LC14
 1299 0190 00000000 		.word	hall_high_time
 1300 0194 00000000 		.word	hadc1
 1301 0198 0000C842 		.word	1120403456
 1302 019c 87130000 		.word	4999
 1303              		.cfi_endproc
 1304              	.LFE358:
 1306              		.section	.text.start_timer,"ax",%progbits
 1307              		.align	1
 1308              		.global	start_timer
 1309              		.syntax unified
 1310              		.code	16
 1311              		.thumb_func
 1313              	start_timer:
 1314              	.LVL112:
 1315              	.LFB350:
 152:Core/Src/main.c ****   uint32_t period = ms - 1;
 1316              		.loc 1 152 1 is_stmt 1 view -0
 1317              		.cfi_startproc
 1318              		@ args = 0, pretend = 0, frame = 0
 1319              		@ frame_needed = 0, uses_anonymous_args = 0
 152:Core/Src/main.c ****   uint32_t period = ms - 1;
 1320              		.loc 1 152 1 is_stmt 0 view .LVU358
 1321 0000 10B5     		push	{r4, lr}
 1322              		.cfi_def_cfa_offset 8
 1323              		.cfi_offset 4, -8
 1324              		.cfi_offset 14, -4
 153:Core/Src/main.c ****   __HAL_TIM_SET_AUTORELOAD(&htim14, period);
 1325              		.loc 1 153 3 is_stmt 1 view .LVU359
 153:Core/Src/main.c ****   __HAL_TIM_SET_AUTORELOAD(&htim14, period);
 1326              		.loc 1 153 12 is_stmt 0 view .LVU360
 1327 0002 431E     		subs	r3, r0, #1
 1328              	.LVL113:
 154:Core/Src/main.c ****   HAL_TIM_Base_Start_IT(&htim14);
 1329              		.loc 1 154 3 is_stmt 1 view .LVU361
 154:Core/Src/main.c ****   HAL_TIM_Base_Start_IT(&htim14);
 1330              		.loc 1 154 3 view .LVU362
 1331 0004 0348     		ldr	r0, .L77
 1332              	.LVL114:
 154:Core/Src/main.c ****   HAL_TIM_Base_Start_IT(&htim14);
 1333              		.loc 1 154 3 is_stmt 0 view .LVU363
 1334 0006 0268     		ldr	r2, [r0]
 1335 0008 D362     		str	r3, [r2, #44]
 154:Core/Src/main.c ****   HAL_TIM_Base_Start_IT(&htim14);
 1336              		.loc 1 154 3 is_stmt 1 view .LVU364
 1337 000a C360     		str	r3, [r0, #12]
 154:Core/Src/main.c ****   HAL_TIM_Base_Start_IT(&htim14);
 1338              		.loc 1 154 3 view .LVU365
 155:Core/Src/main.c **** }
 1339              		.loc 1 155 3 view .LVU366
 1340 000c FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 1341              	.LVL115:
 156:Core/Src/main.c **** 
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s 			page 58


 1342              		.loc 1 156 1 is_stmt 0 view .LVU367
 1343              		@ sp needed
 1344 0010 10BD     		pop	{r4, pc}
 1345              	.L78:
 1346 0012 C046     		.align	2
 1347              	.L77:
 1348 0014 00000000 		.word	htim14
 1349              		.cfi_endproc
 1350              	.LFE350:
 1352              		.section	.rodata.do_ERROR.str1.4,"aMS",%progbits,1
 1353              		.align	2
 1354              	.LC18:
 1355 0000 4552524F 		.ascii	"ERROR\015\012\000"
 1355      520D0A00 
 1356              		.section	.text.do_ERROR,"ax",%progbits
 1357              		.align	1
 1358              		.global	do_ERROR
 1359              		.syntax unified
 1360              		.code	16
 1361              		.thumb_func
 1363              	do_ERROR:
 1364              	.LFB361:
 530:Core/Src/main.c **** 
 531:Core/Src/main.c **** // Function to be executed in state PAUSE
 532:Core/Src/main.c **** // valid return states: STATE_LISTENING, STATE_ERROR
 533:Core/Src/main.c **** state_t do_PAUSE(void) 
 534:Core/Src/main.c **** {
 535:Core/Src/main.c ****   state_t next_state = NO_CHANGE;
 536:Core/Src/main.c ****   hall_high_time = 0;
 537:Core/Src/main.c ****   
 538:Core/Src/main.c ****   start_timer(1000);
 539:Core/Src/main.c **** 
 540:Core/Src/main.c ****   HAL_UART_Receive_IT(&huart2, &rx_byte, 1);
 541:Core/Src/main.c **** 
 542:Core/Src/main.c ****   if (BSP_PB_GetState(BUTTON_USER) == GPIO_PIN_RESET)
 543:Core/Src/main.c ****   {
 544:Core/Src/main.c ****     stop_timer();
 545:Core/Src/main.c ****     next_state = STATE_LISTENING;
 546:Core/Src/main.c ****     HAL_Delay(200);
 547:Core/Src/main.c ****   }
 548:Core/Src/main.c **** 
 549:Core/Src/main.c ****   return next_state;
 550:Core/Src/main.c **** }
 551:Core/Src/main.c **** 
 552:Core/Src/main.c **** // Function to be executed in state WARNING
 553:Core/Src/main.c **** // valid return states: STATE_WAIT_REQUEST, STATE_ERROR
 554:Core/Src/main.c **** state_t do_WARNING(void) 
 555:Core/Src/main.c **** {
 556:Core/Src/main.c ****   state_t next_state = NO_CHANGE;
 557:Core/Src/main.c ****   
 558:Core/Src/main.c ****   stop_timer();
 559:Core/Src/main.c ****   BSP_LED_Off(LED_GREEN);
 560:Core/Src/main.c ****   print("WARNING\r\n");
 561:Core/Src/main.c **** 
 562:Core/Src/main.c ****   if (BSP_PB_GetState(BUTTON_USER) == GPIO_PIN_RESET) 
 563:Core/Src/main.c ****   {
 564:Core/Src/main.c ****     next_state = STATE_WAIT_REQUEST;
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s 			page 59


 565:Core/Src/main.c ****     HAL_Delay(200);
 566:Core/Src/main.c ****   }
 567:Core/Src/main.c **** 
 568:Core/Src/main.c ****   return next_state;
 569:Core/Src/main.c **** }
 570:Core/Src/main.c **** 
 571:Core/Src/main.c **** // Function to be executed in state ERROR
 572:Core/Src/main.c **** // valid return states: NO_CHANGE
 573:Core/Src/main.c **** state_t do_ERROR(void) 
 574:Core/Src/main.c **** {
 1365              		.loc 1 574 1 is_stmt 1 view -0
 1366              		.cfi_startproc
 1367              		@ args = 0, pretend = 0, frame = 0
 1368              		@ frame_needed = 0, uses_anonymous_args = 0
 1369 0000 10B5     		push	{r4, lr}
 1370              		.cfi_def_cfa_offset 8
 1371              		.cfi_offset 4, -8
 1372              		.cfi_offset 14, -4
 575:Core/Src/main.c ****   state_t next_state = NO_CHANGE;
 1373              		.loc 1 575 3 view .LVU369
 1374              	.LVL116:
 576:Core/Src/main.c **** 
 577:Core/Src/main.c ****   start_timer(200);
 1375              		.loc 1 577 3 view .LVU370
 1376 0002 C820     		movs	r0, #200
 1377 0004 FFF7FEFF 		bl	start_timer
 1378              	.LVL117:
 578:Core/Src/main.c ****   print("ERROR\r\n");
 1379              		.loc 1 578 3 view .LVU371
 1380 0008 0748     		ldr	r0, .L82
 1381 000a FFF7FEFF 		bl	print
 1382              	.LVL118:
 579:Core/Src/main.c ****   
 580:Core/Src/main.c ****   if (BSP_PB_GetState(BUTTON_USER) == GPIO_PIN_RESET) 
 1383              		.loc 1 580 3 view .LVU372
 1384              		.loc 1 580 7 is_stmt 0 view .LVU373
 1385 000e 0020     		movs	r0, #0
 1386 0010 FFF7FEFF 		bl	BSP_PB_GetState
 1387              	.LVL119:
 1388              		.loc 1 580 6 discriminator 1 view .LVU374
 1389 0014 0028     		cmp	r0, #0
 1390 0016 01D0     		beq	.L81
 581:Core/Src/main.c ****   {
 582:Core/Src/main.c ****     HAL_Delay(200);
 583:Core/Src/main.c ****     NVIC_SystemReset();
 584:Core/Src/main.c ****   }
 585:Core/Src/main.c **** 
 586:Core/Src/main.c ****   return next_state;
 1391              		.loc 1 586 3 is_stmt 1 view .LVU375
 587:Core/Src/main.c **** }
 1392              		.loc 1 587 1 is_stmt 0 view .LVU376
 1393 0018 0720     		movs	r0, #7
 1394              		@ sp needed
 1395 001a 10BD     		pop	{r4, pc}
 1396              	.L81:
 582:Core/Src/main.c ****     NVIC_SystemReset();
 1397              		.loc 1 582 5 is_stmt 1 view .LVU377
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s 			page 60


 1398 001c C830     		adds	r0, r0, #200
 1399 001e FFF7FEFF 		bl	HAL_Delay
 1400              	.LVL120:
 583:Core/Src/main.c ****   }
 1401              		.loc 1 583 5 view .LVU378
 1402 0022 FFF7FEFF 		bl	__NVIC_SystemReset
 1403              	.LVL121:
 1404              	.L83:
 1405 0026 C046     		.align	2
 1406              	.L82:
 1407 0028 00000000 		.word	.LC18
 1408              		.cfi_endproc
 1409              	.LFE361:
 1411              		.section	.text.stop_timer,"ax",%progbits
 1412              		.align	1
 1413              		.global	stop_timer
 1414              		.syntax unified
 1415              		.code	16
 1416              		.thumb_func
 1418              	stop_timer:
 1419              	.LFB351:
 159:Core/Src/main.c ****   HAL_TIM_Base_Stop_IT(&htim14);
 1420              		.loc 1 159 1 view -0
 1421              		.cfi_startproc
 1422              		@ args = 0, pretend = 0, frame = 0
 1423              		@ frame_needed = 0, uses_anonymous_args = 0
 1424 0000 10B5     		push	{r4, lr}
 1425              		.cfi_def_cfa_offset 8
 1426              		.cfi_offset 4, -8
 1427              		.cfi_offset 14, -4
 160:Core/Src/main.c **** }
 1428              		.loc 1 160 3 view .LVU380
 1429 0002 0248     		ldr	r0, .L85
 1430 0004 FFF7FEFF 		bl	HAL_TIM_Base_Stop_IT
 1431              	.LVL122:
 161:Core/Src/main.c **** 
 1432              		.loc 1 161 1 is_stmt 0 view .LVU381
 1433              		@ sp needed
 1434 0008 10BD     		pop	{r4, pc}
 1435              	.L86:
 1436 000a C046     		.align	2
 1437              	.L85:
 1438 000c 00000000 		.word	htim14
 1439              		.cfi_endproc
 1440              	.LFE351:
 1442              		.section	.text.do_PAUSE,"ax",%progbits
 1443              		.align	1
 1444              		.global	do_PAUSE
 1445              		.syntax unified
 1446              		.code	16
 1447              		.thumb_func
 1449              	do_PAUSE:
 1450              	.LFB359:
 534:Core/Src/main.c ****   state_t next_state = NO_CHANGE;
 1451              		.loc 1 534 1 is_stmt 1 view -0
 1452              		.cfi_startproc
 1453              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s 			page 61


 1454              		@ frame_needed = 0, uses_anonymous_args = 0
 1455 0000 10B5     		push	{r4, lr}
 1456              		.cfi_def_cfa_offset 8
 1457              		.cfi_offset 4, -8
 1458              		.cfi_offset 14, -4
 535:Core/Src/main.c ****   hall_high_time = 0;
 1459              		.loc 1 535 3 view .LVU383
 1460              	.LVL123:
 536:Core/Src/main.c ****   
 1461              		.loc 1 536 3 view .LVU384
 536:Core/Src/main.c ****   
 1462              		.loc 1 536 18 is_stmt 0 view .LVU385
 1463 0002 0D4B     		ldr	r3, .L91
 1464 0004 0022     		movs	r2, #0
 1465 0006 1A60     		str	r2, [r3]
 538:Core/Src/main.c **** 
 1466              		.loc 1 538 3 is_stmt 1 view .LVU386
 1467 0008 FA20     		movs	r0, #250
 1468 000a 8000     		lsls	r0, r0, #2
 1469 000c FFF7FEFF 		bl	start_timer
 1470              	.LVL124:
 540:Core/Src/main.c **** 
 1471              		.loc 1 540 3 view .LVU387
 1472 0010 0A49     		ldr	r1, .L91+4
 1473 0012 0B48     		ldr	r0, .L91+8
 1474 0014 0122     		movs	r2, #1
 1475 0016 FFF7FEFF 		bl	HAL_UART_Receive_IT
 1476              	.LVL125:
 542:Core/Src/main.c ****   {
 1477              		.loc 1 542 3 view .LVU388
 542:Core/Src/main.c ****   {
 1478              		.loc 1 542 7 is_stmt 0 view .LVU389
 1479 001a 0020     		movs	r0, #0
 1480 001c FFF7FEFF 		bl	BSP_PB_GetState
 1481              	.LVL126:
 542:Core/Src/main.c ****   {
 1482              		.loc 1 542 6 discriminator 1 view .LVU390
 1483 0020 0028     		cmp	r0, #0
 1484 0022 01D0     		beq	.L90
 535:Core/Src/main.c ****   hall_high_time = 0;
 1485              		.loc 1 535 11 view .LVU391
 1486 0024 0720     		movs	r0, #7
 1487              	.LVL127:
 1488              	.L88:
 549:Core/Src/main.c **** }
 1489              		.loc 1 549 3 is_stmt 1 view .LVU392
 550:Core/Src/main.c **** 
 1490              		.loc 1 550 1 is_stmt 0 view .LVU393
 1491              		@ sp needed
 1492 0026 10BD     		pop	{r4, pc}
 1493              	.LVL128:
 1494              	.L90:
 544:Core/Src/main.c ****     next_state = STATE_LISTENING;
 1495              		.loc 1 544 5 is_stmt 1 view .LVU394
 1496 0028 FFF7FEFF 		bl	stop_timer
 1497              	.LVL129:
 545:Core/Src/main.c ****     HAL_Delay(200);
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s 			page 62


 1498              		.loc 1 545 5 view .LVU395
 546:Core/Src/main.c ****   }
 1499              		.loc 1 546 5 view .LVU396
 1500 002c C820     		movs	r0, #200
 1501 002e FFF7FEFF 		bl	HAL_Delay
 1502              	.LVL130:
 545:Core/Src/main.c ****     HAL_Delay(200);
 1503              		.loc 1 545 16 is_stmt 0 view .LVU397
 1504 0032 0320     		movs	r0, #3
 1505 0034 F7E7     		b	.L88
 1506              	.L92:
 1507 0036 C046     		.align	2
 1508              	.L91:
 1509 0038 00000000 		.word	hall_high_time
 1510 003c 00000000 		.word	rx_byte
 1511 0040 00000000 		.word	huart2
 1512              		.cfi_endproc
 1513              	.LFE359:
 1515              		.section	.rodata.do_WARNING.str1.4,"aMS",%progbits,1
 1516              		.align	2
 1517              	.LC24:
 1518 0000 5741524E 		.ascii	"WARNING\015\012\000"
 1518      494E470D 
 1518      0A00
 1519              		.section	.text.do_WARNING,"ax",%progbits
 1520              		.align	1
 1521              		.global	do_WARNING
 1522              		.syntax unified
 1523              		.code	16
 1524              		.thumb_func
 1526              	do_WARNING:
 1527              	.LFB360:
 555:Core/Src/main.c ****   state_t next_state = NO_CHANGE;
 1528              		.loc 1 555 1 is_stmt 1 view -0
 1529              		.cfi_startproc
 1530              		@ args = 0, pretend = 0, frame = 0
 1531              		@ frame_needed = 0, uses_anonymous_args = 0
 1532 0000 10B5     		push	{r4, lr}
 1533              		.cfi_def_cfa_offset 8
 1534              		.cfi_offset 4, -8
 1535              		.cfi_offset 14, -4
 556:Core/Src/main.c ****   
 1536              		.loc 1 556 3 view .LVU399
 1537              	.LVL131:
 558:Core/Src/main.c ****   BSP_LED_Off(LED_GREEN);
 1538              		.loc 1 558 3 view .LVU400
 1539 0002 FFF7FEFF 		bl	stop_timer
 1540              	.LVL132:
 559:Core/Src/main.c ****   print("WARNING\r\n");
 1541              		.loc 1 559 3 view .LVU401
 1542 0006 0020     		movs	r0, #0
 1543 0008 FFF7FEFF 		bl	BSP_LED_Off
 1544              	.LVL133:
 560:Core/Src/main.c **** 
 1545              		.loc 1 560 3 view .LVU402
 1546 000c 0748     		ldr	r0, .L97
 1547 000e FFF7FEFF 		bl	print
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s 			page 63


 1548              	.LVL134:
 562:Core/Src/main.c ****   {
 1549              		.loc 1 562 3 view .LVU403
 562:Core/Src/main.c ****   {
 1550              		.loc 1 562 7 is_stmt 0 view .LVU404
 1551 0012 0020     		movs	r0, #0
 1552 0014 FFF7FEFF 		bl	BSP_PB_GetState
 1553              	.LVL135:
 562:Core/Src/main.c ****   {
 1554              		.loc 1 562 6 discriminator 1 view .LVU405
 1555 0018 0028     		cmp	r0, #0
 1556 001a 01D0     		beq	.L96
 556:Core/Src/main.c ****   
 1557              		.loc 1 556 11 view .LVU406
 1558 001c 0720     		movs	r0, #7
 1559              	.LVL136:
 1560              	.L94:
 568:Core/Src/main.c **** }
 1561              		.loc 1 568 3 is_stmt 1 view .LVU407
 569:Core/Src/main.c **** 
 1562              		.loc 1 569 1 is_stmt 0 view .LVU408
 1563              		@ sp needed
 1564 001e 10BD     		pop	{r4, pc}
 1565              	.LVL137:
 1566              	.L96:
 564:Core/Src/main.c ****     HAL_Delay(200);
 1567              		.loc 1 564 5 is_stmt 1 view .LVU409
 565:Core/Src/main.c ****   }
 1568              		.loc 1 565 5 view .LVU410
 1569 0020 C830     		adds	r0, r0, #200
 1570 0022 FFF7FEFF 		bl	HAL_Delay
 1571              	.LVL138:
 564:Core/Src/main.c ****     HAL_Delay(200);
 1572              		.loc 1 564 16 is_stmt 0 view .LVU411
 1573 0026 0120     		movs	r0, #1
 1574 0028 F9E7     		b	.L94
 1575              	.L98:
 1576 002a C046     		.align	2
 1577              	.L97:
 1578 002c 00000000 		.word	.LC24
 1579              		.cfi_endproc
 1580              	.LFE360:
 1582              		.section	.rodata.cli_process_cmd.str1.4,"aMS",%progbits,1
 1583              		.align	2
 1584              	.LC26:
 1585 0000 72617700 		.ascii	"raw\000"
 1586              		.align	2
 1587              	.LC28:
 1588 0004 72656D6F 		.ascii	"removed all filters\015\012\000"
 1588      76656420 
 1588      616C6C20 
 1588      66696C74 
 1588      6572730D 
 1589 001a 0000     		.align	2
 1590              	.LC31:
 1591 001c 6D6F7669 		.ascii	"moving average\000"
 1591      6E672061 
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s 			page 64


 1591      76657261 
 1591      676500
 1592 002b 00       		.align	2
 1593              	.LC33:
 1594 002c 6D6F7669 		.ascii	"moving average on\015\012\000"
 1594      6E672061 
 1594      76657261 
 1594      6765206F 
 1594      6E0D0A00 
 1595              		.align	2
 1596              	.LC35:
 1597 0040 6D6F7669 		.ascii	"moving average off\015\012\000"
 1597      6E672061 
 1597      76657261 
 1597      6765206F 
 1597      66660D0A 
 1598 0055 000000   		.align	2
 1599              	.LC37:
 1600 0058 72616E64 		.ascii	"random noise\000"
 1600      6F6D206E 
 1600      6F697365 
 1600      00
 1601 0065 000000   		.align	2
 1602              	.LC39:
 1603 0068 72616E64 		.ascii	"random noise on\015\012\000"
 1603      6F6D206E 
 1603      6F697365 
 1603      206F6E0D 
 1603      0A00
 1604 007a 0000     		.align	2
 1605              	.LC41:
 1606 007c 72616E64 		.ascii	"random noise off\015\012\000"
 1606      6F6D206E 
 1606      6F697365 
 1606      206F6666 
 1606      0D0A00
 1607 008f 00       		.align	2
 1608              	.LC43:
 1609 0090 756E6B6E 		.ascii	"unknown command: %s\015\012\000"
 1609      6F776E20 
 1609      636F6D6D 
 1609      616E643A 
 1609      2025730D 
 1610              		.section	.text.cli_process_cmd,"ax",%progbits
 1611              		.align	1
 1612              		.global	cli_process_cmd
 1613              		.syntax unified
 1614              		.code	16
 1615              		.thumb_func
 1617              	cli_process_cmd:
 1618              	.LVL139:
 1619              	.LFB352:
 164:Core/Src/main.c ****   if (strcmp(cmd, "raw") == 0) 
 1620              		.loc 1 164 1 is_stmt 1 view -0
 1621              		.cfi_startproc
 1622              		@ args = 0, pretend = 0, frame = 64
 1623              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s 			page 65


 164:Core/Src/main.c ****   if (strcmp(cmd, "raw") == 0) 
 1624              		.loc 1 164 1 is_stmt 0 view .LVU413
 1625 0000 30B5     		push	{r4, r5, lr}
 1626              		.cfi_def_cfa_offset 12
 1627              		.cfi_offset 4, -12
 1628              		.cfi_offset 5, -8
 1629              		.cfi_offset 14, -4
 1630 0002 91B0     		sub	sp, sp, #68
 1631              		.cfi_def_cfa_offset 80
 1632 0004 0400     		movs	r4, r0
 165:Core/Src/main.c ****   {
 1633              		.loc 1 165 3 is_stmt 1 view .LVU414
 165:Core/Src/main.c ****   {
 1634              		.loc 1 165 7 is_stmt 0 view .LVU415
 1635 0006 2149     		ldr	r1, .L107
 1636 0008 FFF7FEFF 		bl	strcmp
 1637              	.LVL140:
 165:Core/Src/main.c ****   {
 1638              		.loc 1 165 6 discriminator 1 view .LVU416
 1639 000c 0028     		cmp	r0, #0
 1640 000e 11D0     		beq	.L106
 170:Core/Src/main.c ****   { 
 1641              		.loc 1 170 8 is_stmt 1 view .LVU417
 170:Core/Src/main.c ****   { 
 1642              		.loc 1 170 12 is_stmt 0 view .LVU418
 1643 0010 1F49     		ldr	r1, .L107+4
 1644 0012 2000     		movs	r0, r4
 1645 0014 FFF7FEFF 		bl	strcmp
 1646              	.LVL141:
 170:Core/Src/main.c ****   { 
 1647              		.loc 1 170 11 discriminator 1 view .LVU419
 1648 0018 0028     		cmp	r0, #0
 1649 001a 17D1     		bne	.L102
 172:Core/Src/main.c **** 
 1650              		.loc 1 172 5 is_stmt 1 view .LVU420
 172:Core/Src/main.c **** 
 1651              		.loc 1 172 18 is_stmt 0 view .LVU421
 1652 001c 1D4A     		ldr	r2, .L107+8
 1653 001e 1378     		ldrb	r3, [r2]
 1654 0020 0121     		movs	r1, #1
 1655 0022 4B40     		eors	r3, r1
 1656 0024 DBB2     		uxtb	r3, r3
 1657 0026 1370     		strb	r3, [r2]
 174:Core/Src/main.c ****     {
 1658              		.loc 1 174 5 is_stmt 1 view .LVU422
 174:Core/Src/main.c ****     {
 1659              		.loc 1 174 8 is_stmt 0 view .LVU423
 1660 0028 DB07     		lsls	r3, r3, #31
 1661 002a 0BD5     		bpl	.L103
 176:Core/Src/main.c ****     }
 1662              		.loc 1 176 7 is_stmt 1 view .LVU424
 1663 002c 1A48     		ldr	r0, .L107+12
 1664 002e FFF7FEFF 		bl	print
 1665              	.LVL142:
 1666 0032 05E0     		b	.L99
 1667              	.L106:
 167:Core/Src/main.c ****     selected_cmd = CMD_RAW;
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s 			page 66


 1668              		.loc 1 167 5 view .LVU425
 1669 0034 1948     		ldr	r0, .L107+16
 1670 0036 FFF7FEFF 		bl	print
 1671              	.LVL143:
 168:Core/Src/main.c ****   }
 1672              		.loc 1 168 5 view .LVU426
 168:Core/Src/main.c ****   }
 1673              		.loc 1 168 18 is_stmt 0 view .LVU427
 1674 003a 164B     		ldr	r3, .L107+8
 1675 003c 0022     		movs	r2, #0
 1676 003e 1A70     		strb	r2, [r3]
 1677              	.L99:
 202:Core/Src/main.c **** 
 1678              		.loc 1 202 1 view .LVU428
 1679 0040 11B0     		add	sp, sp, #68
 1680              		@ sp needed
 1681              	.LVL144:
 202:Core/Src/main.c **** 
 1682              		.loc 1 202 1 view .LVU429
 1683 0042 30BD     		pop	{r4, r5, pc}
 1684              	.LVL145:
 1685              	.L103:
 180:Core/Src/main.c ****     }
 1686              		.loc 1 180 7 is_stmt 1 view .LVU430
 1687 0044 1648     		ldr	r0, .L107+20
 1688 0046 FFF7FEFF 		bl	print
 1689              	.LVL146:
 1690 004a F9E7     		b	.L99
 1691              	.L102:
 183:Core/Src/main.c ****   {
 1692              		.loc 1 183 8 view .LVU431
 183:Core/Src/main.c ****   {
 1693              		.loc 1 183 12 is_stmt 0 view .LVU432
 1694 004c 1549     		ldr	r1, .L107+24
 1695 004e 2000     		movs	r0, r4
 1696 0050 FFF7FEFF 		bl	strcmp
 1697              	.LVL147:
 183:Core/Src/main.c ****   {
 1698              		.loc 1 183 11 discriminator 1 view .LVU433
 1699 0054 0028     		cmp	r0, #0
 1700 0056 0FD1     		bne	.L104
 185:Core/Src/main.c **** 
 1701              		.loc 1 185 5 is_stmt 1 view .LVU434
 185:Core/Src/main.c **** 
 1702              		.loc 1 185 18 is_stmt 0 view .LVU435
 1703 0058 0E4A     		ldr	r2, .L107+8
 1704 005a 1378     		ldrb	r3, [r2]
 1705 005c 0221     		movs	r1, #2
 1706 005e 4B40     		eors	r3, r1
 1707 0060 DBB2     		uxtb	r3, r3
 1708 0062 1370     		strb	r3, [r2]
 187:Core/Src/main.c ****     {
 1709              		.loc 1 187 5 is_stmt 1 view .LVU436
 187:Core/Src/main.c ****     {
 1710              		.loc 1 187 8 is_stmt 0 view .LVU437
 1711 0064 9B07     		lsls	r3, r3, #30
 1712 0066 03D5     		bpl	.L105
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s 			page 67


 189:Core/Src/main.c ****     }
 1713              		.loc 1 189 7 is_stmt 1 view .LVU438
 1714 0068 0F48     		ldr	r0, .L107+28
 1715 006a FFF7FEFF 		bl	print
 1716              	.LVL148:
 1717 006e E7E7     		b	.L99
 1718              	.L105:
 193:Core/Src/main.c ****     }
 1719              		.loc 1 193 7 view .LVU439
 1720 0070 0E48     		ldr	r0, .L107+32
 1721 0072 FFF7FEFF 		bl	print
 1722              	.LVL149:
 1723 0076 E3E7     		b	.L99
 1724              	.L104:
 1725              	.LBB18:
 198:Core/Src/main.c ****     snprintf(msg, sizeof(msg), "unknown command: %s\r\n", cmd);
 1726              		.loc 1 198 5 view .LVU440
 199:Core/Src/main.c ****     print(msg);
 1727              		.loc 1 199 5 view .LVU441
 1728 0078 0D4A     		ldr	r2, .L107+36
 1729 007a 2300     		movs	r3, r4
 1730 007c 4021     		movs	r1, #64
 1731 007e 6846     		mov	r0, sp
 1732 0080 FFF7FEFF 		bl	snprintf
 1733              	.LVL150:
 200:Core/Src/main.c ****   }
 1734              		.loc 1 200 5 view .LVU442
 1735 0084 6846     		mov	r0, sp
 1736 0086 FFF7FEFF 		bl	print
 1737              	.LVL151:
 1738              	.LBE18:
 202:Core/Src/main.c **** 
 1739              		.loc 1 202 1 is_stmt 0 view .LVU443
 1740 008a D9E7     		b	.L99
 1741              	.L108:
 1742              		.align	2
 1743              	.L107:
 1744 008c 00000000 		.word	.LC26
 1745 0090 1C000000 		.word	.LC31
 1746 0094 00000000 		.word	selected_cmd
 1747 0098 2C000000 		.word	.LC33
 1748 009c 04000000 		.word	.LC28
 1749 00a0 40000000 		.word	.LC35
 1750 00a4 58000000 		.word	.LC37
 1751 00a8 68000000 		.word	.LC39
 1752 00ac 7C000000 		.word	.LC41
 1753 00b0 90000000 		.word	.LC43
 1754              		.cfi_endproc
 1755              	.LFE352:
 1757              		.section	.text.run_state,"ax",%progbits
 1758              		.align	1
 1759              		.global	run_state
 1760              		.syntax unified
 1761              		.code	16
 1762              		.thumb_func
 1764              	run_state:
 1765              	.LVL152:
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s 			page 68


 1766              	.LFB362:
 588:Core/Src/main.c **** 
 589:Core/Src/main.c **** state_t run_state(state_t cur_state) 
 590:Core/Src/main.c **** {
 1767              		.loc 1 590 1 is_stmt 1 view -0
 1768              		.cfi_startproc
 1769              		@ args = 0, pretend = 0, frame = 0
 1770              		@ frame_needed = 0, uses_anonymous_args = 0
 1771              		.loc 1 590 1 is_stmt 0 view .LVU445
 1772 0000 10B5     		push	{r4, lr}
 1773              		.cfi_def_cfa_offset 8
 1774              		.cfi_offset 4, -8
 1775              		.cfi_offset 14, -4
 1776 0002 0400     		movs	r4, r0
 591:Core/Src/main.c ****   state_t new_state = state_table[cur_state]();
 1777              		.loc 1 591 3 is_stmt 1 view .LVU446
 1778              		.loc 1 591 34 is_stmt 0 view .LVU447
 1779 0004 044B     		ldr	r3, .L113
 1780 0006 8200     		lsls	r2, r0, #2
 1781 0008 D358     		ldr	r3, [r2, r3]
 1782              		.loc 1 591 23 view .LVU448
 1783 000a 9847     		blx	r3
 1784              	.LVL153:
 592:Core/Src/main.c ****   if (new_state == NO_CHANGE) { new_state = cur_state; }
 1785              		.loc 1 592 3 is_stmt 1 view .LVU449
 1786              		.loc 1 592 6 is_stmt 0 view .LVU450
 1787 000c 0728     		cmp	r0, #7
 1788 000e 00D0     		beq	.L112
 1789              	.LVL154:
 1790              	.L110:
 593:Core/Src/main.c **** 
 594:Core/Src/main.c ****   return new_state;
 1791              		.loc 1 594 3 is_stmt 1 view .LVU451
 595:Core/Src/main.c **** };
 1792              		.loc 1 595 1 is_stmt 0 view .LVU452
 1793              		@ sp needed
 1794              	.LVL155:
 1795              		.loc 1 595 1 view .LVU453
 1796 0010 10BD     		pop	{r4, pc}
 1797              	.L112:
 592:Core/Src/main.c ****   if (new_state == NO_CHANGE) { new_state = cur_state; }
 1798              		.loc 1 592 43 discriminator 1 view .LVU454
 1799 0012 2000     		movs	r0, r4
 1800              	.LVL156:
 592:Core/Src/main.c ****   if (new_state == NO_CHANGE) { new_state = cur_state; }
 1801              		.loc 1 592 43 discriminator 1 view .LVU455
 1802 0014 FCE7     		b	.L110
 1803              	.L114:
 1804 0016 C046     		.align	2
 1805              	.L113:
 1806 0018 00000000 		.word	state_table
 1807              		.cfi_endproc
 1808              	.LFE362:
 1810              		.section	.text.main,"ax",%progbits
 1811              		.align	1
 1812              		.global	main
 1813              		.syntax unified
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s 			page 69


 1814              		.code	16
 1815              		.thumb_func
 1817              	main:
 1818              	.LFB353:
 218:Core/Src/main.c ****   while (1)
 1819              		.loc 1 218 1 is_stmt 1 view -0
 1820              		.cfi_startproc
 1821              		@ Volatile: function does not return.
 1822              		@ args = 0, pretend = 0, frame = 0
 1823              		@ frame_needed = 0, uses_anonymous_args = 0
 1824 0000 10B5     		push	{r4, lr}
 1825              		.cfi_def_cfa_offset 8
 1826              		.cfi_offset 4, -8
 1827              		.cfi_offset 14, -4
 1828              	.L116:
 219:Core/Src/main.c ****   {
 1829              		.loc 1 219 3 view .LVU457
 221:Core/Src/main.c ****   }
 1830              		.loc 1 221 5 discriminator 1 view .LVU458
 221:Core/Src/main.c ****   }
 1831              		.loc 1 221 21 is_stmt 0 discriminator 1 view .LVU459
 1832 0002 034C     		ldr	r4, .L117
 1833 0004 2078     		ldrb	r0, [r4]
 1834 0006 FFF7FEFF 		bl	run_state
 1835              	.LVL157:
 221:Core/Src/main.c ****   }
 1836              		.loc 1 221 19 discriminator 1 view .LVU460
 1837 000a 2070     		strb	r0, [r4]
 219:Core/Src/main.c ****   {
 1838              		.loc 1 219 9 is_stmt 1 view .LVU461
 1839 000c F9E7     		b	.L116
 1840              	.L118:
 1841 000e C046     		.align	2
 1842              	.L117:
 1843 0010 00000000 		.word	current_state
 1844              		.cfi_endproc
 1845              	.LFE353:
 1847              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 1848              		.align	1
 1849              		.global	HAL_TIM_PeriodElapsedCallback
 1850              		.syntax unified
 1851              		.code	16
 1852              		.thumb_func
 1854              	HAL_TIM_PeriodElapsedCallback:
 1855              	.LVL158:
 1856              	.LFB363:
 596:Core/Src/main.c **** 
 597:Core/Src/main.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
 598:Core/Src/main.c **** {
 1857              		.loc 1 598 1 view -0
 1858              		.cfi_startproc
 1859              		@ args = 0, pretend = 0, frame = 0
 1860              		@ frame_needed = 0, uses_anonymous_args = 0
 1861              		.loc 1 598 1 is_stmt 0 view .LVU463
 1862 0000 10B5     		push	{r4, lr}
 1863              		.cfi_def_cfa_offset 8
 1864              		.cfi_offset 4, -8
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s 			page 70


 1865              		.cfi_offset 14, -4
 599:Core/Src/main.c ****   if (htim->Instance == TIM14)
 1866              		.loc 1 599 3 is_stmt 1 view .LVU464
 1867              		.loc 1 599 11 is_stmt 0 view .LVU465
 1868 0002 0268     		ldr	r2, [r0]
 1869              		.loc 1 599 6 view .LVU466
 1870 0004 034B     		ldr	r3, .L122
 1871 0006 9A42     		cmp	r2, r3
 1872 0008 00D0     		beq	.L121
 1873              	.LVL159:
 1874              	.L119:
 600:Core/Src/main.c ****   {
 601:Core/Src/main.c ****     BSP_LED_Toggle(LED_GREEN);
 602:Core/Src/main.c ****   }
 603:Core/Src/main.c **** }
 1875              		.loc 1 603 1 view .LVU467
 1876              		@ sp needed
 1877 000a 10BD     		pop	{r4, pc}
 1878              	.LVL160:
 1879              	.L121:
 601:Core/Src/main.c ****   }
 1880              		.loc 1 601 5 is_stmt 1 view .LVU468
 1881 000c 0020     		movs	r0, #0
 1882              	.LVL161:
 601:Core/Src/main.c ****   }
 1883              		.loc 1 601 5 is_stmt 0 view .LVU469
 1884 000e FFF7FEFF 		bl	BSP_LED_Toggle
 1885              	.LVL162:
 1886              		.loc 1 603 1 view .LVU470
 1887 0012 FAE7     		b	.L119
 1888              	.L123:
 1889              		.align	2
 1890              	.L122:
 1891 0014 00200040 		.word	1073750016
 1892              		.cfi_endproc
 1893              	.LFE363:
 1895              		.section	.text.HAL_UART_TxCpltCallback,"ax",%progbits
 1896              		.align	1
 1897              		.global	HAL_UART_TxCpltCallback
 1898              		.syntax unified
 1899              		.code	16
 1900              		.thumb_func
 1902              	HAL_UART_TxCpltCallback:
 1903              	.LVL163:
 1904              	.LFB364:
 604:Core/Src/main.c **** 
 605:Core/Src/main.c **** void HAL_UART_TxCpltCallback(UART_HandleTypeDef* huart)
 606:Core/Src/main.c **** {
 1905              		.loc 1 606 1 is_stmt 1 view -0
 1906              		.cfi_startproc
 1907              		@ args = 0, pretend = 0, frame = 0
 1908              		@ frame_needed = 0, uses_anonymous_args = 0
 1909              		@ link register save eliminated.
 607:Core/Src/main.c ****   if (huart->Instance == USART2) {}
 1910              		.loc 1 607 3 view .LVU472
 1911              		.loc 1 607 35 discriminator 1 view .LVU473
 608:Core/Src/main.c **** }
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s 			page 71


 1912              		.loc 1 608 1 is_stmt 0 view .LVU474
 1913              		@ sp needed
 1914 0000 7047     		bx	lr
 1915              		.cfi_endproc
 1916              	.LFE364:
 1918              		.section	.text.HAL_UART_RxCpltCallback,"ax",%progbits
 1919              		.align	1
 1920              		.global	HAL_UART_RxCpltCallback
 1921              		.syntax unified
 1922              		.code	16
 1923              		.thumb_func
 1925              	HAL_UART_RxCpltCallback:
 1926              	.LVL164:
 1927              	.LFB365:
 609:Core/Src/main.c **** 
 610:Core/Src/main.c **** void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
 611:Core/Src/main.c **** {
 1928              		.loc 1 611 1 is_stmt 1 view -0
 1929              		.cfi_startproc
 1930              		@ args = 0, pretend = 0, frame = 0
 1931              		@ frame_needed = 0, uses_anonymous_args = 0
 1932              		.loc 1 611 1 is_stmt 0 view .LVU476
 1933 0000 70B5     		push	{r4, r5, r6, lr}
 1934              		.cfi_def_cfa_offset 16
 1935              		.cfi_offset 4, -16
 1936              		.cfi_offset 5, -12
 1937              		.cfi_offset 6, -8
 1938              		.cfi_offset 14, -4
 612:Core/Src/main.c ****     if (huart->Instance == USART2)
 1939              		.loc 1 612 5 is_stmt 1 view .LVU477
 1940              		.loc 1 612 14 is_stmt 0 view .LVU478
 1941 0002 0268     		ldr	r2, [r0]
 1942              		.loc 1 612 8 view .LVU479
 1943 0004 104B     		ldr	r3, .L131
 1944 0006 9A42     		cmp	r2, r3
 1945 0008 00D0     		beq	.L130
 1946              	.LVL165:
 1947              	.L125:
 613:Core/Src/main.c ****     {
 614:Core/Src/main.c ****       if (rx_byte == '\r' || rx_byte == '\n')
 615:Core/Src/main.c ****       {
 616:Core/Src/main.c ****         rx_buf[rx_idx] = '\0';
 617:Core/Src/main.c ****         cli_process_cmd((char*)rx_buf);
 618:Core/Src/main.c ****         rx_idx = 0;
 619:Core/Src/main.c ****       }
 620:Core/Src/main.c ****       else
 621:Core/Src/main.c ****       {
 622:Core/Src/main.c ****         if (rx_idx < RX_BUF_LEN - 1)
 623:Core/Src/main.c ****         {
 624:Core/Src/main.c ****           rx_buf[rx_idx++] = rx_byte;
 625:Core/Src/main.c ****         }
 626:Core/Src/main.c ****       }
 627:Core/Src/main.c **** 
 628:Core/Src/main.c ****       HAL_UART_Receive_IT(&huart2, &rx_byte, 1);
 629:Core/Src/main.c ****     }
 630:Core/Src/main.c **** }
 1948              		.loc 1 630 1 view .LVU480
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s 			page 72


 1949              		@ sp needed
 1950 000a 70BD     		pop	{r4, r5, r6, pc}
 1951              	.LVL166:
 1952              	.L130:
 614:Core/Src/main.c ****       {
 1953              		.loc 1 614 7 is_stmt 1 view .LVU481
 614:Core/Src/main.c ****       {
 1954              		.loc 1 614 19 is_stmt 0 view .LVU482
 1955 000c 0F4B     		ldr	r3, .L131+4
 1956 000e 1B78     		ldrb	r3, [r3]
 614:Core/Src/main.c ****       {
 1957              		.loc 1 614 10 view .LVU483
 1958 0010 0D2B     		cmp	r3, #13
 1959 0012 0BD0     		beq	.L127
 614:Core/Src/main.c ****       {
 1960              		.loc 1 614 27 discriminator 1 view .LVU484
 1961 0014 0A2B     		cmp	r3, #10
 1962 0016 09D0     		beq	.L127
 622:Core/Src/main.c ****         {
 1963              		.loc 1 622 9 is_stmt 1 view .LVU485
 622:Core/Src/main.c ****         {
 1964              		.loc 1 622 20 is_stmt 0 view .LVU486
 1965 0018 0D4A     		ldr	r2, .L131+8
 1966 001a 1288     		ldrh	r2, [r2]
 622:Core/Src/main.c ****         {
 1967              		.loc 1 622 12 view .LVU487
 1968 001c 3E2A     		cmp	r2, #62
 1969 001e 0DD8     		bhi	.L129
 624:Core/Src/main.c ****         }
 1970              		.loc 1 624 11 is_stmt 1 view .LVU488
 624:Core/Src/main.c ****         }
 1971              		.loc 1 624 24 is_stmt 0 view .LVU489
 1972 0020 0B49     		ldr	r1, .L131+8
 1973 0022 501C     		adds	r0, r2, #1
 1974              	.LVL167:
 624:Core/Src/main.c ****         }
 1975              		.loc 1 624 24 view .LVU490
 1976 0024 0880     		strh	r0, [r1]
 624:Core/Src/main.c ****         }
 1977              		.loc 1 624 28 view .LVU491
 1978 0026 0B49     		ldr	r1, .L131+12
 1979 0028 8B54     		strb	r3, [r1, r2]
 1980 002a 07E0     		b	.L129
 1981              	.LVL168:
 1982              	.L127:
 616:Core/Src/main.c ****         cli_process_cmd((char*)rx_buf);
 1983              		.loc 1 616 9 is_stmt 1 view .LVU492
 616:Core/Src/main.c ****         cli_process_cmd((char*)rx_buf);
 1984              		.loc 1 616 15 is_stmt 0 view .LVU493
 1985 002c 084C     		ldr	r4, .L131+8
 1986 002e 2388     		ldrh	r3, [r4]
 616:Core/Src/main.c ****         cli_process_cmd((char*)rx_buf);
 1987              		.loc 1 616 24 view .LVU494
 1988 0030 0848     		ldr	r0, .L131+12
 1989              	.LVL169:
 616:Core/Src/main.c ****         cli_process_cmd((char*)rx_buf);
 1990              		.loc 1 616 24 view .LVU495
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s 			page 73


 1991 0032 0025     		movs	r5, #0
 1992 0034 C554     		strb	r5, [r0, r3]
 617:Core/Src/main.c ****         rx_idx = 0;
 1993              		.loc 1 617 9 is_stmt 1 view .LVU496
 1994 0036 FFF7FEFF 		bl	cli_process_cmd
 1995              	.LVL170:
 618:Core/Src/main.c ****       }
 1996              		.loc 1 618 9 view .LVU497
 618:Core/Src/main.c ****       }
 1997              		.loc 1 618 16 is_stmt 0 view .LVU498
 1998 003a 2580     		strh	r5, [r4]
 1999              	.L129:
 628:Core/Src/main.c ****     }
 2000              		.loc 1 628 7 is_stmt 1 view .LVU499
 2001 003c 0349     		ldr	r1, .L131+4
 2002 003e 0648     		ldr	r0, .L131+16
 2003 0040 0122     		movs	r2, #1
 2004 0042 FFF7FEFF 		bl	HAL_UART_Receive_IT
 2005              	.LVL171:
 2006              		.loc 1 630 1 is_stmt 0 view .LVU500
 2007 0046 E0E7     		b	.L125
 2008              	.L132:
 2009              		.align	2
 2010              	.L131:
 2011 0048 00440040 		.word	1073759232
 2012 004c 00000000 		.word	rx_byte
 2013 0050 00000000 		.word	rx_idx
 2014 0054 00000000 		.word	rx_buf
 2015 0058 00000000 		.word	huart2
 2016              		.cfi_endproc
 2017              	.LFE365:
 2019              		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
 2020              		.align	1
 2021              		.global	HAL_ADC_ConvCpltCallback
 2022              		.syntax unified
 2023              		.code	16
 2024              		.thumb_func
 2026              	HAL_ADC_ConvCpltCallback:
 2027              	.LVL172:
 2028              	.LFB366:
 631:Core/Src/main.c **** 
 632:Core/Src/main.c **** void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
 633:Core/Src/main.c **** {
 2029              		.loc 1 633 1 is_stmt 1 view -0
 2030              		.cfi_startproc
 2031              		@ args = 0, pretend = 0, frame = 0
 2032              		@ frame_needed = 0, uses_anonymous_args = 0
 2033              		@ link register save eliminated.
 634:Core/Src/main.c ****   if (hadc->Instance == ADC1) {}
 2034              		.loc 1 634 3 view .LVU502
 2035              		.loc 1 634 32 discriminator 1 view .LVU503
 635:Core/Src/main.c **** }
 2036              		.loc 1 635 1 is_stmt 0 view .LVU504
 2037              		@ sp needed
 2038 0000 7047     		bx	lr
 2039              		.cfi_endproc
 2040              	.LFE366:
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s 			page 74


 2042              		.section	.text.Error_Handler,"ax",%progbits
 2043              		.align	1
 2044              		.global	Error_Handler
 2045              		.syntax unified
 2046              		.code	16
 2047              		.thumb_func
 2049              	Error_Handler:
 2050              	.LFB367:
 636:Core/Src/main.c **** 
 637:Core/Src/main.c **** /* USER CODE END 4 */
 638:Core/Src/main.c **** 
 639:Core/Src/main.c **** /**
 640:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 641:Core/Src/main.c ****   * @retval None
 642:Core/Src/main.c ****   */
 643:Core/Src/main.c **** void Error_Handler(void)
 644:Core/Src/main.c **** {
 2051              		.loc 1 644 1 is_stmt 1 view -0
 2052              		.cfi_startproc
 2053              		@ Volatile: function does not return.
 2054              		@ args = 0, pretend = 0, frame = 0
 2055              		@ frame_needed = 0, uses_anonymous_args = 0
 2056              		@ link register save eliminated.
 645:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 646:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 647:Core/Src/main.c ****   __disable_irq();
 2057              		.loc 1 647 3 view .LVU506
 2058              	.LBB19:
 2059              	.LBI19:
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 278:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 298:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s 			page 75


 300:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 307:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 308:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 309:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 312:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 324:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 344:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 348:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 349:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 350:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 351:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 354:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s 			page 76


 357:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 362:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 363:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 381:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 389:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 396:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 398:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****    */
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s 			page 77


 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 416:Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
 417:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 430:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 431:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 435:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 436:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 442:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 444:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 446:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 447:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 448:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
 450:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 456:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s 			page 78


 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 486:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 495:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 499:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 500:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 502:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
 504:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 507:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 509:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 513:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 520:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s 			page 79


 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 537:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Remove the exclusive lock
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 540:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
 541:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 544:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 552:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 558:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 560:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SSAT(ARG1, ARG2) \
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 564:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 568:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 573:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 574:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
 575:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 577:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __USAT(ARG1, ARG2) \
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 580:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 583:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 584:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s 			page 80


 585:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 586:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 596:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 599:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 600:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 603:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 604:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 608:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
 609:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 610:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 611:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 615:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 616:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 621:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 622:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 625:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
 627:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 628:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
 631:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 633:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 634:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 637:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 639:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 641:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s 			page 81


 642:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 644:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 647:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
 648:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
 649:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 650:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 652:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
 653:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 654:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 655:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
 663:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 665:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 666:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 669:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 684:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 690:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 693:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 696:Drivers/CMSIS/Include/cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 698:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s 			page 82


 699:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 700:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 704:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 708:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 711:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 712:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t min = -1 - max ;
 713:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > max)
 714:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 715:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 716:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < min)
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****       return min;
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 721:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   return val;
 723:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 724:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 726:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 727:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 731:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 732:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 734:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (sat <= 31U)
 735:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 736:Drivers/CMSIS/Include/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
 737:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > (int32_t)max)
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < 0)
 742:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****       return 0U;
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 746:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (uint32_t)val;
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 749:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 751:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 755:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s 			page 83


 756:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 757:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
 759:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 760:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 761:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 762:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
 763:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 769:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 781:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 795:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 799:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
 803:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
 804:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 809:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s 			page 84


 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 814:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 818:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 826:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
 827:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
 828:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 835:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 838:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 842:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 846:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 849:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 853:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 860:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 864:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 865:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s 			page 85


 870:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 871:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
 874:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 878:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 888:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 889:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 890:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 892:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 896:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
 902:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 904:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 906:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 907:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
 908:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 909:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 912:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 913:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 914:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 915:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 916:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
 919:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 920:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 926:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s 			page 86


 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memo
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 930:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 931:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 932:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 933:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@}*/ /* end of group CMSIS_Core_InstructionInterface */
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 937:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 939:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 940:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 943:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 945:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 946:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
 947:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 949:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 950:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 952:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 953:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
 958:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 959:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 960:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 2060              		.loc 3 960 27 view .LVU507
 2061              	.LBB20:
 961:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 962:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 2062              		.loc 3 962 3 view .LVU508
 2063              		.syntax divided
 2064              	@ 962 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2065 0000 72B6     		cpsid i
 2066              	@ 0 "" 2
 2067              		.thumb
 2068              		.syntax unified
 2069              	.L135:
 2070              	.LBE20:
 2071              	.LBE19:
 648:Core/Src/main.c ****   while (1)
 2072              		.loc 1 648 3 view .LVU509
 649:Core/Src/main.c ****   {}
 2073              		.loc 1 649 4 view .LVU510
 648:Core/Src/main.c ****   while (1)
 2074              		.loc 1 648 9 view .LVU511
 2075 0002 FEE7     		b	.L135
 2076              		.cfi_endproc
 2077              	.LFE367:
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s 			page 87


 2079              		.global	current_state
 2080              		.section	.bss.current_state,"aw",%nobits
 2083              	current_state:
 2084 0000 00       		.space	1
 2085              		.global	state_table
 2086              		.section	.rodata.state_table,"a"
 2087              		.align	2
 2090              	state_table:
 2091 0000 00000000 		.word	do_INIT
 2092 0004 00000000 		.word	do_WAIT_REQUEST
 2093 0008 00000000 		.word	do_ERROR
 2094 000c 00000000 		.word	do_LISTENING
 2095 0010 00000000 		.word	do_WARNING
 2096 0014 00000000 		.word	do_PAUSE
 2097              		.global	selected_cmd
 2098              		.section	.bss.selected_cmd,"aw",%nobits
 2101              	selected_cmd:
 2102 0000 00       		.space	1
 2103              		.global	hall_high_time
 2104              		.section	.bss.hall_high_time,"aw",%nobits
 2105              		.align	2
 2108              	hall_high_time:
 2109 0000 00000000 		.space	4
 2110              		.global	sum
 2111              		.section	.bss.sum,"aw",%nobits
 2112              		.align	2
 2115              	sum:
 2116 0000 00000000 		.space	4
 2117              		.global	counter
 2118              		.section	.bss.counter,"aw",%nobits
 2119              		.align	1
 2122              	counter:
 2123 0000 0000     		.space	2
 2124              		.global	filter_buf
 2125              		.section	.bss.filter_buf,"aw",%nobits
 2126              		.align	2
 2129              	filter_buf:
 2130 0000 00000000 		.space	300
 2130      00000000 
 2130      00000000 
 2130      00000000 
 2130      00000000 
 2131              		.global	filter_out
 2132              		.section	.bss.filter_out,"aw",%nobits
 2133              		.align	1
 2136              	filter_out:
 2137 0000 0000     		.space	2
 2138              		.global	rx_idx
 2139              		.section	.bss.rx_idx,"aw",%nobits
 2140              		.align	1
 2143              	rx_idx:
 2144 0000 0000     		.space	2
 2145              		.global	rx_buf
 2146              		.section	.bss.rx_buf,"aw",%nobits
 2147              		.align	2
 2150              	rx_buf:
 2151 0000 00000000 		.space	64
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s 			page 88


 2151      00000000 
 2151      00000000 
 2151      00000000 
 2151      00000000 
 2152              		.global	rx_byte
 2153              		.section	.bss.rx_byte,"aw",%nobits
 2156              	rx_byte:
 2157 0000 00       		.space	1
 2158              		.global	adc_dma_started
 2159              		.section	.bss.adc_dma_started,"aw",%nobits
 2162              	adc_dma_started:
 2163 0000 00       		.space	1
 2164              		.global	adc_buf
 2165              		.section	.bss.adc_buf,"aw",%nobits
 2166              		.align	2
 2169              	adc_buf:
 2170 0000 00000000 		.space	128
 2170      00000000 
 2170      00000000 
 2170      00000000 
 2170      00000000 
 2171              		.global	huart2
 2172              		.section	.bss.huart2,"aw",%nobits
 2173              		.align	2
 2176              	huart2:
 2177 0000 00000000 		.space	148
 2177      00000000 
 2177      00000000 
 2177      00000000 
 2177      00000000 
 2178              		.global	htim14
 2179              		.section	.bss.htim14,"aw",%nobits
 2180              		.align	2
 2183              	htim14:
 2184 0000 00000000 		.space	76
 2184      00000000 
 2184      00000000 
 2184      00000000 
 2184      00000000 
 2185              		.global	hdma_adc1
 2186              		.section	.bss.hdma_adc1,"aw",%nobits
 2187              		.align	2
 2190              	hdma_adc1:
 2191 0000 00000000 		.space	92
 2191      00000000 
 2191      00000000 
 2191      00000000 
 2191      00000000 
 2192              		.global	hadc1
 2193              		.section	.bss.hadc1,"aw",%nobits
 2194              		.align	2
 2197              	hadc1:
 2198 0000 00000000 		.space	100
 2198      00000000 
 2198      00000000 
 2198      00000000 
 2198      00000000 
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s 			page 89


 2199              		.text
 2200              	.Letext0:
 2201              		.file 4 "Drivers/CMSIS/Device/ST/STM32C0xx/Include/stm32c031xx.h"
 2202              		.file 5 "/Users/killzyy/Library/Application Support/Code/User/globalStorage/bmd.stm32-for-vscode/@
 2203              		.file 6 "/Users/killzyy/Library/Application Support/Code/User/globalStorage/bmd.stm32-for-vscode/@
 2204              		.file 7 "Drivers/CMSIS/Device/ST/STM32C0xx/Include/stm32c0xx.h"
 2205              		.file 8 "/Users/killzyy/Library/Application Support/Code/User/globalStorage/bmd.stm32-for-vscode/@
 2206              		.file 9 "Drivers/STM32C0xx_HAL_Driver/Inc/stm32c0xx_hal_def.h"
 2207              		.file 10 "Drivers/STM32C0xx_HAL_Driver/Inc/stm32c0xx_hal_rcc.h"
 2208              		.file 11 "Drivers/STM32C0xx_HAL_Driver/Inc/stm32c0xx_hal_gpio.h"
 2209              		.file 12 "Drivers/STM32C0xx_HAL_Driver/Inc/stm32c0xx_hal_dma.h"
 2210              		.file 13 "Drivers/STM32C0xx_HAL_Driver/Inc/stm32c0xx_hal_adc.h"
 2211              		.file 14 "Drivers/STM32C0xx_HAL_Driver/Inc/stm32c0xx_hal_tim.h"
 2212              		.file 15 "Drivers/STM32C0xx_HAL_Driver/Inc/stm32c0xx_hal_uart.h"
 2213              		.file 16 "Drivers/BSP/STM32C0xx_Nucleo/stm32c0xx_nucleo.h"
 2214              		.file 17 "/Users/killzyy/Library/Application Support/Code/User/globalStorage/bmd.stm32-for-vscode/
 2215              		.file 18 "Core/Inc/fsm.h"
 2216              		.file 19 "Drivers/STM32C0xx_HAL_Driver/Inc/stm32c0xx_hal.h"
 2217              		.file 20 "Drivers/STM32C0xx_HAL_Driver/Inc/stm32c0xx_hal_cortex.h"
 2218              		.file 21 "Drivers/STM32C0xx_HAL_Driver/Inc/stm32c0xx_hal_adc_ex.h"
 2219              		.file 22 "/Users/killzyy/Library/Application Support/Code/User/globalStorage/bmd.stm32-for-vscode/
 2220              		.file 23 "/Users/killzyy/Library/Application Support/Code/User/globalStorage/bmd.stm32-for-vscode/
 2221              		.file 24 "/Users/killzyy/Library/Application Support/Code/User/globalStorage/bmd.stm32-for-vscode/
 2222              		.file 25 "/Users/killzyy/Library/Application Support/Code/User/globalStorage/bmd.stm32-for-vscode/
 2223              		.file 26 "<built-in>"
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s 			page 90


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:19     .text.__NVIC_SystemReset:00000000 $t
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:24     .text.__NVIC_SystemReset:00000000 __NVIC_SystemReset
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:81     .text.__NVIC_SystemReset:00000014 $d
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:87     .text.MX_GPIO_Init:00000000 $t
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:92     .text.MX_GPIO_Init:00000000 MX_GPIO_Init
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:181    .text.MX_GPIO_Init:00000054 $d
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:186    .text.MX_DMA_Init:00000000 $t
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:191    .text.MX_DMA_Init:00000000 MX_DMA_Init
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:236    .text.MX_DMA_Init:0000002c $d
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:241    .text.do_INIT:00000000 $t
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:247    .text.do_INIT:00000000 do_INIT
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:591    .text.do_INIT:0000014c $d
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:2197   .bss.hadc1:00000000 hadc1
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:2176   .bss.huart2:00000000 huart2
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:2183   .bss.htim14:00000000 htim14
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:605    .text.do_WAIT_REQUEST:00000000 $t
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:611    .text.do_WAIT_REQUEST:00000000 do_WAIT_REQUEST
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:658    .text.do_WAIT_REQUEST:00000024 $d
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:2156   .bss.rx_byte:00000000 rx_byte
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:664    .text.print:00000000 $t
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:670    .text.print:00000000 print
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:701    .text.print:00000014 $d
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:706    .text.map:00000000 $t
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:712    .text.map:00000000 map
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:759    .text.toMilliVolt:00000000 $t
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:765    .text.toMilliVolt:00000000 toMilliVolt
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:794    .text.toMilliVolt:00000010 $d
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:800    .text.correct:00000000 $t
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:806    .text.correct:00000000 correct
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:848    .text.correct:00000018 $d
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:853    .text.gaussian_noise_clt:00000000 $t
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:859    .text.gaussian_noise_clt:00000000 gaussian_noise_clt
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:944    .text.gaussian_noise_clt:00000044 $d
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:949    .rodata.do_LISTENING.str1.4:00000000 $d
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:953    .text.do_LISTENING:00000000 $t
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:959    .text.do_LISTENING:00000000 do_LISTENING
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:1291   .text.do_LISTENING:00000170 $d
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:2136   .bss.filter_out:00000000 filter_out
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:2162   .bss.adc_dma_started:00000000 adc_dma_started
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:2169   .bss.adc_buf:00000000 adc_buf
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:2101   .bss.selected_cmd:00000000 selected_cmd
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:2122   .bss.counter:00000000 counter
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:2129   .bss.filter_buf:00000000 filter_buf
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:2115   .bss.sum:00000000 sum
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:2108   .bss.hall_high_time:00000000 hall_high_time
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:1307   .text.start_timer:00000000 $t
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:1313   .text.start_timer:00000000 start_timer
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:1348   .text.start_timer:00000014 $d
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:1353   .rodata.do_ERROR.str1.4:00000000 $d
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:1357   .text.do_ERROR:00000000 $t
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:1363   .text.do_ERROR:00000000 do_ERROR
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:1407   .text.do_ERROR:00000028 $d
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:1412   .text.stop_timer:00000000 $t
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:1418   .text.stop_timer:00000000 stop_timer
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:1438   .text.stop_timer:0000000c $d
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s 			page 91


/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:1443   .text.do_PAUSE:00000000 $t
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:1449   .text.do_PAUSE:00000000 do_PAUSE
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:1509   .text.do_PAUSE:00000038 $d
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:1516   .rodata.do_WARNING.str1.4:00000000 $d
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:1520   .text.do_WARNING:00000000 $t
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:1526   .text.do_WARNING:00000000 do_WARNING
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:1578   .text.do_WARNING:0000002c $d
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:1583   .rodata.cli_process_cmd.str1.4:00000000 $d
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:1611   .text.cli_process_cmd:00000000 $t
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:1617   .text.cli_process_cmd:00000000 cli_process_cmd
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:1744   .text.cli_process_cmd:0000008c $d
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:1758   .text.run_state:00000000 $t
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:1764   .text.run_state:00000000 run_state
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:1806   .text.run_state:00000018 $d
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:2090   .rodata.state_table:00000000 state_table
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:1811   .text.main:00000000 $t
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:1817   .text.main:00000000 main
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:1843   .text.main:00000010 $d
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:2083   .bss.current_state:00000000 current_state
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:1848   .text.HAL_TIM_PeriodElapsedCallback:00000000 $t
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:1854   .text.HAL_TIM_PeriodElapsedCallback:00000000 HAL_TIM_PeriodElapsedCallback
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:1891   .text.HAL_TIM_PeriodElapsedCallback:00000014 $d
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:1896   .text.HAL_UART_TxCpltCallback:00000000 $t
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:1902   .text.HAL_UART_TxCpltCallback:00000000 HAL_UART_TxCpltCallback
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:1919   .text.HAL_UART_RxCpltCallback:00000000 $t
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:1925   .text.HAL_UART_RxCpltCallback:00000000 HAL_UART_RxCpltCallback
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:2011   .text.HAL_UART_RxCpltCallback:00000048 $d
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:2143   .bss.rx_idx:00000000 rx_idx
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:2150   .bss.rx_buf:00000000 rx_buf
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:2020   .text.HAL_ADC_ConvCpltCallback:00000000 $t
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:2026   .text.HAL_ADC_ConvCpltCallback:00000000 HAL_ADC_ConvCpltCallback
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:2043   .text.Error_Handler:00000000 $t
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:2049   .text.Error_Handler:00000000 Error_Handler
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:2084   .bss.current_state:00000000 $d
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:2087   .rodata.state_table:00000000 $d
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:2102   .bss.selected_cmd:00000000 $d
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:2105   .bss.hall_high_time:00000000 $d
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:2112   .bss.sum:00000000 $d
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:2119   .bss.counter:00000000 $d
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:2126   .bss.filter_buf:00000000 $d
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:2133   .bss.filter_out:00000000 $d
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:2140   .bss.rx_idx:00000000 $d
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:2147   .bss.rx_buf:00000000 $d
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:2157   .bss.rx_byte:00000000 $d
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:2163   .bss.adc_dma_started:00000000 $d
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:2166   .bss.adc_buf:00000000 $d
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:2173   .bss.huart2:00000000 $d
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:2180   .bss.htim14:00000000 $d
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:2190   .bss.hdma_adc1:00000000 hdma_adc1
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:2187   .bss.hdma_adc1:00000000 $d
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s:2194   .bss.hadc1:00000000 $d

UNDEFINED SYMBOLS
memset
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccLJF3CJ.s 			page 92


HAL_Init
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_UART_Init
HAL_TIM_Base_Init
time
srand
HAL_ADCEx_Calibration_Start
BSP_LED_Init
BSP_PB_Init
HAL_UART_Receive_IT
BSP_PB_GetState
HAL_Delay
strlen
HAL_UART_Transmit_IT
__aeabi_idiv
rand
__aeabi_i2f
__aeabi_fmul
__aeabi_fadd
__aeabi_fsub
BSP_LED_On
HAL_GPIO_ReadPin
__aeabi_uidiv
snprintf
HAL_ADC_Start_DMA
__aeabi_f2uiz
HAL_GetTick
HAL_ADC_Stop_DMA
BSP_LED_Off
HAL_TIM_Base_Start_IT
HAL_TIM_Base_Stop_IT
strcmp
BSP_LED_Toggle
