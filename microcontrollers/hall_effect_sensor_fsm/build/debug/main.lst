ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.arch armv6s-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Core/Src/main.c"
  18              		.section	.text.__NVIC_SystemReset,"ax",%progbits
  19              		.align	1
  20              		.syntax unified
  21              		.code	16
  22              		.thumb_func
  24              	__NVIC_SystemReset:
  25              	.LFB39:
  26              		.file 2 "Drivers/CMSIS/Include/core_cm0plus.h"
   1:Drivers/CMSIS/Include/core_cm0plus.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/core_cm0plus.h ****  * @file     core_cm0plus.h
   3:Drivers/CMSIS/Include/core_cm0plus.h ****  * @brief    CMSIS Cortex-M0+ Core Peripheral Access Layer Header File
   4:Drivers/CMSIS/Include/core_cm0plus.h ****  * @version  V5.0.9
   5:Drivers/CMSIS/Include/core_cm0plus.h ****  * @date     21. August 2019
   6:Drivers/CMSIS/Include/core_cm0plus.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/core_cm0plus.h **** /*
   8:Drivers/CMSIS/Include/core_cm0plus.h ****  * Copyright (c) 2009-2019 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/core_cm0plus.h ****  *
  10:Drivers/CMSIS/Include/core_cm0plus.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/core_cm0plus.h ****  *
  12:Drivers/CMSIS/Include/core_cm0plus.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/core_cm0plus.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/core_cm0plus.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/core_cm0plus.h ****  *
  16:Drivers/CMSIS/Include/core_cm0plus.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/core_cm0plus.h ****  *
  18:Drivers/CMSIS/Include/core_cm0plus.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/core_cm0plus.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/core_cm0plus.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/core_cm0plus.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/core_cm0plus.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/core_cm0plus.h ****  */
  24:Drivers/CMSIS/Include/core_cm0plus.h **** 
  25:Drivers/CMSIS/Include/core_cm0plus.h **** #if   defined ( __ICCARM__ )
  26:Drivers/CMSIS/Include/core_cm0plus.h ****   #pragma system_include         /* treat file as system include file for MISRA check */
  27:Drivers/CMSIS/Include/core_cm0plus.h **** #elif defined (__clang__)
  28:Drivers/CMSIS/Include/core_cm0plus.h ****   #pragma clang system_header   /* treat file as system include file */
  29:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
  30:Drivers/CMSIS/Include/core_cm0plus.h **** 
  31:Drivers/CMSIS/Include/core_cm0plus.h **** #ifndef __CORE_CM0PLUS_H_GENERIC
  32:Drivers/CMSIS/Include/core_cm0plus.h **** #define __CORE_CM0PLUS_H_GENERIC
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s 			page 2


  33:Drivers/CMSIS/Include/core_cm0plus.h **** 
  34:Drivers/CMSIS/Include/core_cm0plus.h **** #include <stdint.h>
  35:Drivers/CMSIS/Include/core_cm0plus.h **** 
  36:Drivers/CMSIS/Include/core_cm0plus.h **** #ifdef __cplusplus
  37:Drivers/CMSIS/Include/core_cm0plus.h ****  extern "C" {
  38:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
  39:Drivers/CMSIS/Include/core_cm0plus.h **** 
  40:Drivers/CMSIS/Include/core_cm0plus.h **** /**
  41:Drivers/CMSIS/Include/core_cm0plus.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  42:Drivers/CMSIS/Include/core_cm0plus.h ****   CMSIS violates the following MISRA-C:2004 rules:
  43:Drivers/CMSIS/Include/core_cm0plus.h **** 
  44:Drivers/CMSIS/Include/core_cm0plus.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  45:Drivers/CMSIS/Include/core_cm0plus.h ****      Function definitions in header files are used to allow 'inlining'.
  46:Drivers/CMSIS/Include/core_cm0plus.h **** 
  47:Drivers/CMSIS/Include/core_cm0plus.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  48:Drivers/CMSIS/Include/core_cm0plus.h ****      Unions are used for effective representation of core registers.
  49:Drivers/CMSIS/Include/core_cm0plus.h **** 
  50:Drivers/CMSIS/Include/core_cm0plus.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  51:Drivers/CMSIS/Include/core_cm0plus.h ****      Function-like macros are used to allow more efficient code.
  52:Drivers/CMSIS/Include/core_cm0plus.h ****  */
  53:Drivers/CMSIS/Include/core_cm0plus.h **** 
  54:Drivers/CMSIS/Include/core_cm0plus.h **** 
  55:Drivers/CMSIS/Include/core_cm0plus.h **** /*******************************************************************************
  56:Drivers/CMSIS/Include/core_cm0plus.h ****  *                 CMSIS definitions
  57:Drivers/CMSIS/Include/core_cm0plus.h ****  ******************************************************************************/
  58:Drivers/CMSIS/Include/core_cm0plus.h **** /**
  59:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup Cortex-M0+
  60:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
  61:Drivers/CMSIS/Include/core_cm0plus.h ****  */
  62:Drivers/CMSIS/Include/core_cm0plus.h **** 
  63:Drivers/CMSIS/Include/core_cm0plus.h **** #include "cmsis_version.h"
  64:Drivers/CMSIS/Include/core_cm0plus.h ****  
  65:Drivers/CMSIS/Include/core_cm0plus.h **** /*  CMSIS CM0+ definitions */
  66:Drivers/CMSIS/Include/core_cm0plus.h **** #define __CM0PLUS_CMSIS_VERSION_MAIN (__CM_CMSIS_VERSION_MAIN)                  /*!< \deprecated [3
  67:Drivers/CMSIS/Include/core_cm0plus.h **** #define __CM0PLUS_CMSIS_VERSION_SUB  (__CM_CMSIS_VERSION_SUB)                   /*!< \deprecated [1
  68:Drivers/CMSIS/Include/core_cm0plus.h **** #define __CM0PLUS_CMSIS_VERSION      ((__CM0PLUS_CMSIS_VERSION_MAIN << 16U) | \
  69:Drivers/CMSIS/Include/core_cm0plus.h ****                                        __CM0PLUS_CMSIS_VERSION_SUB           )  /*!< \deprecated CM
  70:Drivers/CMSIS/Include/core_cm0plus.h **** 
  71:Drivers/CMSIS/Include/core_cm0plus.h **** #define __CORTEX_M                   (0U)                                       /*!< Cortex-M Core 
  72:Drivers/CMSIS/Include/core_cm0plus.h **** 
  73:Drivers/CMSIS/Include/core_cm0plus.h **** /** __FPU_USED indicates whether an FPU is used or not.
  74:Drivers/CMSIS/Include/core_cm0plus.h ****     This core does not support an FPU at all
  75:Drivers/CMSIS/Include/core_cm0plus.h **** */
  76:Drivers/CMSIS/Include/core_cm0plus.h **** #define __FPU_USED       0U
  77:Drivers/CMSIS/Include/core_cm0plus.h **** 
  78:Drivers/CMSIS/Include/core_cm0plus.h **** #if defined ( __CC_ARM )
  79:Drivers/CMSIS/Include/core_cm0plus.h ****   #if defined __TARGET_FPU_VFP
  80:Drivers/CMSIS/Include/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  81:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
  82:Drivers/CMSIS/Include/core_cm0plus.h **** 
  83:Drivers/CMSIS/Include/core_cm0plus.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  84:Drivers/CMSIS/Include/core_cm0plus.h ****   #if defined __ARM_FP
  85:Drivers/CMSIS/Include/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  86:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
  87:Drivers/CMSIS/Include/core_cm0plus.h **** 
  88:Drivers/CMSIS/Include/core_cm0plus.h **** #elif defined ( __GNUC__ )
  89:Drivers/CMSIS/Include/core_cm0plus.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s 			page 3


  90:Drivers/CMSIS/Include/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  91:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
  92:Drivers/CMSIS/Include/core_cm0plus.h **** 
  93:Drivers/CMSIS/Include/core_cm0plus.h **** #elif defined ( __ICCARM__ )
  94:Drivers/CMSIS/Include/core_cm0plus.h ****   #if defined __ARMVFP__
  95:Drivers/CMSIS/Include/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  96:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
  97:Drivers/CMSIS/Include/core_cm0plus.h **** 
  98:Drivers/CMSIS/Include/core_cm0plus.h **** #elif defined ( __TI_ARM__ )
  99:Drivers/CMSIS/Include/core_cm0plus.h ****   #if defined __TI_VFP_SUPPORT__
 100:Drivers/CMSIS/Include/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 101:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 102:Drivers/CMSIS/Include/core_cm0plus.h **** 
 103:Drivers/CMSIS/Include/core_cm0plus.h **** #elif defined ( __TASKING__ )
 104:Drivers/CMSIS/Include/core_cm0plus.h ****   #if defined __FPU_VFP__
 105:Drivers/CMSIS/Include/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 106:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 107:Drivers/CMSIS/Include/core_cm0plus.h **** 
 108:Drivers/CMSIS/Include/core_cm0plus.h **** #elif defined ( __CSMC__ )
 109:Drivers/CMSIS/Include/core_cm0plus.h ****   #if ( __CSMC__ & 0x400U)
 110:Drivers/CMSIS/Include/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 111:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 112:Drivers/CMSIS/Include/core_cm0plus.h **** 
 113:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 114:Drivers/CMSIS/Include/core_cm0plus.h **** 
 115:Drivers/CMSIS/Include/core_cm0plus.h **** #include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
 116:Drivers/CMSIS/Include/core_cm0plus.h **** 
 117:Drivers/CMSIS/Include/core_cm0plus.h **** 
 118:Drivers/CMSIS/Include/core_cm0plus.h **** #ifdef __cplusplus
 119:Drivers/CMSIS/Include/core_cm0plus.h **** }
 120:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 121:Drivers/CMSIS/Include/core_cm0plus.h **** 
 122:Drivers/CMSIS/Include/core_cm0plus.h **** #endif /* __CORE_CM0PLUS_H_GENERIC */
 123:Drivers/CMSIS/Include/core_cm0plus.h **** 
 124:Drivers/CMSIS/Include/core_cm0plus.h **** #ifndef __CMSIS_GENERIC
 125:Drivers/CMSIS/Include/core_cm0plus.h **** 
 126:Drivers/CMSIS/Include/core_cm0plus.h **** #ifndef __CORE_CM0PLUS_H_DEPENDANT
 127:Drivers/CMSIS/Include/core_cm0plus.h **** #define __CORE_CM0PLUS_H_DEPENDANT
 128:Drivers/CMSIS/Include/core_cm0plus.h **** 
 129:Drivers/CMSIS/Include/core_cm0plus.h **** #ifdef __cplusplus
 130:Drivers/CMSIS/Include/core_cm0plus.h ****  extern "C" {
 131:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 132:Drivers/CMSIS/Include/core_cm0plus.h **** 
 133:Drivers/CMSIS/Include/core_cm0plus.h **** /* check device defines and use defaults */
 134:Drivers/CMSIS/Include/core_cm0plus.h **** #if defined __CHECK_DEVICE_DEFINES
 135:Drivers/CMSIS/Include/core_cm0plus.h ****   #ifndef __CM0PLUS_REV
 136:Drivers/CMSIS/Include/core_cm0plus.h ****     #define __CM0PLUS_REV             0x0000U
 137:Drivers/CMSIS/Include/core_cm0plus.h ****     #warning "__CM0PLUS_REV not defined in device header file; using default!"
 138:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 139:Drivers/CMSIS/Include/core_cm0plus.h **** 
 140:Drivers/CMSIS/Include/core_cm0plus.h ****   #ifndef __MPU_PRESENT
 141:Drivers/CMSIS/Include/core_cm0plus.h ****     #define __MPU_PRESENT             0U
 142:Drivers/CMSIS/Include/core_cm0plus.h ****     #warning "__MPU_PRESENT not defined in device header file; using default!"
 143:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 144:Drivers/CMSIS/Include/core_cm0plus.h **** 
 145:Drivers/CMSIS/Include/core_cm0plus.h ****   #ifndef __VTOR_PRESENT
 146:Drivers/CMSIS/Include/core_cm0plus.h ****     #define __VTOR_PRESENT            0U
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s 			page 4


 147:Drivers/CMSIS/Include/core_cm0plus.h ****     #warning "__VTOR_PRESENT not defined in device header file; using default!"
 148:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 149:Drivers/CMSIS/Include/core_cm0plus.h **** 
 150:Drivers/CMSIS/Include/core_cm0plus.h ****   #ifndef __NVIC_PRIO_BITS
 151:Drivers/CMSIS/Include/core_cm0plus.h ****     #define __NVIC_PRIO_BITS          2U
 152:Drivers/CMSIS/Include/core_cm0plus.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 153:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 154:Drivers/CMSIS/Include/core_cm0plus.h **** 
 155:Drivers/CMSIS/Include/core_cm0plus.h ****   #ifndef __Vendor_SysTickConfig
 156:Drivers/CMSIS/Include/core_cm0plus.h ****     #define __Vendor_SysTickConfig    0U
 157:Drivers/CMSIS/Include/core_cm0plus.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 158:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 159:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 160:Drivers/CMSIS/Include/core_cm0plus.h **** 
 161:Drivers/CMSIS/Include/core_cm0plus.h **** /* IO definitions (access restrictions to peripheral registers) */
 162:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 163:Drivers/CMSIS/Include/core_cm0plus.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 164:Drivers/CMSIS/Include/core_cm0plus.h **** 
 165:Drivers/CMSIS/Include/core_cm0plus.h ****     <strong>IO Type Qualifiers</strong> are used
 166:Drivers/CMSIS/Include/core_cm0plus.h ****     \li to specify the access to peripheral variables.
 167:Drivers/CMSIS/Include/core_cm0plus.h ****     \li for automatic generation of peripheral register debug information.
 168:Drivers/CMSIS/Include/core_cm0plus.h **** */
 169:Drivers/CMSIS/Include/core_cm0plus.h **** #ifdef __cplusplus
 170:Drivers/CMSIS/Include/core_cm0plus.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 171:Drivers/CMSIS/Include/core_cm0plus.h **** #else
 172:Drivers/CMSIS/Include/core_cm0plus.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 173:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 174:Drivers/CMSIS/Include/core_cm0plus.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 175:Drivers/CMSIS/Include/core_cm0plus.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 176:Drivers/CMSIS/Include/core_cm0plus.h **** 
 177:Drivers/CMSIS/Include/core_cm0plus.h **** /* following defines should be used for structure members */
 178:Drivers/CMSIS/Include/core_cm0plus.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 179:Drivers/CMSIS/Include/core_cm0plus.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 180:Drivers/CMSIS/Include/core_cm0plus.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 181:Drivers/CMSIS/Include/core_cm0plus.h **** 
 182:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} end of group Cortex-M0+ */
 183:Drivers/CMSIS/Include/core_cm0plus.h **** 
 184:Drivers/CMSIS/Include/core_cm0plus.h **** 
 185:Drivers/CMSIS/Include/core_cm0plus.h **** 
 186:Drivers/CMSIS/Include/core_cm0plus.h **** /*******************************************************************************
 187:Drivers/CMSIS/Include/core_cm0plus.h ****  *                 Register Abstraction
 188:Drivers/CMSIS/Include/core_cm0plus.h ****   Core Register contain:
 189:Drivers/CMSIS/Include/core_cm0plus.h ****   - Core Register
 190:Drivers/CMSIS/Include/core_cm0plus.h ****   - Core NVIC Register
 191:Drivers/CMSIS/Include/core_cm0plus.h ****   - Core SCB Register
 192:Drivers/CMSIS/Include/core_cm0plus.h ****   - Core SysTick Register
 193:Drivers/CMSIS/Include/core_cm0plus.h ****   - Core MPU Register
 194:Drivers/CMSIS/Include/core_cm0plus.h ****  ******************************************************************************/
 195:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 196:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 197:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 198:Drivers/CMSIS/Include/core_cm0plus.h **** */
 199:Drivers/CMSIS/Include/core_cm0plus.h **** 
 200:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 201:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup    CMSIS_core_register
 202:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 203:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief      Core Register type definitions.
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s 			page 5


 204:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
 205:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 206:Drivers/CMSIS/Include/core_cm0plus.h **** 
 207:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 208:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 209:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 210:Drivers/CMSIS/Include/core_cm0plus.h **** typedef union
 211:Drivers/CMSIS/Include/core_cm0plus.h **** {
 212:Drivers/CMSIS/Include/core_cm0plus.h ****   struct
 213:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 214:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
 215:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 216:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 217:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 218:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 219:Drivers/CMSIS/Include/core_cm0plus.h ****   } b;                                   /*!< Structure used for bit  access */
 220:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t w;                            /*!< Type      used for word access */
 221:Drivers/CMSIS/Include/core_cm0plus.h **** } APSR_Type;
 222:Drivers/CMSIS/Include/core_cm0plus.h **** 
 223:Drivers/CMSIS/Include/core_cm0plus.h **** /* APSR Register Definitions */
 224:Drivers/CMSIS/Include/core_cm0plus.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 225:Drivers/CMSIS/Include/core_cm0plus.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 226:Drivers/CMSIS/Include/core_cm0plus.h **** 
 227:Drivers/CMSIS/Include/core_cm0plus.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 228:Drivers/CMSIS/Include/core_cm0plus.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 229:Drivers/CMSIS/Include/core_cm0plus.h **** 
 230:Drivers/CMSIS/Include/core_cm0plus.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 231:Drivers/CMSIS/Include/core_cm0plus.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 232:Drivers/CMSIS/Include/core_cm0plus.h **** 
 233:Drivers/CMSIS/Include/core_cm0plus.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 234:Drivers/CMSIS/Include/core_cm0plus.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 235:Drivers/CMSIS/Include/core_cm0plus.h **** 
 236:Drivers/CMSIS/Include/core_cm0plus.h **** 
 237:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 238:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 239:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 240:Drivers/CMSIS/Include/core_cm0plus.h **** typedef union
 241:Drivers/CMSIS/Include/core_cm0plus.h **** {
 242:Drivers/CMSIS/Include/core_cm0plus.h ****   struct
 243:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 244:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 245:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 246:Drivers/CMSIS/Include/core_cm0plus.h ****   } b;                                   /*!< Structure used for bit  access */
 247:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t w;                            /*!< Type      used for word access */
 248:Drivers/CMSIS/Include/core_cm0plus.h **** } IPSR_Type;
 249:Drivers/CMSIS/Include/core_cm0plus.h **** 
 250:Drivers/CMSIS/Include/core_cm0plus.h **** /* IPSR Register Definitions */
 251:Drivers/CMSIS/Include/core_cm0plus.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 252:Drivers/CMSIS/Include/core_cm0plus.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 253:Drivers/CMSIS/Include/core_cm0plus.h **** 
 254:Drivers/CMSIS/Include/core_cm0plus.h **** 
 255:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 256:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 257:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 258:Drivers/CMSIS/Include/core_cm0plus.h **** typedef union
 259:Drivers/CMSIS/Include/core_cm0plus.h **** {
 260:Drivers/CMSIS/Include/core_cm0plus.h ****   struct
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s 			page 6


 261:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 262:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 263:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
 264:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 265:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
 266:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 267:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 268:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 269:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 270:Drivers/CMSIS/Include/core_cm0plus.h ****   } b;                                   /*!< Structure used for bit  access */
 271:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t w;                            /*!< Type      used for word access */
 272:Drivers/CMSIS/Include/core_cm0plus.h **** } xPSR_Type;
 273:Drivers/CMSIS/Include/core_cm0plus.h **** 
 274:Drivers/CMSIS/Include/core_cm0plus.h **** /* xPSR Register Definitions */
 275:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 276:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 277:Drivers/CMSIS/Include/core_cm0plus.h **** 
 278:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 279:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 280:Drivers/CMSIS/Include/core_cm0plus.h **** 
 281:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 282:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 283:Drivers/CMSIS/Include/core_cm0plus.h **** 
 284:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 285:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 286:Drivers/CMSIS/Include/core_cm0plus.h **** 
 287:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 288:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 289:Drivers/CMSIS/Include/core_cm0plus.h **** 
 290:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 291:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 292:Drivers/CMSIS/Include/core_cm0plus.h **** 
 293:Drivers/CMSIS/Include/core_cm0plus.h **** 
 294:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 295:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief  Union type to access the Control Registers (CONTROL).
 296:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 297:Drivers/CMSIS/Include/core_cm0plus.h **** typedef union
 298:Drivers/CMSIS/Include/core_cm0plus.h **** {
 299:Drivers/CMSIS/Include/core_cm0plus.h ****   struct
 300:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 301:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 302:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 303:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 304:Drivers/CMSIS/Include/core_cm0plus.h ****   } b;                                   /*!< Structure used for bit  access */
 305:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t w;                            /*!< Type      used for word access */
 306:Drivers/CMSIS/Include/core_cm0plus.h **** } CONTROL_Type;
 307:Drivers/CMSIS/Include/core_cm0plus.h **** 
 308:Drivers/CMSIS/Include/core_cm0plus.h **** /* CONTROL Register Definitions */
 309:Drivers/CMSIS/Include/core_cm0plus.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 310:Drivers/CMSIS/Include/core_cm0plus.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 311:Drivers/CMSIS/Include/core_cm0plus.h **** 
 312:Drivers/CMSIS/Include/core_cm0plus.h **** #define CONTROL_nPRIV_Pos                   0U                                            /*!< CONT
 313:Drivers/CMSIS/Include/core_cm0plus.h **** #define CONTROL_nPRIV_Msk                  (1UL /*<< CONTROL_nPRIV_Pos*/)                 /*!< CONT
 314:Drivers/CMSIS/Include/core_cm0plus.h **** 
 315:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} end of group CMSIS_CORE */
 316:Drivers/CMSIS/Include/core_cm0plus.h **** 
 317:Drivers/CMSIS/Include/core_cm0plus.h **** 
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s 			page 7


 318:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 319:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup    CMSIS_core_register
 320:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 321:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief      Type definitions for the NVIC Registers
 322:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
 323:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 324:Drivers/CMSIS/Include/core_cm0plus.h **** 
 325:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 326:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 327:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 328:Drivers/CMSIS/Include/core_cm0plus.h **** typedef struct
 329:Drivers/CMSIS/Include/core_cm0plus.h **** {
 330:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 331:Drivers/CMSIS/Include/core_cm0plus.h ****         uint32_t RESERVED0[31U];
 332:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 333:Drivers/CMSIS/Include/core_cm0plus.h ****         uint32_t RESERVED1[31U];
 334:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 335:Drivers/CMSIS/Include/core_cm0plus.h ****         uint32_t RESERVED2[31U];
 336:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 337:Drivers/CMSIS/Include/core_cm0plus.h ****         uint32_t RESERVED3[31U];
 338:Drivers/CMSIS/Include/core_cm0plus.h ****         uint32_t RESERVED4[64U];
 339:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
 340:Drivers/CMSIS/Include/core_cm0plus.h **** }  NVIC_Type;
 341:Drivers/CMSIS/Include/core_cm0plus.h **** 
 342:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} end of group CMSIS_NVIC */
 343:Drivers/CMSIS/Include/core_cm0plus.h **** 
 344:Drivers/CMSIS/Include/core_cm0plus.h **** 
 345:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 346:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup  CMSIS_core_register
 347:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 348:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief    Type definitions for the System Control Block Registers
 349:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
 350:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 351:Drivers/CMSIS/Include/core_cm0plus.h **** 
 352:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 353:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief  Structure type to access the System Control Block (SCB).
 354:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 355:Drivers/CMSIS/Include/core_cm0plus.h **** typedef struct
 356:Drivers/CMSIS/Include/core_cm0plus.h **** {
 357:Drivers/CMSIS/Include/core_cm0plus.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 358:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 359:Drivers/CMSIS/Include/core_cm0plus.h **** #if defined (__VTOR_PRESENT) && (__VTOR_PRESENT == 1U)
 360:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t VTOR;                   /*!< Offset: 0x008 (R/W)  Vector Table Offset Register */
 361:Drivers/CMSIS/Include/core_cm0plus.h **** #else
 362:Drivers/CMSIS/Include/core_cm0plus.h ****         uint32_t RESERVED0;
 363:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 364:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 365:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 366:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 367:Drivers/CMSIS/Include/core_cm0plus.h ****         uint32_t RESERVED1;
 368:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registe
 369:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 370:Drivers/CMSIS/Include/core_cm0plus.h **** } SCB_Type;
 371:Drivers/CMSIS/Include/core_cm0plus.h **** 
 372:Drivers/CMSIS/Include/core_cm0plus.h **** /* SCB CPUID Register Definitions */
 373:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 374:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s 			page 8


 375:Drivers/CMSIS/Include/core_cm0plus.h **** 
 376:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 377:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 378:Drivers/CMSIS/Include/core_cm0plus.h **** 
 379:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 380:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 381:Drivers/CMSIS/Include/core_cm0plus.h **** 
 382:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 383:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 384:Drivers/CMSIS/Include/core_cm0plus.h **** 
 385:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 386:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 387:Drivers/CMSIS/Include/core_cm0plus.h **** 
 388:Drivers/CMSIS/Include/core_cm0plus.h **** /* SCB Interrupt Control State Register Definitions */
 389:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 390:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 391:Drivers/CMSIS/Include/core_cm0plus.h **** 
 392:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 393:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 394:Drivers/CMSIS/Include/core_cm0plus.h **** 
 395:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 396:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 397:Drivers/CMSIS/Include/core_cm0plus.h **** 
 398:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 399:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 400:Drivers/CMSIS/Include/core_cm0plus.h **** 
 401:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 402:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 403:Drivers/CMSIS/Include/core_cm0plus.h **** 
 404:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 405:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 406:Drivers/CMSIS/Include/core_cm0plus.h **** 
 407:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 408:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 409:Drivers/CMSIS/Include/core_cm0plus.h **** 
 410:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 411:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 412:Drivers/CMSIS/Include/core_cm0plus.h **** 
 413:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 414:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 415:Drivers/CMSIS/Include/core_cm0plus.h **** 
 416:Drivers/CMSIS/Include/core_cm0plus.h **** #if defined (__VTOR_PRESENT) && (__VTOR_PRESENT == 1U)
 417:Drivers/CMSIS/Include/core_cm0plus.h **** /* SCB Interrupt Control State Register Definitions */
 418:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_VTOR_TBLOFF_Pos                 8U                                            /*!< SCB 
 419:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_VTOR_TBLOFF_Msk                (0xFFFFFFUL << SCB_VTOR_TBLOFF_Pos)            /*!< SCB 
 420:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 421:Drivers/CMSIS/Include/core_cm0plus.h **** 
 422:Drivers/CMSIS/Include/core_cm0plus.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 423:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 424:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 425:Drivers/CMSIS/Include/core_cm0plus.h **** 
 426:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 427:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 428:Drivers/CMSIS/Include/core_cm0plus.h **** 
 429:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 430:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 431:Drivers/CMSIS/Include/core_cm0plus.h **** 
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s 			page 9


 432:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 433:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 434:Drivers/CMSIS/Include/core_cm0plus.h **** 
 435:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 436:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 437:Drivers/CMSIS/Include/core_cm0plus.h **** 
 438:Drivers/CMSIS/Include/core_cm0plus.h **** /* SCB System Control Register Definitions */
 439:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 440:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 441:Drivers/CMSIS/Include/core_cm0plus.h **** 
 442:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 443:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 444:Drivers/CMSIS/Include/core_cm0plus.h **** 
 445:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 446:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 447:Drivers/CMSIS/Include/core_cm0plus.h **** 
 448:Drivers/CMSIS/Include/core_cm0plus.h **** /* SCB Configuration Control Register Definitions */
 449:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 450:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 451:Drivers/CMSIS/Include/core_cm0plus.h **** 
 452:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 453:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 454:Drivers/CMSIS/Include/core_cm0plus.h **** 
 455:Drivers/CMSIS/Include/core_cm0plus.h **** /* SCB System Handler Control and State Register Definitions */
 456:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 457:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 458:Drivers/CMSIS/Include/core_cm0plus.h **** 
 459:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} end of group CMSIS_SCB */
 460:Drivers/CMSIS/Include/core_cm0plus.h **** 
 461:Drivers/CMSIS/Include/core_cm0plus.h **** 
 462:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 463:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup  CMSIS_core_register
 464:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 465:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief    Type definitions for the System Timer Registers.
 466:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
 467:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 468:Drivers/CMSIS/Include/core_cm0plus.h **** 
 469:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 470:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief  Structure type to access the System Timer (SysTick).
 471:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 472:Drivers/CMSIS/Include/core_cm0plus.h **** typedef struct
 473:Drivers/CMSIS/Include/core_cm0plus.h **** {
 474:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 475:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 476:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 477:Drivers/CMSIS/Include/core_cm0plus.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 478:Drivers/CMSIS/Include/core_cm0plus.h **** } SysTick_Type;
 479:Drivers/CMSIS/Include/core_cm0plus.h **** 
 480:Drivers/CMSIS/Include/core_cm0plus.h **** /* SysTick Control / Status Register Definitions */
 481:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 482:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 483:Drivers/CMSIS/Include/core_cm0plus.h **** 
 484:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 485:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 486:Drivers/CMSIS/Include/core_cm0plus.h **** 
 487:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 488:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s 			page 10


 489:Drivers/CMSIS/Include/core_cm0plus.h **** 
 490:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 491:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 492:Drivers/CMSIS/Include/core_cm0plus.h **** 
 493:Drivers/CMSIS/Include/core_cm0plus.h **** /* SysTick Reload Register Definitions */
 494:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 495:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 496:Drivers/CMSIS/Include/core_cm0plus.h **** 
 497:Drivers/CMSIS/Include/core_cm0plus.h **** /* SysTick Current Register Definitions */
 498:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 499:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 500:Drivers/CMSIS/Include/core_cm0plus.h **** 
 501:Drivers/CMSIS/Include/core_cm0plus.h **** /* SysTick Calibration Register Definitions */
 502:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 503:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 504:Drivers/CMSIS/Include/core_cm0plus.h **** 
 505:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 506:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 507:Drivers/CMSIS/Include/core_cm0plus.h **** 
 508:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 509:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 510:Drivers/CMSIS/Include/core_cm0plus.h **** 
 511:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} end of group CMSIS_SysTick */
 512:Drivers/CMSIS/Include/core_cm0plus.h **** 
 513:Drivers/CMSIS/Include/core_cm0plus.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
 514:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 515:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup  CMSIS_core_register
 516:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup CMSIS_MPU     Memory Protection Unit (MPU)
 517:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief    Type definitions for the Memory Protection Unit (MPU)
 518:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
 519:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 520:Drivers/CMSIS/Include/core_cm0plus.h **** 
 521:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 522:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief  Structure type to access the Memory Protection Unit (MPU).
 523:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 524:Drivers/CMSIS/Include/core_cm0plus.h **** typedef struct
 525:Drivers/CMSIS/Include/core_cm0plus.h **** {
 526:Drivers/CMSIS/Include/core_cm0plus.h ****   __IM  uint32_t TYPE;                   /*!< Offset: 0x000 (R/ )  MPU Type Register */
 527:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x004 (R/W)  MPU Control Register */
 528:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t RNR;                    /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register */
 529:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t RBAR;                   /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
 530:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t RASR;                   /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
 531:Drivers/CMSIS/Include/core_cm0plus.h **** } MPU_Type;
 532:Drivers/CMSIS/Include/core_cm0plus.h **** 
 533:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_TYPE_RALIASES                  1U
 534:Drivers/CMSIS/Include/core_cm0plus.h **** 
 535:Drivers/CMSIS/Include/core_cm0plus.h **** /* MPU Type Register Definitions */
 536:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_TYPE_IREGION_Pos               16U                                            /*!< MPU 
 537:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
 538:Drivers/CMSIS/Include/core_cm0plus.h **** 
 539:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_TYPE_DREGION_Pos                8U                                            /*!< MPU 
 540:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
 541:Drivers/CMSIS/Include/core_cm0plus.h **** 
 542:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_TYPE_SEPARATE_Pos               0U                                            /*!< MPU 
 543:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL /*<< MPU_TYPE_SEPARATE_Pos*/)             /*!< MPU 
 544:Drivers/CMSIS/Include/core_cm0plus.h **** 
 545:Drivers/CMSIS/Include/core_cm0plus.h **** /* MPU Control Register Definitions */
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s 			page 11


 546:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2U                                            /*!< MPU 
 547:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
 548:Drivers/CMSIS/Include/core_cm0plus.h **** 
 549:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_CTRL_HFNMIENA_Pos               1U                                            /*!< MPU 
 550:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
 551:Drivers/CMSIS/Include/core_cm0plus.h **** 
 552:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_CTRL_ENABLE_Pos                 0U                                            /*!< MPU 
 553:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_CTRL_ENABLE_Msk                (1UL /*<< MPU_CTRL_ENABLE_Pos*/)               /*!< MPU 
 554:Drivers/CMSIS/Include/core_cm0plus.h **** 
 555:Drivers/CMSIS/Include/core_cm0plus.h **** /* MPU Region Number Register Definitions */
 556:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RNR_REGION_Pos                  0U                                            /*!< MPU 
 557:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL /*<< MPU_RNR_REGION_Pos*/)             /*!< MPU 
 558:Drivers/CMSIS/Include/core_cm0plus.h **** 
 559:Drivers/CMSIS/Include/core_cm0plus.h **** /* MPU Region Base Address Register Definitions */
 560:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RBAR_ADDR_Pos                   8U                                            /*!< MPU 
 561:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RBAR_ADDR_Msk                  (0xFFFFFFUL << MPU_RBAR_ADDR_Pos)              /*!< MPU 
 562:Drivers/CMSIS/Include/core_cm0plus.h **** 
 563:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RBAR_VALID_Pos                  4U                                            /*!< MPU 
 564:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
 565:Drivers/CMSIS/Include/core_cm0plus.h **** 
 566:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RBAR_REGION_Pos                 0U                                            /*!< MPU 
 567:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RBAR_REGION_Msk                (0xFUL /*<< MPU_RBAR_REGION_Pos*/)             /*!< MPU 
 568:Drivers/CMSIS/Include/core_cm0plus.h **** 
 569:Drivers/CMSIS/Include/core_cm0plus.h **** /* MPU Region Attribute and Size Register Definitions */
 570:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_ATTRS_Pos                 16U                                            /*!< MPU 
 571:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU 
 572:Drivers/CMSIS/Include/core_cm0plus.h **** 
 573:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_XN_Pos                    28U                                            /*!< MPU 
 574:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU 
 575:Drivers/CMSIS/Include/core_cm0plus.h **** 
 576:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_AP_Pos                    24U                                            /*!< MPU 
 577:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_AP_Msk                    (0x7UL << MPU_RASR_AP_Pos)                     /*!< MPU 
 578:Drivers/CMSIS/Include/core_cm0plus.h **** 
 579:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_TEX_Pos                   19U                                            /*!< MPU 
 580:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_TEX_Msk                   (0x7UL << MPU_RASR_TEX_Pos)                    /*!< MPU 
 581:Drivers/CMSIS/Include/core_cm0plus.h **** 
 582:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_S_Pos                     18U                                            /*!< MPU 
 583:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU 
 584:Drivers/CMSIS/Include/core_cm0plus.h **** 
 585:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_C_Pos                     17U                                            /*!< MPU 
 586:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU 
 587:Drivers/CMSIS/Include/core_cm0plus.h **** 
 588:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_B_Pos                     16U                                            /*!< MPU 
 589:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU 
 590:Drivers/CMSIS/Include/core_cm0plus.h **** 
 591:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_SRD_Pos                    8U                                            /*!< MPU 
 592:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
 593:Drivers/CMSIS/Include/core_cm0plus.h **** 
 594:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_SIZE_Pos                   1U                                            /*!< MPU 
 595:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
 596:Drivers/CMSIS/Include/core_cm0plus.h **** 
 597:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_ENABLE_Pos                 0U                                            /*!< MPU 
 598:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_ENABLE_Msk                (1UL /*<< MPU_RASR_ENABLE_Pos*/)               /*!< MPU 
 599:Drivers/CMSIS/Include/core_cm0plus.h **** 
 600:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} end of group CMSIS_MPU */
 601:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 602:Drivers/CMSIS/Include/core_cm0plus.h **** 
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s 			page 12


 603:Drivers/CMSIS/Include/core_cm0plus.h **** 
 604:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 605:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup  CMSIS_core_register
 606:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
 607:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief    Cortex-M0+ Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible ov
 608:Drivers/CMSIS/Include/core_cm0plus.h ****             Therefore they are not covered by the Cortex-M0+ header file.
 609:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
 610:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 611:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} end of group CMSIS_CoreDebug */
 612:Drivers/CMSIS/Include/core_cm0plus.h **** 
 613:Drivers/CMSIS/Include/core_cm0plus.h **** 
 614:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 615:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup    CMSIS_core_register
 616:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
 617:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
 618:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
 619:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 620:Drivers/CMSIS/Include/core_cm0plus.h **** 
 621:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 622:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
 623:Drivers/CMSIS/Include/core_cm0plus.h ****   \param[in] field  Name of the register bit field.
 624:Drivers/CMSIS/Include/core_cm0plus.h ****   \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
 625:Drivers/CMSIS/Include/core_cm0plus.h ****   \return           Masked and shifted value.
 626:Drivers/CMSIS/Include/core_cm0plus.h **** */
 627:Drivers/CMSIS/Include/core_cm0plus.h **** #define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
 628:Drivers/CMSIS/Include/core_cm0plus.h **** 
 629:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 630:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief     Mask and shift a register value to extract a bit filed value.
 631:Drivers/CMSIS/Include/core_cm0plus.h ****   \param[in] field  Name of the register bit field.
 632:Drivers/CMSIS/Include/core_cm0plus.h ****   \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
 633:Drivers/CMSIS/Include/core_cm0plus.h ****   \return           Masked and shifted bit field value.
 634:Drivers/CMSIS/Include/core_cm0plus.h **** */
 635:Drivers/CMSIS/Include/core_cm0plus.h **** #define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
 636:Drivers/CMSIS/Include/core_cm0plus.h **** 
 637:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} end of group CMSIS_core_bitfield */
 638:Drivers/CMSIS/Include/core_cm0plus.h **** 
 639:Drivers/CMSIS/Include/core_cm0plus.h **** 
 640:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 641:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup    CMSIS_core_register
 642:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup   CMSIS_core_base     Core Definitions
 643:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief      Definitions for base addresses, unions, and structures.
 644:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
 645:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 646:Drivers/CMSIS/Include/core_cm0plus.h **** 
 647:Drivers/CMSIS/Include/core_cm0plus.h **** /* Memory mapping of Core Hardware */
 648:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 649:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
 650:Drivers/CMSIS/Include/core_cm0plus.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
 651:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 652:Drivers/CMSIS/Include/core_cm0plus.h **** 
 653:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 654:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 655:Drivers/CMSIS/Include/core_cm0plus.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 656:Drivers/CMSIS/Include/core_cm0plus.h **** 
 657:Drivers/CMSIS/Include/core_cm0plus.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
 658:Drivers/CMSIS/Include/core_cm0plus.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit *
 659:Drivers/CMSIS/Include/core_cm0plus.h ****   #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit *
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s 			page 13


 660:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 661:Drivers/CMSIS/Include/core_cm0plus.h **** 
 662:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} */
 663:Drivers/CMSIS/Include/core_cm0plus.h **** 
 664:Drivers/CMSIS/Include/core_cm0plus.h **** 
 665:Drivers/CMSIS/Include/core_cm0plus.h **** 
 666:Drivers/CMSIS/Include/core_cm0plus.h **** /*******************************************************************************
 667:Drivers/CMSIS/Include/core_cm0plus.h ****  *                Hardware Abstraction Layer
 668:Drivers/CMSIS/Include/core_cm0plus.h ****   Core Function Interface contains:
 669:Drivers/CMSIS/Include/core_cm0plus.h ****   - Core NVIC Functions
 670:Drivers/CMSIS/Include/core_cm0plus.h ****   - Core SysTick Functions
 671:Drivers/CMSIS/Include/core_cm0plus.h ****   - Core Register Access Functions
 672:Drivers/CMSIS/Include/core_cm0plus.h ****  ******************************************************************************/
 673:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 674:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
 675:Drivers/CMSIS/Include/core_cm0plus.h **** */
 676:Drivers/CMSIS/Include/core_cm0plus.h **** 
 677:Drivers/CMSIS/Include/core_cm0plus.h **** 
 678:Drivers/CMSIS/Include/core_cm0plus.h **** 
 679:Drivers/CMSIS/Include/core_cm0plus.h **** /* ##########################   NVIC functions  #################################### */
 680:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 681:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup  CMSIS_Core_FunctionInterface
 682:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
 683:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
 684:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
 685:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 686:Drivers/CMSIS/Include/core_cm0plus.h **** 
 687:Drivers/CMSIS/Include/core_cm0plus.h **** #ifdef CMSIS_NVIC_VIRTUAL
 688:Drivers/CMSIS/Include/core_cm0plus.h ****   #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
 689:Drivers/CMSIS/Include/core_cm0plus.h ****     #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
 690:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 691:Drivers/CMSIS/Include/core_cm0plus.h ****   #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
 692:Drivers/CMSIS/Include/core_cm0plus.h **** #else
 693:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping
 694:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping
 695:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_EnableIRQ              __NVIC_EnableIRQ
 696:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
 697:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_DisableIRQ             __NVIC_DisableIRQ
 698:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
 699:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
 700:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
 701:Drivers/CMSIS/Include/core_cm0plus.h **** /*#define NVIC_GetActive              __NVIC_GetActive             not available for Cortex-M0+ */
 702:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_SetPriority            __NVIC_SetPriority
 703:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_GetPriority            __NVIC_GetPriority
 704:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_SystemReset            __NVIC_SystemReset
 705:Drivers/CMSIS/Include/core_cm0plus.h **** #endif /* CMSIS_NVIC_VIRTUAL */
 706:Drivers/CMSIS/Include/core_cm0plus.h **** 
 707:Drivers/CMSIS/Include/core_cm0plus.h **** #ifdef CMSIS_VECTAB_VIRTUAL
 708:Drivers/CMSIS/Include/core_cm0plus.h ****   #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 709:Drivers/CMSIS/Include/core_cm0plus.h ****     #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
 710:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 711:Drivers/CMSIS/Include/core_cm0plus.h ****   #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 712:Drivers/CMSIS/Include/core_cm0plus.h **** #else
 713:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_SetVector              __NVIC_SetVector
 714:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_GetVector              __NVIC_GetVector
 715:Drivers/CMSIS/Include/core_cm0plus.h **** #endif  /* (CMSIS_VECTAB_VIRTUAL) */
 716:Drivers/CMSIS/Include/core_cm0plus.h **** 
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s 			page 14


 717:Drivers/CMSIS/Include/core_cm0plus.h **** #define NVIC_USER_IRQ_OFFSET          16
 718:Drivers/CMSIS/Include/core_cm0plus.h **** 
 719:Drivers/CMSIS/Include/core_cm0plus.h **** 
 720:Drivers/CMSIS/Include/core_cm0plus.h **** /* The following EXC_RETURN values are saved the LR on exception entry */
 721:Drivers/CMSIS/Include/core_cm0plus.h **** #define EXC_RETURN_HANDLER         (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after ret
 722:Drivers/CMSIS/Include/core_cm0plus.h **** #define EXC_RETURN_THREAD_MSP      (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after retu
 723:Drivers/CMSIS/Include/core_cm0plus.h **** #define EXC_RETURN_THREAD_PSP      (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after retu
 724:Drivers/CMSIS/Include/core_cm0plus.h **** 
 725:Drivers/CMSIS/Include/core_cm0plus.h **** 
 726:Drivers/CMSIS/Include/core_cm0plus.h **** /* Interrupt Priorities are WORD accessible only under Armv6-M                  */
 727:Drivers/CMSIS/Include/core_cm0plus.h **** /* The following MACROS handle generation of the register offset and byte masks */
 728:Drivers/CMSIS/Include/core_cm0plus.h **** #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
 729:Drivers/CMSIS/Include/core_cm0plus.h **** #define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
 730:Drivers/CMSIS/Include/core_cm0plus.h **** #define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
 731:Drivers/CMSIS/Include/core_cm0plus.h **** 
 732:Drivers/CMSIS/Include/core_cm0plus.h **** #define __NVIC_SetPriorityGrouping(X) (void)(X)
 733:Drivers/CMSIS/Include/core_cm0plus.h **** #define __NVIC_GetPriorityGrouping()  (0U)
 734:Drivers/CMSIS/Include/core_cm0plus.h **** 
 735:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 736:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Enable Interrupt
 737:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Enables a device specific interrupt in the NVIC interrupt controller.
 738:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]      IRQn  Device specific interrupt number.
 739:Drivers/CMSIS/Include/core_cm0plus.h ****   \note    IRQn must not be negative.
 740:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 741:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
 742:Drivers/CMSIS/Include/core_cm0plus.h **** {
 743:Drivers/CMSIS/Include/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
 744:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 745:Drivers/CMSIS/Include/core_cm0plus.h ****     __COMPILER_BARRIER();
 746:Drivers/CMSIS/Include/core_cm0plus.h ****     NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 747:Drivers/CMSIS/Include/core_cm0plus.h ****     __COMPILER_BARRIER();
 748:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 749:Drivers/CMSIS/Include/core_cm0plus.h **** }
 750:Drivers/CMSIS/Include/core_cm0plus.h **** 
 751:Drivers/CMSIS/Include/core_cm0plus.h **** 
 752:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 753:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Get Interrupt Enable status
 754:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
 755:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]      IRQn  Device specific interrupt number.
 756:Drivers/CMSIS/Include/core_cm0plus.h ****   \return             0  Interrupt is not enabled.
 757:Drivers/CMSIS/Include/core_cm0plus.h ****   \return             1  Interrupt is enabled.
 758:Drivers/CMSIS/Include/core_cm0plus.h ****   \note    IRQn must not be negative.
 759:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 760:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
 761:Drivers/CMSIS/Include/core_cm0plus.h **** {
 762:Drivers/CMSIS/Include/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
 763:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 764:Drivers/CMSIS/Include/core_cm0plus.h ****     return((uint32_t)(((NVIC->ISER[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 765:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 766:Drivers/CMSIS/Include/core_cm0plus.h ****   else
 767:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 768:Drivers/CMSIS/Include/core_cm0plus.h ****     return(0U);
 769:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 770:Drivers/CMSIS/Include/core_cm0plus.h **** }
 771:Drivers/CMSIS/Include/core_cm0plus.h **** 
 772:Drivers/CMSIS/Include/core_cm0plus.h **** 
 773:Drivers/CMSIS/Include/core_cm0plus.h **** /**
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s 			page 15


 774:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Disable Interrupt
 775:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Disables a device specific interrupt in the NVIC interrupt controller.
 776:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]      IRQn  Device specific interrupt number.
 777:Drivers/CMSIS/Include/core_cm0plus.h ****   \note    IRQn must not be negative.
 778:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 779:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
 780:Drivers/CMSIS/Include/core_cm0plus.h **** {
 781:Drivers/CMSIS/Include/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
 782:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 783:Drivers/CMSIS/Include/core_cm0plus.h ****     NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 784:Drivers/CMSIS/Include/core_cm0plus.h ****     __DSB();
 785:Drivers/CMSIS/Include/core_cm0plus.h ****     __ISB();
 786:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 787:Drivers/CMSIS/Include/core_cm0plus.h **** }
 788:Drivers/CMSIS/Include/core_cm0plus.h **** 
 789:Drivers/CMSIS/Include/core_cm0plus.h **** 
 790:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 791:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Get Pending Interrupt
 792:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Reads the NVIC pending register and returns the pending bit for the specified device spe
 793:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]      IRQn  Device specific interrupt number.
 794:Drivers/CMSIS/Include/core_cm0plus.h ****   \return             0  Interrupt status is not pending.
 795:Drivers/CMSIS/Include/core_cm0plus.h ****   \return             1  Interrupt status is pending.
 796:Drivers/CMSIS/Include/core_cm0plus.h ****   \note    IRQn must not be negative.
 797:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 798:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
 799:Drivers/CMSIS/Include/core_cm0plus.h **** {
 800:Drivers/CMSIS/Include/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
 801:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 802:Drivers/CMSIS/Include/core_cm0plus.h ****     return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 803:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 804:Drivers/CMSIS/Include/core_cm0plus.h ****   else
 805:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 806:Drivers/CMSIS/Include/core_cm0plus.h ****     return(0U);
 807:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 808:Drivers/CMSIS/Include/core_cm0plus.h **** }
 809:Drivers/CMSIS/Include/core_cm0plus.h **** 
 810:Drivers/CMSIS/Include/core_cm0plus.h **** 
 811:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 812:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Set Pending Interrupt
 813:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
 814:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]      IRQn  Device specific interrupt number.
 815:Drivers/CMSIS/Include/core_cm0plus.h ****   \note    IRQn must not be negative.
 816:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 817:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
 818:Drivers/CMSIS/Include/core_cm0plus.h **** {
 819:Drivers/CMSIS/Include/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
 820:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 821:Drivers/CMSIS/Include/core_cm0plus.h ****     NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 822:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 823:Drivers/CMSIS/Include/core_cm0plus.h **** }
 824:Drivers/CMSIS/Include/core_cm0plus.h **** 
 825:Drivers/CMSIS/Include/core_cm0plus.h **** 
 826:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 827:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Clear Pending Interrupt
 828:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
 829:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]      IRQn  Device specific interrupt number.
 830:Drivers/CMSIS/Include/core_cm0plus.h ****   \note    IRQn must not be negative.
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s 			page 16


 831:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 832:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 833:Drivers/CMSIS/Include/core_cm0plus.h **** {
 834:Drivers/CMSIS/Include/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
 835:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 836:Drivers/CMSIS/Include/core_cm0plus.h ****     NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 837:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 838:Drivers/CMSIS/Include/core_cm0plus.h **** }
 839:Drivers/CMSIS/Include/core_cm0plus.h **** 
 840:Drivers/CMSIS/Include/core_cm0plus.h **** 
 841:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 842:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Set Interrupt Priority
 843:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Sets the priority of a device specific interrupt or a processor exception.
 844:Drivers/CMSIS/Include/core_cm0plus.h ****            The interrupt number can be positive to specify a device specific interrupt,
 845:Drivers/CMSIS/Include/core_cm0plus.h ****            or negative to specify a processor exception.
 846:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]      IRQn  Interrupt number.
 847:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]  priority  Priority to set.
 848:Drivers/CMSIS/Include/core_cm0plus.h ****   \note    The priority cannot be set for every processor exception.
 849:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 850:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 851:Drivers/CMSIS/Include/core_cm0plus.h **** {
 852:Drivers/CMSIS/Include/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
 853:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 854:Drivers/CMSIS/Include/core_cm0plus.h ****     NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))
 855:Drivers/CMSIS/Include/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 856:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 857:Drivers/CMSIS/Include/core_cm0plus.h ****   else
 858:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 859:Drivers/CMSIS/Include/core_cm0plus.h ****     SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))
 860:Drivers/CMSIS/Include/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 861:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 862:Drivers/CMSIS/Include/core_cm0plus.h **** }
 863:Drivers/CMSIS/Include/core_cm0plus.h **** 
 864:Drivers/CMSIS/Include/core_cm0plus.h **** 
 865:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 866:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Get Interrupt Priority
 867:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Reads the priority of a device specific interrupt or a processor exception.
 868:Drivers/CMSIS/Include/core_cm0plus.h ****            The interrupt number can be positive to specify a device specific interrupt,
 869:Drivers/CMSIS/Include/core_cm0plus.h ****            or negative to specify a processor exception.
 870:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]   IRQn  Interrupt number.
 871:Drivers/CMSIS/Include/core_cm0plus.h ****   \return             Interrupt Priority.
 872:Drivers/CMSIS/Include/core_cm0plus.h ****                       Value is aligned automatically to the implemented priority bits of the microc
 873:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 874:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
 875:Drivers/CMSIS/Include/core_cm0plus.h **** {
 876:Drivers/CMSIS/Include/core_cm0plus.h **** 
 877:Drivers/CMSIS/Include/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
 878:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 879:Drivers/CMSIS/Include/core_cm0plus.h ****     return((uint32_t)(((NVIC->IP[ _IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U -
 880:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 881:Drivers/CMSIS/Include/core_cm0plus.h ****   else
 882:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 883:Drivers/CMSIS/Include/core_cm0plus.h ****     return((uint32_t)(((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U -
 884:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 885:Drivers/CMSIS/Include/core_cm0plus.h **** }
 886:Drivers/CMSIS/Include/core_cm0plus.h **** 
 887:Drivers/CMSIS/Include/core_cm0plus.h **** 
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s 			page 17


 888:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 889:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Encode Priority
 890:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Encodes the priority for an interrupt with the given priority group,
 891:Drivers/CMSIS/Include/core_cm0plus.h ****            preemptive priority value, and subpriority value.
 892:Drivers/CMSIS/Include/core_cm0plus.h ****            In case of a conflict between priority grouping and available
 893:Drivers/CMSIS/Include/core_cm0plus.h ****            priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
 894:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]     PriorityGroup  Used priority group.
 895:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
 896:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]       SubPriority  Subpriority value (starting from 0).
 897:Drivers/CMSIS/Include/core_cm0plus.h ****   \return                        Encoded priority. Value can be used in the function \ref NVIC_SetP
 898:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 899:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uin
 900:Drivers/CMSIS/Include/core_cm0plus.h **** {
 901:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used   
 902:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t PreemptPriorityBits;
 903:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t SubPriorityBits;
 904:Drivers/CMSIS/Include/core_cm0plus.h **** 
 905:Drivers/CMSIS/Include/core_cm0plus.h ****   PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NV
 906:Drivers/CMSIS/Include/core_cm0plus.h ****   SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint
 907:Drivers/CMSIS/Include/core_cm0plus.h **** 
 908:Drivers/CMSIS/Include/core_cm0plus.h ****   return (
 909:Drivers/CMSIS/Include/core_cm0plus.h ****            ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits
 910:Drivers/CMSIS/Include/core_cm0plus.h ****            ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 911:Drivers/CMSIS/Include/core_cm0plus.h ****          );
 912:Drivers/CMSIS/Include/core_cm0plus.h **** }
 913:Drivers/CMSIS/Include/core_cm0plus.h **** 
 914:Drivers/CMSIS/Include/core_cm0plus.h **** 
 915:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 916:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Decode Priority
 917:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Decodes an interrupt priority value with a given priority group to
 918:Drivers/CMSIS/Include/core_cm0plus.h ****            preemptive priority value and subpriority value.
 919:Drivers/CMSIS/Include/core_cm0plus.h ****            In case of a conflict between priority grouping and available
 920:Drivers/CMSIS/Include/core_cm0plus.h ****            priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.
 921:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]         Priority   Priority value, which can be retrieved with the function \ref NVIC
 922:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]     PriorityGroup  Used priority group.
 923:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
 924:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [out]     pSubPriority  Subpriority value (starting from 0).
 925:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 926:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* cons
 927:Drivers/CMSIS/Include/core_cm0plus.h **** {
 928:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used   
 929:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t PreemptPriorityBits;
 930:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t SubPriorityBits;
 931:Drivers/CMSIS/Include/core_cm0plus.h **** 
 932:Drivers/CMSIS/Include/core_cm0plus.h ****   PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NV
 933:Drivers/CMSIS/Include/core_cm0plus.h ****   SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint
 934:Drivers/CMSIS/Include/core_cm0plus.h **** 
 935:Drivers/CMSIS/Include/core_cm0plus.h ****   *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1
 936:Drivers/CMSIS/Include/core_cm0plus.h ****   *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1
 937:Drivers/CMSIS/Include/core_cm0plus.h **** }
 938:Drivers/CMSIS/Include/core_cm0plus.h **** 
 939:Drivers/CMSIS/Include/core_cm0plus.h **** 
 940:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 941:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Set Interrupt Vector
 942:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Sets an interrupt vector in SRAM based interrupt vector table.
 943:Drivers/CMSIS/Include/core_cm0plus.h ****            The interrupt number can be positive to specify a device specific interrupt,
 944:Drivers/CMSIS/Include/core_cm0plus.h ****            or negative to specify a processor exception.
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s 			page 18


 945:Drivers/CMSIS/Include/core_cm0plus.h ****            VTOR must been relocated to SRAM before.
 946:Drivers/CMSIS/Include/core_cm0plus.h ****            If VTOR is not present address 0 must be mapped to SRAM.
 947:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]   IRQn      Interrupt number
 948:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]   vector    Address of interrupt handler function
 949:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 950:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE void __NVIC_SetVector(IRQn_Type IRQn, uint32_t vector)
 951:Drivers/CMSIS/Include/core_cm0plus.h **** {
 952:Drivers/CMSIS/Include/core_cm0plus.h **** #if defined (__VTOR_PRESENT) && (__VTOR_PRESENT == 1U)
 953:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t *vectors = (uint32_t *)SCB->VTOR;
 954:Drivers/CMSIS/Include/core_cm0plus.h ****   vectors[(int32_t)IRQn + NVIC_USER_IRQ_OFFSET] = vector;
 955:Drivers/CMSIS/Include/core_cm0plus.h **** #else
 956:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t *vectors = (uint32_t *)(NVIC_USER_IRQ_OFFSET << 2);      /* point to 1st user interrupt 
 957:Drivers/CMSIS/Include/core_cm0plus.h ****   *(vectors + (int32_t)IRQn) = vector;                              /* use pointer arithmetic to ac
 958:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 959:Drivers/CMSIS/Include/core_cm0plus.h ****   /* ARM Application Note 321 states that the M0+ does not require the architectural barrier */
 960:Drivers/CMSIS/Include/core_cm0plus.h **** }
 961:Drivers/CMSIS/Include/core_cm0plus.h **** 
 962:Drivers/CMSIS/Include/core_cm0plus.h **** 
 963:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 964:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Get Interrupt Vector
 965:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Reads an interrupt vector from interrupt vector table.
 966:Drivers/CMSIS/Include/core_cm0plus.h ****            The interrupt number can be positive to specify a device specific interrupt,
 967:Drivers/CMSIS/Include/core_cm0plus.h ****            or negative to specify a processor exception.
 968:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]   IRQn      Interrupt number.
 969:Drivers/CMSIS/Include/core_cm0plus.h ****   \return                 Address of interrupt handler function
 970:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 971:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE uint32_t __NVIC_GetVector(IRQn_Type IRQn)
 972:Drivers/CMSIS/Include/core_cm0plus.h **** {
 973:Drivers/CMSIS/Include/core_cm0plus.h **** #if defined (__VTOR_PRESENT) && (__VTOR_PRESENT == 1U)
 974:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t *vectors = (uint32_t *)SCB->VTOR;
 975:Drivers/CMSIS/Include/core_cm0plus.h ****   return vectors[(int32_t)IRQn + NVIC_USER_IRQ_OFFSET];
 976:Drivers/CMSIS/Include/core_cm0plus.h **** #else
 977:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t *vectors = (uint32_t *)(NVIC_USER_IRQ_OFFSET << 2);      /* point to 1st user interrupt 
 978:Drivers/CMSIS/Include/core_cm0plus.h ****   return *(vectors + (int32_t)IRQn);                                /* use pointer arithmetic to ac
 979:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 980:Drivers/CMSIS/Include/core_cm0plus.h **** }
 981:Drivers/CMSIS/Include/core_cm0plus.h **** 
 982:Drivers/CMSIS/Include/core_cm0plus.h **** 
 983:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 984:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   System Reset
 985:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Initiates a system reset request to reset the MCU.
 986:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 987:Drivers/CMSIS/Include/core_cm0plus.h **** __NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
 988:Drivers/CMSIS/Include/core_cm0plus.h **** {
  27              		.loc 2 988 1 view -0
  28              		.cfi_startproc
  29              		@ Volatile: function does not return.
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
 989:Drivers/CMSIS/Include/core_cm0plus.h ****   __DSB();                                                          /* Ensure all outstanding memor
  33              		.loc 2 989 3 view .LVU1
  34              	.LBB8:
  35              	.LBI8:
  36              		.file 3 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s 			page 19


   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.4.1
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     27. May 2021
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s 			page 20


  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s 			page 21


 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s 			page 22


 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
 200:Drivers/CMSIS/Include/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 203:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 204:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 208:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 215:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 223:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 226:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s 			page 23


 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 244:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 245:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 248:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 258:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 265:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
  37              		.loc 3 269 27 view .LVU2
  38              	.LBB9:
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
  39              		.loc 3 271 3 view .LVU3
  40              		.syntax divided
  41              	@ 271 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
  42 0000 BFF34F8F 		dsb 0xF
  43              	@ 0 "" 2
  44              		.thumb
  45              		.syntax unified
  46              	.LBE9:
  47              	.LBE8:
 990:Drivers/CMSIS/Include/core_cm0plus.h ****                                                                        buffered write are completed
 991:Drivers/CMSIS/Include/core_cm0plus.h ****   SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
  48              		.loc 2 991 3 view .LVU4
  49              		.loc 2 991 15 is_stmt 0 view .LVU5
  50 0004 034B     		ldr	r3, .L3
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s 			page 24


  51 0006 044A     		ldr	r2, .L3+4
  52 0008 DA60     		str	r2, [r3, #12]
 992:Drivers/CMSIS/Include/core_cm0plus.h ****                  SCB_AIRCR_SYSRESETREQ_Msk);
 993:Drivers/CMSIS/Include/core_cm0plus.h ****   __DSB();                                                          /* Ensure completion of memory 
  53              		.loc 2 993 3 is_stmt 1 view .LVU6
  54              	.LBB10:
  55              	.LBI10:
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  56              		.loc 3 269 27 view .LVU7
  57              	.LBB11:
  58              		.loc 3 271 3 view .LVU8
  59              		.syntax divided
  60              	@ 271 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
  61 000a BFF34F8F 		dsb 0xF
  62              	@ 0 "" 2
  63              		.thumb
  64              		.syntax unified
  65              	.L2:
  66              	.LBE11:
  67              	.LBE10:
 994:Drivers/CMSIS/Include/core_cm0plus.h **** 
 995:Drivers/CMSIS/Include/core_cm0plus.h ****   for(;;)                                                           /* wait until reset */
  68              		.loc 2 995 3 view .LVU9
 996:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 997:Drivers/CMSIS/Include/core_cm0plus.h ****     __NOP();
  69              		.loc 2 997 5 discriminator 1 view .LVU10
  70              		.syntax divided
  71              	@ 997 "Drivers/CMSIS/Include/core_cm0plus.h" 1
  72 000e C046     		nop
  73              	@ 0 "" 2
 995:Drivers/CMSIS/Include/core_cm0plus.h ****   {
  74              		.loc 2 995 3 view .LVU11
  75              		.thumb
  76              		.syntax unified
  77 0010 FDE7     		b	.L2
  78              	.L4:
  79 0012 C046     		.align	2
  80              	.L3:
  81 0014 00ED00E0 		.word	-536810240
  82 0018 0400FA05 		.word	100270084
  83              		.cfi_endproc
  84              	.LFE39:
  86              		.section	.text.MX_GPIO_Init,"ax",%progbits
  87              		.align	1
  88              		.syntax unified
  89              		.code	16
  90              		.thumb_func
  92              	MX_GPIO_Init:
  93              	.LFB355:
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s 			page 25


   9:Core/Src/main.c ****   * Copyright (c) 2025 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** 
  22:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  23:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  24:Core/Src/main.c **** 
  25:Core/Src/main.c **** #include <string.h>
  26:Core/Src/main.c **** #include <stdio.h>
  27:Core/Src/main.c **** #include <stdlib.h>
  28:Core/Src/main.c **** #include <time.h>
  29:Core/Src/main.c **** #include <stdbool.h>
  30:Core/Src/main.c **** #include "fsm.h"
  31:Core/Src/main.c **** 
  32:Core/Src/main.c **** /* USER CODE END Includes */
  33:Core/Src/main.c **** 
  34:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  35:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  36:Core/Src/main.c **** 
  37:Core/Src/main.c **** /* USER CODE END PTD */
  38:Core/Src/main.c **** 
  39:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  40:Core/Src/main.c **** /* USER CODE BEGIN PD */
  41:Core/Src/main.c **** 
  42:Core/Src/main.c **** #define M_PI 3.14159265358979323846
  43:Core/Src/main.c **** 
  44:Core/Src/main.c **** #define ADC_BUF_LEN 64
  45:Core/Src/main.c **** #define RX_BUF_LEN 64
  46:Core/Src/main.c **** #define FILTER_LEN 150
  47:Core/Src/main.c **** #define CMD_BUF_LEN 64
  48:Core/Src/main.c **** 
  49:Core/Src/main.c **** /* USER CODE END PD */
  50:Core/Src/main.c **** 
  51:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  52:Core/Src/main.c **** /* USER CODE BEGIN PM */
  53:Core/Src/main.c **** 
  54:Core/Src/main.c **** /* USER CODE END PM */
  55:Core/Src/main.c **** 
  56:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  57:Core/Src/main.c **** 
  58:Core/Src/main.c **** ADC_HandleTypeDef hadc1;
  59:Core/Src/main.c **** DMA_HandleTypeDef hdma_adc1;
  60:Core/Src/main.c **** 
  61:Core/Src/main.c **** TIM_HandleTypeDef htim14;
  62:Core/Src/main.c **** 
  63:Core/Src/main.c **** UART_HandleTypeDef huart2;
  64:Core/Src/main.c **** 
  65:Core/Src/main.c **** /* USER CODE BEGIN PV */
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s 			page 26


  66:Core/Src/main.c **** 
  67:Core/Src/main.c **** // adc buffer
  68:Core/Src/main.c **** uint16_t adc_buf[ADC_BUF_LEN];
  69:Core/Src/main.c **** 
  70:Core/Src/main.c **** // usart
  71:Core/Src/main.c **** uint8_t rx_byte;
  72:Core/Src/main.c **** uint8_t rx_buf[RX_BUF_LEN];
  73:Core/Src/main.c **** uint16_t rx_idx = 0;
  74:Core/Src/main.c **** 
  75:Core/Src/main.c **** // moving average filter
  76:Core/Src/main.c **** uint16_t filter_out = 0;
  77:Core/Src/main.c **** uint16_t filter_buf[FILTER_LEN];
  78:Core/Src/main.c **** uint16_t counter = 0;
  79:Core/Src/main.c **** uint32_t sum = 0;
  80:Core/Src/main.c **** 
  81:Core/Src/main.c **** // level detection in listening state
  82:Core/Src/main.c **** uint32_t hall_high_time = 0;
  83:Core/Src/main.c **** 
  84:Core/Src/main.c **** // cli commands buffer
  85:Core/Src/main.c **** char cmd_buf[CMD_BUF_LEN];
  86:Core/Src/main.c **** 
  87:Core/Src/main.c **** // available commands
  88:Core/Src/main.c **** typedef enum
  89:Core/Src/main.c **** {
  90:Core/Src/main.c ****   CMD_RAW = 0b00,
  91:Core/Src/main.c ****   CMD_MOVING_AVG = 0b01,
  92:Core/Src/main.c ****   CMD_RAND_NOISE = 0b10
  93:Core/Src/main.c **** } cmd_t;
  94:Core/Src/main.c **** 
  95:Core/Src/main.c **** // default command
  96:Core/Src/main.c **** cmd_t selected_cmd = CMD_RAW;
  97:Core/Src/main.c **** 
  98:Core/Src/main.c **** // List of state functions
  99:Core/Src/main.c **** state_func_t *const state_table[NUM_STATES] = {
 100:Core/Src/main.c ****   do_INIT,         // in state INIT
 101:Core/Src/main.c ****   do_WAIT_REQUEST, // in state WAIT_REQUEST
 102:Core/Src/main.c ****   do_ERROR,        // in state ERROR
 103:Core/Src/main.c ****   do_LISTENING,    // in state LISTENING
 104:Core/Src/main.c ****   do_WARNING,      // in state WARNING
 105:Core/Src/main.c ****   do_PAUSE,        // in state PAUSE
 106:Core/Src/main.c **** };
 107:Core/Src/main.c **** 
 108:Core/Src/main.c **** /* USER CODE END PV */
 109:Core/Src/main.c **** 
 110:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
 111:Core/Src/main.c **** static void MX_GPIO_Init(void);
 112:Core/Src/main.c **** static void MX_DMA_Init(void);
 113:Core/Src/main.c **** /* USER CODE BEGIN PFP */
 114:Core/Src/main.c **** 
 115:Core/Src/main.c **** void print(const char* msg)
 116:Core/Src/main.c **** {
 117:Core/Src/main.c ****   HAL_UART_Transmit_IT(&huart2, (uint8_t*)msg, strlen(msg));
 118:Core/Src/main.c **** }
 119:Core/Src/main.c **** 
 120:Core/Src/main.c **** uint16_t map(uint16_t val, uint16_t in_min, uint16_t in_max, uint16_t out_min, uint16_t out_max)
 121:Core/Src/main.c **** {
 122:Core/Src/main.c ****   // Preso da https://docs.arduino.cc/language-reference/en/functions/math/map/#appendix
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s 			page 27


 123:Core/Src/main.c **** 
 124:Core/Src/main.c ****   return (val - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 125:Core/Src/main.c **** }
 126:Core/Src/main.c **** 
 127:Core/Src/main.c **** uint16_t toMilliVolt(uint16_t val)
 128:Core/Src/main.c **** {
 129:Core/Src/main.c ****   // Del tutto equivalente a map(val, 0, 4095, 0, 5000) ma usato per semplicità
 130:Core/Src/main.c **** 
 131:Core/Src/main.c ****   return (val * 5000) / 4095;
 132:Core/Src/main.c **** }
 133:Core/Src/main.c **** 
 134:Core/Src/main.c **** uint16_t correct(long val)
 135:Core/Src/main.c **** {
 136:Core/Src/main.c ****   if (val < 0) { return (uint16_t)0; }
 137:Core/Src/main.c ****   if (val > 5000) { return (uint16_t)5000; }
 138:Core/Src/main.c ****   return val;
 139:Core/Src/main.c **** }
 140:Core/Src/main.c **** 
 141:Core/Src/main.c **** float gaussian_noise_clt(float mean, float stddev)
 142:Core/Src/main.c **** {
 143:Core/Src/main.c ****   float sum = .0f;
 144:Core/Src/main.c **** 
 145:Core/Src/main.c ****   for (int i = 0; i < 6; i++)
 146:Core/Src/main.c ****   {
 147:Core/Src/main.c ****     sum += ((float)rand() / RAND_MAX);
 148:Core/Src/main.c ****   }
 149:Core/Src/main.c ****   sum -= 3.0f;
 150:Core/Src/main.c **** 
 151:Core/Src/main.c ****   return mean + stddev * sum;
 152:Core/Src/main.c **** }
 153:Core/Src/main.c **** 
 154:Core/Src/main.c **** void start_timer(uint32_t ms)
 155:Core/Src/main.c **** {
 156:Core/Src/main.c ****   uint32_t period = ms - 1;
 157:Core/Src/main.c ****   __HAL_TIM_SET_AUTORELOAD(&htim14, period);
 158:Core/Src/main.c ****   HAL_TIM_Base_Start_IT(&htim14);
 159:Core/Src/main.c **** }
 160:Core/Src/main.c **** 
 161:Core/Src/main.c **** void stop_timer()
 162:Core/Src/main.c **** {
 163:Core/Src/main.c ****   HAL_TIM_Base_Stop_IT(&htim14);
 164:Core/Src/main.c **** }
 165:Core/Src/main.c **** 
 166:Core/Src/main.c **** void cli_process_cmd(const char* cmd)
 167:Core/Src/main.c **** {
 168:Core/Src/main.c ****   if (strcmp(cmd, "raw") == 0) 
 169:Core/Src/main.c ****   {
 170:Core/Src/main.c ****     print("removed all filters\r\n");
 171:Core/Src/main.c ****     selected_cmd = CMD_RAW;
 172:Core/Src/main.c ****   }
 173:Core/Src/main.c ****   else if (strcmp(cmd, "moving average") == 0) 
 174:Core/Src/main.c ****   { 
 175:Core/Src/main.c ****     selected_cmd ^= CMD_MOVING_AVG;
 176:Core/Src/main.c **** 
 177:Core/Src/main.c ****     if (selected_cmd & CMD_MOVING_AVG)
 178:Core/Src/main.c ****     {
 179:Core/Src/main.c ****       print("moving average on\r\n");
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s 			page 28


 180:Core/Src/main.c ****     }
 181:Core/Src/main.c ****     else
 182:Core/Src/main.c ****     {
 183:Core/Src/main.c ****       print("moving average off\r\n");
 184:Core/Src/main.c ****     }
 185:Core/Src/main.c ****   }
 186:Core/Src/main.c ****   else if (strcmp(cmd, "random noise") == 0) 
 187:Core/Src/main.c ****   {
 188:Core/Src/main.c ****     selected_cmd ^= CMD_RAND_NOISE;
 189:Core/Src/main.c **** 
 190:Core/Src/main.c ****     if (selected_cmd & CMD_RAND_NOISE)
 191:Core/Src/main.c ****     {
 192:Core/Src/main.c ****       print("random noise on\r\n");
 193:Core/Src/main.c ****     }
 194:Core/Src/main.c ****     else
 195:Core/Src/main.c ****     {
 196:Core/Src/main.c ****       print("random noise off\r\n");
 197:Core/Src/main.c ****     }
 198:Core/Src/main.c ****   }
 199:Core/Src/main.c ****   else
 200:Core/Src/main.c ****   {
 201:Core/Src/main.c ****     char msg[64];
 202:Core/Src/main.c ****     snprintf(msg, sizeof(msg), "wrong command: %s\r\n", cmd);
 203:Core/Src/main.c ****     print(msg);
 204:Core/Src/main.c ****   }
 205:Core/Src/main.c **** }
 206:Core/Src/main.c **** 
 207:Core/Src/main.c **** /* USER CODE END PFP */
 208:Core/Src/main.c **** 
 209:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
 210:Core/Src/main.c **** /* USER CODE BEGIN 0 */
 211:Core/Src/main.c **** 
 212:Core/Src/main.c **** /* USER CODE END 0 */
 213:Core/Src/main.c **** 
 214:Core/Src/main.c ****   state_t current_state = STATE_INIT;
 215:Core/Src/main.c **** 
 216:Core/Src/main.c **** /**
 217:Core/Src/main.c ****   * @brief  The application entry point.
 218:Core/Src/main.c ****   * @retval int
 219:Core/Src/main.c ****   */
 220:Core/Src/main.c **** int main(void)
 221:Core/Src/main.c **** {
 222:Core/Src/main.c ****   while (1)
 223:Core/Src/main.c ****   {
 224:Core/Src/main.c ****     current_state = run_state(current_state);
 225:Core/Src/main.c ****   }
 226:Core/Src/main.c ****   /* USER CODE END 3 */
 227:Core/Src/main.c **** }
 228:Core/Src/main.c **** 
 229:Core/Src/main.c **** /**
 230:Core/Src/main.c ****   * Enable DMA controller clock
 231:Core/Src/main.c ****   */
 232:Core/Src/main.c **** static void MX_DMA_Init(void)
 233:Core/Src/main.c **** {
 234:Core/Src/main.c **** 
 235:Core/Src/main.c ****   /* DMA controller clock enable */
 236:Core/Src/main.c ****   __HAL_RCC_DMA1_CLK_ENABLE();
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s 			page 29


 237:Core/Src/main.c **** 
 238:Core/Src/main.c ****   /* DMA interrupt init */
 239:Core/Src/main.c ****   /* DMA1_Channel1_IRQn interrupt configuration */
 240:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 241:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 242:Core/Src/main.c **** }
 243:Core/Src/main.c **** 
 244:Core/Src/main.c **** /**
 245:Core/Src/main.c ****   * @brief GPIO Initialization Function
 246:Core/Src/main.c ****   * @param None
 247:Core/Src/main.c ****   * @retval None
 248:Core/Src/main.c ****   */
 249:Core/Src/main.c **** static void MX_GPIO_Init(void)
 250:Core/Src/main.c **** {
  94              		.loc 1 250 1 view -0
  95              		.cfi_startproc
  96              		@ args = 0, pretend = 0, frame = 32
  97              		@ frame_needed = 0, uses_anonymous_args = 0
  98 0000 10B5     		push	{r4, lr}
  99              		.cfi_def_cfa_offset 8
 100              		.cfi_offset 4, -8
 101              		.cfi_offset 14, -4
 102 0002 88B0     		sub	sp, sp, #32
 103              		.cfi_def_cfa_offset 40
 251:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
 104              		.loc 1 251 3 view .LVU13
 105              		.loc 1 251 20 is_stmt 0 view .LVU14
 106 0004 03AC     		add	r4, sp, #12
 107 0006 1422     		movs	r2, #20
 108 0008 0021     		movs	r1, #0
 109 000a 2000     		movs	r0, r4
 110 000c FFF7FEFF 		bl	memset
 111              	.LVL0:
 252:Core/Src/main.c ****   /* USER CODE BEGIN MX_GPIO_Init_1 */
 253:Core/Src/main.c **** 
 254:Core/Src/main.c ****   /* USER CODE END MX_GPIO_Init_1 */
 255:Core/Src/main.c **** 
 256:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 257:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
 112              		.loc 1 257 3 is_stmt 1 view .LVU15
 113              	.LBB12:
 114              		.loc 1 257 3 view .LVU16
 115              		.loc 1 257 3 view .LVU17
 116 0010 104B     		ldr	r3, .L6
 117 0012 596B     		ldr	r1, [r3, #52]
 118 0014 0422     		movs	r2, #4
 119 0016 1143     		orrs	r1, r2
 120 0018 5963     		str	r1, [r3, #52]
 121              		.loc 1 257 3 view .LVU18
 122 001a 596B     		ldr	r1, [r3, #52]
 123 001c 0A40     		ands	r2, r1
 124 001e 0092     		str	r2, [sp]
 125              		.loc 1 257 3 view .LVU19
 126 0020 009A     		ldr	r2, [sp]
 127              	.LBE12:
 128              		.loc 1 257 3 view .LVU20
 258:Core/Src/main.c ****   __HAL_RCC_GPIOF_CLK_ENABLE();
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s 			page 30


 129              		.loc 1 258 3 view .LVU21
 130              	.LBB13:
 131              		.loc 1 258 3 view .LVU22
 132              		.loc 1 258 3 view .LVU23
 133 0022 596B     		ldr	r1, [r3, #52]
 134 0024 2022     		movs	r2, #32
 135 0026 1143     		orrs	r1, r2
 136 0028 5963     		str	r1, [r3, #52]
 137              		.loc 1 258 3 view .LVU24
 138 002a 596B     		ldr	r1, [r3, #52]
 139 002c 0A40     		ands	r2, r1
 140 002e 0192     		str	r2, [sp, #4]
 141              		.loc 1 258 3 view .LVU25
 142 0030 019A     		ldr	r2, [sp, #4]
 143              	.LBE13:
 144              		.loc 1 258 3 view .LVU26
 259:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 145              		.loc 1 259 3 view .LVU27
 146              	.LBB14:
 147              		.loc 1 259 3 view .LVU28
 148              		.loc 1 259 3 view .LVU29
 149 0032 596B     		ldr	r1, [r3, #52]
 150 0034 0122     		movs	r2, #1
 151 0036 1143     		orrs	r1, r2
 152 0038 5963     		str	r1, [r3, #52]
 153              		.loc 1 259 3 view .LVU30
 154 003a 5B6B     		ldr	r3, [r3, #52]
 155 003c 1340     		ands	r3, r2
 156 003e 0293     		str	r3, [sp, #8]
 157              		.loc 1 259 3 view .LVU31
 158 0040 029B     		ldr	r3, [sp, #8]
 159              	.LBE14:
 160              		.loc 1 259 3 view .LVU32
 260:Core/Src/main.c **** 
 261:Core/Src/main.c ****   /*Configure GPIO pin : HALL_DIGITAL_Pin */
 262:Core/Src/main.c ****   GPIO_InitStruct.Pin = HALL_DIGITAL_Pin;
 161              		.loc 1 262 3 view .LVU33
 162              		.loc 1 262 23 is_stmt 0 view .LVU34
 163 0042 0392     		str	r2, [sp, #12]
 263:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 164              		.loc 1 263 3 is_stmt 1 view .LVU35
 264:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
 165              		.loc 1 264 3 view .LVU36
 166              		.loc 1 264 24 is_stmt 0 view .LVU37
 167 0044 0592     		str	r2, [sp, #20]
 265:Core/Src/main.c ****   HAL_GPIO_Init(HALL_DIGITAL_GPIO_Port, &GPIO_InitStruct);
 168              		.loc 1 265 3 is_stmt 1 view .LVU38
 169 0046 A020     		movs	r0, #160
 170 0048 2100     		movs	r1, r4
 171 004a C005     		lsls	r0, r0, #23
 172 004c FFF7FEFF 		bl	HAL_GPIO_Init
 173              	.LVL1:
 266:Core/Src/main.c **** 
 267:Core/Src/main.c ****   /* USER CODE BEGIN MX_GPIO_Init_2 */
 268:Core/Src/main.c **** 
 269:Core/Src/main.c ****   /* USER CODE END MX_GPIO_Init_2 */
 270:Core/Src/main.c **** }
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s 			page 31


 174              		.loc 1 270 1 is_stmt 0 view .LVU39
 175 0050 08B0     		add	sp, sp, #32
 176              		@ sp needed
 177 0052 10BD     		pop	{r4, pc}
 178              	.L7:
 179              		.align	2
 180              	.L6:
 181 0054 00100240 		.word	1073876992
 182              		.cfi_endproc
 183              	.LFE355:
 185              		.section	.text.MX_DMA_Init,"ax",%progbits
 186              		.align	1
 187              		.syntax unified
 188              		.code	16
 189              		.thumb_func
 191              	MX_DMA_Init:
 192              	.LFB354:
 233:Core/Src/main.c **** 
 193              		.loc 1 233 1 is_stmt 1 view -0
 194              		.cfi_startproc
 195              		@ args = 0, pretend = 0, frame = 8
 196              		@ frame_needed = 0, uses_anonymous_args = 0
 197 0000 00B5     		push	{lr}
 198              		.cfi_def_cfa_offset 4
 199              		.cfi_offset 14, -4
 200 0002 83B0     		sub	sp, sp, #12
 201              		.cfi_def_cfa_offset 16
 236:Core/Src/main.c **** 
 202              		.loc 1 236 3 view .LVU41
 203              	.LBB15:
 236:Core/Src/main.c **** 
 204              		.loc 1 236 3 view .LVU42
 236:Core/Src/main.c **** 
 205              		.loc 1 236 3 view .LVU43
 206 0004 094A     		ldr	r2, .L9
 207 0006 916B     		ldr	r1, [r2, #56]
 208 0008 0123     		movs	r3, #1
 209 000a 1943     		orrs	r1, r3
 210 000c 9163     		str	r1, [r2, #56]
 236:Core/Src/main.c **** 
 211              		.loc 1 236 3 view .LVU44
 212 000e 926B     		ldr	r2, [r2, #56]
 213 0010 1340     		ands	r3, r2
 214 0012 0193     		str	r3, [sp, #4]
 236:Core/Src/main.c **** 
 215              		.loc 1 236 3 view .LVU45
 216 0014 019B     		ldr	r3, [sp, #4]
 217              	.LBE15:
 236:Core/Src/main.c **** 
 218              		.loc 1 236 3 view .LVU46
 240:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 219              		.loc 1 240 3 view .LVU47
 220 0016 0022     		movs	r2, #0
 221 0018 0021     		movs	r1, #0
 222 001a 0920     		movs	r0, #9
 223 001c FFF7FEFF 		bl	HAL_NVIC_SetPriority
 224              	.LVL2:
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s 			page 32


 241:Core/Src/main.c **** }
 225              		.loc 1 241 3 view .LVU48
 226 0020 0920     		movs	r0, #9
 227 0022 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 228              	.LVL3:
 242:Core/Src/main.c **** 
 229              		.loc 1 242 1 is_stmt 0 view .LVU49
 230 0026 03B0     		add	sp, sp, #12
 231              		@ sp needed
 232 0028 00BD     		pop	{pc}
 233              	.L10:
 234 002a C046     		.align	2
 235              	.L9:
 236 002c 00100240 		.word	1073876992
 237              		.cfi_endproc
 238              	.LFE354:
 240              		.section	.text.do_INIT,"ax",%progbits
 241              		.align	1
 242              		.global	do_INIT
 243              		.syntax unified
 244              		.code	16
 245              		.thumb_func
 247              	do_INIT:
 248              	.LFB356:
 271:Core/Src/main.c **** 
 272:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 273:Core/Src/main.c **** 
 274:Core/Src/main.c **** state_t do_INIT(void) 
 275:Core/Src/main.c **** {
 249              		.loc 1 275 1 is_stmt 1 view -0
 250              		.cfi_startproc
 251              		@ args = 0, pretend = 0, frame = 64
 252              		@ frame_needed = 0, uses_anonymous_args = 0
 253 0000 30B5     		push	{r4, r5, lr}
 254              		.cfi_def_cfa_offset 12
 255              		.cfi_offset 4, -12
 256              		.cfi_offset 5, -8
 257              		.cfi_offset 14, -4
 258 0002 91B0     		sub	sp, sp, #68
 259              		.cfi_def_cfa_offset 80
 276:Core/Src/main.c ****   state_t next_state = STATE_WAIT_REQUEST;
 260              		.loc 1 276 3 view .LVU51
 261              	.LVL4:
 277:Core/Src/main.c **** 
 278:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 279:Core/Src/main.c **** 
 280:Core/Src/main.c ****   /* USER CODE END 1 */
 281:Core/Src/main.c **** 
 282:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 283:Core/Src/main.c **** 
 284:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 285:Core/Src/main.c ****   if (HAL_Init() != HAL_OK) { next_state = STATE_ERROR; };
 262              		.loc 1 285 3 view .LVU52
 263              		.loc 1 285 7 is_stmt 0 view .LVU53
 264 0004 FFF7FEFF 		bl	HAL_Init
 265              	.LVL5:
 266              		.loc 1 285 6 discriminator 1 view .LVU54
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s 			page 33


 267 0008 0028     		cmp	r0, #0
 268 000a 00D0     		beq	.LCB193
 269 000c 9AE0     		b	.L20	@long jump
 270              	.LCB193:
 276:Core/Src/main.c ****   state_t next_state = STATE_WAIT_REQUEST;
 271              		.loc 1 276 11 view .LVU55
 272 000e 0124     		movs	r4, #1
 273              	.L12:
 274              	.LVL6:
 275              		.loc 1 285 58 is_stmt 1 discriminator 3 view .LVU56
 286:Core/Src/main.c **** 
 287:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 288:Core/Src/main.c **** 
 289:Core/Src/main.c ****   /* USER CODE END Init */
 290:Core/Src/main.c **** 
 291:Core/Src/main.c ****   /* Configure the system clock */
 292:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 276              		.loc 1 292 3 view .LVU57
 277              		.loc 1 292 22 is_stmt 0 view .LVU58
 278 0010 09AD     		add	r5, sp, #36
 279 0012 1C22     		movs	r2, #28
 280 0014 0021     		movs	r1, #0
 281 0016 2800     		movs	r0, r5
 282 0018 FFF7FEFF 		bl	memset
 283              	.LVL7:
 293:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 284              		.loc 1 293 3 is_stmt 1 view .LVU59
 285              		.loc 1 293 22 is_stmt 0 view .LVU60
 286 001c 1422     		movs	r2, #20
 287 001e 0021     		movs	r1, #0
 288 0020 04A8     		add	r0, sp, #16
 289 0022 FFF7FEFF 		bl	memset
 290              	.LVL8:
 294:Core/Src/main.c **** 
 295:Core/Src/main.c ****   __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_1);
 291              		.loc 1 295 3 is_stmt 1 view .LVU61
 292 0026 4949     		ldr	r1, .L29
 293 0028 0B68     		ldr	r3, [r1]
 294 002a 0722     		movs	r2, #7
 295 002c 9343     		bics	r3, r2
 296 002e 063A     		subs	r2, r2, #6
 297 0030 1343     		orrs	r3, r2
 298 0032 0B60     		str	r3, [r1]
 296:Core/Src/main.c **** 
 297:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 298:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 299:Core/Src/main.c ****   */
 300:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 299              		.loc 1 300 3 view .LVU62
 300              		.loc 1 300 36 is_stmt 0 view .LVU63
 301 0034 0992     		str	r2, [sp, #36]
 301:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 302              		.loc 1 301 3 is_stmt 1 view .LVU64
 303              		.loc 1 301 30 is_stmt 0 view .LVU65
 304 0036 8023     		movs	r3, #128
 305 0038 5B02     		lsls	r3, r3, #9
 306 003a 0A93     		str	r3, [sp, #40]
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s 			page 34


 302:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 307              		.loc 1 302 3 is_stmt 1 view .LVU66
 308              		.loc 1 302 7 is_stmt 0 view .LVU67
 309 003c 2800     		movs	r0, r5
 310 003e FFF7FEFF 		bl	HAL_RCC_OscConfig
 311              	.LVL9:
 312              		.loc 1 302 6 discriminator 1 view .LVU68
 313 0042 0028     		cmp	r0, #0
 314 0044 00D0     		beq	.L13
 303:Core/Src/main.c ****   {
 304:Core/Src/main.c ****     next_state = STATE_ERROR;
 315              		.loc 1 304 16 view .LVU69
 316 0046 0224     		movs	r4, #2
 317              	.LVL10:
 318              	.L13:
 305:Core/Src/main.c ****   }
 306:Core/Src/main.c **** 
 307:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 308:Core/Src/main.c ****   */
 309:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 319              		.loc 1 309 3 is_stmt 1 view .LVU70
 320              		.loc 1 309 31 is_stmt 0 view .LVU71
 321 0048 04A8     		add	r0, sp, #16
 322 004a 0723     		movs	r3, #7
 323 004c 0493     		str	r3, [sp, #16]
 310:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1;
 311:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 324              		.loc 1 311 3 is_stmt 1 view .LVU72
 325              		.loc 1 311 34 is_stmt 0 view .LVU73
 326 004e 063B     		subs	r3, r3, #6
 327 0050 4360     		str	r3, [r0, #4]
 312:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 328              		.loc 1 312 3 is_stmt 1 view .LVU74
 329              		.loc 1 312 35 is_stmt 0 view .LVU75
 330 0052 0023     		movs	r3, #0
 331 0054 8360     		str	r3, [r0, #8]
 313:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 332              		.loc 1 313 3 is_stmt 1 view .LVU76
 333              		.loc 1 313 35 is_stmt 0 view .LVU77
 334 0056 C360     		str	r3, [r0, #12]
 314:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 335              		.loc 1 314 3 is_stmt 1 view .LVU78
 336              		.loc 1 314 36 is_stmt 0 view .LVU79
 337 0058 0361     		str	r3, [r0, #16]
 315:Core/Src/main.c **** 
 316:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 338              		.loc 1 316 3 is_stmt 1 view .LVU80
 339              		.loc 1 316 7 is_stmt 0 view .LVU81
 340 005a 0121     		movs	r1, #1
 341 005c FFF7FEFF 		bl	HAL_RCC_ClockConfig
 342              	.LVL11:
 343              		.loc 1 316 6 discriminator 1 view .LVU82
 344 0060 0028     		cmp	r0, #0
 345 0062 00D0     		beq	.L14
 317:Core/Src/main.c ****   {
 318:Core/Src/main.c ****     next_state = STATE_ERROR;
 346              		.loc 1 318 16 view .LVU83
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s 			page 35


 347 0064 0224     		movs	r4, #2
 348              	.LVL12:
 349              	.L14:
 319:Core/Src/main.c ****   }
 320:Core/Src/main.c **** 
 321:Core/Src/main.c **** 
 322:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 323:Core/Src/main.c **** 
 324:Core/Src/main.c ****   /* USER CODE END SysInit */
 325:Core/Src/main.c **** 
 326:Core/Src/main.c ****   /* Initialize all configured peripherals */
 327:Core/Src/main.c ****   MX_GPIO_Init();
 350              		.loc 1 327 3 is_stmt 1 view .LVU84
 351 0066 FFF7FEFF 		bl	MX_GPIO_Init
 352              	.LVL13:
 328:Core/Src/main.c ****   MX_DMA_Init();
 353              		.loc 1 328 3 view .LVU85
 354 006a FFF7FEFF 		bl	MX_DMA_Init
 355              	.LVL14:
 329:Core/Src/main.c ****   
 330:Core/Src/main.c **** 
 331:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 0 */
 332:Core/Src/main.c **** 
 333:Core/Src/main.c ****   /* USER CODE END ADC1_Init 0 */
 334:Core/Src/main.c **** 
 335:Core/Src/main.c ****   ADC_ChannelConfTypeDef sConfig = {0};
 356              		.loc 1 335 3 view .LVU86
 357              		.loc 1 335 26 is_stmt 0 view .LVU87
 358 006e 0C22     		movs	r2, #12
 359 0070 0021     		movs	r1, #0
 360 0072 01A8     		add	r0, sp, #4
 361 0074 FFF7FEFF 		bl	memset
 362              	.LVL15:
 336:Core/Src/main.c **** 
 337:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 1 */
 338:Core/Src/main.c **** 
 339:Core/Src/main.c ****   /* USER CODE END ADC1_Init 1 */
 340:Core/Src/main.c **** 
 341:Core/Src/main.c ****   /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of con
 342:Core/Src/main.c ****   */
 343:Core/Src/main.c ****   hadc1.Instance = ADC1;
 363              		.loc 1 343 3 is_stmt 1 view .LVU88
 364              		.loc 1 343 18 is_stmt 0 view .LVU89
 365 0078 3548     		ldr	r0, .L29+4
 366 007a 364B     		ldr	r3, .L29+8
 367 007c 0360     		str	r3, [r0]
 344:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 368              		.loc 1 344 3 is_stmt 1 view .LVU90
 369              		.loc 1 344 29 is_stmt 0 view .LVU91
 370 007e 8023     		movs	r3, #128
 371 0080 DB05     		lsls	r3, r3, #23
 372 0082 4360     		str	r3, [r0, #4]
 345:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 373              		.loc 1 345 3 is_stmt 1 view .LVU92
 374              		.loc 1 345 25 is_stmt 0 view .LVU93
 375 0084 0023     		movs	r3, #0
 376 0086 8360     		str	r3, [r0, #8]
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s 			page 36


 346:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 377              		.loc 1 346 3 is_stmt 1 view .LVU94
 378              		.loc 1 346 24 is_stmt 0 view .LVU95
 379 0088 C360     		str	r3, [r0, #12]
 347:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ADC_SCAN_SEQ_FIXED;
 380              		.loc 1 347 3 is_stmt 1 view .LVU96
 381              		.loc 1 347 27 is_stmt 0 view .LVU97
 382 008a 8022     		movs	r2, #128
 383 008c 1206     		lsls	r2, r2, #24
 384 008e 0261     		str	r2, [r0, #16]
 348:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 385              		.loc 1 348 3 is_stmt 1 view .LVU98
 386              		.loc 1 348 27 is_stmt 0 view .LVU99
 387 0090 0422     		movs	r2, #4
 388 0092 4261     		str	r2, [r0, #20]
 349:Core/Src/main.c ****   hadc1.Init.LowPowerAutoWait = DISABLE;
 389              		.loc 1 349 3 is_stmt 1 view .LVU100
 390              		.loc 1 349 31 is_stmt 0 view .LVU101
 391 0094 0376     		strb	r3, [r0, #24]
 350:Core/Src/main.c ****   hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 392              		.loc 1 350 3 is_stmt 1 view .LVU102
 393              		.loc 1 350 35 is_stmt 0 view .LVU103
 394 0096 4376     		strb	r3, [r0, #25]
 351:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
 395              		.loc 1 351 3 is_stmt 1 view .LVU104
 396              		.loc 1 351 33 is_stmt 0 view .LVU105
 397 0098 033A     		subs	r2, r2, #3
 398 009a 8276     		strb	r2, [r0, #26]
 352:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 1;
 399              		.loc 1 352 3 is_stmt 1 view .LVU106
 400              		.loc 1 352 30 is_stmt 0 view .LVU107
 401 009c C261     		str	r2, [r0, #28]
 353:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 402              		.loc 1 353 3 is_stmt 1 view .LVU108
 403              		.loc 1 353 31 is_stmt 0 view .LVU109
 404 009e 4362     		str	r3, [r0, #36]
 354:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 405              		.loc 1 354 3 is_stmt 1 view .LVU110
 406              		.loc 1 354 35 is_stmt 0 view .LVU111
 407 00a0 8362     		str	r3, [r0, #40]
 355:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = ENABLE;
 408              		.loc 1 355 3 is_stmt 1 view .LVU112
 409              		.loc 1 355 36 is_stmt 0 view .LVU113
 410 00a2 2C21     		movs	r1, #44
 411 00a4 4254     		strb	r2, [r0, r1]
 356:Core/Src/main.c ****   hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 412              		.loc 1 356 3 is_stmt 1 view .LVU114
 413              		.loc 1 356 22 is_stmt 0 view .LVU115
 414 00a6 0363     		str	r3, [r0, #48]
 357:Core/Src/main.c ****   hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 415              		.loc 1 357 3 is_stmt 1 view .LVU116
 416              		.loc 1 357 34 is_stmt 0 view .LVU117
 417 00a8 4363     		str	r3, [r0, #52]
 358:Core/Src/main.c ****   hadc1.Init.OversamplingMode = DISABLE;
 418              		.loc 1 358 3 is_stmt 1 view .LVU118
 419              		.loc 1 358 31 is_stmt 0 view .LVU119
 420 00aa 3B32     		adds	r2, r2, #59
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s 			page 37


 421 00ac 8354     		strb	r3, [r0, r2]
 359:Core/Src/main.c ****   hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 422              		.loc 1 359 3 is_stmt 1 view .LVU120
 423              		.loc 1 359 35 is_stmt 0 view .LVU121
 424 00ae C364     		str	r3, [r0, #76]
 360:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 425              		.loc 1 360 3 is_stmt 1 view .LVU122
 426              		.loc 1 360 7 is_stmt 0 view .LVU123
 427 00b0 FFF7FEFF 		bl	HAL_ADC_Init
 428              	.LVL16:
 429              		.loc 1 360 6 discriminator 1 view .LVU124
 430 00b4 0028     		cmp	r0, #0
 431 00b6 00D0     		beq	.L15
 361:Core/Src/main.c ****   {
 362:Core/Src/main.c ****     next_state = STATE_ERROR;
 432              		.loc 1 362 16 view .LVU125
 433 00b8 0224     		movs	r4, #2
 434              	.LVL17:
 435              	.L15:
 363:Core/Src/main.c ****   }
 364:Core/Src/main.c **** 
 365:Core/Src/main.c ****   /** Configure Regular Channel
 366:Core/Src/main.c ****   */
 367:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_1;
 436              		.loc 1 367 3 is_stmt 1 view .LVU126
 437              		.loc 1 367 19 is_stmt 0 view .LVU127
 438 00ba 01A9     		add	r1, sp, #4
 439 00bc 264B     		ldr	r3, .L29+12
 440 00be 0193     		str	r3, [sp, #4]
 368:Core/Src/main.c ****   sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 441              		.loc 1 368 3 is_stmt 1 view .LVU128
 442              		.loc 1 368 16 is_stmt 0 view .LVU129
 443 00c0 0123     		movs	r3, #1
 444 00c2 4B60     		str	r3, [r1, #4]
 369:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 445              		.loc 1 369 3 is_stmt 1 view .LVU130
 446              		.loc 1 369 7 is_stmt 0 view .LVU131
 447 00c4 2248     		ldr	r0, .L29+4
 448 00c6 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 449              	.LVL18:
 450              		.loc 1 369 6 discriminator 1 view .LVU132
 451 00ca 0028     		cmp	r0, #0
 452 00cc 00D0     		beq	.L16
 370:Core/Src/main.c ****   {
 371:Core/Src/main.c ****     next_state = STATE_ERROR;
 453              		.loc 1 371 16 view .LVU133
 454 00ce 0224     		movs	r4, #2
 455              	.LVL19:
 456              	.L16:
 372:Core/Src/main.c ****   }
 373:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 2 */
 374:Core/Src/main.c **** 
 375:Core/Src/main.c ****   /* USER CODE END ADC1_Init 2 */
 376:Core/Src/main.c **** 
 377:Core/Src/main.c **** 
 378:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 0 */
 379:Core/Src/main.c **** 
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s 			page 38


 380:Core/Src/main.c ****   /* USER CODE END USART2_Init 0 */
 381:Core/Src/main.c **** 
 382:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 1 */
 383:Core/Src/main.c **** 
 384:Core/Src/main.c ****   /* USER CODE END USART2_Init 1 */
 385:Core/Src/main.c ****   huart2.Instance = USART2;
 457              		.loc 1 385 3 is_stmt 1 view .LVU134
 458              		.loc 1 385 19 is_stmt 0 view .LVU135
 459 00d0 2248     		ldr	r0, .L29+16
 460 00d2 234B     		ldr	r3, .L29+20
 461 00d4 0360     		str	r3, [r0]
 386:Core/Src/main.c ****   huart2.Init.BaudRate = 9600;
 462              		.loc 1 386 3 is_stmt 1 view .LVU136
 463              		.loc 1 386 24 is_stmt 0 view .LVU137
 464 00d6 9623     		movs	r3, #150
 465 00d8 9B01     		lsls	r3, r3, #6
 466 00da 4360     		str	r3, [r0, #4]
 387:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 467              		.loc 1 387 3 is_stmt 1 view .LVU138
 468              		.loc 1 387 26 is_stmt 0 view .LVU139
 469 00dc 0023     		movs	r3, #0
 470 00de 8360     		str	r3, [r0, #8]
 388:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 471              		.loc 1 388 3 is_stmt 1 view .LVU140
 472              		.loc 1 388 24 is_stmt 0 view .LVU141
 473 00e0 C360     		str	r3, [r0, #12]
 389:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 474              		.loc 1 389 3 is_stmt 1 view .LVU142
 475              		.loc 1 389 22 is_stmt 0 view .LVU143
 476 00e2 0361     		str	r3, [r0, #16]
 390:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 477              		.loc 1 390 3 is_stmt 1 view .LVU144
 478              		.loc 1 390 20 is_stmt 0 view .LVU145
 479 00e4 0C22     		movs	r2, #12
 480 00e6 4261     		str	r2, [r0, #20]
 391:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 481              		.loc 1 391 3 is_stmt 1 view .LVU146
 482              		.loc 1 391 25 is_stmt 0 view .LVU147
 483 00e8 8361     		str	r3, [r0, #24]
 392:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 484              		.loc 1 392 3 is_stmt 1 view .LVU148
 485              		.loc 1 392 28 is_stmt 0 view .LVU149
 486 00ea C361     		str	r3, [r0, #28]
 393:Core/Src/main.c ****   huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 487              		.loc 1 393 3 is_stmt 1 view .LVU150
 488              		.loc 1 393 30 is_stmt 0 view .LVU151
 489 00ec 0362     		str	r3, [r0, #32]
 394:Core/Src/main.c ****   huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 490              		.loc 1 394 3 is_stmt 1 view .LVU152
 491              		.loc 1 394 30 is_stmt 0 view .LVU153
 492 00ee 4362     		str	r3, [r0, #36]
 395:Core/Src/main.c ****   huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 493              		.loc 1 395 3 is_stmt 1 view .LVU154
 494              		.loc 1 395 38 is_stmt 0 view .LVU155
 495 00f0 8362     		str	r3, [r0, #40]
 396:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 496              		.loc 1 396 3 is_stmt 1 view .LVU156
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s 			page 39


 497              		.loc 1 396 7 is_stmt 0 view .LVU157
 498 00f2 FFF7FEFF 		bl	HAL_UART_Init
 499              	.LVL20:
 500              		.loc 1 396 6 discriminator 1 view .LVU158
 501 00f6 0028     		cmp	r0, #0
 502 00f8 00D0     		beq	.L17
 397:Core/Src/main.c ****   {
 398:Core/Src/main.c ****     next_state = STATE_ERROR;
 503              		.loc 1 398 16 view .LVU159
 504 00fa 0224     		movs	r4, #2
 505              	.LVL21:
 506              	.L17:
 399:Core/Src/main.c ****   }
 400:Core/Src/main.c **** 
 401:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 2 */
 402:Core/Src/main.c **** 
 403:Core/Src/main.c ****   /* USER CODE END USART2_Init 2 */
 404:Core/Src/main.c **** 
 405:Core/Src/main.c **** 
 406:Core/Src/main.c **** 
 407:Core/Src/main.c ****   /* USER CODE BEGIN TIM14_Init 0 */
 408:Core/Src/main.c **** 
 409:Core/Src/main.c ****   /* USER CODE END TIM14_Init 0 */
 410:Core/Src/main.c **** 
 411:Core/Src/main.c ****   /* USER CODE BEGIN TIM14_Init 1 */
 412:Core/Src/main.c **** 
 413:Core/Src/main.c ****   /* USER CODE END TIM14_Init 1 */
 414:Core/Src/main.c ****   htim14.Instance = TIM14;
 507              		.loc 1 414 3 is_stmt 1 view .LVU160
 508              		.loc 1 414 19 is_stmt 0 view .LVU161
 509 00fc 1948     		ldr	r0, .L29+24
 510 00fe 1A4B     		ldr	r3, .L29+28
 511 0100 0360     		str	r3, [r0]
 415:Core/Src/main.c ****   htim14.Init.Prescaler = 47999;
 512              		.loc 1 415 3 is_stmt 1 view .LVU162
 513              		.loc 1 415 25 is_stmt 0 view .LVU163
 514 0102 1A4B     		ldr	r3, .L29+32
 515 0104 4360     		str	r3, [r0, #4]
 416:Core/Src/main.c ****   htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 516              		.loc 1 416 3 is_stmt 1 view .LVU164
 517              		.loc 1 416 27 is_stmt 0 view .LVU165
 518 0106 0023     		movs	r3, #0
 519 0108 8360     		str	r3, [r0, #8]
 417:Core/Src/main.c ****   htim14.Init.Period = 999;
 520              		.loc 1 417 3 is_stmt 1 view .LVU166
 521              		.loc 1 417 22 is_stmt 0 view .LVU167
 522 010a 194A     		ldr	r2, .L29+36
 523 010c C260     		str	r2, [r0, #12]
 418:Core/Src/main.c ****   htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 524              		.loc 1 418 3 is_stmt 1 view .LVU168
 525              		.loc 1 418 29 is_stmt 0 view .LVU169
 526 010e 0361     		str	r3, [r0, #16]
 419:Core/Src/main.c ****   htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 527              		.loc 1 419 3 is_stmt 1 view .LVU170
 528              		.loc 1 419 33 is_stmt 0 view .LVU171
 529 0110 8361     		str	r3, [r0, #24]
 420:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s 			page 40


 530              		.loc 1 420 3 is_stmt 1 view .LVU172
 531              		.loc 1 420 7 is_stmt 0 view .LVU173
 532 0112 FFF7FEFF 		bl	HAL_TIM_Base_Init
 533              	.LVL22:
 534              		.loc 1 420 6 discriminator 1 view .LVU174
 535 0116 0028     		cmp	r0, #0
 536 0118 00D0     		beq	.L18
 421:Core/Src/main.c ****   {
 422:Core/Src/main.c ****     next_state = STATE_ERROR;
 537              		.loc 1 422 16 view .LVU175
 538 011a 0224     		movs	r4, #2
 539              	.LVL23:
 540              	.L18:
 423:Core/Src/main.c ****   }
 424:Core/Src/main.c ****   /* USER CODE BEGIN TIM14_Init 2 */
 425:Core/Src/main.c **** 
 426:Core/Src/main.c ****   /* USER CODE END TIM14_Init 2 */
 427:Core/Src/main.c **** 
 428:Core/Src/main.c **** 
 429:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 430:Core/Src/main.c **** 
 431:Core/Src/main.c ****   srand(time(NULL));
 541              		.loc 1 431 3 is_stmt 1 view .LVU176
 542              		.loc 1 431 9 is_stmt 0 view .LVU177
 543 011c 0020     		movs	r0, #0
 544 011e FFF7FEFF 		bl	time
 545              	.LVL24:
 546              		.loc 1 431 3 discriminator 1 view .LVU178
 547 0122 FFF7FEFF 		bl	srand
 548              	.LVL25:
 432:Core/Src/main.c ****   if (HAL_ADCEx_Calibration_Start(&hadc1) != HAL_OK) { next_state = STATE_ERROR; }
 549              		.loc 1 432 3 is_stmt 1 view .LVU179
 550              		.loc 1 432 7 is_stmt 0 view .LVU180
 551 0126 0A48     		ldr	r0, .L29+4
 552 0128 FFF7FEFF 		bl	HAL_ADCEx_Calibration_Start
 553              	.LVL26:
 554              		.loc 1 432 6 discriminator 1 view .LVU181
 555 012c 0028     		cmp	r0, #0
 556 012e 0BD1     		bne	.L28
 557              	.LVL27:
 558              	.L19:
 433:Core/Src/main.c **** 
 434:Core/Src/main.c ****   /* USER CODE END 2 */
 435:Core/Src/main.c **** 
 436:Core/Src/main.c ****   /* Initialize leds */
 437:Core/Src/main.c ****   BSP_LED_Init(LED_GREEN);
 559              		.loc 1 437 3 is_stmt 1 view .LVU182
 560 0130 0020     		movs	r0, #0
 561 0132 FFF7FEFF 		bl	BSP_LED_Init
 562              	.LVL28:
 438:Core/Src/main.c **** 
 439:Core/Src/main.c ****   /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
 440:Core/Src/main.c ****   BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 563              		.loc 1 440 3 view .LVU183
 564 0136 0121     		movs	r1, #1
 565 0138 0020     		movs	r0, #0
 566 013a FFF7FEFF 		bl	BSP_PB_Init
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s 			page 41


 567              	.LVL29:
 441:Core/Src/main.c **** 
 442:Core/Src/main.c ****   return next_state;
 568              		.loc 1 442 3 view .LVU184
 443:Core/Src/main.c **** }
 569              		.loc 1 443 1 is_stmt 0 view .LVU185
 570 013e 2000     		movs	r0, r4
 571 0140 11B0     		add	sp, sp, #68
 572              		@ sp needed
 573              	.LVL30:
 574              		.loc 1 443 1 view .LVU186
 575 0142 30BD     		pop	{r4, r5, pc}
 576              	.LVL31:
 577              	.L20:
 285:Core/Src/main.c **** 
 578              		.loc 1 285 42 discriminator 1 view .LVU187
 579 0144 0224     		movs	r4, #2
 580 0146 63E7     		b	.L12
 581              	.LVL32:
 582              	.L28:
 432:Core/Src/main.c **** 
 583              		.loc 1 432 67 discriminator 1 view .LVU188
 584 0148 0224     		movs	r4, #2
 585              	.LVL33:
 432:Core/Src/main.c **** 
 586              		.loc 1 432 67 discriminator 1 view .LVU189
 587 014a F1E7     		b	.L19
 588              	.L30:
 589              		.align	2
 590              	.L29:
 591 014c 00200240 		.word	1073881088
 592 0150 00000000 		.word	hadc1
 593 0154 00240140 		.word	1073816576
 594 0158 02000004 		.word	67108866
 595 015c 00000000 		.word	huart2
 596 0160 00440040 		.word	1073759232
 597 0164 00000000 		.word	htim14
 598 0168 00200040 		.word	1073750016
 599 016c 7FBB0000 		.word	47999
 600 0170 E7030000 		.word	999
 601              		.cfi_endproc
 602              	.LFE356:
 604              		.section	.text.do_WAIT_REQUEST,"ax",%progbits
 605              		.align	1
 606              		.global	do_WAIT_REQUEST
 607              		.syntax unified
 608              		.code	16
 609              		.thumb_func
 611              	do_WAIT_REQUEST:
 612              	.LFB357:
 444:Core/Src/main.c **** 
 445:Core/Src/main.c **** // Function to be executed in state WAIT_REQUEST
 446:Core/Src/main.c **** // valid return states: STATE_LISTENING, STATE_ERROR
 447:Core/Src/main.c **** state_t do_WAIT_REQUEST(void) 
 448:Core/Src/main.c **** {
 613              		.loc 1 448 1 is_stmt 1 view -0
 614              		.cfi_startproc
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s 			page 42


 615              		@ args = 0, pretend = 0, frame = 0
 616              		@ frame_needed = 0, uses_anonymous_args = 0
 617 0000 10B5     		push	{r4, lr}
 618              		.cfi_def_cfa_offset 8
 619              		.cfi_offset 4, -8
 620              		.cfi_offset 14, -4
 449:Core/Src/main.c ****   state_t next_state = NO_CHANGE;
 621              		.loc 1 449 3 view .LVU191
 622              	.LVL34:
 450:Core/Src/main.c ****   
 451:Core/Src/main.c ****   HAL_UART_Receive_IT(&huart2, &rx_byte, 1);
 623              		.loc 1 451 3 view .LVU192
 624 0002 0849     		ldr	r1, .L35
 625 0004 0848     		ldr	r0, .L35+4
 626 0006 0122     		movs	r2, #1
 627 0008 FFF7FEFF 		bl	HAL_UART_Receive_IT
 628              	.LVL35:
 452:Core/Src/main.c **** 
 453:Core/Src/main.c ****   if (BSP_PB_GetState(BUTTON_USER) == GPIO_PIN_RESET) 
 629              		.loc 1 453 3 view .LVU193
 630              		.loc 1 453 7 is_stmt 0 view .LVU194
 631 000c 0020     		movs	r0, #0
 632 000e FFF7FEFF 		bl	BSP_PB_GetState
 633              	.LVL36:
 634              		.loc 1 453 6 discriminator 1 view .LVU195
 635 0012 0028     		cmp	r0, #0
 636 0014 01D0     		beq	.L34
 449:Core/Src/main.c ****   
 637              		.loc 1 449 11 view .LVU196
 638 0016 0720     		movs	r0, #7
 639              	.LVL37:
 640              	.L32:
 454:Core/Src/main.c ****   {
 455:Core/Src/main.c ****     next_state = STATE_LISTENING;
 456:Core/Src/main.c ****     HAL_Delay(200);
 457:Core/Src/main.c ****   }
 458:Core/Src/main.c **** 
 459:Core/Src/main.c ****   return next_state;
 641              		.loc 1 459 3 is_stmt 1 view .LVU197
 460:Core/Src/main.c **** }
 642              		.loc 1 460 1 is_stmt 0 view .LVU198
 643              		@ sp needed
 644 0018 10BD     		pop	{r4, pc}
 645              	.LVL38:
 646              	.L34:
 455:Core/Src/main.c ****     HAL_Delay(200);
 647              		.loc 1 455 5 is_stmt 1 view .LVU199
 456:Core/Src/main.c ****   }
 648              		.loc 1 456 5 view .LVU200
 649 001a C830     		adds	r0, r0, #200
 650 001c FFF7FEFF 		bl	HAL_Delay
 651              	.LVL39:
 455:Core/Src/main.c ****     HAL_Delay(200);
 652              		.loc 1 455 16 is_stmt 0 view .LVU201
 653 0020 0320     		movs	r0, #3
 654 0022 F9E7     		b	.L32
 655              	.L36:
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s 			page 43


 656              		.align	2
 657              	.L35:
 658 0024 00000000 		.word	rx_byte
 659 0028 00000000 		.word	huart2
 660              		.cfi_endproc
 661              	.LFE357:
 663              		.section	.text.print,"ax",%progbits
 664              		.align	1
 665              		.global	print
 666              		.syntax unified
 667              		.code	16
 668              		.thumb_func
 670              	print:
 671              	.LVL40:
 672              	.LFB345:
 116:Core/Src/main.c ****   HAL_UART_Transmit_IT(&huart2, (uint8_t*)msg, strlen(msg));
 673              		.loc 1 116 1 is_stmt 1 view -0
 674              		.cfi_startproc
 675              		@ args = 0, pretend = 0, frame = 0
 676              		@ frame_needed = 0, uses_anonymous_args = 0
 116:Core/Src/main.c ****   HAL_UART_Transmit_IT(&huart2, (uint8_t*)msg, strlen(msg));
 677              		.loc 1 116 1 is_stmt 0 view .LVU203
 678 0000 10B5     		push	{r4, lr}
 679              		.cfi_def_cfa_offset 8
 680              		.cfi_offset 4, -8
 681              		.cfi_offset 14, -4
 682 0002 0400     		movs	r4, r0
 117:Core/Src/main.c **** }
 683              		.loc 1 117 3 is_stmt 1 view .LVU204
 117:Core/Src/main.c **** }
 684              		.loc 1 117 48 is_stmt 0 view .LVU205
 685 0004 FFF7FEFF 		bl	strlen
 686              	.LVL41:
 117:Core/Src/main.c **** }
 687              		.loc 1 117 3 discriminator 1 view .LVU206
 688 0008 82B2     		uxth	r2, r0
 689 000a 0248     		ldr	r0, .L38
 690 000c 2100     		movs	r1, r4
 691 000e FFF7FEFF 		bl	HAL_UART_Transmit_IT
 692              	.LVL42:
 118:Core/Src/main.c **** 
 693              		.loc 1 118 1 view .LVU207
 694              		@ sp needed
 695              	.LVL43:
 118:Core/Src/main.c **** 
 696              		.loc 1 118 1 view .LVU208
 697 0012 10BD     		pop	{r4, pc}
 698              	.L39:
 699              		.align	2
 700              	.L38:
 701 0014 00000000 		.word	huart2
 702              		.cfi_endproc
 703              	.LFE345:
 705              		.section	.text.map,"ax",%progbits
 706              		.align	1
 707              		.global	map
 708              		.syntax unified
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s 			page 44


 709              		.code	16
 710              		.thumb_func
 712              	map:
 713              	.LVL44:
 714              	.LFB346:
 121:Core/Src/main.c ****   // Preso da https://docs.arduino.cc/language-reference/en/functions/math/map/#appendix
 715              		.loc 1 121 1 is_stmt 1 view -0
 716              		.cfi_startproc
 717              		@ args = 4, pretend = 0, frame = 0
 718              		@ frame_needed = 0, uses_anonymous_args = 0
 121:Core/Src/main.c ****   // Preso da https://docs.arduino.cc/language-reference/en/functions/math/map/#appendix
 719              		.loc 1 121 1 is_stmt 0 view .LVU210
 720 0000 70B5     		push	{r4, r5, r6, lr}
 721              		.cfi_def_cfa_offset 16
 722              		.cfi_offset 4, -16
 723              		.cfi_offset 5, -12
 724              		.cfi_offset 6, -8
 725              		.cfi_offset 14, -4
 726 0002 1C00     		movs	r4, r3
 727 0004 04AB     		add	r3, sp, #16
 728              	.LVL45:
 121:Core/Src/main.c ****   // Preso da https://docs.arduino.cc/language-reference/en/functions/math/map/#appendix
 729              		.loc 1 121 1 view .LVU211
 730 0006 1B88     		ldrh	r3, [r3]
 731              	.LVL46:
 124:Core/Src/main.c **** }
 732              		.loc 1 124 3 is_stmt 1 view .LVU212
 124:Core/Src/main.c **** }
 733              		.loc 1 124 15 is_stmt 0 view .LVU213
 734 0008 451A     		subs	r5, r0, r1
 124:Core/Src/main.c **** }
 735              		.loc 1 124 36 view .LVU214
 736 000a 181B     		subs	r0, r3, r4
 737              	.LVL47:
 124:Core/Src/main.c **** }
 738              		.loc 1 124 25 view .LVU215
 739 000c 6843     		muls	r0, r5
 124:Core/Src/main.c **** }
 740              		.loc 1 124 57 view .LVU216
 741 000e 511A     		subs	r1, r2, r1
 742              	.LVL48:
 124:Core/Src/main.c **** }
 743              		.loc 1 124 47 view .LVU217
 744 0010 FFF7FEFF 		bl	__aeabi_idiv
 745              	.LVL49:
 124:Core/Src/main.c **** }
 746              		.loc 1 124 67 view .LVU218
 747 0014 2018     		adds	r0, r4, r0
 124:Core/Src/main.c **** }
 748              		.loc 1 124 67 discriminator 1 view .LVU219
 749 0016 80B2     		uxth	r0, r0
 125:Core/Src/main.c **** 
 750              		.loc 1 125 1 view .LVU220
 751              		@ sp needed
 752              	.LVL50:
 125:Core/Src/main.c **** 
 753              		.loc 1 125 1 view .LVU221
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s 			page 45


 754 0018 70BD     		pop	{r4, r5, r6, pc}
 755              		.cfi_endproc
 756              	.LFE346:
 758              		.section	.text.toMilliVolt,"ax",%progbits
 759              		.align	1
 760              		.global	toMilliVolt
 761              		.syntax unified
 762              		.code	16
 763              		.thumb_func
 765              	toMilliVolt:
 766              	.LVL51:
 767              	.LFB347:
 128:Core/Src/main.c ****   // Del tutto equivalente a map(val, 0, 4095, 0, 5000) ma usato per semplicità
 768              		.loc 1 128 1 is_stmt 1 view -0
 769              		.cfi_startproc
 770              		@ args = 0, pretend = 0, frame = 0
 771              		@ frame_needed = 0, uses_anonymous_args = 0
 128:Core/Src/main.c ****   // Del tutto equivalente a map(val, 0, 4095, 0, 5000) ma usato per semplicità
 772              		.loc 1 128 1 is_stmt 0 view .LVU223
 773 0000 10B5     		push	{r4, lr}
 774              		.cfi_def_cfa_offset 8
 775              		.cfi_offset 4, -8
 776              		.cfi_offset 14, -4
 131:Core/Src/main.c **** }
 777              		.loc 1 131 3 is_stmt 1 view .LVU224
 131:Core/Src/main.c **** }
 778              		.loc 1 131 15 is_stmt 0 view .LVU225
 779 0002 034B     		ldr	r3, .L42
 780 0004 5843     		muls	r0, r3
 781              	.LVL52:
 131:Core/Src/main.c **** }
 782              		.loc 1 131 23 view .LVU226
 783 0006 0349     		ldr	r1, .L42+4
 784 0008 FFF7FEFF 		bl	__aeabi_idiv
 785              	.LVL53:
 131:Core/Src/main.c **** }
 786              		.loc 1 131 23 discriminator 1 view .LVU227
 787 000c 80B2     		uxth	r0, r0
 132:Core/Src/main.c **** 
 788              		.loc 1 132 1 view .LVU228
 789              		@ sp needed
 790 000e 10BD     		pop	{r4, pc}
 791              	.L43:
 792              		.align	2
 793              	.L42:
 794 0010 88130000 		.word	5000
 795 0014 FF0F0000 		.word	4095
 796              		.cfi_endproc
 797              	.LFE347:
 799              		.section	.text.correct,"ax",%progbits
 800              		.align	1
 801              		.global	correct
 802              		.syntax unified
 803              		.code	16
 804              		.thumb_func
 806              	correct:
 807              	.LVL54:
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s 			page 46


 808              	.LFB348:
 135:Core/Src/main.c ****   if (val < 0) { return (uint16_t)0; }
 809              		.loc 1 135 1 is_stmt 1 view -0
 810              		.cfi_startproc
 811              		@ args = 0, pretend = 0, frame = 0
 812              		@ frame_needed = 0, uses_anonymous_args = 0
 813              		@ link register save eliminated.
 136:Core/Src/main.c ****   if (val > 5000) { return (uint16_t)5000; }
 814              		.loc 1 136 3 view .LVU230
 136:Core/Src/main.c ****   if (val > 5000) { return (uint16_t)5000; }
 815              		.loc 1 136 6 is_stmt 0 view .LVU231
 816 0000 0028     		cmp	r0, #0
 817 0002 04DB     		blt	.L46
 137:Core/Src/main.c ****   return val;
 818              		.loc 1 137 3 is_stmt 1 view .LVU232
 137:Core/Src/main.c ****   return val;
 819              		.loc 1 137 6 is_stmt 0 view .LVU233
 820 0004 044B     		ldr	r3, .L48
 821 0006 9842     		cmp	r0, r3
 822 0008 03DC     		bgt	.L47
 138:Core/Src/main.c **** }
 823              		.loc 1 138 3 is_stmt 1 view .LVU234
 138:Core/Src/main.c **** }
 824              		.loc 1 138 10 is_stmt 0 view .LVU235
 825 000a 80B2     		uxth	r0, r0
 826              	.LVL55:
 827              	.L45:
 139:Core/Src/main.c **** 
 828              		.loc 1 139 1 view .LVU236
 829              		@ sp needed
 830 000c 7047     		bx	lr
 831              	.LVL56:
 832              	.L46:
 136:Core/Src/main.c ****   if (val > 5000) { return (uint16_t)5000; }
 833              		.loc 1 136 25 discriminator 1 view .LVU237
 834 000e 0020     		movs	r0, #0
 835              	.LVL57:
 136:Core/Src/main.c ****   if (val > 5000) { return (uint16_t)5000; }
 836              		.loc 1 136 25 discriminator 1 view .LVU238
 837 0010 FCE7     		b	.L45
 838              	.LVL58:
 839              	.L47:
 137:Core/Src/main.c ****   return val;
 840              		.loc 1 137 28 discriminator 1 view .LVU239
 841 0012 0148     		ldr	r0, .L48
 842              	.LVL59:
 137:Core/Src/main.c ****   return val;
 843              		.loc 1 137 28 discriminator 1 view .LVU240
 844 0014 FAE7     		b	.L45
 845              	.L49:
 846 0016 C046     		.align	2
 847              	.L48:
 848 0018 88130000 		.word	5000
 849              		.cfi_endproc
 850              	.LFE348:
 852              		.section	.text.gaussian_noise_clt,"ax",%progbits
 853              		.align	1
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s 			page 47


 854              		.global	gaussian_noise_clt
 855              		.syntax unified
 856              		.code	16
 857              		.thumb_func
 859              	gaussian_noise_clt:
 860              	.LVL60:
 861              	.LFB349:
 142:Core/Src/main.c ****   float sum = .0f;
 862              		.loc 1 142 1 is_stmt 1 view -0
 863              		.cfi_startproc
 864              		@ args = 0, pretend = 0, frame = 0
 865              		@ frame_needed = 0, uses_anonymous_args = 0
 142:Core/Src/main.c ****   float sum = .0f;
 866              		.loc 1 142 1 is_stmt 0 view .LVU242
 867 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 868              		.cfi_def_cfa_offset 24
 869              		.cfi_offset 3, -24
 870              		.cfi_offset 4, -20
 871              		.cfi_offset 5, -16
 872              		.cfi_offset 6, -12
 873              		.cfi_offset 7, -8
 874              		.cfi_offset 14, -4
 875 0002 061C     		adds	r6, r0, #0
 876 0004 0F1C     		adds	r7, r1, #0
 143:Core/Src/main.c **** 
 877              		.loc 1 143 3 is_stmt 1 view .LVU243
 878              	.LVL61:
 145:Core/Src/main.c ****   {
 879              		.loc 1 145 3 view .LVU244
 880              	.LBB16:
 145:Core/Src/main.c ****   {
 881              		.loc 1 145 8 view .LVU245
 145:Core/Src/main.c ****   {
 882              		.loc 1 145 12 is_stmt 0 view .LVU246
 883 0006 0025     		movs	r5, #0
 884              	.LBE16:
 143:Core/Src/main.c **** 
 885              		.loc 1 143 9 view .LVU247
 886 0008 0024     		movs	r4, #0
 887              	.LBB17:
 145:Core/Src/main.c ****   {
 888              		.loc 1 145 3 view .LVU248
 889 000a 0DE0     		b	.L51
 890              	.LVL62:
 891              	.L52:
 147:Core/Src/main.c ****   }
 892              		.loc 1 147 5 is_stmt 1 view .LVU249
 147:Core/Src/main.c ****   }
 893              		.loc 1 147 20 is_stmt 0 view .LVU250
 894 000c FFF7FEFF 		bl	rand
 895              	.LVL63:
 147:Core/Src/main.c ****   }
 896              		.loc 1 147 13 discriminator 1 view .LVU251
 897 0010 FFF7FEFF 		bl	__aeabi_i2f
 898              	.LVL64:
 147:Core/Src/main.c ****   }
 899              		.loc 1 147 27 discriminator 1 view .LVU252
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s 			page 48


 900 0014 C021     		movs	r1, #192
 901 0016 8905     		lsls	r1, r1, #22
 902 0018 FFF7FEFF 		bl	__aeabi_fmul
 903              	.LVL65:
 904 001c 011C     		adds	r1, r0, #0
 147:Core/Src/main.c ****   }
 905              		.loc 1 147 9 discriminator 1 view .LVU253
 906 001e 201C     		adds	r0, r4, #0
 907 0020 FFF7FEFF 		bl	__aeabi_fadd
 908              	.LVL66:
 909 0024 041C     		adds	r4, r0, #0
 910              	.LVL67:
 145:Core/Src/main.c ****   {
 911              		.loc 1 145 27 is_stmt 1 discriminator 3 view .LVU254
 912 0026 0135     		adds	r5, r5, #1
 913              	.LVL68:
 914              	.L51:
 145:Core/Src/main.c ****   {
 915              		.loc 1 145 21 discriminator 1 view .LVU255
 916 0028 052D     		cmp	r5, #5
 917 002a EFDD     		ble	.L52
 918              	.LBE17:
 149:Core/Src/main.c **** 
 919              		.loc 1 149 3 view .LVU256
 149:Core/Src/main.c **** 
 920              		.loc 1 149 7 is_stmt 0 view .LVU257
 921 002c 0549     		ldr	r1, .L53
 922 002e 201C     		adds	r0, r4, #0
 923 0030 FFF7FEFF 		bl	__aeabi_fsub
 924              	.LVL69:
 151:Core/Src/main.c **** }
 925              		.loc 1 151 3 is_stmt 1 view .LVU258
 151:Core/Src/main.c **** }
 926              		.loc 1 151 24 is_stmt 0 view .LVU259
 927 0034 391C     		adds	r1, r7, #0
 928 0036 FFF7FEFF 		bl	__aeabi_fmul
 929              	.LVL70:
 151:Core/Src/main.c **** }
 930              		.loc 1 151 15 view .LVU260
 931 003a 311C     		adds	r1, r6, #0
 932 003c FFF7FEFF 		bl	__aeabi_fadd
 933              	.LVL71:
 152:Core/Src/main.c **** 
 934              		.loc 1 152 1 view .LVU261
 935              		@ sp needed
 936              	.LVL72:
 937              	.LVL73:
 938              	.LVL74:
 152:Core/Src/main.c **** 
 939              		.loc 1 152 1 view .LVU262
 940 0040 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 941              	.L54:
 942 0042 C046     		.align	2
 943              	.L53:
 944 0044 00004040 		.word	1077936128
 945              		.cfi_endproc
 946              	.LFE349:
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s 			page 49


 948              		.section	.rodata.do_LISTENING.str1.4,"aMS",%progbits,1
 949              		.align	2
 950              	.LC12:
 951 0000 25752C25 		.ascii	"%u,%u,%u\015\012\000"
 951      752C2575 
 951      0D0A00
 952              		.section	.text.do_LISTENING,"ax",%progbits
 953              		.align	1
 954              		.global	do_LISTENING
 955              		.syntax unified
 956              		.code	16
 957              		.thumb_func
 959              	do_LISTENING:
 960              	.LFB358:
 461:Core/Src/main.c **** 
 462:Core/Src/main.c **** // Function to be executed in state LISTENING
 463:Core/Src/main.c **** // valid return states: STATE_WARNING, STATE_ERROR, STATE_PAUSE
 464:Core/Src/main.c **** state_t do_LISTENING(void) 
 465:Core/Src/main.c **** {
 961              		.loc 1 465 1 is_stmt 1 view -0
 962              		.cfi_startproc
 963              		@ args = 0, pretend = 0, frame = 72
 964              		@ frame_needed = 0, uses_anonymous_args = 0
 965 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 966              		.cfi_def_cfa_offset 20
 967              		.cfi_offset 4, -20
 968              		.cfi_offset 5, -16
 969              		.cfi_offset 6, -12
 970              		.cfi_offset 7, -8
 971              		.cfi_offset 14, -4
 972 0002 DE46     		mov	lr, fp
 973 0004 5746     		mov	r7, r10
 974 0006 4E46     		mov	r6, r9
 975 0008 4546     		mov	r5, r8
 976 000a E0B5     		push	{r5, r6, r7, lr}
 977              		.cfi_def_cfa_offset 36
 978              		.cfi_offset 8, -36
 979              		.cfi_offset 9, -32
 980              		.cfi_offset 10, -28
 981              		.cfi_offset 11, -24
 982 000c 95B0     		sub	sp, sp, #84
 983              		.cfi_def_cfa_offset 120
 466:Core/Src/main.c ****   state_t next_state = NO_CHANGE;
 984              		.loc 1 466 3 view .LVU264
 985              	.LVL75:
 467:Core/Src/main.c **** 
 468:Core/Src/main.c ****   BSP_LED_On(LED_GREEN);
 986              		.loc 1 468 3 view .LVU265
 987 000e 0020     		movs	r0, #0
 988 0010 FFF7FEFF 		bl	BSP_LED_On
 989              	.LVL76:
 469:Core/Src/main.c ****   char msg[64];
 990              		.loc 1 469 3 view .LVU266
 470:Core/Src/main.c ****   uint16_t analog_val;
 991              		.loc 1 470 3 view .LVU267
 471:Core/Src/main.c ****   uint16_t analog_mv;
 992              		.loc 1 471 3 view .LVU268
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s 			page 50


 472:Core/Src/main.c ****   GPIO_PinState digital_val;
 993              		.loc 1 472 3 view .LVU269
 473:Core/Src/main.c ****   filter_out = 0;
 994              		.loc 1 473 3 view .LVU270
 995              		.loc 1 473 14 is_stmt 0 view .LVU271
 996 0014 4F4B     		ldr	r3, .L71
 997 0016 0022     		movs	r2, #0
 998 0018 1A80     		strh	r2, [r3]
 474:Core/Src/main.c **** 
 475:Core/Src/main.c ****   HAL_ADC_Start(&hadc1);
 999              		.loc 1 475 3 is_stmt 1 view .LVU272
 1000 001a 4F4C     		ldr	r4, .L71+4
 1001 001c 2000     		movs	r0, r4
 1002 001e FFF7FEFF 		bl	HAL_ADC_Start
 1003              	.LVL77:
 476:Core/Src/main.c ****   HAL_ADC_PollForConversion(&hadc1, 10);
 1004              		.loc 1 476 3 view .LVU273
 1005 0022 0A21     		movs	r1, #10
 1006 0024 2000     		movs	r0, r4
 1007 0026 FFF7FEFF 		bl	HAL_ADC_PollForConversion
 1008              	.LVL78:
 477:Core/Src/main.c ****   analog_val = HAL_ADC_GetValue(&hadc1);
 1009              		.loc 1 477 3 view .LVU274
 1010              		.loc 1 477 16 is_stmt 0 view .LVU275
 1011 002a 2000     		movs	r0, r4
 1012 002c FFF7FEFF 		bl	HAL_ADC_GetValue
 1013              	.LVL79:
 1014              		.loc 1 477 14 discriminator 1 view .LVU276
 1015 0030 80B2     		uxth	r0, r0
 1016              	.LVL80:
 478:Core/Src/main.c **** 
 479:Core/Src/main.c ****   analog_mv = toMilliVolt(analog_val);
 1017              		.loc 1 479 3 is_stmt 1 view .LVU277
 1018              		.loc 1 479 15 is_stmt 0 view .LVU278
 1019 0032 FFF7FEFF 		bl	toMilliVolt
 1020              	.LVL81:
 1021              		.loc 1 479 15 view .LVU279
 1022 0036 0400     		movs	r4, r0
 1023 0038 8046     		mov	r8, r0
 1024              	.LVL82:
 480:Core/Src/main.c ****   digital_val = HAL_GPIO_ReadPin(HALL_DIGITAL_GPIO_Port, HALL_DIGITAL_Pin);
 1025              		.loc 1 480 3 is_stmt 1 view .LVU280
 1026              		.loc 1 480 17 is_stmt 0 view .LVU281
 1027 003a A020     		movs	r0, #160
 1028 003c 0121     		movs	r1, #1
 1029 003e C005     		lsls	r0, r0, #23
 1030 0040 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1031              	.LVL83:
 1032 0044 0500     		movs	r5, r0
 1033 0046 0390     		str	r0, [sp, #12]
 1034              	.LVL84:
 481:Core/Src/main.c **** 
 482:Core/Src/main.c ****   if (selected_cmd & CMD_MOVING_AVG)
 1035              		.loc 1 482 3 is_stmt 1 view .LVU282
 1036              		.loc 1 482 20 is_stmt 0 view .LVU283
 1037 0048 444B     		ldr	r3, .L71+8
 1038 004a 1E78     		ldrb	r6, [r3]
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s 			page 51


 1039              		.loc 1 482 6 view .LVU284
 1040 004c F307     		lsls	r3, r6, #31
 1041 004e 1AD5     		bpl	.L56
 483:Core/Src/main.c ****   {
 484:Core/Src/main.c ****     sum += analog_mv - filter_buf[counter];
 1042              		.loc 1 484 5 is_stmt 1 view .LVU285
 1043              		.loc 1 484 34 is_stmt 0 view .LVU286
 1044 0050 434B     		ldr	r3, .L71+12
 1045 0052 9A46     		mov	r10, r3
 1046 0054 1F88     		ldrh	r7, [r3]
 1047 0056 434B     		ldr	r3, .L71+16
 1048 0058 7A00     		lsls	r2, r7, #1
 1049 005a 9346     		mov	fp, r2
 1050 005c 9946     		mov	r9, r3
 1051 005e D05A     		ldrh	r0, [r2, r3]
 1052              		.loc 1 484 22 view .LVU287
 1053 0060 201A     		subs	r0, r4, r0
 1054              		.loc 1 484 9 view .LVU288
 1055 0062 414B     		ldr	r3, .L71+20
 1056 0064 1A68     		ldr	r2, [r3]
 1057 0066 8018     		adds	r0, r0, r2
 1058 0068 1860     		str	r0, [r3]
 485:Core/Src/main.c ****     filter_out = sum / FILTER_LEN;
 1059              		.loc 1 485 5 is_stmt 1 view .LVU289
 1060              		.loc 1 485 22 is_stmt 0 view .LVU290
 1061 006a 9621     		movs	r1, #150
 1062 006c FFF7FEFF 		bl	__aeabi_uidiv
 1063              	.LVL85:
 1064              		.loc 1 485 16 view .LVU291
 1065 0070 384B     		ldr	r3, .L71
 1066 0072 1880     		strh	r0, [r3]
 486:Core/Src/main.c ****     filter_buf[counter] = analog_mv;
 1067              		.loc 1 486 5 is_stmt 1 view .LVU292
 1068              		.loc 1 486 25 is_stmt 0 view .LVU293
 1069 0074 4B46     		mov	r3, r9
 1070 0076 5A46     		mov	r2, fp
 1071 0078 D452     		strh	r4, [r2, r3]
 487:Core/Src/main.c ****     counter++;
 1072              		.loc 1 487 5 is_stmt 1 view .LVU294
 1073              		.loc 1 487 12 is_stmt 0 view .LVU295
 1074 007a 0137     		adds	r7, r7, #1
 1075 007c BFB2     		uxth	r7, r7
 1076 007e 5346     		mov	r3, r10
 1077 0080 1F80     		strh	r7, [r3]
 488:Core/Src/main.c ****     if (counter == FILTER_LEN) { counter = 0; }
 1078              		.loc 1 488 5 is_stmt 1 view .LVU296
 1079              		.loc 1 488 8 is_stmt 0 view .LVU297
 1080 0082 962F     		cmp	r7, #150
 1081 0084 2AD0     		beq	.L66
 1082              	.L56:
 489:Core/Src/main.c ****   }
 490:Core/Src/main.c **** 
 491:Core/Src/main.c ****   if (selected_cmd & CMD_RAND_NOISE)
 1083              		.loc 1 491 3 is_stmt 1 view .LVU298
 1084              		.loc 1 491 6 is_stmt 0 view .LVU299
 1085 0086 B607     		lsls	r6, r6, #30
 1086 0088 2BD4     		bmi	.L67
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s 			page 52


 1087              	.LVL86:
 1088              	.L57:
 492:Core/Src/main.c ****   {
 493:Core/Src/main.c ****     analog_mv = (analog_mv + gaussian_noise_clt(0.0, 100));
 494:Core/Src/main.c ****   }
 495:Core/Src/main.c **** 
 496:Core/Src/main.c ****   if (selected_cmd == CMD_RAW)
 1089              		.loc 1 496 3 is_stmt 1 view .LVU300
 1090              		.loc 1 496 20 is_stmt 0 view .LVU301
 1091 008a 344B     		ldr	r3, .L71+8
 1092 008c 1B78     		ldrb	r3, [r3]
 1093              		.loc 1 496 6 view .LVU302
 1094 008e 002B     		cmp	r3, #0
 1095 0090 02D1     		bne	.L58
 497:Core/Src/main.c ****   {
 498:Core/Src/main.c ****     filter_out = 0;
 1096              		.loc 1 498 5 is_stmt 1 view .LVU303
 1097              		.loc 1 498 16 is_stmt 0 view .LVU304
 1098 0092 304B     		ldr	r3, .L71
 1099 0094 0022     		movs	r2, #0
 1100 0096 1A80     		strh	r2, [r3]
 1101              	.L58:
 499:Core/Src/main.c ****   }
 500:Core/Src/main.c **** 
 501:Core/Src/main.c ****   snprintf(msg, sizeof(msg), "%u,%u,%u\r\n", analog_mv, filter_out, digital_val);
 1102              		.loc 1 501 3 is_stmt 1 view .LVU305
 1103 0098 344A     		ldr	r2, .L71+24
 1104 009a 04AC     		add	r4, sp, #16
 1105 009c 0195     		str	r5, [sp, #4]
 1106 009e 2D4B     		ldr	r3, .L71
 1107 00a0 1B88     		ldrh	r3, [r3]
 1108 00a2 0093     		str	r3, [sp]
 1109 00a4 4346     		mov	r3, r8
 1110 00a6 4021     		movs	r1, #64
 1111 00a8 2000     		movs	r0, r4
 1112 00aa FFF7FEFF 		bl	snprintf
 1113              	.LVL87:
 502:Core/Src/main.c ****   print(msg);
 1114              		.loc 1 502 3 view .LVU306
 1115 00ae 2000     		movs	r0, r4
 1116 00b0 FFF7FEFF 		bl	print
 1117              	.LVL88:
 503:Core/Src/main.c **** 
 504:Core/Src/main.c ****   if (digital_val == GPIO_PIN_SET)
 1118              		.loc 1 504 3 view .LVU307
 1119              		.loc 1 504 6 is_stmt 0 view .LVU308
 1120 00b4 039B     		ldr	r3, [sp, #12]
 1121 00b6 012B     		cmp	r3, #1
 1122 00b8 24D0     		beq	.L68
 505:Core/Src/main.c ****   {
 506:Core/Src/main.c ****     if (hall_high_time == 0)
 507:Core/Src/main.c ****     {
 508:Core/Src/main.c ****       hall_high_time = HAL_GetTick();
 509:Core/Src/main.c ****     }
 510:Core/Src/main.c ****     else if (HAL_GetTick() - hall_high_time >= 5000)
 511:Core/Src/main.c ****     {
 512:Core/Src/main.c ****       HAL_ADC_Stop(&hadc1);
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s 			page 53


 513:Core/Src/main.c ****       next_state = STATE_WARNING;
 514:Core/Src/main.c ****       hall_high_time = 0;
 515:Core/Src/main.c ****     }
 516:Core/Src/main.c ****   }
 517:Core/Src/main.c ****   else { hall_high_time = 0; }
 1123              		.loc 1 517 10 is_stmt 1 view .LVU309
 1124              		.loc 1 517 25 is_stmt 0 view .LVU310
 1125 00ba 2D4B     		ldr	r3, .L71+28
 1126 00bc 0022     		movs	r2, #0
 1127 00be 1A60     		str	r2, [r3]
 466:Core/Src/main.c **** 
 1128              		.loc 1 466 11 view .LVU311
 1129 00c0 0724     		movs	r4, #7
 1130              	.LVL89:
 1131              	.L61:
 518:Core/Src/main.c **** 
 519:Core/Src/main.c ****   if (BSP_PB_GetState(BUTTON_USER) == GPIO_PIN_RESET) 
 1132              		.loc 1 519 3 is_stmt 1 view .LVU312
 1133              		.loc 1 519 7 is_stmt 0 view .LVU313
 1134 00c2 0020     		movs	r0, #0
 1135 00c4 FFF7FEFF 		bl	BSP_PB_GetState
 1136              	.LVL90:
 1137              		.loc 1 519 6 discriminator 1 view .LVU314
 1138 00c8 0028     		cmp	r0, #0
 1139 00ca 37D0     		beq	.L69
 1140              	.LVL91:
 1141              	.L62:
 520:Core/Src/main.c ****   {
 521:Core/Src/main.c ****     HAL_ADC_Stop(&hadc1);
 522:Core/Src/main.c ****     BSP_LED_Off(LED_GREEN);
 523:Core/Src/main.c ****     next_state = STATE_PAUSE;
 524:Core/Src/main.c ****     HAL_Delay(200);
 525:Core/Src/main.c ****   }
 526:Core/Src/main.c ****  
 527:Core/Src/main.c ****   return next_state;
 1142              		.loc 1 527 3 is_stmt 1 view .LVU315
 528:Core/Src/main.c **** }
 1143              		.loc 1 528 1 is_stmt 0 view .LVU316
 1144 00cc 2000     		movs	r0, r4
 1145 00ce 15B0     		add	sp, sp, #84
 1146              		@ sp needed
 1147              	.LVL92:
 1148              	.LVL93:
 1149              	.LVL94:
 1150              		.loc 1 528 1 view .LVU317
 1151 00d0 F0BC     		pop	{r4, r5, r6, r7}
 1152 00d2 BB46     		mov	fp, r7
 1153 00d4 B246     		mov	r10, r6
 1154 00d6 A946     		mov	r9, r5
 1155 00d8 A046     		mov	r8, r4
 1156 00da F0BD     		pop	{r4, r5, r6, r7, pc}
 1157              	.LVL95:
 1158              	.L66:
 488:Core/Src/main.c ****   }
 1159              		.loc 1 488 34 is_stmt 1 discriminator 1 view .LVU318
 488:Core/Src/main.c ****   }
 1160              		.loc 1 488 42 is_stmt 0 discriminator 1 view .LVU319
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s 			page 54


 1161 00dc 0022     		movs	r2, #0
 1162 00de 1A80     		strh	r2, [r3]
 1163 00e0 D1E7     		b	.L56
 1164              	.L67:
 493:Core/Src/main.c ****   }
 1165              		.loc 1 493 5 is_stmt 1 view .LVU320
 493:Core/Src/main.c ****   }
 1166              		.loc 1 493 28 is_stmt 0 view .LVU321
 1167 00e2 2000     		movs	r0, r4
 1168 00e4 FFF7FEFF 		bl	__aeabi_i2f
 1169              	.LVL96:
 1170 00e8 041C     		adds	r4, r0, #0
 1171              	.LVL97:
 493:Core/Src/main.c ****   }
 1172              		.loc 1 493 30 view .LVU322
 1173 00ea 2249     		ldr	r1, .L71+32
 1174 00ec 0020     		movs	r0, #0
 1175 00ee FFF7FEFF 		bl	gaussian_noise_clt
 1176              	.LVL98:
 1177 00f2 011C     		adds	r1, r0, #0
 493:Core/Src/main.c ****   }
 1178              		.loc 1 493 28 discriminator 1 view .LVU323
 1179 00f4 201C     		adds	r0, r4, #0
 1180 00f6 FFF7FEFF 		bl	__aeabi_fadd
 1181              	.LVL99:
 493:Core/Src/main.c ****   }
 1182              		.loc 1 493 15 discriminator 1 view .LVU324
 1183 00fa FFF7FEFF 		bl	__aeabi_f2uiz
 1184              	.LVL100:
 1185 00fe 83B2     		uxth	r3, r0
 1186 0100 9846     		mov	r8, r3
 1187 0102 C2E7     		b	.L57
 1188              	.LVL101:
 1189              	.L68:
 506:Core/Src/main.c ****     {
 1190              		.loc 1 506 5 is_stmt 1 view .LVU325
 506:Core/Src/main.c ****     {
 1191              		.loc 1 506 24 is_stmt 0 view .LVU326
 1192 0104 1A4B     		ldr	r3, .L71+28
 1193 0106 1B68     		ldr	r3, [r3]
 506:Core/Src/main.c ****     {
 1194              		.loc 1 506 8 view .LVU327
 1195 0108 002B     		cmp	r3, #0
 1196 010a 05D1     		bne	.L60
 508:Core/Src/main.c ****     }
 1197              		.loc 1 508 7 is_stmt 1 view .LVU328
 508:Core/Src/main.c ****     }
 1198              		.loc 1 508 24 is_stmt 0 view .LVU329
 1199 010c FFF7FEFF 		bl	HAL_GetTick
 1200              	.LVL102:
 508:Core/Src/main.c ****     }
 1201              		.loc 1 508 22 discriminator 1 view .LVU330
 1202 0110 174B     		ldr	r3, .L71+28
 1203 0112 1860     		str	r0, [r3]
 466:Core/Src/main.c **** 
 1204              		.loc 1 466 11 view .LVU331
 1205 0114 0724     		movs	r4, #7
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s 			page 55


 1206 0116 D4E7     		b	.L61
 1207              	.L60:
 510:Core/Src/main.c ****     {
 1208              		.loc 1 510 10 is_stmt 1 view .LVU332
 510:Core/Src/main.c ****     {
 1209              		.loc 1 510 14 is_stmt 0 view .LVU333
 1210 0118 FFF7FEFF 		bl	HAL_GetTick
 1211              	.LVL103:
 510:Core/Src/main.c ****     {
 1212              		.loc 1 510 28 discriminator 1 view .LVU334
 1213 011c 144B     		ldr	r3, .L71+28
 1214 011e 1B68     		ldr	r3, [r3]
 1215 0120 C01A     		subs	r0, r0, r3
 510:Core/Src/main.c ****     {
 1216              		.loc 1 510 13 discriminator 1 view .LVU335
 1217 0122 154B     		ldr	r3, .L71+36
 1218 0124 9842     		cmp	r0, r3
 1219 0126 01D8     		bhi	.L70
 466:Core/Src/main.c **** 
 1220              		.loc 1 466 11 view .LVU336
 1221 0128 0724     		movs	r4, #7
 1222 012a CAE7     		b	.L61
 1223              	.L70:
 512:Core/Src/main.c ****       next_state = STATE_WARNING;
 1224              		.loc 1 512 7 is_stmt 1 view .LVU337
 1225 012c 0A48     		ldr	r0, .L71+4
 1226 012e FFF7FEFF 		bl	HAL_ADC_Stop
 1227              	.LVL104:
 513:Core/Src/main.c ****       hall_high_time = 0;
 1228              		.loc 1 513 7 view .LVU338
 514:Core/Src/main.c ****     }
 1229              		.loc 1 514 7 view .LVU339
 514:Core/Src/main.c ****     }
 1230              		.loc 1 514 22 is_stmt 0 view .LVU340
 1231 0132 0F4B     		ldr	r3, .L71+28
 1232 0134 0022     		movs	r2, #0
 1233 0136 1A60     		str	r2, [r3]
 513:Core/Src/main.c ****       hall_high_time = 0;
 1234              		.loc 1 513 18 view .LVU341
 1235 0138 0424     		movs	r4, #4
 1236 013a C2E7     		b	.L61
 1237              	.LVL105:
 1238              	.L69:
 521:Core/Src/main.c ****     BSP_LED_Off(LED_GREEN);
 1239              		.loc 1 521 5 is_stmt 1 view .LVU342
 1240 013c 0648     		ldr	r0, .L71+4
 1241 013e FFF7FEFF 		bl	HAL_ADC_Stop
 1242              	.LVL106:
 522:Core/Src/main.c ****     next_state = STATE_PAUSE;
 1243              		.loc 1 522 5 view .LVU343
 1244 0142 0020     		movs	r0, #0
 1245 0144 FFF7FEFF 		bl	BSP_LED_Off
 1246              	.LVL107:
 523:Core/Src/main.c ****     HAL_Delay(200);
 1247              		.loc 1 523 5 view .LVU344
 524:Core/Src/main.c ****   }
 1248              		.loc 1 524 5 view .LVU345
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s 			page 56


 1249 0148 C820     		movs	r0, #200
 1250 014a FFF7FEFF 		bl	HAL_Delay
 1251              	.LVL108:
 523:Core/Src/main.c ****     HAL_Delay(200);
 1252              		.loc 1 523 16 is_stmt 0 view .LVU346
 1253 014e 0524     		movs	r4, #5
 1254 0150 BCE7     		b	.L62
 1255              	.L72:
 1256 0152 C046     		.align	2
 1257              	.L71:
 1258 0154 00000000 		.word	filter_out
 1259 0158 00000000 		.word	hadc1
 1260 015c 00000000 		.word	selected_cmd
 1261 0160 00000000 		.word	counter
 1262 0164 00000000 		.word	filter_buf
 1263 0168 00000000 		.word	sum
 1264 016c 00000000 		.word	.LC12
 1265 0170 00000000 		.word	hall_high_time
 1266 0174 0000C842 		.word	1120403456
 1267 0178 87130000 		.word	4999
 1268              		.cfi_endproc
 1269              	.LFE358:
 1271              		.section	.text.start_timer,"ax",%progbits
 1272              		.align	1
 1273              		.global	start_timer
 1274              		.syntax unified
 1275              		.code	16
 1276              		.thumb_func
 1278              	start_timer:
 1279              	.LVL109:
 1280              	.LFB350:
 155:Core/Src/main.c ****   uint32_t period = ms - 1;
 1281              		.loc 1 155 1 is_stmt 1 view -0
 1282              		.cfi_startproc
 1283              		@ args = 0, pretend = 0, frame = 0
 1284              		@ frame_needed = 0, uses_anonymous_args = 0
 155:Core/Src/main.c ****   uint32_t period = ms - 1;
 1285              		.loc 1 155 1 is_stmt 0 view .LVU348
 1286 0000 10B5     		push	{r4, lr}
 1287              		.cfi_def_cfa_offset 8
 1288              		.cfi_offset 4, -8
 1289              		.cfi_offset 14, -4
 156:Core/Src/main.c ****   __HAL_TIM_SET_AUTORELOAD(&htim14, period);
 1290              		.loc 1 156 3 is_stmt 1 view .LVU349
 156:Core/Src/main.c ****   __HAL_TIM_SET_AUTORELOAD(&htim14, period);
 1291              		.loc 1 156 12 is_stmt 0 view .LVU350
 1292 0002 431E     		subs	r3, r0, #1
 1293              	.LVL110:
 157:Core/Src/main.c ****   HAL_TIM_Base_Start_IT(&htim14);
 1294              		.loc 1 157 3 is_stmt 1 view .LVU351
 157:Core/Src/main.c ****   HAL_TIM_Base_Start_IT(&htim14);
 1295              		.loc 1 157 3 view .LVU352
 1296 0004 0348     		ldr	r0, .L74
 1297              	.LVL111:
 157:Core/Src/main.c ****   HAL_TIM_Base_Start_IT(&htim14);
 1298              		.loc 1 157 3 is_stmt 0 view .LVU353
 1299 0006 0268     		ldr	r2, [r0]
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s 			page 57


 1300 0008 D362     		str	r3, [r2, #44]
 157:Core/Src/main.c ****   HAL_TIM_Base_Start_IT(&htim14);
 1301              		.loc 1 157 3 is_stmt 1 view .LVU354
 1302 000a C360     		str	r3, [r0, #12]
 157:Core/Src/main.c ****   HAL_TIM_Base_Start_IT(&htim14);
 1303              		.loc 1 157 3 view .LVU355
 158:Core/Src/main.c **** }
 1304              		.loc 1 158 3 view .LVU356
 1305 000c FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 1306              	.LVL112:
 159:Core/Src/main.c **** 
 1307              		.loc 1 159 1 is_stmt 0 view .LVU357
 1308              		@ sp needed
 1309 0010 10BD     		pop	{r4, pc}
 1310              	.L75:
 1311 0012 C046     		.align	2
 1312              	.L74:
 1313 0014 00000000 		.word	htim14
 1314              		.cfi_endproc
 1315              	.LFE350:
 1317              		.section	.rodata.do_ERROR.str1.4,"aMS",%progbits,1
 1318              		.align	2
 1319              	.LC16:
 1320 0000 4552524F 		.ascii	"ERROR\015\012\000"
 1320      520D0A00 
 1321              		.section	.text.do_ERROR,"ax",%progbits
 1322              		.align	1
 1323              		.global	do_ERROR
 1324              		.syntax unified
 1325              		.code	16
 1326              		.thumb_func
 1328              	do_ERROR:
 1329              	.LFB361:
 529:Core/Src/main.c **** 
 530:Core/Src/main.c **** // Function to be executed in state PAUSE
 531:Core/Src/main.c **** // valid return states: STATE_LISTENING, STATE_ERROR
 532:Core/Src/main.c **** state_t do_PAUSE(void) 
 533:Core/Src/main.c **** {
 534:Core/Src/main.c ****   state_t next_state = NO_CHANGE;
 535:Core/Src/main.c ****   hall_high_time = 0;
 536:Core/Src/main.c ****   
 537:Core/Src/main.c ****   start_timer(1000);
 538:Core/Src/main.c **** 
 539:Core/Src/main.c ****   HAL_UART_Receive_IT(&huart2, &rx_byte, 1);
 540:Core/Src/main.c **** 
 541:Core/Src/main.c ****   if (BSP_PB_GetState(BUTTON_USER) == GPIO_PIN_RESET)
 542:Core/Src/main.c ****   {
 543:Core/Src/main.c ****     stop_timer();
 544:Core/Src/main.c ****     next_state = STATE_LISTENING;
 545:Core/Src/main.c ****     HAL_Delay(200);
 546:Core/Src/main.c ****   }
 547:Core/Src/main.c **** 
 548:Core/Src/main.c ****   return next_state;
 549:Core/Src/main.c **** }
 550:Core/Src/main.c **** 
 551:Core/Src/main.c **** // Function to be executed in state WARNING
 552:Core/Src/main.c **** // valid return states: STATE_WAIT_REQUEST, STATE_ERROR
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s 			page 58


 553:Core/Src/main.c **** state_t do_WARNING(void) 
 554:Core/Src/main.c **** {
 555:Core/Src/main.c ****   state_t next_state = NO_CHANGE;
 556:Core/Src/main.c ****   
 557:Core/Src/main.c ****   stop_timer();
 558:Core/Src/main.c ****   BSP_LED_Off(LED_GREEN);
 559:Core/Src/main.c ****   print("WARNING\r\n");
 560:Core/Src/main.c **** 
 561:Core/Src/main.c ****   if (BSP_PB_GetState(BUTTON_USER) == GPIO_PIN_RESET) 
 562:Core/Src/main.c ****   {
 563:Core/Src/main.c ****     next_state = STATE_WAIT_REQUEST;
 564:Core/Src/main.c ****     HAL_Delay(200);
 565:Core/Src/main.c ****   }
 566:Core/Src/main.c **** 
 567:Core/Src/main.c ****   return next_state;
 568:Core/Src/main.c **** }
 569:Core/Src/main.c **** 
 570:Core/Src/main.c **** // Function to be executed in state ERROR
 571:Core/Src/main.c **** // valid return states: NO_CHANGE
 572:Core/Src/main.c **** state_t do_ERROR(void) 
 573:Core/Src/main.c **** {
 1330              		.loc 1 573 1 is_stmt 1 view -0
 1331              		.cfi_startproc
 1332              		@ args = 0, pretend = 0, frame = 0
 1333              		@ frame_needed = 0, uses_anonymous_args = 0
 1334 0000 10B5     		push	{r4, lr}
 1335              		.cfi_def_cfa_offset 8
 1336              		.cfi_offset 4, -8
 1337              		.cfi_offset 14, -4
 574:Core/Src/main.c ****   state_t next_state = NO_CHANGE;
 1338              		.loc 1 574 3 view .LVU359
 1339              	.LVL113:
 575:Core/Src/main.c **** 
 576:Core/Src/main.c ****   start_timer(200);
 1340              		.loc 1 576 3 view .LVU360
 1341 0002 C820     		movs	r0, #200
 1342 0004 FFF7FEFF 		bl	start_timer
 1343              	.LVL114:
 577:Core/Src/main.c ****   print("ERROR\r\n");
 1344              		.loc 1 577 3 view .LVU361
 1345 0008 0748     		ldr	r0, .L79
 1346 000a FFF7FEFF 		bl	print
 1347              	.LVL115:
 578:Core/Src/main.c ****   
 579:Core/Src/main.c ****   if (BSP_PB_GetState(BUTTON_USER) == GPIO_PIN_RESET) 
 1348              		.loc 1 579 3 view .LVU362
 1349              		.loc 1 579 7 is_stmt 0 view .LVU363
 1350 000e 0020     		movs	r0, #0
 1351 0010 FFF7FEFF 		bl	BSP_PB_GetState
 1352              	.LVL116:
 1353              		.loc 1 579 6 discriminator 1 view .LVU364
 1354 0014 0028     		cmp	r0, #0
 1355 0016 01D0     		beq	.L78
 580:Core/Src/main.c ****   {
 581:Core/Src/main.c ****     HAL_Delay(200);
 582:Core/Src/main.c ****     NVIC_SystemReset();
 583:Core/Src/main.c ****   }
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s 			page 59


 584:Core/Src/main.c **** 
 585:Core/Src/main.c ****   return next_state;
 1356              		.loc 1 585 3 is_stmt 1 view .LVU365
 586:Core/Src/main.c **** }
 1357              		.loc 1 586 1 is_stmt 0 view .LVU366
 1358 0018 0720     		movs	r0, #7
 1359              		@ sp needed
 1360 001a 10BD     		pop	{r4, pc}
 1361              	.L78:
 581:Core/Src/main.c ****     NVIC_SystemReset();
 1362              		.loc 1 581 5 is_stmt 1 view .LVU367
 1363 001c C830     		adds	r0, r0, #200
 1364 001e FFF7FEFF 		bl	HAL_Delay
 1365              	.LVL117:
 582:Core/Src/main.c ****   }
 1366              		.loc 1 582 5 view .LVU368
 1367 0022 FFF7FEFF 		bl	__NVIC_SystemReset
 1368              	.LVL118:
 1369              	.L80:
 1370 0026 C046     		.align	2
 1371              	.L79:
 1372 0028 00000000 		.word	.LC16
 1373              		.cfi_endproc
 1374              	.LFE361:
 1376              		.section	.text.stop_timer,"ax",%progbits
 1377              		.align	1
 1378              		.global	stop_timer
 1379              		.syntax unified
 1380              		.code	16
 1381              		.thumb_func
 1383              	stop_timer:
 1384              	.LFB351:
 162:Core/Src/main.c ****   HAL_TIM_Base_Stop_IT(&htim14);
 1385              		.loc 1 162 1 view -0
 1386              		.cfi_startproc
 1387              		@ args = 0, pretend = 0, frame = 0
 1388              		@ frame_needed = 0, uses_anonymous_args = 0
 1389 0000 10B5     		push	{r4, lr}
 1390              		.cfi_def_cfa_offset 8
 1391              		.cfi_offset 4, -8
 1392              		.cfi_offset 14, -4
 163:Core/Src/main.c **** }
 1393              		.loc 1 163 3 view .LVU370
 1394 0002 0248     		ldr	r0, .L82
 1395 0004 FFF7FEFF 		bl	HAL_TIM_Base_Stop_IT
 1396              	.LVL119:
 164:Core/Src/main.c **** 
 1397              		.loc 1 164 1 is_stmt 0 view .LVU371
 1398              		@ sp needed
 1399 0008 10BD     		pop	{r4, pc}
 1400              	.L83:
 1401 000a C046     		.align	2
 1402              	.L82:
 1403 000c 00000000 		.word	htim14
 1404              		.cfi_endproc
 1405              	.LFE351:
 1407              		.section	.text.do_PAUSE,"ax",%progbits
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s 			page 60


 1408              		.align	1
 1409              		.global	do_PAUSE
 1410              		.syntax unified
 1411              		.code	16
 1412              		.thumb_func
 1414              	do_PAUSE:
 1415              	.LFB359:
 533:Core/Src/main.c ****   state_t next_state = NO_CHANGE;
 1416              		.loc 1 533 1 is_stmt 1 view -0
 1417              		.cfi_startproc
 1418              		@ args = 0, pretend = 0, frame = 0
 1419              		@ frame_needed = 0, uses_anonymous_args = 0
 1420 0000 10B5     		push	{r4, lr}
 1421              		.cfi_def_cfa_offset 8
 1422              		.cfi_offset 4, -8
 1423              		.cfi_offset 14, -4
 534:Core/Src/main.c ****   hall_high_time = 0;
 1424              		.loc 1 534 3 view .LVU373
 1425              	.LVL120:
 535:Core/Src/main.c ****   
 1426              		.loc 1 535 3 view .LVU374
 535:Core/Src/main.c ****   
 1427              		.loc 1 535 18 is_stmt 0 view .LVU375
 1428 0002 0D4B     		ldr	r3, .L88
 1429 0004 0022     		movs	r2, #0
 1430 0006 1A60     		str	r2, [r3]
 537:Core/Src/main.c **** 
 1431              		.loc 1 537 3 is_stmt 1 view .LVU376
 1432 0008 FA20     		movs	r0, #250
 1433 000a 8000     		lsls	r0, r0, #2
 1434 000c FFF7FEFF 		bl	start_timer
 1435              	.LVL121:
 539:Core/Src/main.c **** 
 1436              		.loc 1 539 3 view .LVU377
 1437 0010 0A49     		ldr	r1, .L88+4
 1438 0012 0B48     		ldr	r0, .L88+8
 1439 0014 0122     		movs	r2, #1
 1440 0016 FFF7FEFF 		bl	HAL_UART_Receive_IT
 1441              	.LVL122:
 541:Core/Src/main.c ****   {
 1442              		.loc 1 541 3 view .LVU378
 541:Core/Src/main.c ****   {
 1443              		.loc 1 541 7 is_stmt 0 view .LVU379
 1444 001a 0020     		movs	r0, #0
 1445 001c FFF7FEFF 		bl	BSP_PB_GetState
 1446              	.LVL123:
 541:Core/Src/main.c ****   {
 1447              		.loc 1 541 6 discriminator 1 view .LVU380
 1448 0020 0028     		cmp	r0, #0
 1449 0022 01D0     		beq	.L87
 534:Core/Src/main.c ****   hall_high_time = 0;
 1450              		.loc 1 534 11 view .LVU381
 1451 0024 0720     		movs	r0, #7
 1452              	.LVL124:
 1453              	.L85:
 548:Core/Src/main.c **** }
 1454              		.loc 1 548 3 is_stmt 1 view .LVU382
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s 			page 61


 549:Core/Src/main.c **** 
 1455              		.loc 1 549 1 is_stmt 0 view .LVU383
 1456              		@ sp needed
 1457 0026 10BD     		pop	{r4, pc}
 1458              	.LVL125:
 1459              	.L87:
 543:Core/Src/main.c ****     next_state = STATE_LISTENING;
 1460              		.loc 1 543 5 is_stmt 1 view .LVU384
 1461 0028 FFF7FEFF 		bl	stop_timer
 1462              	.LVL126:
 544:Core/Src/main.c ****     HAL_Delay(200);
 1463              		.loc 1 544 5 view .LVU385
 545:Core/Src/main.c ****   }
 1464              		.loc 1 545 5 view .LVU386
 1465 002c C820     		movs	r0, #200
 1466 002e FFF7FEFF 		bl	HAL_Delay
 1467              	.LVL127:
 544:Core/Src/main.c ****     HAL_Delay(200);
 1468              		.loc 1 544 16 is_stmt 0 view .LVU387
 1469 0032 0320     		movs	r0, #3
 1470 0034 F7E7     		b	.L85
 1471              	.L89:
 1472 0036 C046     		.align	2
 1473              	.L88:
 1474 0038 00000000 		.word	hall_high_time
 1475 003c 00000000 		.word	rx_byte
 1476 0040 00000000 		.word	huart2
 1477              		.cfi_endproc
 1478              	.LFE359:
 1480              		.section	.rodata.do_WARNING.str1.4,"aMS",%progbits,1
 1481              		.align	2
 1482              	.LC22:
 1483 0000 5741524E 		.ascii	"WARNING\015\012\000"
 1483      494E470D 
 1483      0A00
 1484              		.section	.text.do_WARNING,"ax",%progbits
 1485              		.align	1
 1486              		.global	do_WARNING
 1487              		.syntax unified
 1488              		.code	16
 1489              		.thumb_func
 1491              	do_WARNING:
 1492              	.LFB360:
 554:Core/Src/main.c ****   state_t next_state = NO_CHANGE;
 1493              		.loc 1 554 1 is_stmt 1 view -0
 1494              		.cfi_startproc
 1495              		@ args = 0, pretend = 0, frame = 0
 1496              		@ frame_needed = 0, uses_anonymous_args = 0
 1497 0000 10B5     		push	{r4, lr}
 1498              		.cfi_def_cfa_offset 8
 1499              		.cfi_offset 4, -8
 1500              		.cfi_offset 14, -4
 555:Core/Src/main.c ****   
 1501              		.loc 1 555 3 view .LVU389
 1502              	.LVL128:
 557:Core/Src/main.c ****   BSP_LED_Off(LED_GREEN);
 1503              		.loc 1 557 3 view .LVU390
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s 			page 62


 1504 0002 FFF7FEFF 		bl	stop_timer
 1505              	.LVL129:
 558:Core/Src/main.c ****   print("WARNING\r\n");
 1506              		.loc 1 558 3 view .LVU391
 1507 0006 0020     		movs	r0, #0
 1508 0008 FFF7FEFF 		bl	BSP_LED_Off
 1509              	.LVL130:
 559:Core/Src/main.c **** 
 1510              		.loc 1 559 3 view .LVU392
 1511 000c 0748     		ldr	r0, .L94
 1512 000e FFF7FEFF 		bl	print
 1513              	.LVL131:
 561:Core/Src/main.c ****   {
 1514              		.loc 1 561 3 view .LVU393
 561:Core/Src/main.c ****   {
 1515              		.loc 1 561 7 is_stmt 0 view .LVU394
 1516 0012 0020     		movs	r0, #0
 1517 0014 FFF7FEFF 		bl	BSP_PB_GetState
 1518              	.LVL132:
 561:Core/Src/main.c ****   {
 1519              		.loc 1 561 6 discriminator 1 view .LVU395
 1520 0018 0028     		cmp	r0, #0
 1521 001a 01D0     		beq	.L93
 555:Core/Src/main.c ****   
 1522              		.loc 1 555 11 view .LVU396
 1523 001c 0720     		movs	r0, #7
 1524              	.LVL133:
 1525              	.L91:
 567:Core/Src/main.c **** }
 1526              		.loc 1 567 3 is_stmt 1 view .LVU397
 568:Core/Src/main.c **** 
 1527              		.loc 1 568 1 is_stmt 0 view .LVU398
 1528              		@ sp needed
 1529 001e 10BD     		pop	{r4, pc}
 1530              	.LVL134:
 1531              	.L93:
 563:Core/Src/main.c ****     HAL_Delay(200);
 1532              		.loc 1 563 5 is_stmt 1 view .LVU399
 564:Core/Src/main.c ****   }
 1533              		.loc 1 564 5 view .LVU400
 1534 0020 C830     		adds	r0, r0, #200
 1535 0022 FFF7FEFF 		bl	HAL_Delay
 1536              	.LVL135:
 563:Core/Src/main.c ****     HAL_Delay(200);
 1537              		.loc 1 563 16 is_stmt 0 view .LVU401
 1538 0026 0120     		movs	r0, #1
 1539 0028 F9E7     		b	.L91
 1540              	.L95:
 1541 002a C046     		.align	2
 1542              	.L94:
 1543 002c 00000000 		.word	.LC22
 1544              		.cfi_endproc
 1545              	.LFE360:
 1547              		.section	.rodata.cli_process_cmd.str1.4,"aMS",%progbits,1
 1548              		.align	2
 1549              	.LC24:
 1550 0000 72617700 		.ascii	"raw\000"
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s 			page 63


 1551              		.align	2
 1552              	.LC26:
 1553 0004 72656D6F 		.ascii	"removed all filters\015\012\000"
 1553      76656420 
 1553      616C6C20 
 1553      66696C74 
 1553      6572730D 
 1554 001a 0000     		.align	2
 1555              	.LC29:
 1556 001c 6D6F7669 		.ascii	"moving average\000"
 1556      6E672061 
 1556      76657261 
 1556      676500
 1557 002b 00       		.align	2
 1558              	.LC31:
 1559 002c 6D6F7669 		.ascii	"moving average on\015\012\000"
 1559      6E672061 
 1559      76657261 
 1559      6765206F 
 1559      6E0D0A00 
 1560              		.align	2
 1561              	.LC33:
 1562 0040 6D6F7669 		.ascii	"moving average off\015\012\000"
 1562      6E672061 
 1562      76657261 
 1562      6765206F 
 1562      66660D0A 
 1563 0055 000000   		.align	2
 1564              	.LC35:
 1565 0058 72616E64 		.ascii	"random noise\000"
 1565      6F6D206E 
 1565      6F697365 
 1565      00
 1566 0065 000000   		.align	2
 1567              	.LC37:
 1568 0068 72616E64 		.ascii	"random noise on\015\012\000"
 1568      6F6D206E 
 1568      6F697365 
 1568      206F6E0D 
 1568      0A00
 1569 007a 0000     		.align	2
 1570              	.LC39:
 1571 007c 72616E64 		.ascii	"random noise off\015\012\000"
 1571      6F6D206E 
 1571      6F697365 
 1571      206F6666 
 1571      0D0A00
 1572 008f 00       		.align	2
 1573              	.LC41:
 1574 0090 77726F6E 		.ascii	"wrong command: %s\015\012\000"
 1574      6720636F 
 1574      6D6D616E 
 1574      643A2025 
 1574      730D0A00 
 1575              		.section	.text.cli_process_cmd,"ax",%progbits
 1576              		.align	1
 1577              		.global	cli_process_cmd
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s 			page 64


 1578              		.syntax unified
 1579              		.code	16
 1580              		.thumb_func
 1582              	cli_process_cmd:
 1583              	.LVL136:
 1584              	.LFB352:
 167:Core/Src/main.c ****   if (strcmp(cmd, "raw") == 0) 
 1585              		.loc 1 167 1 is_stmt 1 view -0
 1586              		.cfi_startproc
 1587              		@ args = 0, pretend = 0, frame = 64
 1588              		@ frame_needed = 0, uses_anonymous_args = 0
 167:Core/Src/main.c ****   if (strcmp(cmd, "raw") == 0) 
 1589              		.loc 1 167 1 is_stmt 0 view .LVU403
 1590 0000 30B5     		push	{r4, r5, lr}
 1591              		.cfi_def_cfa_offset 12
 1592              		.cfi_offset 4, -12
 1593              		.cfi_offset 5, -8
 1594              		.cfi_offset 14, -4
 1595 0002 91B0     		sub	sp, sp, #68
 1596              		.cfi_def_cfa_offset 80
 1597 0004 0400     		movs	r4, r0
 168:Core/Src/main.c ****   {
 1598              		.loc 1 168 3 is_stmt 1 view .LVU404
 168:Core/Src/main.c ****   {
 1599              		.loc 1 168 7 is_stmt 0 view .LVU405
 1600 0006 2149     		ldr	r1, .L104
 1601 0008 FFF7FEFF 		bl	strcmp
 1602              	.LVL137:
 168:Core/Src/main.c ****   {
 1603              		.loc 1 168 6 discriminator 1 view .LVU406
 1604 000c 0028     		cmp	r0, #0
 1605 000e 11D0     		beq	.L103
 173:Core/Src/main.c ****   { 
 1606              		.loc 1 173 8 is_stmt 1 view .LVU407
 173:Core/Src/main.c ****   { 
 1607              		.loc 1 173 12 is_stmt 0 view .LVU408
 1608 0010 1F49     		ldr	r1, .L104+4
 1609 0012 2000     		movs	r0, r4
 1610 0014 FFF7FEFF 		bl	strcmp
 1611              	.LVL138:
 173:Core/Src/main.c ****   { 
 1612              		.loc 1 173 11 discriminator 1 view .LVU409
 1613 0018 0028     		cmp	r0, #0
 1614 001a 17D1     		bne	.L99
 175:Core/Src/main.c **** 
 1615              		.loc 1 175 5 is_stmt 1 view .LVU410
 175:Core/Src/main.c **** 
 1616              		.loc 1 175 18 is_stmt 0 view .LVU411
 1617 001c 1D4A     		ldr	r2, .L104+8
 1618 001e 1378     		ldrb	r3, [r2]
 1619 0020 0121     		movs	r1, #1
 1620 0022 4B40     		eors	r3, r1
 1621 0024 DBB2     		uxtb	r3, r3
 1622 0026 1370     		strb	r3, [r2]
 177:Core/Src/main.c ****     {
 1623              		.loc 1 177 5 is_stmt 1 view .LVU412
 177:Core/Src/main.c ****     {
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s 			page 65


 1624              		.loc 1 177 8 is_stmt 0 view .LVU413
 1625 0028 DB07     		lsls	r3, r3, #31
 1626 002a 0BD5     		bpl	.L100
 179:Core/Src/main.c ****     }
 1627              		.loc 1 179 7 is_stmt 1 view .LVU414
 1628 002c 1A48     		ldr	r0, .L104+12
 1629 002e FFF7FEFF 		bl	print
 1630              	.LVL139:
 1631 0032 05E0     		b	.L96
 1632              	.L103:
 170:Core/Src/main.c ****     selected_cmd = CMD_RAW;
 1633              		.loc 1 170 5 view .LVU415
 1634 0034 1948     		ldr	r0, .L104+16
 1635 0036 FFF7FEFF 		bl	print
 1636              	.LVL140:
 171:Core/Src/main.c ****   }
 1637              		.loc 1 171 5 view .LVU416
 171:Core/Src/main.c ****   }
 1638              		.loc 1 171 18 is_stmt 0 view .LVU417
 1639 003a 164B     		ldr	r3, .L104+8
 1640 003c 0022     		movs	r2, #0
 1641 003e 1A70     		strb	r2, [r3]
 1642              	.L96:
 205:Core/Src/main.c **** 
 1643              		.loc 1 205 1 view .LVU418
 1644 0040 11B0     		add	sp, sp, #68
 1645              		@ sp needed
 1646              	.LVL141:
 205:Core/Src/main.c **** 
 1647              		.loc 1 205 1 view .LVU419
 1648 0042 30BD     		pop	{r4, r5, pc}
 1649              	.LVL142:
 1650              	.L100:
 183:Core/Src/main.c ****     }
 1651              		.loc 1 183 7 is_stmt 1 view .LVU420
 1652 0044 1648     		ldr	r0, .L104+20
 1653 0046 FFF7FEFF 		bl	print
 1654              	.LVL143:
 1655 004a F9E7     		b	.L96
 1656              	.L99:
 186:Core/Src/main.c ****   {
 1657              		.loc 1 186 8 view .LVU421
 186:Core/Src/main.c ****   {
 1658              		.loc 1 186 12 is_stmt 0 view .LVU422
 1659 004c 1549     		ldr	r1, .L104+24
 1660 004e 2000     		movs	r0, r4
 1661 0050 FFF7FEFF 		bl	strcmp
 1662              	.LVL144:
 186:Core/Src/main.c ****   {
 1663              		.loc 1 186 11 discriminator 1 view .LVU423
 1664 0054 0028     		cmp	r0, #0
 1665 0056 0FD1     		bne	.L101
 188:Core/Src/main.c **** 
 1666              		.loc 1 188 5 is_stmt 1 view .LVU424
 188:Core/Src/main.c **** 
 1667              		.loc 1 188 18 is_stmt 0 view .LVU425
 1668 0058 0E4A     		ldr	r2, .L104+8
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s 			page 66


 1669 005a 1378     		ldrb	r3, [r2]
 1670 005c 0221     		movs	r1, #2
 1671 005e 4B40     		eors	r3, r1
 1672 0060 DBB2     		uxtb	r3, r3
 1673 0062 1370     		strb	r3, [r2]
 190:Core/Src/main.c ****     {
 1674              		.loc 1 190 5 is_stmt 1 view .LVU426
 190:Core/Src/main.c ****     {
 1675              		.loc 1 190 8 is_stmt 0 view .LVU427
 1676 0064 9B07     		lsls	r3, r3, #30
 1677 0066 03D5     		bpl	.L102
 192:Core/Src/main.c ****     }
 1678              		.loc 1 192 7 is_stmt 1 view .LVU428
 1679 0068 0F48     		ldr	r0, .L104+28
 1680 006a FFF7FEFF 		bl	print
 1681              	.LVL145:
 1682 006e E7E7     		b	.L96
 1683              	.L102:
 196:Core/Src/main.c ****     }
 1684              		.loc 1 196 7 view .LVU429
 1685 0070 0E48     		ldr	r0, .L104+32
 1686 0072 FFF7FEFF 		bl	print
 1687              	.LVL146:
 1688 0076 E3E7     		b	.L96
 1689              	.L101:
 1690              	.LBB18:
 201:Core/Src/main.c ****     snprintf(msg, sizeof(msg), "wrong command: %s\r\n", cmd);
 1691              		.loc 1 201 5 view .LVU430
 202:Core/Src/main.c ****     print(msg);
 1692              		.loc 1 202 5 view .LVU431
 1693 0078 0D4A     		ldr	r2, .L104+36
 1694 007a 2300     		movs	r3, r4
 1695 007c 4021     		movs	r1, #64
 1696 007e 6846     		mov	r0, sp
 1697 0080 FFF7FEFF 		bl	snprintf
 1698              	.LVL147:
 203:Core/Src/main.c ****   }
 1699              		.loc 1 203 5 view .LVU432
 1700 0084 6846     		mov	r0, sp
 1701 0086 FFF7FEFF 		bl	print
 1702              	.LVL148:
 1703              	.LBE18:
 205:Core/Src/main.c **** 
 1704              		.loc 1 205 1 is_stmt 0 view .LVU433
 1705 008a D9E7     		b	.L96
 1706              	.L105:
 1707              		.align	2
 1708              	.L104:
 1709 008c 00000000 		.word	.LC24
 1710 0090 1C000000 		.word	.LC29
 1711 0094 00000000 		.word	selected_cmd
 1712 0098 2C000000 		.word	.LC31
 1713 009c 04000000 		.word	.LC26
 1714 00a0 40000000 		.word	.LC33
 1715 00a4 58000000 		.word	.LC35
 1716 00a8 68000000 		.word	.LC37
 1717 00ac 7C000000 		.word	.LC39
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s 			page 67


 1718 00b0 90000000 		.word	.LC41
 1719              		.cfi_endproc
 1720              	.LFE352:
 1722              		.section	.text.run_state,"ax",%progbits
 1723              		.align	1
 1724              		.global	run_state
 1725              		.syntax unified
 1726              		.code	16
 1727              		.thumb_func
 1729              	run_state:
 1730              	.LVL149:
 1731              	.LFB362:
 587:Core/Src/main.c **** 
 588:Core/Src/main.c **** state_t run_state(state_t cur_state) 
 589:Core/Src/main.c **** {
 1732              		.loc 1 589 1 is_stmt 1 view -0
 1733              		.cfi_startproc
 1734              		@ args = 0, pretend = 0, frame = 0
 1735              		@ frame_needed = 0, uses_anonymous_args = 0
 1736              		.loc 1 589 1 is_stmt 0 view .LVU435
 1737 0000 10B5     		push	{r4, lr}
 1738              		.cfi_def_cfa_offset 8
 1739              		.cfi_offset 4, -8
 1740              		.cfi_offset 14, -4
 1741 0002 0400     		movs	r4, r0
 590:Core/Src/main.c ****   state_t new_state = state_table[cur_state]();
 1742              		.loc 1 590 3 is_stmt 1 view .LVU436
 1743              		.loc 1 590 34 is_stmt 0 view .LVU437
 1744 0004 044B     		ldr	r3, .L110
 1745 0006 8200     		lsls	r2, r0, #2
 1746 0008 D358     		ldr	r3, [r2, r3]
 1747              		.loc 1 590 23 view .LVU438
 1748 000a 9847     		blx	r3
 1749              	.LVL150:
 591:Core/Src/main.c ****   if (new_state == NO_CHANGE) { new_state = cur_state; }
 1750              		.loc 1 591 3 is_stmt 1 view .LVU439
 1751              		.loc 1 591 6 is_stmt 0 view .LVU440
 1752 000c 0728     		cmp	r0, #7
 1753 000e 00D0     		beq	.L109
 1754              	.LVL151:
 1755              	.L107:
 592:Core/Src/main.c **** 
 593:Core/Src/main.c ****   return new_state;
 1756              		.loc 1 593 3 is_stmt 1 view .LVU441
 594:Core/Src/main.c **** };
 1757              		.loc 1 594 1 is_stmt 0 view .LVU442
 1758              		@ sp needed
 1759              	.LVL152:
 1760              		.loc 1 594 1 view .LVU443
 1761 0010 10BD     		pop	{r4, pc}
 1762              	.L109:
 591:Core/Src/main.c ****   if (new_state == NO_CHANGE) { new_state = cur_state; }
 1763              		.loc 1 591 43 discriminator 1 view .LVU444
 1764 0012 2000     		movs	r0, r4
 1765              	.LVL153:
 591:Core/Src/main.c ****   if (new_state == NO_CHANGE) { new_state = cur_state; }
 1766              		.loc 1 591 43 discriminator 1 view .LVU445
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s 			page 68


 1767 0014 FCE7     		b	.L107
 1768              	.L111:
 1769 0016 C046     		.align	2
 1770              	.L110:
 1771 0018 00000000 		.word	state_table
 1772              		.cfi_endproc
 1773              	.LFE362:
 1775              		.section	.text.main,"ax",%progbits
 1776              		.align	1
 1777              		.global	main
 1778              		.syntax unified
 1779              		.code	16
 1780              		.thumb_func
 1782              	main:
 1783              	.LFB353:
 221:Core/Src/main.c ****   while (1)
 1784              		.loc 1 221 1 is_stmt 1 view -0
 1785              		.cfi_startproc
 1786              		@ Volatile: function does not return.
 1787              		@ args = 0, pretend = 0, frame = 0
 1788              		@ frame_needed = 0, uses_anonymous_args = 0
 1789 0000 10B5     		push	{r4, lr}
 1790              		.cfi_def_cfa_offset 8
 1791              		.cfi_offset 4, -8
 1792              		.cfi_offset 14, -4
 1793              	.L113:
 222:Core/Src/main.c ****   {
 1794              		.loc 1 222 3 view .LVU447
 224:Core/Src/main.c ****   }
 1795              		.loc 1 224 5 discriminator 1 view .LVU448
 224:Core/Src/main.c ****   }
 1796              		.loc 1 224 21 is_stmt 0 discriminator 1 view .LVU449
 1797 0002 034C     		ldr	r4, .L114
 1798 0004 2078     		ldrb	r0, [r4]
 1799 0006 FFF7FEFF 		bl	run_state
 1800              	.LVL154:
 224:Core/Src/main.c ****   }
 1801              		.loc 1 224 19 discriminator 1 view .LVU450
 1802 000a 2070     		strb	r0, [r4]
 222:Core/Src/main.c ****   {
 1803              		.loc 1 222 9 is_stmt 1 view .LVU451
 1804 000c F9E7     		b	.L113
 1805              	.L115:
 1806 000e C046     		.align	2
 1807              	.L114:
 1808 0010 00000000 		.word	current_state
 1809              		.cfi_endproc
 1810              	.LFE353:
 1812              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 1813              		.align	1
 1814              		.global	HAL_TIM_PeriodElapsedCallback
 1815              		.syntax unified
 1816              		.code	16
 1817              		.thumb_func
 1819              	HAL_TIM_PeriodElapsedCallback:
 1820              	.LVL155:
 1821              	.LFB363:
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s 			page 69


 595:Core/Src/main.c **** 
 596:Core/Src/main.c **** /*
 597:Core/Src/main.c **** void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
 598:Core/Src/main.c **** {
 599:Core/Src/main.c ****   if (hadc->Instance == ADC1)
 600:Core/Src/main.c ****   {
 601:Core/Src/main.c ****     char msg[64];
 602:Core/Src/main.c ****     uint16_t analog_val = adc_buf[0];
 603:Core/Src/main.c **** 
 604:Core/Src/main.c ****     // La conversione in millivolt viene effettuata perché altrimenti renderebbe il grafico
 605:Core/Src/main.c ****     // molto meno fluido, è comunque possibile utilizzare i valori interi e modificare lo script
 606:Core/Src/main.c ****     // di Python per far avvenire tutto nel mondo dei numeri interi, ma non consiglio :P
 607:Core/Src/main.c ****     uint16_t analog_mv = toMilliVolt(analog_val);
 608:Core/Src/main.c ****     GPIO_PinState digital_val = HAL_GPIO_ReadPin(HALL_DIGITAL_GPIO_Port, HALL_DIGITAL_Pin);
 609:Core/Src/main.c **** 
 610:Core/Src/main.c ****     if (BSP_PB_GetState(BUTTON_USER) == GPIO_PIN_RESET)
 611:Core/Src/main.c ****     {
 612:Core/Src/main.c ****       uint16_t noisy_val = correct(analog_mv + gaussian_noise_clt(0.0, 66.7));
 613:Core/Src/main.c ****       sum += noisy_val - filter_buf[counter];
 614:Core/Src/main.c ****       filter_out = sum / FILTER_LEN;
 615:Core/Src/main.c ****       filter_buf[counter] = noisy_val;
 616:Core/Src/main.c ****       counter++;
 617:Core/Src/main.c ****       if (counter == FILTER_LEN) { counter = 0; }
 618:Core/Src/main.c **** 
 619:Core/Src/main.c ****       snprintf(msg, ADC_BUF_LEN, "%u,%u,%u\r\n", noisy_val, filter_out, digital_val);
 620:Core/Src/main.c ****       HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 621:Core/Src/main.c ****     }
 622:Core/Src/main.c ****     else
 623:Core/Src/main.c ****     {
 624:Core/Src/main.c ****       sum += analog_mv - filter_buf[counter];
 625:Core/Src/main.c ****       filter_out = sum / FILTER_LEN;
 626:Core/Src/main.c ****       filter_buf[counter] = analog_mv;
 627:Core/Src/main.c ****       counter++;
 628:Core/Src/main.c ****       if (counter == FILTER_LEN) { counter = 0; }
 629:Core/Src/main.c **** 
 630:Core/Src/main.c ****       snprintf(msg, ADC_BUF_LEN, "%u,%u,%u\r\n", analog_mv, filter_out, digital_val);
 631:Core/Src/main.c ****       HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 632:Core/Src/main.c ****     }
 633:Core/Src/main.c ****   }
 634:Core/Src/main.c **** }
 635:Core/Src/main.c **** */
 636:Core/Src/main.c **** 
 637:Core/Src/main.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
 638:Core/Src/main.c **** {
 1822              		.loc 1 638 1 view -0
 1823              		.cfi_startproc
 1824              		@ args = 0, pretend = 0, frame = 0
 1825              		@ frame_needed = 0, uses_anonymous_args = 0
 1826              		.loc 1 638 1 is_stmt 0 view .LVU453
 1827 0000 10B5     		push	{r4, lr}
 1828              		.cfi_def_cfa_offset 8
 1829              		.cfi_offset 4, -8
 1830              		.cfi_offset 14, -4
 639:Core/Src/main.c ****   if (htim->Instance == TIM14)
 1831              		.loc 1 639 3 is_stmt 1 view .LVU454
 1832              		.loc 1 639 11 is_stmt 0 view .LVU455
 1833 0002 0268     		ldr	r2, [r0]
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s 			page 70


 1834              		.loc 1 639 6 view .LVU456
 1835 0004 034B     		ldr	r3, .L119
 1836 0006 9A42     		cmp	r2, r3
 1837 0008 00D0     		beq	.L118
 1838              	.LVL156:
 1839              	.L116:
 640:Core/Src/main.c ****   {
 641:Core/Src/main.c ****     BSP_LED_Toggle(LED_GREEN);
 642:Core/Src/main.c ****   }
 643:Core/Src/main.c **** }
 1840              		.loc 1 643 1 view .LVU457
 1841              		@ sp needed
 1842 000a 10BD     		pop	{r4, pc}
 1843              	.LVL157:
 1844              	.L118:
 641:Core/Src/main.c ****   }
 1845              		.loc 1 641 5 is_stmt 1 view .LVU458
 1846 000c 0020     		movs	r0, #0
 1847              	.LVL158:
 641:Core/Src/main.c ****   }
 1848              		.loc 1 641 5 is_stmt 0 view .LVU459
 1849 000e FFF7FEFF 		bl	BSP_LED_Toggle
 1850              	.LVL159:
 1851              		.loc 1 643 1 view .LVU460
 1852 0012 FAE7     		b	.L116
 1853              	.L120:
 1854              		.align	2
 1855              	.L119:
 1856 0014 00200040 		.word	1073750016
 1857              		.cfi_endproc
 1858              	.LFE363:
 1860              		.section	.text.HAL_UART_TxCpltCallback,"ax",%progbits
 1861              		.align	1
 1862              		.global	HAL_UART_TxCpltCallback
 1863              		.syntax unified
 1864              		.code	16
 1865              		.thumb_func
 1867              	HAL_UART_TxCpltCallback:
 1868              	.LVL160:
 1869              	.LFB364:
 644:Core/Src/main.c **** 
 645:Core/Src/main.c **** void HAL_UART_TxCpltCallback(UART_HandleTypeDef* huart)
 646:Core/Src/main.c **** {
 1870              		.loc 1 646 1 is_stmt 1 view -0
 1871              		.cfi_startproc
 1872              		@ args = 0, pretend = 0, frame = 0
 1873              		@ frame_needed = 0, uses_anonymous_args = 0
 1874              		@ link register save eliminated.
 647:Core/Src/main.c ****   if (huart->Instance == USART2) {}
 1875              		.loc 1 647 3 view .LVU462
 1876              		.loc 1 647 35 discriminator 1 view .LVU463
 648:Core/Src/main.c **** }
 1877              		.loc 1 648 1 is_stmt 0 view .LVU464
 1878              		@ sp needed
 1879 0000 7047     		bx	lr
 1880              		.cfi_endproc
 1881              	.LFE364:
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s 			page 71


 1883              		.section	.text.HAL_UART_RxCpltCallback,"ax",%progbits
 1884              		.align	1
 1885              		.global	HAL_UART_RxCpltCallback
 1886              		.syntax unified
 1887              		.code	16
 1888              		.thumb_func
 1890              	HAL_UART_RxCpltCallback:
 1891              	.LVL161:
 1892              	.LFB365:
 649:Core/Src/main.c **** 
 650:Core/Src/main.c **** void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
 651:Core/Src/main.c **** {
 1893              		.loc 1 651 1 is_stmt 1 view -0
 1894              		.cfi_startproc
 1895              		@ args = 0, pretend = 0, frame = 0
 1896              		@ frame_needed = 0, uses_anonymous_args = 0
 1897              		.loc 1 651 1 is_stmt 0 view .LVU466
 1898 0000 70B5     		push	{r4, r5, r6, lr}
 1899              		.cfi_def_cfa_offset 16
 1900              		.cfi_offset 4, -16
 1901              		.cfi_offset 5, -12
 1902              		.cfi_offset 6, -8
 1903              		.cfi_offset 14, -4
 652:Core/Src/main.c ****     if (huart->Instance == USART2)
 1904              		.loc 1 652 5 is_stmt 1 view .LVU467
 1905              		.loc 1 652 14 is_stmt 0 view .LVU468
 1906 0002 0268     		ldr	r2, [r0]
 1907              		.loc 1 652 8 view .LVU469
 1908 0004 104B     		ldr	r3, .L128
 1909 0006 9A42     		cmp	r2, r3
 1910 0008 00D0     		beq	.L127
 1911              	.LVL162:
 1912              	.L122:
 653:Core/Src/main.c ****     {
 654:Core/Src/main.c ****       if (rx_byte == '\r' || rx_byte == '\n')
 655:Core/Src/main.c ****       {
 656:Core/Src/main.c ****         rx_buf[rx_idx] = '\0';
 657:Core/Src/main.c ****         cli_process_cmd((char*)rx_buf);
 658:Core/Src/main.c ****         rx_idx = 0;
 659:Core/Src/main.c ****       }
 660:Core/Src/main.c ****       else
 661:Core/Src/main.c ****       {
 662:Core/Src/main.c ****         if (rx_idx < RX_BUF_LEN - 1)
 663:Core/Src/main.c ****         {
 664:Core/Src/main.c ****           rx_buf[rx_idx++] = rx_byte;
 665:Core/Src/main.c ****         }
 666:Core/Src/main.c ****       }
 667:Core/Src/main.c **** 
 668:Core/Src/main.c ****       HAL_UART_Receive_IT(&huart2, &rx_byte, 1);
 669:Core/Src/main.c ****     }
 670:Core/Src/main.c **** }
 1913              		.loc 1 670 1 view .LVU470
 1914              		@ sp needed
 1915 000a 70BD     		pop	{r4, r5, r6, pc}
 1916              	.LVL163:
 1917              	.L127:
 654:Core/Src/main.c ****       {
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s 			page 72


 1918              		.loc 1 654 7 is_stmt 1 view .LVU471
 654:Core/Src/main.c ****       {
 1919              		.loc 1 654 19 is_stmt 0 view .LVU472
 1920 000c 0F4B     		ldr	r3, .L128+4
 1921 000e 1B78     		ldrb	r3, [r3]
 654:Core/Src/main.c ****       {
 1922              		.loc 1 654 10 view .LVU473
 1923 0010 0D2B     		cmp	r3, #13
 1924 0012 0BD0     		beq	.L124
 654:Core/Src/main.c ****       {
 1925              		.loc 1 654 27 discriminator 1 view .LVU474
 1926 0014 0A2B     		cmp	r3, #10
 1927 0016 09D0     		beq	.L124
 662:Core/Src/main.c ****         {
 1928              		.loc 1 662 9 is_stmt 1 view .LVU475
 662:Core/Src/main.c ****         {
 1929              		.loc 1 662 20 is_stmt 0 view .LVU476
 1930 0018 0D4A     		ldr	r2, .L128+8
 1931 001a 1288     		ldrh	r2, [r2]
 662:Core/Src/main.c ****         {
 1932              		.loc 1 662 12 view .LVU477
 1933 001c 3E2A     		cmp	r2, #62
 1934 001e 0DD8     		bhi	.L126
 664:Core/Src/main.c ****         }
 1935              		.loc 1 664 11 is_stmt 1 view .LVU478
 664:Core/Src/main.c ****         }
 1936              		.loc 1 664 24 is_stmt 0 view .LVU479
 1937 0020 0B49     		ldr	r1, .L128+8
 1938 0022 501C     		adds	r0, r2, #1
 1939              	.LVL164:
 664:Core/Src/main.c ****         }
 1940              		.loc 1 664 24 view .LVU480
 1941 0024 0880     		strh	r0, [r1]
 664:Core/Src/main.c ****         }
 1942              		.loc 1 664 28 view .LVU481
 1943 0026 0B49     		ldr	r1, .L128+12
 1944 0028 8B54     		strb	r3, [r1, r2]
 1945 002a 07E0     		b	.L126
 1946              	.LVL165:
 1947              	.L124:
 656:Core/Src/main.c ****         cli_process_cmd((char*)rx_buf);
 1948              		.loc 1 656 9 is_stmt 1 view .LVU482
 656:Core/Src/main.c ****         cli_process_cmd((char*)rx_buf);
 1949              		.loc 1 656 15 is_stmt 0 view .LVU483
 1950 002c 084C     		ldr	r4, .L128+8
 1951 002e 2388     		ldrh	r3, [r4]
 656:Core/Src/main.c ****         cli_process_cmd((char*)rx_buf);
 1952              		.loc 1 656 24 view .LVU484
 1953 0030 0848     		ldr	r0, .L128+12
 1954              	.LVL166:
 656:Core/Src/main.c ****         cli_process_cmd((char*)rx_buf);
 1955              		.loc 1 656 24 view .LVU485
 1956 0032 0025     		movs	r5, #0
 1957 0034 C554     		strb	r5, [r0, r3]
 657:Core/Src/main.c ****         rx_idx = 0;
 1958              		.loc 1 657 9 is_stmt 1 view .LVU486
 1959 0036 FFF7FEFF 		bl	cli_process_cmd
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s 			page 73


 1960              	.LVL167:
 658:Core/Src/main.c ****       }
 1961              		.loc 1 658 9 view .LVU487
 658:Core/Src/main.c ****       }
 1962              		.loc 1 658 16 is_stmt 0 view .LVU488
 1963 003a 2580     		strh	r5, [r4]
 1964              	.L126:
 668:Core/Src/main.c ****     }
 1965              		.loc 1 668 7 is_stmt 1 view .LVU489
 1966 003c 0349     		ldr	r1, .L128+4
 1967 003e 0648     		ldr	r0, .L128+16
 1968 0040 0122     		movs	r2, #1
 1969 0042 FFF7FEFF 		bl	HAL_UART_Receive_IT
 1970              	.LVL168:
 1971              		.loc 1 670 1 is_stmt 0 view .LVU490
 1972 0046 E0E7     		b	.L122
 1973              	.L129:
 1974              		.align	2
 1975              	.L128:
 1976 0048 00440040 		.word	1073759232
 1977 004c 00000000 		.word	rx_byte
 1978 0050 00000000 		.word	rx_idx
 1979 0054 00000000 		.word	rx_buf
 1980 0058 00000000 		.word	huart2
 1981              		.cfi_endproc
 1982              	.LFE365:
 1984              		.section	.text.Error_Handler,"ax",%progbits
 1985              		.align	1
 1986              		.global	Error_Handler
 1987              		.syntax unified
 1988              		.code	16
 1989              		.thumb_func
 1991              	Error_Handler:
 1992              	.LFB366:
 671:Core/Src/main.c **** 
 672:Core/Src/main.c **** /* USER CODE END 4 */
 673:Core/Src/main.c **** 
 674:Core/Src/main.c **** /**
 675:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 676:Core/Src/main.c ****   * @retval None
 677:Core/Src/main.c ****   */
 678:Core/Src/main.c **** void Error_Handler(void)
 679:Core/Src/main.c **** {
 1993              		.loc 1 679 1 is_stmt 1 view -0
 1994              		.cfi_startproc
 1995              		@ Volatile: function does not return.
 1996              		@ args = 0, pretend = 0, frame = 0
 1997              		@ frame_needed = 0, uses_anonymous_args = 0
 1998              		@ link register save eliminated.
 680:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 681:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 682:Core/Src/main.c ****   __disable_irq();
 1999              		.loc 1 682 3 view .LVU492
 2000              	.LBB19:
 2001              	.LBI19:
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s 			page 74


 274:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 278:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 298:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 307:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 308:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 309:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 312:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 324:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s 			page 75


 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 344:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 348:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 349:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 350:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 351:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 354:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 362:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 363:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 381:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s 			page 76


 388:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 389:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 396:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 398:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****    */
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 416:Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
 417:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 430:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 431:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 435:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 436:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 442:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 444:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s 			page 77


 445:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 446:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 447:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 448:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
 450:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 456:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 486:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 495:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 499:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 500:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s 			page 78


 502:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
 504:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 507:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 509:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 513:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 520:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 537:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Remove the exclusive lock
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 540:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
 541:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 544:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 552:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 558:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s 			page 79


 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 560:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SSAT(ARG1, ARG2) \
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 564:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 568:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 573:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 574:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
 575:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 577:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __USAT(ARG1, ARG2) \
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 580:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 583:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 584:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 585:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 586:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 596:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 599:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 600:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 603:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 604:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 608:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
 609:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 610:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 611:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 615:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s 			page 80


 616:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 621:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 622:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 625:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
 627:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 628:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
 631:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 633:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 634:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 637:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 639:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 641:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 644:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 647:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
 648:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
 649:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 650:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 652:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
 653:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 654:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 655:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
 663:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 665:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 666:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 669:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s 			page 81


 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 684:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 690:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 693:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 696:Drivers/CMSIS/Include/cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 698:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 699:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 700:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 704:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 708:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 711:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 712:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t min = -1 - max ;
 713:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > max)
 714:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 715:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 716:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < min)
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****       return min;
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 721:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   return val;
 723:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 724:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 726:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 727:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s 			page 82


 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 731:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 732:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 734:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (sat <= 31U)
 735:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 736:Drivers/CMSIS/Include/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
 737:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > (int32_t)max)
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < 0)
 742:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****       return 0U;
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 746:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (uint32_t)val;
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 749:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 751:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 755:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 757:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
 759:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 760:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 761:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 762:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
 763:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 769:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 781:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s 			page 83


 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 795:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 799:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
 803:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
 804:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 809:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 814:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 818:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 826:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
 827:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
 828:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 835:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 838:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 842:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s 			page 84


 844:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 846:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 849:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 853:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 860:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 864:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 865:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
 870:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 871:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
 874:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 878:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 888:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 889:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 890:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 892:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 896:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s 			page 85


 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
 902:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 904:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 906:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 907:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
 908:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 909:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 912:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 913:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 914:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 915:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 916:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
 919:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 920:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 926:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memo
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 930:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 931:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 932:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 933:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@}*/ /* end of group CMSIS_Core_InstructionInterface */
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 937:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 939:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 940:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 943:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 945:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 946:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
 947:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 949:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 950:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 952:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 953:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s 			page 86


 958:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 959:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 960:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 2002              		.loc 3 960 27 view .LVU493
 2003              	.LBB20:
 961:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 962:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 2004              		.loc 3 962 3 view .LVU494
 2005              		.syntax divided
 2006              	@ 962 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2007 0000 72B6     		cpsid i
 2008              	@ 0 "" 2
 2009              		.thumb
 2010              		.syntax unified
 2011              	.L131:
 2012              	.LBE20:
 2013              	.LBE19:
 683:Core/Src/main.c ****   while (1)
 2014              		.loc 1 683 3 view .LVU495
 684:Core/Src/main.c ****   {}
 2015              		.loc 1 684 4 view .LVU496
 683:Core/Src/main.c ****   while (1)
 2016              		.loc 1 683 9 view .LVU497
 2017 0002 FEE7     		b	.L131
 2018              		.cfi_endproc
 2019              	.LFE366:
 2021              		.global	current_state
 2022              		.section	.bss.current_state,"aw",%nobits
 2025              	current_state:
 2026 0000 00       		.space	1
 2027              		.global	state_table
 2028              		.section	.rodata.state_table,"a"
 2029              		.align	2
 2032              	state_table:
 2033 0000 00000000 		.word	do_INIT
 2034 0004 00000000 		.word	do_WAIT_REQUEST
 2035 0008 00000000 		.word	do_ERROR
 2036 000c 00000000 		.word	do_LISTENING
 2037 0010 00000000 		.word	do_WARNING
 2038 0014 00000000 		.word	do_PAUSE
 2039              		.global	selected_cmd
 2040              		.section	.bss.selected_cmd,"aw",%nobits
 2043              	selected_cmd:
 2044 0000 00       		.space	1
 2045              		.global	cmd_buf
 2046              		.section	.bss.cmd_buf,"aw",%nobits
 2047              		.align	2
 2050              	cmd_buf:
 2051 0000 00000000 		.space	64
 2051      00000000 
 2051      00000000 
 2051      00000000 
 2051      00000000 
 2052              		.global	hall_high_time
 2053              		.section	.bss.hall_high_time,"aw",%nobits
 2054              		.align	2
 2057              	hall_high_time:
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s 			page 87


 2058 0000 00000000 		.space	4
 2059              		.global	sum
 2060              		.section	.bss.sum,"aw",%nobits
 2061              		.align	2
 2064              	sum:
 2065 0000 00000000 		.space	4
 2066              		.global	counter
 2067              		.section	.bss.counter,"aw",%nobits
 2068              		.align	1
 2071              	counter:
 2072 0000 0000     		.space	2
 2073              		.global	filter_buf
 2074              		.section	.bss.filter_buf,"aw",%nobits
 2075              		.align	2
 2078              	filter_buf:
 2079 0000 00000000 		.space	300
 2079      00000000 
 2079      00000000 
 2079      00000000 
 2079      00000000 
 2080              		.global	filter_out
 2081              		.section	.bss.filter_out,"aw",%nobits
 2082              		.align	1
 2085              	filter_out:
 2086 0000 0000     		.space	2
 2087              		.global	rx_idx
 2088              		.section	.bss.rx_idx,"aw",%nobits
 2089              		.align	1
 2092              	rx_idx:
 2093 0000 0000     		.space	2
 2094              		.global	rx_buf
 2095              		.section	.bss.rx_buf,"aw",%nobits
 2096              		.align	2
 2099              	rx_buf:
 2100 0000 00000000 		.space	64
 2100      00000000 
 2100      00000000 
 2100      00000000 
 2100      00000000 
 2101              		.global	rx_byte
 2102              		.section	.bss.rx_byte,"aw",%nobits
 2105              	rx_byte:
 2106 0000 00       		.space	1
 2107              		.global	adc_buf
 2108              		.section	.bss.adc_buf,"aw",%nobits
 2109              		.align	2
 2112              	adc_buf:
 2113 0000 00000000 		.space	128
 2113      00000000 
 2113      00000000 
 2113      00000000 
 2113      00000000 
 2114              		.global	huart2
 2115              		.section	.bss.huart2,"aw",%nobits
 2116              		.align	2
 2119              	huart2:
 2120 0000 00000000 		.space	148
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s 			page 88


 2120      00000000 
 2120      00000000 
 2120      00000000 
 2120      00000000 
 2121              		.global	htim14
 2122              		.section	.bss.htim14,"aw",%nobits
 2123              		.align	2
 2126              	htim14:
 2127 0000 00000000 		.space	76
 2127      00000000 
 2127      00000000 
 2127      00000000 
 2127      00000000 
 2128              		.global	hdma_adc1
 2129              		.section	.bss.hdma_adc1,"aw",%nobits
 2130              		.align	2
 2133              	hdma_adc1:
 2134 0000 00000000 		.space	92
 2134      00000000 
 2134      00000000 
 2134      00000000 
 2134      00000000 
 2135              		.global	hadc1
 2136              		.section	.bss.hadc1,"aw",%nobits
 2137              		.align	2
 2140              	hadc1:
 2141 0000 00000000 		.space	100
 2141      00000000 
 2141      00000000 
 2141      00000000 
 2141      00000000 
 2142              		.text
 2143              	.Letext0:
 2144              		.file 4 "Drivers/CMSIS/Device/ST/STM32C0xx/Include/stm32c031xx.h"
 2145              		.file 5 "/Users/killzyy/Library/Application Support/Code/User/globalStorage/bmd.stm32-for-vscode/@
 2146              		.file 6 "/Users/killzyy/Library/Application Support/Code/User/globalStorage/bmd.stm32-for-vscode/@
 2147              		.file 7 "Drivers/CMSIS/Device/ST/STM32C0xx/Include/stm32c0xx.h"
 2148              		.file 8 "/Users/killzyy/Library/Application Support/Code/User/globalStorage/bmd.stm32-for-vscode/@
 2149              		.file 9 "Drivers/STM32C0xx_HAL_Driver/Inc/stm32c0xx_hal_def.h"
 2150              		.file 10 "Drivers/STM32C0xx_HAL_Driver/Inc/stm32c0xx_hal_rcc.h"
 2151              		.file 11 "Drivers/STM32C0xx_HAL_Driver/Inc/stm32c0xx_hal_gpio.h"
 2152              		.file 12 "Drivers/STM32C0xx_HAL_Driver/Inc/stm32c0xx_hal_dma.h"
 2153              		.file 13 "Drivers/STM32C0xx_HAL_Driver/Inc/stm32c0xx_hal_adc.h"
 2154              		.file 14 "Drivers/STM32C0xx_HAL_Driver/Inc/stm32c0xx_hal_tim.h"
 2155              		.file 15 "Drivers/STM32C0xx_HAL_Driver/Inc/stm32c0xx_hal_uart.h"
 2156              		.file 16 "Drivers/BSP/STM32C0xx_Nucleo/stm32c0xx_nucleo.h"
 2157              		.file 17 "/Users/killzyy/Library/Application Support/Code/User/globalStorage/bmd.stm32-for-vscode/
 2158              		.file 18 "Core/Inc/fsm.h"
 2159              		.file 19 "Drivers/STM32C0xx_HAL_Driver/Inc/stm32c0xx_hal.h"
 2160              		.file 20 "Drivers/STM32C0xx_HAL_Driver/Inc/stm32c0xx_hal_cortex.h"
 2161              		.file 21 "Drivers/STM32C0xx_HAL_Driver/Inc/stm32c0xx_hal_adc_ex.h"
 2162              		.file 22 "/Users/killzyy/Library/Application Support/Code/User/globalStorage/bmd.stm32-for-vscode/
 2163              		.file 23 "/Users/killzyy/Library/Application Support/Code/User/globalStorage/bmd.stm32-for-vscode/
 2164              		.file 24 "/Users/killzyy/Library/Application Support/Code/User/globalStorage/bmd.stm32-for-vscode/
 2165              		.file 25 "/Users/killzyy/Library/Application Support/Code/User/globalStorage/bmd.stm32-for-vscode/
 2166              		.file 26 "<built-in>"
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s 			page 89


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:19     .text.__NVIC_SystemReset:00000000 $t
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:24     .text.__NVIC_SystemReset:00000000 __NVIC_SystemReset
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:81     .text.__NVIC_SystemReset:00000014 $d
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:87     .text.MX_GPIO_Init:00000000 $t
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:92     .text.MX_GPIO_Init:00000000 MX_GPIO_Init
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:181    .text.MX_GPIO_Init:00000054 $d
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:186    .text.MX_DMA_Init:00000000 $t
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:191    .text.MX_DMA_Init:00000000 MX_DMA_Init
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:236    .text.MX_DMA_Init:0000002c $d
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:241    .text.do_INIT:00000000 $t
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:247    .text.do_INIT:00000000 do_INIT
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:591    .text.do_INIT:0000014c $d
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:2140   .bss.hadc1:00000000 hadc1
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:2119   .bss.huart2:00000000 huart2
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:2126   .bss.htim14:00000000 htim14
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:605    .text.do_WAIT_REQUEST:00000000 $t
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:611    .text.do_WAIT_REQUEST:00000000 do_WAIT_REQUEST
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:658    .text.do_WAIT_REQUEST:00000024 $d
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:2105   .bss.rx_byte:00000000 rx_byte
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:664    .text.print:00000000 $t
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:670    .text.print:00000000 print
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:701    .text.print:00000014 $d
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:706    .text.map:00000000 $t
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:712    .text.map:00000000 map
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:759    .text.toMilliVolt:00000000 $t
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:765    .text.toMilliVolt:00000000 toMilliVolt
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:794    .text.toMilliVolt:00000010 $d
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:800    .text.correct:00000000 $t
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:806    .text.correct:00000000 correct
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:848    .text.correct:00000018 $d
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:853    .text.gaussian_noise_clt:00000000 $t
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:859    .text.gaussian_noise_clt:00000000 gaussian_noise_clt
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:944    .text.gaussian_noise_clt:00000044 $d
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:949    .rodata.do_LISTENING.str1.4:00000000 $d
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:953    .text.do_LISTENING:00000000 $t
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:959    .text.do_LISTENING:00000000 do_LISTENING
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:1258   .text.do_LISTENING:00000154 $d
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:2085   .bss.filter_out:00000000 filter_out
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:2043   .bss.selected_cmd:00000000 selected_cmd
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:2071   .bss.counter:00000000 counter
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:2078   .bss.filter_buf:00000000 filter_buf
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:2064   .bss.sum:00000000 sum
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:2057   .bss.hall_high_time:00000000 hall_high_time
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:1272   .text.start_timer:00000000 $t
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:1278   .text.start_timer:00000000 start_timer
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:1313   .text.start_timer:00000014 $d
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:1318   .rodata.do_ERROR.str1.4:00000000 $d
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:1322   .text.do_ERROR:00000000 $t
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:1328   .text.do_ERROR:00000000 do_ERROR
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:1372   .text.do_ERROR:00000028 $d
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:1377   .text.stop_timer:00000000 $t
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:1383   .text.stop_timer:00000000 stop_timer
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:1403   .text.stop_timer:0000000c $d
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:1408   .text.do_PAUSE:00000000 $t
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:1414   .text.do_PAUSE:00000000 do_PAUSE
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s 			page 90


/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:1474   .text.do_PAUSE:00000038 $d
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:1481   .rodata.do_WARNING.str1.4:00000000 $d
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:1485   .text.do_WARNING:00000000 $t
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:1491   .text.do_WARNING:00000000 do_WARNING
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:1543   .text.do_WARNING:0000002c $d
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:1548   .rodata.cli_process_cmd.str1.4:00000000 $d
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:1576   .text.cli_process_cmd:00000000 $t
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:1582   .text.cli_process_cmd:00000000 cli_process_cmd
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:1709   .text.cli_process_cmd:0000008c $d
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:1723   .text.run_state:00000000 $t
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:1729   .text.run_state:00000000 run_state
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:1771   .text.run_state:00000018 $d
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:2032   .rodata.state_table:00000000 state_table
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:1776   .text.main:00000000 $t
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:1782   .text.main:00000000 main
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:1808   .text.main:00000010 $d
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:2025   .bss.current_state:00000000 current_state
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:1813   .text.HAL_TIM_PeriodElapsedCallback:00000000 $t
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:1819   .text.HAL_TIM_PeriodElapsedCallback:00000000 HAL_TIM_PeriodElapsedCallback
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:1856   .text.HAL_TIM_PeriodElapsedCallback:00000014 $d
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:1861   .text.HAL_UART_TxCpltCallback:00000000 $t
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:1867   .text.HAL_UART_TxCpltCallback:00000000 HAL_UART_TxCpltCallback
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:1884   .text.HAL_UART_RxCpltCallback:00000000 $t
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:1890   .text.HAL_UART_RxCpltCallback:00000000 HAL_UART_RxCpltCallback
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:1976   .text.HAL_UART_RxCpltCallback:00000048 $d
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:2092   .bss.rx_idx:00000000 rx_idx
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:2099   .bss.rx_buf:00000000 rx_buf
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:1985   .text.Error_Handler:00000000 $t
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:1991   .text.Error_Handler:00000000 Error_Handler
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:2026   .bss.current_state:00000000 $d
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:2029   .rodata.state_table:00000000 $d
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:2044   .bss.selected_cmd:00000000 $d
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:2050   .bss.cmd_buf:00000000 cmd_buf
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:2047   .bss.cmd_buf:00000000 $d
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:2054   .bss.hall_high_time:00000000 $d
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:2061   .bss.sum:00000000 $d
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:2068   .bss.counter:00000000 $d
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:2075   .bss.filter_buf:00000000 $d
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:2082   .bss.filter_out:00000000 $d
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:2089   .bss.rx_idx:00000000 $d
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:2096   .bss.rx_buf:00000000 $d
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:2106   .bss.rx_byte:00000000 $d
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:2112   .bss.adc_buf:00000000 adc_buf
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:2109   .bss.adc_buf:00000000 $d
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:2116   .bss.huart2:00000000 $d
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:2123   .bss.htim14:00000000 $d
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:2133   .bss.hdma_adc1:00000000 hdma_adc1
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:2130   .bss.hdma_adc1:00000000 $d
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s:2137   .bss.hadc1:00000000 $d

UNDEFINED SYMBOLS
memset
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
HAL_Init
HAL_RCC_OscConfig
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//ccyCTJXE.s 			page 91


HAL_RCC_ClockConfig
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_UART_Init
HAL_TIM_Base_Init
time
srand
HAL_ADCEx_Calibration_Start
BSP_LED_Init
BSP_PB_Init
HAL_UART_Receive_IT
BSP_PB_GetState
HAL_Delay
strlen
HAL_UART_Transmit_IT
__aeabi_idiv
rand
__aeabi_i2f
__aeabi_fmul
__aeabi_fadd
__aeabi_fsub
BSP_LED_On
HAL_ADC_Start
HAL_ADC_PollForConversion
HAL_ADC_GetValue
HAL_GPIO_ReadPin
__aeabi_uidiv
snprintf
__aeabi_f2uiz
HAL_GetTick
HAL_ADC_Stop
BSP_LED_Off
HAL_TIM_Base_Start_IT
HAL_TIM_Base_Stop_IT
strcmp
BSP_LED_Toggle
