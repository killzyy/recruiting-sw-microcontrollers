ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//cc73F41E.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.arch armv6s-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Core/Src/main.c"
  18              		.section	.text.MX_GPIO_Init,"ax",%progbits
  19              		.align	1
  20              		.syntax unified
  21              		.code	16
  22              		.thumb_func
  24              	MX_GPIO_Init:
  25              	.LFB347:
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2025 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** #include <string.h>
  22:Core/Src/main.c **** 
  23:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  24:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  25:Core/Src/main.c **** 
  26:Core/Src/main.c **** /* USER CODE END Includes */
  27:Core/Src/main.c **** 
  28:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  29:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  30:Core/Src/main.c **** 
  31:Core/Src/main.c **** /* USER CODE END PTD */
  32:Core/Src/main.c **** 
  33:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//cc73F41E.s 			page 2


  34:Core/Src/main.c **** /* USER CODE BEGIN PD */
  35:Core/Src/main.c **** 
  36:Core/Src/main.c **** #define ADC_BUF_LEN 4096
  37:Core/Src/main.c **** 
  38:Core/Src/main.c **** /* USER CODE END PD */
  39:Core/Src/main.c **** 
  40:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  41:Core/Src/main.c **** /* USER CODE BEGIN PM */
  42:Core/Src/main.c **** 
  43:Core/Src/main.c **** /* USER CODE END PM */
  44:Core/Src/main.c **** 
  45:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  46:Core/Src/main.c **** 
  47:Core/Src/main.c **** ADC_HandleTypeDef hadc1;
  48:Core/Src/main.c **** DMA_HandleTypeDef hdma_adc1;
  49:Core/Src/main.c **** 
  50:Core/Src/main.c **** UART_HandleTypeDef huart2;
  51:Core/Src/main.c **** DMA_HandleTypeDef hdma_usart2_tx;
  52:Core/Src/main.c **** 
  53:Core/Src/main.c **** /* USER CODE BEGIN PV */
  54:Core/Src/main.c **** 
  55:Core/Src/main.c **** uint16_t adc_buf[ADC_BUF_LEN];
  56:Core/Src/main.c **** 
  57:Core/Src/main.c **** /* USER CODE END PV */
  58:Core/Src/main.c **** 
  59:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  60:Core/Src/main.c **** void SystemClock_Config(void);
  61:Core/Src/main.c **** static void MX_GPIO_Init(void);
  62:Core/Src/main.c **** static void MX_DMA_Init(void);
  63:Core/Src/main.c **** static void MX_ADC1_Init(void);
  64:Core/Src/main.c **** static void MX_USART2_UART_Init(void);
  65:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  66:Core/Src/main.c **** 
  67:Core/Src/main.c **** void DMATransferComplete(DMA_HandleTypeDef* hdma);
  68:Core/Src/main.c **** 
  69:Core/Src/main.c **** /* USER CODE END PFP */
  70:Core/Src/main.c **** 
  71:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  72:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  73:Core/Src/main.c **** 
  74:Core/Src/main.c **** /* USER CODE END 0 */
  75:Core/Src/main.c **** 
  76:Core/Src/main.c **** /**
  77:Core/Src/main.c ****   * @brief  The application entry point.
  78:Core/Src/main.c ****   * @retval int
  79:Core/Src/main.c ****   */
  80:Core/Src/main.c **** int main(void)
  81:Core/Src/main.c **** {
  82:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
  83:Core/Src/main.c **** 
  84:Core/Src/main.c ****   char msg[] = "Hello, world!\r\n";
  85:Core/Src/main.c **** 
  86:Core/Src/main.c ****   /* USER CODE END 1 */
  87:Core/Src/main.c **** 
  88:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
  89:Core/Src/main.c **** 
  90:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//cc73F41E.s 			page 3


  91:Core/Src/main.c ****   HAL_Init();
  92:Core/Src/main.c **** 
  93:Core/Src/main.c ****   /* USER CODE BEGIN Init */
  94:Core/Src/main.c **** 
  95:Core/Src/main.c ****   /* USER CODE END Init */
  96:Core/Src/main.c **** 
  97:Core/Src/main.c ****   /* Configure the system clock */
  98:Core/Src/main.c ****   SystemClock_Config();
  99:Core/Src/main.c **** 
 100:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 101:Core/Src/main.c **** 
 102:Core/Src/main.c ****   /* USER CODE END SysInit */
 103:Core/Src/main.c **** 
 104:Core/Src/main.c ****   /* Initialize all configured peripherals */
 105:Core/Src/main.c ****   MX_GPIO_Init();
 106:Core/Src/main.c ****   MX_DMA_Init();
 107:Core/Src/main.c ****   MX_ADC1_Init();
 108:Core/Src/main.c ****   MX_USART2_UART_Init();
 109:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 110:Core/Src/main.c **** 
 111:Core/Src/main.c ****   HAL_DMA_RegisterCallback(&hdma_usart2_tx, HAL_DMA_XFER_CPLT_CB_ID, &DMATransferComplete);
 112:Core/Src/main.c **** 
 113:Core/Src/main.c ****   /* USER CODE END 2 */
 114:Core/Src/main.c **** 
 115:Core/Src/main.c ****   /* Initialize leds */
 116:Core/Src/main.c ****   BSP_LED_Init(LED_GREEN);
 117:Core/Src/main.c **** 
 118:Core/Src/main.c ****   /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
 119:Core/Src/main.c ****   BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 120:Core/Src/main.c **** 
 121:Core/Src/main.c ****   /* Infinite loop */
 122:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 123:Core/Src/main.c ****   while (1)
 124:Core/Src/main.c ****   {
 125:Core/Src/main.c ****     /* USER CODE END WHILE */
 126:Core/Src/main.c **** 
 127:Core/Src/main.c ****     huart2.Instance->CR3 |= USART_CR3_DMAT;
 128:Core/Src/main.c ****     HAL_DMA_Start_IT(&hdma_usart2_tx, (uint32_t)msg, (uint32_t)&huart2.Instance->TDR, strlen(msg));
 129:Core/Src/main.c **** 
 130:Core/Src/main.c ****     HAL_Delay(1000);
 131:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 132:Core/Src/main.c ****   }
 133:Core/Src/main.c ****   /* USER CODE END 3 */
 134:Core/Src/main.c **** }
 135:Core/Src/main.c **** 
 136:Core/Src/main.c **** /**
 137:Core/Src/main.c ****   * @brief System Clock Configuration
 138:Core/Src/main.c ****   * @retval None
 139:Core/Src/main.c ****   */
 140:Core/Src/main.c **** void SystemClock_Config(void)
 141:Core/Src/main.c **** {
 142:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 143:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 144:Core/Src/main.c **** 
 145:Core/Src/main.c ****   __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_1);
 146:Core/Src/main.c **** 
 147:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//cc73F41E.s 			page 4


 148:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 149:Core/Src/main.c ****   */
 150:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 151:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 152:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 153:Core/Src/main.c ****   {
 154:Core/Src/main.c ****     Error_Handler();
 155:Core/Src/main.c ****   }
 156:Core/Src/main.c **** 
 157:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 158:Core/Src/main.c ****   */
 159:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 160:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1;
 161:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 162:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 163:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 164:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 165:Core/Src/main.c **** 
 166:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 167:Core/Src/main.c ****   {
 168:Core/Src/main.c ****     Error_Handler();
 169:Core/Src/main.c ****   }
 170:Core/Src/main.c **** }
 171:Core/Src/main.c **** 
 172:Core/Src/main.c **** /**
 173:Core/Src/main.c ****   * @brief ADC1 Initialization Function
 174:Core/Src/main.c ****   * @param None
 175:Core/Src/main.c ****   * @retval None
 176:Core/Src/main.c ****   */
 177:Core/Src/main.c **** static void MX_ADC1_Init(void)
 178:Core/Src/main.c **** {
 179:Core/Src/main.c **** 
 180:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 0 */
 181:Core/Src/main.c **** 
 182:Core/Src/main.c ****   /* USER CODE END ADC1_Init 0 */
 183:Core/Src/main.c **** 
 184:Core/Src/main.c ****   ADC_ChannelConfTypeDef sConfig = {0};
 185:Core/Src/main.c **** 
 186:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 1 */
 187:Core/Src/main.c **** 
 188:Core/Src/main.c ****   /* USER CODE END ADC1_Init 1 */
 189:Core/Src/main.c **** 
 190:Core/Src/main.c ****   /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of con
 191:Core/Src/main.c ****   */
 192:Core/Src/main.c ****   hadc1.Instance = ADC1;
 193:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 194:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 195:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 196:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ADC_SCAN_SEQ_FIXED;
 197:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 198:Core/Src/main.c ****   hadc1.Init.LowPowerAutoWait = DISABLE;
 199:Core/Src/main.c ****   hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 200:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
 201:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 1;
 202:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 203:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 204:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = ENABLE;
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//cc73F41E.s 			page 5


 205:Core/Src/main.c ****   hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 206:Core/Src/main.c ****   hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 207:Core/Src/main.c ****   hadc1.Init.OversamplingMode = DISABLE;
 208:Core/Src/main.c ****   hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 209:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 210:Core/Src/main.c ****   {
 211:Core/Src/main.c ****     Error_Handler();
 212:Core/Src/main.c ****   }
 213:Core/Src/main.c **** 
 214:Core/Src/main.c ****   /** Configure Regular Channel
 215:Core/Src/main.c ****   */
 216:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_1;
 217:Core/Src/main.c ****   sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 218:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 219:Core/Src/main.c ****   {
 220:Core/Src/main.c ****     Error_Handler();
 221:Core/Src/main.c ****   }
 222:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 2 */
 223:Core/Src/main.c **** 
 224:Core/Src/main.c ****   /* USER CODE END ADC1_Init 2 */
 225:Core/Src/main.c **** 
 226:Core/Src/main.c **** }
 227:Core/Src/main.c **** 
 228:Core/Src/main.c **** /**
 229:Core/Src/main.c ****   * @brief USART2 Initialization Function
 230:Core/Src/main.c ****   * @param None
 231:Core/Src/main.c ****   * @retval None
 232:Core/Src/main.c ****   */
 233:Core/Src/main.c **** static void MX_USART2_UART_Init(void)
 234:Core/Src/main.c **** {
 235:Core/Src/main.c **** 
 236:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 0 */
 237:Core/Src/main.c **** 
 238:Core/Src/main.c ****   /* USER CODE END USART2_Init 0 */
 239:Core/Src/main.c **** 
 240:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 1 */
 241:Core/Src/main.c **** 
 242:Core/Src/main.c ****   /* USER CODE END USART2_Init 1 */
 243:Core/Src/main.c ****   huart2.Instance = USART2;
 244:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 245:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 246:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 247:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 248:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 249:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 250:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 251:Core/Src/main.c ****   huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 252:Core/Src/main.c ****   huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 253:Core/Src/main.c ****   huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 254:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 255:Core/Src/main.c ****   {
 256:Core/Src/main.c ****     Error_Handler();
 257:Core/Src/main.c ****   }
 258:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 2 */
 259:Core/Src/main.c **** 
 260:Core/Src/main.c ****   /* USER CODE END USART2_Init 2 */
 261:Core/Src/main.c **** 
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//cc73F41E.s 			page 6


 262:Core/Src/main.c **** }
 263:Core/Src/main.c **** 
 264:Core/Src/main.c **** /**
 265:Core/Src/main.c ****   * Enable DMA controller clock
 266:Core/Src/main.c ****   */
 267:Core/Src/main.c **** static void MX_DMA_Init(void)
 268:Core/Src/main.c **** {
 269:Core/Src/main.c **** 
 270:Core/Src/main.c ****   /* DMA controller clock enable */
 271:Core/Src/main.c ****   __HAL_RCC_DMA1_CLK_ENABLE();
 272:Core/Src/main.c **** 
 273:Core/Src/main.c ****   /* DMA interrupt init */
 274:Core/Src/main.c ****   /* DMA1_Channel1_IRQn interrupt configuration */
 275:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 276:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 277:Core/Src/main.c ****   /* DMA1_Channel2_3_IRQn interrupt configuration */
 278:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 279:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 280:Core/Src/main.c **** 
 281:Core/Src/main.c **** }
 282:Core/Src/main.c **** 
 283:Core/Src/main.c **** /**
 284:Core/Src/main.c ****   * @brief GPIO Initialization Function
 285:Core/Src/main.c ****   * @param None
 286:Core/Src/main.c ****   * @retval None
 287:Core/Src/main.c ****   */
 288:Core/Src/main.c **** static void MX_GPIO_Init(void)
 289:Core/Src/main.c **** {
  26              		.loc 1 289 1 view -0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 32
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30 0000 10B5     		push	{r4, lr}
  31              		.cfi_def_cfa_offset 8
  32              		.cfi_offset 4, -8
  33              		.cfi_offset 14, -4
  34 0002 88B0     		sub	sp, sp, #32
  35              		.cfi_def_cfa_offset 40
 290:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  36              		.loc 1 290 3 view .LVU1
  37              		.loc 1 290 20 is_stmt 0 view .LVU2
  38 0004 03AC     		add	r4, sp, #12
  39 0006 1422     		movs	r2, #20
  40 0008 0021     		movs	r1, #0
  41 000a 2000     		movs	r0, r4
  42 000c FFF7FEFF 		bl	memset
  43              	.LVL0:
 291:Core/Src/main.c ****   /* USER CODE BEGIN MX_GPIO_Init_1 */
 292:Core/Src/main.c **** 
 293:Core/Src/main.c ****   /* USER CODE END MX_GPIO_Init_1 */
 294:Core/Src/main.c **** 
 295:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 296:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  44              		.loc 1 296 3 is_stmt 1 view .LVU3
  45              	.LBB4:
  46              		.loc 1 296 3 view .LVU4
  47              		.loc 1 296 3 view .LVU5
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//cc73F41E.s 			page 7


  48 0010 154B     		ldr	r3, .L2
  49 0012 596B     		ldr	r1, [r3, #52]
  50 0014 0422     		movs	r2, #4
  51 0016 1143     		orrs	r1, r2
  52 0018 5963     		str	r1, [r3, #52]
  53              		.loc 1 296 3 view .LVU6
  54 001a 596B     		ldr	r1, [r3, #52]
  55 001c 0A40     		ands	r2, r1
  56 001e 0092     		str	r2, [sp]
  57              		.loc 1 296 3 view .LVU7
  58 0020 009A     		ldr	r2, [sp]
  59              	.LBE4:
  60              		.loc 1 296 3 view .LVU8
 297:Core/Src/main.c ****   __HAL_RCC_GPIOF_CLK_ENABLE();
  61              		.loc 1 297 3 view .LVU9
  62              	.LBB5:
  63              		.loc 1 297 3 view .LVU10
  64              		.loc 1 297 3 view .LVU11
  65 0022 596B     		ldr	r1, [r3, #52]
  66 0024 2022     		movs	r2, #32
  67 0026 1143     		orrs	r1, r2
  68 0028 5963     		str	r1, [r3, #52]
  69              		.loc 1 297 3 view .LVU12
  70 002a 596B     		ldr	r1, [r3, #52]
  71 002c 0A40     		ands	r2, r1
  72 002e 0192     		str	r2, [sp, #4]
  73              		.loc 1 297 3 view .LVU13
  74 0030 019A     		ldr	r2, [sp, #4]
  75              	.LBE5:
  76              		.loc 1 297 3 view .LVU14
 298:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  77              		.loc 1 298 3 view .LVU15
  78              	.LBB6:
  79              		.loc 1 298 3 view .LVU16
  80              		.loc 1 298 3 view .LVU17
  81 0032 596B     		ldr	r1, [r3, #52]
  82 0034 0122     		movs	r2, #1
  83 0036 1143     		orrs	r1, r2
  84 0038 5963     		str	r1, [r3, #52]
  85              		.loc 1 298 3 view .LVU18
  86 003a 5B6B     		ldr	r3, [r3, #52]
  87 003c 1340     		ands	r3, r2
  88 003e 0293     		str	r3, [sp, #8]
  89              		.loc 1 298 3 view .LVU19
  90 0040 029B     		ldr	r3, [sp, #8]
  91              	.LBE6:
  92              		.loc 1 298 3 view .LVU20
 299:Core/Src/main.c **** 
 300:Core/Src/main.c ****   /*Configure GPIO pin : HALL_DIGITAL_Pin */
 301:Core/Src/main.c ****   GPIO_InitStruct.Pin = HALL_DIGITAL_Pin;
  93              		.loc 1 301 3 view .LVU21
  94              		.loc 1 301 23 is_stmt 0 view .LVU22
  95 0042 0392     		str	r2, [sp, #12]
 302:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
  96              		.loc 1 302 3 is_stmt 1 view .LVU23
  97              		.loc 1 302 24 is_stmt 0 view .LVU24
  98 0044 094B     		ldr	r3, .L2+4
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//cc73F41E.s 			page 8


  99 0046 0493     		str	r3, [sp, #16]
 303:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 100              		.loc 1 303 3 is_stmt 1 view .LVU25
 304:Core/Src/main.c ****   HAL_GPIO_Init(HALL_DIGITAL_GPIO_Port, &GPIO_InitStruct);
 101              		.loc 1 304 3 view .LVU26
 102 0048 A020     		movs	r0, #160
 103 004a 2100     		movs	r1, r4
 104 004c C005     		lsls	r0, r0, #23
 105 004e FFF7FEFF 		bl	HAL_GPIO_Init
 106              	.LVL1:
 305:Core/Src/main.c **** 
 306:Core/Src/main.c ****   /* EXTI interrupt init*/
 307:Core/Src/main.c ****   HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 107              		.loc 1 307 3 view .LVU27
 108 0052 0022     		movs	r2, #0
 109 0054 0021     		movs	r1, #0
 110 0056 0520     		movs	r0, #5
 111 0058 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 112              	.LVL2:
 308:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 113              		.loc 1 308 3 view .LVU28
 114 005c 0520     		movs	r0, #5
 115 005e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 116              	.LVL3:
 309:Core/Src/main.c **** 
 310:Core/Src/main.c ****   /* USER CODE BEGIN MX_GPIO_Init_2 */
 311:Core/Src/main.c **** 
 312:Core/Src/main.c ****   /* USER CODE END MX_GPIO_Init_2 */
 313:Core/Src/main.c **** }
 117              		.loc 1 313 1 is_stmt 0 view .LVU29
 118 0062 08B0     		add	sp, sp, #32
 119              		@ sp needed
 120 0064 10BD     		pop	{r4, pc}
 121              	.L3:
 122 0066 C046     		.align	2
 123              	.L2:
 124 0068 00100240 		.word	1073876992
 125 006c 00003110 		.word	271646720
 126              		.cfi_endproc
 127              	.LFE347:
 129              		.section	.text.MX_DMA_Init,"ax",%progbits
 130              		.align	1
 131              		.syntax unified
 132              		.code	16
 133              		.thumb_func
 135              	MX_DMA_Init:
 136              	.LFB346:
 268:Core/Src/main.c **** 
 137              		.loc 1 268 1 is_stmt 1 view -0
 138              		.cfi_startproc
 139              		@ args = 0, pretend = 0, frame = 8
 140              		@ frame_needed = 0, uses_anonymous_args = 0
 141 0000 00B5     		push	{lr}
 142              		.cfi_def_cfa_offset 4
 143              		.cfi_offset 14, -4
 144 0002 83B0     		sub	sp, sp, #12
 145              		.cfi_def_cfa_offset 16
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//cc73F41E.s 			page 9


 271:Core/Src/main.c **** 
 146              		.loc 1 271 3 view .LVU31
 147              	.LBB7:
 271:Core/Src/main.c **** 
 148              		.loc 1 271 3 view .LVU32
 271:Core/Src/main.c **** 
 149              		.loc 1 271 3 view .LVU33
 150 0004 0D4A     		ldr	r2, .L5
 151 0006 916B     		ldr	r1, [r2, #56]
 152 0008 0123     		movs	r3, #1
 153 000a 1943     		orrs	r1, r3
 154 000c 9163     		str	r1, [r2, #56]
 271:Core/Src/main.c **** 
 155              		.loc 1 271 3 view .LVU34
 156 000e 926B     		ldr	r2, [r2, #56]
 157 0010 1340     		ands	r3, r2
 158 0012 0193     		str	r3, [sp, #4]
 271:Core/Src/main.c **** 
 159              		.loc 1 271 3 view .LVU35
 160 0014 019B     		ldr	r3, [sp, #4]
 161              	.LBE7:
 271:Core/Src/main.c **** 
 162              		.loc 1 271 3 view .LVU36
 275:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 163              		.loc 1 275 3 view .LVU37
 164 0016 0022     		movs	r2, #0
 165 0018 0021     		movs	r1, #0
 166 001a 0920     		movs	r0, #9
 167 001c FFF7FEFF 		bl	HAL_NVIC_SetPriority
 168              	.LVL4:
 276:Core/Src/main.c ****   /* DMA1_Channel2_3_IRQn interrupt configuration */
 169              		.loc 1 276 3 view .LVU38
 170 0020 0920     		movs	r0, #9
 171 0022 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 172              	.LVL5:
 278:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 173              		.loc 1 278 3 view .LVU39
 174 0026 0022     		movs	r2, #0
 175 0028 0021     		movs	r1, #0
 176 002a 0A20     		movs	r0, #10
 177 002c FFF7FEFF 		bl	HAL_NVIC_SetPriority
 178              	.LVL6:
 279:Core/Src/main.c **** 
 179              		.loc 1 279 3 view .LVU40
 180 0030 0A20     		movs	r0, #10
 181 0032 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 182              	.LVL7:
 281:Core/Src/main.c **** 
 183              		.loc 1 281 1 is_stmt 0 view .LVU41
 184 0036 03B0     		add	sp, sp, #12
 185              		@ sp needed
 186 0038 00BD     		pop	{pc}
 187              	.L6:
 188 003a C046     		.align	2
 189              	.L5:
 190 003c 00100240 		.word	1073876992
 191              		.cfi_endproc
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//cc73F41E.s 			page 10


 192              	.LFE346:
 194              		.section	.text.DMATransferComplete,"ax",%progbits
 195              		.align	1
 196              		.global	DMATransferComplete
 197              		.syntax unified
 198              		.code	16
 199              		.thumb_func
 201              	DMATransferComplete:
 202              	.LVL8:
 203              	.LFB348:
 314:Core/Src/main.c **** 
 315:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 316:Core/Src/main.c **** 
 317:Core/Src/main.c **** void DMATransferComplete(DMA_HandleTypeDef* hdma)
 318:Core/Src/main.c **** {
 204              		.loc 1 318 1 is_stmt 1 view -0
 205              		.cfi_startproc
 206              		@ args = 0, pretend = 0, frame = 0
 207              		@ frame_needed = 0, uses_anonymous_args = 0
 208              		.loc 1 318 1 is_stmt 0 view .LVU43
 209 0000 10B5     		push	{r4, lr}
 210              		.cfi_def_cfa_offset 8
 211              		.cfi_offset 4, -8
 212              		.cfi_offset 14, -4
 319:Core/Src/main.c ****   huart2.Instance->CR3 &= ~USART_CR3_DMAT;
 213              		.loc 1 319 3 is_stmt 1 view .LVU44
 214              		.loc 1 319 9 is_stmt 0 view .LVU45
 215 0002 064B     		ldr	r3, .L8
 216 0004 1A68     		ldr	r2, [r3]
 217              		.loc 1 319 18 view .LVU46
 218 0006 9368     		ldr	r3, [r2, #8]
 219              		.loc 1 319 24 view .LVU47
 220 0008 8021     		movs	r1, #128
 221 000a 8B43     		bics	r3, r1
 222 000c 9360     		str	r3, [r2, #8]
 320:Core/Src/main.c ****   HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 223              		.loc 1 320 3 is_stmt 1 view .LVU48
 224 000e A020     		movs	r0, #160
 225              	.LVL9:
 226              		.loc 1 320 3 is_stmt 0 view .LVU49
 227 0010 6039     		subs	r1, r1, #96
 228 0012 C005     		lsls	r0, r0, #23
 229 0014 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 230              	.LVL10:
 321:Core/Src/main.c **** }
 231              		.loc 1 321 1 view .LVU50
 232              		@ sp needed
 233 0018 10BD     		pop	{r4, pc}
 234              	.L9:
 235 001a C046     		.align	2
 236              	.L8:
 237 001c 00000000 		.word	huart2
 238              		.cfi_endproc
 239              	.LFE348:
 241              		.section	.text.HAL_ADC_ConvHalfCpltCallback,"ax",%progbits
 242              		.align	1
 243              		.global	HAL_ADC_ConvHalfCpltCallback
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//cc73F41E.s 			page 11


 244              		.syntax unified
 245              		.code	16
 246              		.thumb_func
 248              	HAL_ADC_ConvHalfCpltCallback:
 249              	.LVL11:
 250              	.LFB349:
 322:Core/Src/main.c **** 
 323:Core/Src/main.c **** void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
 324:Core/Src/main.c **** {
 251              		.loc 1 324 1 is_stmt 1 view -0
 252              		.cfi_startproc
 253              		@ args = 0, pretend = 0, frame = 0
 254              		@ frame_needed = 0, uses_anonymous_args = 0
 255              		.loc 1 324 1 is_stmt 0 view .LVU52
 256 0000 10B5     		push	{r4, lr}
 257              		.cfi_def_cfa_offset 8
 258              		.cfi_offset 4, -8
 259              		.cfi_offset 14, -4
 325:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 260              		.loc 1 325 3 is_stmt 1 view .LVU53
 261 0002 A020     		movs	r0, #160
 262              	.LVL12:
 263              		.loc 1 325 3 is_stmt 0 view .LVU54
 264 0004 0122     		movs	r2, #1
 265 0006 2021     		movs	r1, #32
 266 0008 C005     		lsls	r0, r0, #23
 267 000a FFF7FEFF 		bl	HAL_GPIO_WritePin
 268              	.LVL13:
 326:Core/Src/main.c **** }
 269              		.loc 1 326 1 view .LVU55
 270              		@ sp needed
 271 000e 10BD     		pop	{r4, pc}
 272              		.cfi_endproc
 273              	.LFE349:
 275              		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
 276              		.align	1
 277              		.global	HAL_ADC_ConvCpltCallback
 278              		.syntax unified
 279              		.code	16
 280              		.thumb_func
 282              	HAL_ADC_ConvCpltCallback:
 283              	.LVL14:
 284              	.LFB350:
 327:Core/Src/main.c **** 
 328:Core/Src/main.c **** void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
 329:Core/Src/main.c **** {
 285              		.loc 1 329 1 is_stmt 1 view -0
 286              		.cfi_startproc
 287              		@ args = 0, pretend = 0, frame = 0
 288              		@ frame_needed = 0, uses_anonymous_args = 0
 289              		.loc 1 329 1 is_stmt 0 view .LVU57
 290 0000 10B5     		push	{r4, lr}
 291              		.cfi_def_cfa_offset 8
 292              		.cfi_offset 4, -8
 293              		.cfi_offset 14, -4
 330:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 294              		.loc 1 330 3 is_stmt 1 view .LVU58
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//cc73F41E.s 			page 12


 295 0002 A020     		movs	r0, #160
 296              	.LVL15:
 297              		.loc 1 330 3 is_stmt 0 view .LVU59
 298 0004 0022     		movs	r2, #0
 299 0006 2021     		movs	r1, #32
 300 0008 C005     		lsls	r0, r0, #23
 301 000a FFF7FEFF 		bl	HAL_GPIO_WritePin
 302              	.LVL16:
 331:Core/Src/main.c **** }
 303              		.loc 1 331 1 view .LVU60
 304              		@ sp needed
 305 000e 10BD     		pop	{r4, pc}
 306              		.cfi_endproc
 307              	.LFE350:
 309              		.section	.text.Error_Handler,"ax",%progbits
 310              		.align	1
 311              		.global	Error_Handler
 312              		.syntax unified
 313              		.code	16
 314              		.thumb_func
 316              	Error_Handler:
 317              	.LFB351:
 332:Core/Src/main.c **** 
 333:Core/Src/main.c **** /* USER CODE END 4 */
 334:Core/Src/main.c **** 
 335:Core/Src/main.c **** /**
 336:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 337:Core/Src/main.c ****   * @retval None
 338:Core/Src/main.c ****   */
 339:Core/Src/main.c **** void Error_Handler(void)
 340:Core/Src/main.c **** {
 318              		.loc 1 340 1 is_stmt 1 view -0
 319              		.cfi_startproc
 320              		@ Volatile: function does not return.
 321              		@ args = 0, pretend = 0, frame = 0
 322              		@ frame_needed = 0, uses_anonymous_args = 0
 323              		@ link register save eliminated.
 341:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 342:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 343:Core/Src/main.c ****   __disable_irq();
 324              		.loc 1 343 3 view .LVU62
 325              	.LBB8:
 326              	.LBI8:
 327              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.4.1
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     27. May 2021
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//cc73F41E.s 			page 13


  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//cc73F41E.s 			page 14


  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//cc73F41E.s 			page 15


 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//cc73F41E.s 			page 16


 185:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
 200:Drivers/CMSIS/Include/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 203:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 204:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 208:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 215:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 223:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 226:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//cc73F41E.s 			page 17


 242:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 244:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 245:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 248:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 258:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 265:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 278:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 298:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//cc73F41E.s 			page 18


 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 307:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 308:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 309:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 312:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 324:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 344:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 348:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 349:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 350:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 351:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 354:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//cc73F41E.s 			page 19


 356:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 362:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 363:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 381:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 389:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 396:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 398:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//cc73F41E.s 			page 20


 413:Drivers/CMSIS/Include/cmsis_gcc.h ****    */
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 416:Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
 417:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 430:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 431:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 435:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 436:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 442:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 444:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 446:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 447:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 448:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
 450:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 456:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//cc73F41E.s 			page 21


 470:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 486:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 495:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 499:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 500:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 502:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
 504:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 507:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 509:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 513:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 520:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//cc73F41E.s 			page 22


 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 537:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Remove the exclusive lock
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 540:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
 541:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 544:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 552:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 558:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 560:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SSAT(ARG1, ARG2) \
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 564:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 568:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 573:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 574:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
 575:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 577:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __USAT(ARG1, ARG2) \
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 580:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 583:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//cc73F41E.s 			page 23


 584:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 585:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 586:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 596:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 599:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 600:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 603:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 604:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 608:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
 609:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 610:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 611:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 615:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 616:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 621:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 622:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 625:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
 627:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 628:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
 631:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 633:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 634:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 637:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 639:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//cc73F41E.s 			page 24


 641:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 644:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 647:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
 648:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
 649:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 650:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 652:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
 653:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 654:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 655:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
 663:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 665:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 666:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 669:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 684:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 690:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 693:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 696:Drivers/CMSIS/Include/cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//cc73F41E.s 			page 25


 698:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 699:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 700:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 704:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 708:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 711:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 712:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t min = -1 - max ;
 713:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > max)
 714:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 715:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 716:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < min)
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****       return min;
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 721:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   return val;
 723:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 724:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 726:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 727:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 731:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 732:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 734:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (sat <= 31U)
 735:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 736:Drivers/CMSIS/Include/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
 737:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > (int32_t)max)
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < 0)
 742:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****       return 0U;
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 746:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (uint32_t)val;
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 749:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 751:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//cc73F41E.s 			page 26


 755:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 757:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
 759:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 760:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 761:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 762:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
 763:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 769:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 781:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 795:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 799:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
 803:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
 804:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 809:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//cc73F41E.s 			page 27


 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 814:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 818:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 826:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
 827:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
 828:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 835:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 838:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 842:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 846:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 849:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 853:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 860:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 864:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 865:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//cc73F41E.s 			page 28


 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
 870:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 871:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
 874:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 878:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 888:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 889:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 890:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 892:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 896:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
 902:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 904:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 906:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 907:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
 908:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 909:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 912:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 913:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 914:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 915:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 916:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
 919:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 920:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//cc73F41E.s 			page 29


 926:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memo
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 930:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 931:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 932:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 933:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@}*/ /* end of group CMSIS_Core_InstructionInterface */
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 937:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 939:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 940:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 943:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 945:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 946:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
 947:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 949:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 950:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 952:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 953:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
 958:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 959:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 960:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 328              		.loc 2 960 27 view .LVU63
 329              	.LBB9:
 961:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 962:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 330              		.loc 2 962 3 view .LVU64
 331              		.syntax divided
 332              	@ 962 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 333 0000 72B6     		cpsid i
 334              	@ 0 "" 2
 335              		.thumb
 336              		.syntax unified
 337              	.L13:
 338              	.LBE9:
 339              	.LBE8:
 344:Core/Src/main.c ****   while (1)
 340              		.loc 1 344 3 view .LVU65
 345:Core/Src/main.c ****   {
 346:Core/Src/main.c ****     
 347:Core/Src/main.c ****   }
 341              		.loc 1 347 3 view .LVU66
 344:Core/Src/main.c ****   while (1)
 342              		.loc 1 344 9 view .LVU67
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//cc73F41E.s 			page 30


 343 0002 FEE7     		b	.L13
 344              		.cfi_endproc
 345              	.LFE351:
 347              		.section	.text.MX_ADC1_Init,"ax",%progbits
 348              		.align	1
 349              		.syntax unified
 350              		.code	16
 351              		.thumb_func
 353              	MX_ADC1_Init:
 354              	.LFB344:
 178:Core/Src/main.c **** 
 355              		.loc 1 178 1 view -0
 356              		.cfi_startproc
 357              		@ args = 0, pretend = 0, frame = 16
 358              		@ frame_needed = 0, uses_anonymous_args = 0
 359 0000 00B5     		push	{lr}
 360              		.cfi_def_cfa_offset 4
 361              		.cfi_offset 14, -4
 362 0002 85B0     		sub	sp, sp, #20
 363              		.cfi_def_cfa_offset 24
 184:Core/Src/main.c **** 
 364              		.loc 1 184 3 view .LVU69
 184:Core/Src/main.c **** 
 365              		.loc 1 184 26 is_stmt 0 view .LVU70
 366 0004 0C22     		movs	r2, #12
 367 0006 0021     		movs	r1, #0
 368 0008 01A8     		add	r0, sp, #4
 369 000a FFF7FEFF 		bl	memset
 370              	.LVL17:
 192:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 371              		.loc 1 192 3 is_stmt 1 view .LVU71
 192:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 372              		.loc 1 192 18 is_stmt 0 view .LVU72
 373 000e 1848     		ldr	r0, .L19
 374 0010 184B     		ldr	r3, .L19+4
 375 0012 0360     		str	r3, [r0]
 193:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 376              		.loc 1 193 3 is_stmt 1 view .LVU73
 193:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 377              		.loc 1 193 29 is_stmt 0 view .LVU74
 378 0014 8023     		movs	r3, #128
 379 0016 DB05     		lsls	r3, r3, #23
 380 0018 4360     		str	r3, [r0, #4]
 194:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 381              		.loc 1 194 3 is_stmt 1 view .LVU75
 194:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 382              		.loc 1 194 25 is_stmt 0 view .LVU76
 383 001a 0023     		movs	r3, #0
 384 001c 8360     		str	r3, [r0, #8]
 195:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ADC_SCAN_SEQ_FIXED;
 385              		.loc 1 195 3 is_stmt 1 view .LVU77
 195:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ADC_SCAN_SEQ_FIXED;
 386              		.loc 1 195 24 is_stmt 0 view .LVU78
 387 001e C360     		str	r3, [r0, #12]
 196:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 388              		.loc 1 196 3 is_stmt 1 view .LVU79
 196:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//cc73F41E.s 			page 31


 389              		.loc 1 196 27 is_stmt 0 view .LVU80
 390 0020 8022     		movs	r2, #128
 391 0022 1206     		lsls	r2, r2, #24
 392 0024 0261     		str	r2, [r0, #16]
 197:Core/Src/main.c ****   hadc1.Init.LowPowerAutoWait = DISABLE;
 393              		.loc 1 197 3 is_stmt 1 view .LVU81
 197:Core/Src/main.c ****   hadc1.Init.LowPowerAutoWait = DISABLE;
 394              		.loc 1 197 27 is_stmt 0 view .LVU82
 395 0026 0422     		movs	r2, #4
 396 0028 4261     		str	r2, [r0, #20]
 198:Core/Src/main.c ****   hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 397              		.loc 1 198 3 is_stmt 1 view .LVU83
 198:Core/Src/main.c ****   hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 398              		.loc 1 198 31 is_stmt 0 view .LVU84
 399 002a 0376     		strb	r3, [r0, #24]
 199:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
 400              		.loc 1 199 3 is_stmt 1 view .LVU85
 199:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
 401              		.loc 1 199 35 is_stmt 0 view .LVU86
 402 002c 4376     		strb	r3, [r0, #25]
 200:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 1;
 403              		.loc 1 200 3 is_stmt 1 view .LVU87
 200:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 1;
 404              		.loc 1 200 33 is_stmt 0 view .LVU88
 405 002e 033A     		subs	r2, r2, #3
 406 0030 8276     		strb	r2, [r0, #26]
 201:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 407              		.loc 1 201 3 is_stmt 1 view .LVU89
 201:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 408              		.loc 1 201 30 is_stmt 0 view .LVU90
 409 0032 C261     		str	r2, [r0, #28]
 202:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 410              		.loc 1 202 3 is_stmt 1 view .LVU91
 202:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 411              		.loc 1 202 31 is_stmt 0 view .LVU92
 412 0034 4362     		str	r3, [r0, #36]
 203:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = ENABLE;
 413              		.loc 1 203 3 is_stmt 1 view .LVU93
 203:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = ENABLE;
 414              		.loc 1 203 35 is_stmt 0 view .LVU94
 415 0036 8362     		str	r3, [r0, #40]
 204:Core/Src/main.c ****   hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 416              		.loc 1 204 3 is_stmt 1 view .LVU95
 204:Core/Src/main.c ****   hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 417              		.loc 1 204 36 is_stmt 0 view .LVU96
 418 0038 2C21     		movs	r1, #44
 419 003a 4254     		strb	r2, [r0, r1]
 205:Core/Src/main.c ****   hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 420              		.loc 1 205 3 is_stmt 1 view .LVU97
 205:Core/Src/main.c ****   hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 421              		.loc 1 205 22 is_stmt 0 view .LVU98
 422 003c 0363     		str	r3, [r0, #48]
 206:Core/Src/main.c ****   hadc1.Init.OversamplingMode = DISABLE;
 423              		.loc 1 206 3 is_stmt 1 view .LVU99
 206:Core/Src/main.c ****   hadc1.Init.OversamplingMode = DISABLE;
 424              		.loc 1 206 34 is_stmt 0 view .LVU100
 425 003e 4363     		str	r3, [r0, #52]
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//cc73F41E.s 			page 32


 207:Core/Src/main.c ****   hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 426              		.loc 1 207 3 is_stmt 1 view .LVU101
 207:Core/Src/main.c ****   hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 427              		.loc 1 207 31 is_stmt 0 view .LVU102
 428 0040 3B32     		adds	r2, r2, #59
 429 0042 8354     		strb	r3, [r0, r2]
 208:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 430              		.loc 1 208 3 is_stmt 1 view .LVU103
 208:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 431              		.loc 1 208 35 is_stmt 0 view .LVU104
 432 0044 C364     		str	r3, [r0, #76]
 209:Core/Src/main.c ****   {
 433              		.loc 1 209 3 is_stmt 1 view .LVU105
 209:Core/Src/main.c ****   {
 434              		.loc 1 209 7 is_stmt 0 view .LVU106
 435 0046 FFF7FEFF 		bl	HAL_ADC_Init
 436              	.LVL18:
 209:Core/Src/main.c ****   {
 437              		.loc 1 209 6 discriminator 1 view .LVU107
 438 004a 0028     		cmp	r0, #0
 439 004c 0BD1     		bne	.L17
 216:Core/Src/main.c ****   sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 440              		.loc 1 216 3 is_stmt 1 view .LVU108
 216:Core/Src/main.c ****   sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 441              		.loc 1 216 19 is_stmt 0 view .LVU109
 442 004e 01A9     		add	r1, sp, #4
 443 0050 094B     		ldr	r3, .L19+8
 444 0052 0193     		str	r3, [sp, #4]
 217:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 445              		.loc 1 217 3 is_stmt 1 view .LVU110
 217:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 446              		.loc 1 217 16 is_stmt 0 view .LVU111
 447 0054 0123     		movs	r3, #1
 448 0056 4B60     		str	r3, [r1, #4]
 218:Core/Src/main.c ****   {
 449              		.loc 1 218 3 is_stmt 1 view .LVU112
 218:Core/Src/main.c ****   {
 450              		.loc 1 218 7 is_stmt 0 view .LVU113
 451 0058 0548     		ldr	r0, .L19
 452 005a FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 453              	.LVL19:
 218:Core/Src/main.c ****   {
 454              		.loc 1 218 6 discriminator 1 view .LVU114
 455 005e 0028     		cmp	r0, #0
 456 0060 03D1     		bne	.L18
 226:Core/Src/main.c **** 
 457              		.loc 1 226 1 view .LVU115
 458 0062 05B0     		add	sp, sp, #20
 459              		@ sp needed
 460 0064 00BD     		pop	{pc}
 461              	.L17:
 211:Core/Src/main.c ****   }
 462              		.loc 1 211 5 is_stmt 1 view .LVU116
 463 0066 FFF7FEFF 		bl	Error_Handler
 464              	.LVL20:
 465              	.L18:
 220:Core/Src/main.c ****   }
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//cc73F41E.s 			page 33


 466              		.loc 1 220 5 view .LVU117
 467 006a FFF7FEFF 		bl	Error_Handler
 468              	.LVL21:
 469              	.L20:
 470 006e C046     		.align	2
 471              	.L19:
 472 0070 00000000 		.word	hadc1
 473 0074 00240140 		.word	1073816576
 474 0078 02000004 		.word	67108866
 475              		.cfi_endproc
 476              	.LFE344:
 478              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 479              		.align	1
 480              		.syntax unified
 481              		.code	16
 482              		.thumb_func
 484              	MX_USART2_UART_Init:
 485              	.LFB345:
 234:Core/Src/main.c **** 
 486              		.loc 1 234 1 view -0
 487              		.cfi_startproc
 488              		@ args = 0, pretend = 0, frame = 0
 489              		@ frame_needed = 0, uses_anonymous_args = 0
 490 0000 10B5     		push	{r4, lr}
 491              		.cfi_def_cfa_offset 8
 492              		.cfi_offset 4, -8
 493              		.cfi_offset 14, -4
 243:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 494              		.loc 1 243 3 view .LVU119
 243:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 495              		.loc 1 243 19 is_stmt 0 view .LVU120
 496 0002 0C48     		ldr	r0, .L24
 497 0004 0C4B     		ldr	r3, .L24+4
 498 0006 0360     		str	r3, [r0]
 244:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 499              		.loc 1 244 3 is_stmt 1 view .LVU121
 244:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 500              		.loc 1 244 24 is_stmt 0 view .LVU122
 501 0008 E123     		movs	r3, #225
 502 000a 5B02     		lsls	r3, r3, #9
 503 000c 4360     		str	r3, [r0, #4]
 245:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 504              		.loc 1 245 3 is_stmt 1 view .LVU123
 245:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 505              		.loc 1 245 26 is_stmt 0 view .LVU124
 506 000e 0023     		movs	r3, #0
 507 0010 8360     		str	r3, [r0, #8]
 246:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 508              		.loc 1 246 3 is_stmt 1 view .LVU125
 246:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 509              		.loc 1 246 24 is_stmt 0 view .LVU126
 510 0012 C360     		str	r3, [r0, #12]
 247:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 511              		.loc 1 247 3 is_stmt 1 view .LVU127
 247:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 512              		.loc 1 247 22 is_stmt 0 view .LVU128
 513 0014 0361     		str	r3, [r0, #16]
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//cc73F41E.s 			page 34


 248:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 514              		.loc 1 248 3 is_stmt 1 view .LVU129
 248:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 515              		.loc 1 248 20 is_stmt 0 view .LVU130
 516 0016 0C22     		movs	r2, #12
 517 0018 4261     		str	r2, [r0, #20]
 249:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 518              		.loc 1 249 3 is_stmt 1 view .LVU131
 249:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 519              		.loc 1 249 25 is_stmt 0 view .LVU132
 520 001a 8361     		str	r3, [r0, #24]
 250:Core/Src/main.c ****   huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 521              		.loc 1 250 3 is_stmt 1 view .LVU133
 250:Core/Src/main.c ****   huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 522              		.loc 1 250 28 is_stmt 0 view .LVU134
 523 001c C361     		str	r3, [r0, #28]
 251:Core/Src/main.c ****   huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 524              		.loc 1 251 3 is_stmt 1 view .LVU135
 251:Core/Src/main.c ****   huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 525              		.loc 1 251 30 is_stmt 0 view .LVU136
 526 001e 0362     		str	r3, [r0, #32]
 252:Core/Src/main.c ****   huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 527              		.loc 1 252 3 is_stmt 1 view .LVU137
 252:Core/Src/main.c ****   huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 528              		.loc 1 252 30 is_stmt 0 view .LVU138
 529 0020 4362     		str	r3, [r0, #36]
 253:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 530              		.loc 1 253 3 is_stmt 1 view .LVU139
 253:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 531              		.loc 1 253 38 is_stmt 0 view .LVU140
 532 0022 8362     		str	r3, [r0, #40]
 254:Core/Src/main.c ****   {
 533              		.loc 1 254 3 is_stmt 1 view .LVU141
 254:Core/Src/main.c ****   {
 534              		.loc 1 254 7 is_stmt 0 view .LVU142
 535 0024 FFF7FEFF 		bl	HAL_UART_Init
 536              	.LVL22:
 254:Core/Src/main.c ****   {
 537              		.loc 1 254 6 discriminator 1 view .LVU143
 538 0028 0028     		cmp	r0, #0
 539 002a 00D1     		bne	.L23
 262:Core/Src/main.c **** 
 540              		.loc 1 262 1 view .LVU144
 541              		@ sp needed
 542 002c 10BD     		pop	{r4, pc}
 543              	.L23:
 256:Core/Src/main.c ****   }
 544              		.loc 1 256 5 is_stmt 1 view .LVU145
 545 002e FFF7FEFF 		bl	Error_Handler
 546              	.LVL23:
 547              	.L25:
 548 0032 C046     		.align	2
 549              	.L24:
 550 0034 00000000 		.word	huart2
 551 0038 00440040 		.word	1073759232
 552              		.cfi_endproc
 553              	.LFE345:
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//cc73F41E.s 			page 35


 555              		.section	.text.SystemClock_Config,"ax",%progbits
 556              		.align	1
 557              		.global	SystemClock_Config
 558              		.syntax unified
 559              		.code	16
 560              		.thumb_func
 562              	SystemClock_Config:
 563              	.LFB343:
 141:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 564              		.loc 1 141 1 view -0
 565              		.cfi_startproc
 566              		@ args = 0, pretend = 0, frame = 48
 567              		@ frame_needed = 0, uses_anonymous_args = 0
 568 0000 10B5     		push	{r4, lr}
 569              		.cfi_def_cfa_offset 8
 570              		.cfi_offset 4, -8
 571              		.cfi_offset 14, -4
 572 0002 8CB0     		sub	sp, sp, #48
 573              		.cfi_def_cfa_offset 56
 142:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 574              		.loc 1 142 3 view .LVU147
 142:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 575              		.loc 1 142 22 is_stmt 0 view .LVU148
 576 0004 05AC     		add	r4, sp, #20
 577 0006 1C22     		movs	r2, #28
 578 0008 0021     		movs	r1, #0
 579 000a 2000     		movs	r0, r4
 580 000c FFF7FEFF 		bl	memset
 581              	.LVL24:
 143:Core/Src/main.c **** 
 582              		.loc 1 143 3 is_stmt 1 view .LVU149
 143:Core/Src/main.c **** 
 583              		.loc 1 143 22 is_stmt 0 view .LVU150
 584 0010 1422     		movs	r2, #20
 585 0012 0021     		movs	r1, #0
 586 0014 6846     		mov	r0, sp
 587 0016 FFF7FEFF 		bl	memset
 588              	.LVL25:
 145:Core/Src/main.c **** 
 589              		.loc 1 145 3 is_stmt 1 view .LVU151
 590 001a 1249     		ldr	r1, .L31
 591 001c 0B68     		ldr	r3, [r1]
 592 001e 0722     		movs	r2, #7
 593 0020 9343     		bics	r3, r2
 594 0022 063A     		subs	r2, r2, #6
 595 0024 1343     		orrs	r3, r2
 596 0026 0B60     		str	r3, [r1]
 150:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 597              		.loc 1 150 3 view .LVU152
 150:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 598              		.loc 1 150 36 is_stmt 0 view .LVU153
 599 0028 0592     		str	r2, [sp, #20]
 151:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 600              		.loc 1 151 3 is_stmt 1 view .LVU154
 151:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 601              		.loc 1 151 30 is_stmt 0 view .LVU155
 602 002a 8023     		movs	r3, #128
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//cc73F41E.s 			page 36


 603 002c 5B02     		lsls	r3, r3, #9
 604 002e 0693     		str	r3, [sp, #24]
 152:Core/Src/main.c ****   {
 605              		.loc 1 152 3 is_stmt 1 view .LVU156
 152:Core/Src/main.c ****   {
 606              		.loc 1 152 7 is_stmt 0 view .LVU157
 607 0030 2000     		movs	r0, r4
 608 0032 FFF7FEFF 		bl	HAL_RCC_OscConfig
 609              	.LVL26:
 152:Core/Src/main.c ****   {
 610              		.loc 1 152 6 discriminator 1 view .LVU158
 611 0036 0028     		cmp	r0, #0
 612 0038 0FD1     		bne	.L29
 159:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1;
 613              		.loc 1 159 3 is_stmt 1 view .LVU159
 159:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1;
 614              		.loc 1 159 31 is_stmt 0 view .LVU160
 615 003a 6846     		mov	r0, sp
 616 003c 0723     		movs	r3, #7
 617 003e 0093     		str	r3, [sp]
 161:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 618              		.loc 1 161 3 is_stmt 1 view .LVU161
 161:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 619              		.loc 1 161 34 is_stmt 0 view .LVU162
 620 0040 063B     		subs	r3, r3, #6
 621 0042 0193     		str	r3, [sp, #4]
 162:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 622              		.loc 1 162 3 is_stmt 1 view .LVU163
 162:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 623              		.loc 1 162 35 is_stmt 0 view .LVU164
 624 0044 0023     		movs	r3, #0
 625 0046 0293     		str	r3, [sp, #8]
 163:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 626              		.loc 1 163 3 is_stmt 1 view .LVU165
 163:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 627              		.loc 1 163 35 is_stmt 0 view .LVU166
 628 0048 0393     		str	r3, [sp, #12]
 164:Core/Src/main.c **** 
 629              		.loc 1 164 3 is_stmt 1 view .LVU167
 164:Core/Src/main.c **** 
 630              		.loc 1 164 36 is_stmt 0 view .LVU168
 631 004a 0493     		str	r3, [sp, #16]
 166:Core/Src/main.c ****   {
 632              		.loc 1 166 3 is_stmt 1 view .LVU169
 166:Core/Src/main.c ****   {
 633              		.loc 1 166 7 is_stmt 0 view .LVU170
 634 004c 0121     		movs	r1, #1
 635 004e FFF7FEFF 		bl	HAL_RCC_ClockConfig
 636              	.LVL27:
 166:Core/Src/main.c ****   {
 637              		.loc 1 166 6 discriminator 1 view .LVU171
 638 0052 0028     		cmp	r0, #0
 639 0054 03D1     		bne	.L30
 170:Core/Src/main.c **** 
 640              		.loc 1 170 1 view .LVU172
 641 0056 0CB0     		add	sp, sp, #48
 642              		@ sp needed
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//cc73F41E.s 			page 37


 643 0058 10BD     		pop	{r4, pc}
 644              	.L29:
 154:Core/Src/main.c ****   }
 645              		.loc 1 154 5 is_stmt 1 view .LVU173
 646 005a FFF7FEFF 		bl	Error_Handler
 647              	.LVL28:
 648              	.L30:
 168:Core/Src/main.c ****   }
 649              		.loc 1 168 5 view .LVU174
 650 005e FFF7FEFF 		bl	Error_Handler
 651              	.LVL29:
 652              	.L32:
 653 0062 C046     		.align	2
 654              	.L31:
 655 0064 00200240 		.word	1073881088
 656              		.cfi_endproc
 657              	.LFE343:
 659              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 660              		.align	2
 661              	.LC3:
 662 0000 48656C6C 		.ascii	"Hello, world!\015\012\000"
 662      6F2C2077 
 662      6F726C64 
 662      210D0A00 
 663              		.section	.text.main,"ax",%progbits
 664              		.align	1
 665              		.global	main
 666              		.syntax unified
 667              		.code	16
 668              		.thumb_func
 670              	main:
 671              	.LFB342:
  81:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 672              		.loc 1 81 1 view -0
 673              		.cfi_startproc
 674              		@ Volatile: function does not return.
 675              		@ args = 0, pretend = 0, frame = 16
 676              		@ frame_needed = 0, uses_anonymous_args = 0
 677 0000 70B5     		push	{r4, r5, r6, lr}
 678              		.cfi_def_cfa_offset 16
 679              		.cfi_offset 4, -16
 680              		.cfi_offset 5, -12
 681              		.cfi_offset 6, -8
 682              		.cfi_offset 14, -4
 683 0002 84B0     		sub	sp, sp, #16
 684              		.cfi_def_cfa_offset 32
  84:Core/Src/main.c **** 
 685              		.loc 1 84 3 view .LVU176
  84:Core/Src/main.c **** 
 686              		.loc 1 84 8 is_stmt 0 view .LVU177
 687 0004 6A46     		mov	r2, sp
 688 0006 194B     		ldr	r3, .L35
 689 0008 31CB     		ldmia	r3!, {r0, r4, r5}
 690 000a 31C2     		stmia	r2!, {r0, r4, r5}
 691 000c 1B68     		ldr	r3, [r3]
 692 000e 1360     		str	r3, [r2]
  91:Core/Src/main.c **** 
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//cc73F41E.s 			page 38


 693              		.loc 1 91 3 is_stmt 1 view .LVU178
 694 0010 FFF7FEFF 		bl	HAL_Init
 695              	.LVL30:
  98:Core/Src/main.c **** 
 696              		.loc 1 98 3 view .LVU179
 697 0014 FFF7FEFF 		bl	SystemClock_Config
 698              	.LVL31:
 105:Core/Src/main.c ****   MX_DMA_Init();
 699              		.loc 1 105 3 view .LVU180
 700 0018 FFF7FEFF 		bl	MX_GPIO_Init
 701              	.LVL32:
 106:Core/Src/main.c ****   MX_ADC1_Init();
 702              		.loc 1 106 3 view .LVU181
 703 001c FFF7FEFF 		bl	MX_DMA_Init
 704              	.LVL33:
 107:Core/Src/main.c ****   MX_USART2_UART_Init();
 705              		.loc 1 107 3 view .LVU182
 706 0020 FFF7FEFF 		bl	MX_ADC1_Init
 707              	.LVL34:
 108:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 708              		.loc 1 108 3 view .LVU183
 709 0024 FFF7FEFF 		bl	MX_USART2_UART_Init
 710              	.LVL35:
 111:Core/Src/main.c **** 
 711              		.loc 1 111 3 view .LVU184
 712 0028 114A     		ldr	r2, .L35+4
 713 002a 1248     		ldr	r0, .L35+8
 714 002c 0021     		movs	r1, #0
 715 002e FFF7FEFF 		bl	HAL_DMA_RegisterCallback
 716              	.LVL36:
 116:Core/Src/main.c **** 
 717              		.loc 1 116 3 view .LVU185
 718 0032 0020     		movs	r0, #0
 719 0034 FFF7FEFF 		bl	BSP_LED_Init
 720              	.LVL37:
 119:Core/Src/main.c **** 
 721              		.loc 1 119 3 view .LVU186
 722 0038 0121     		movs	r1, #1
 723 003a 0020     		movs	r0, #0
 724 003c FFF7FEFF 		bl	BSP_PB_Init
 725              	.LVL38:
 726              	.L34:
 123:Core/Src/main.c ****   {
 727              		.loc 1 123 3 view .LVU187
 127:Core/Src/main.c ****     HAL_DMA_Start_IT(&hdma_usart2_tx, (uint32_t)msg, (uint32_t)&huart2.Instance->TDR, strlen(msg));
 728              		.loc 1 127 5 view .LVU188
 127:Core/Src/main.c ****     HAL_DMA_Start_IT(&hdma_usart2_tx, (uint32_t)msg, (uint32_t)&huart2.Instance->TDR, strlen(msg));
 729              		.loc 1 127 11 is_stmt 0 view .LVU189
 730 0040 0D4B     		ldr	r3, .L35+12
 731 0042 1C68     		ldr	r4, [r3]
 127:Core/Src/main.c ****     HAL_DMA_Start_IT(&hdma_usart2_tx, (uint32_t)msg, (uint32_t)&huart2.Instance->TDR, strlen(msg));
 732              		.loc 1 127 20 view .LVU190
 733 0044 A368     		ldr	r3, [r4, #8]
 127:Core/Src/main.c ****     HAL_DMA_Start_IT(&hdma_usart2_tx, (uint32_t)msg, (uint32_t)&huart2.Instance->TDR, strlen(msg));
 734              		.loc 1 127 26 view .LVU191
 735 0046 8021     		movs	r1, #128
 736 0048 0B43     		orrs	r3, r1
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//cc73F41E.s 			page 39


 737 004a A360     		str	r3, [r4, #8]
 128:Core/Src/main.c **** 
 738              		.loc 1 128 5 is_stmt 1 view .LVU192
 128:Core/Src/main.c **** 
 739              		.loc 1 128 64 is_stmt 0 view .LVU193
 740 004c 2834     		adds	r4, r4, #40
 128:Core/Src/main.c **** 
 741              		.loc 1 128 87 view .LVU194
 742 004e 6846     		mov	r0, sp
 743 0050 FFF7FEFF 		bl	strlen
 744              	.LVL39:
 745 0054 0300     		movs	r3, r0
 128:Core/Src/main.c **** 
 746              		.loc 1 128 5 discriminator 1 view .LVU195
 747 0056 074D     		ldr	r5, .L35+8
 748 0058 2200     		movs	r2, r4
 749 005a 6946     		mov	r1, sp
 750 005c 2800     		movs	r0, r5
 751 005e FFF7FEFF 		bl	HAL_DMA_Start_IT
 752              	.LVL40:
 130:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 753              		.loc 1 130 5 is_stmt 1 discriminator 1 view .LVU196
 754 0062 FA20     		movs	r0, #250
 755 0064 8000     		lsls	r0, r0, #2
 756 0066 FFF7FEFF 		bl	HAL_Delay
 757              	.LVL41:
 123:Core/Src/main.c ****   {
 758              		.loc 1 123 9 view .LVU197
 759 006a E9E7     		b	.L34
 760              	.L36:
 761              		.align	2
 762              	.L35:
 763 006c 00000000 		.word	.LC3
 764 0070 00000000 		.word	DMATransferComplete
 765 0074 00000000 		.word	hdma_usart2_tx
 766 0078 00000000 		.word	huart2
 767              		.cfi_endproc
 768              	.LFE342:
 770              		.global	adc_buf
 771              		.section	.bss.adc_buf,"aw",%nobits
 772              		.align	2
 775              	adc_buf:
 776 0000 00000000 		.space	8192
 776      00000000 
 776      00000000 
 776      00000000 
 776      00000000 
 777              		.global	hdma_usart2_tx
 778              		.section	.bss.hdma_usart2_tx,"aw",%nobits
 779              		.align	2
 782              	hdma_usart2_tx:
 783 0000 00000000 		.space	92
 783      00000000 
 783      00000000 
 783      00000000 
 783      00000000 
 784              		.global	huart2
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//cc73F41E.s 			page 40


 785              		.section	.bss.huart2,"aw",%nobits
 786              		.align	2
 789              	huart2:
 790 0000 00000000 		.space	148
 790      00000000 
 790      00000000 
 790      00000000 
 790      00000000 
 791              		.global	hdma_adc1
 792              		.section	.bss.hdma_adc1,"aw",%nobits
 793              		.align	2
 796              	hdma_adc1:
 797 0000 00000000 		.space	92
 797      00000000 
 797      00000000 
 797      00000000 
 797      00000000 
 798              		.global	hadc1
 799              		.section	.bss.hadc1,"aw",%nobits
 800              		.align	2
 803              	hadc1:
 804 0000 00000000 		.space	100
 804      00000000 
 804      00000000 
 804      00000000 
 804      00000000 
 805              		.text
 806              	.Letext0:
 807              		.file 3 "Drivers/CMSIS/Device/ST/STM32C0xx/Include/stm32c031xx.h"
 808              		.file 4 "/Users/killzyy/Library/Application Support/Code/User/globalStorage/bmd.stm32-for-vscode/@
 809              		.file 5 "/Users/killzyy/Library/Application Support/Code/User/globalStorage/bmd.stm32-for-vscode/@
 810              		.file 6 "Drivers/CMSIS/Device/ST/STM32C0xx/Include/stm32c0xx.h"
 811              		.file 7 "/Users/killzyy/Library/Application Support/Code/User/globalStorage/bmd.stm32-for-vscode/@
 812              		.file 8 "Drivers/STM32C0xx_HAL_Driver/Inc/stm32c0xx_hal_def.h"
 813              		.file 9 "Drivers/STM32C0xx_HAL_Driver/Inc/stm32c0xx_hal_rcc.h"
 814              		.file 10 "Drivers/STM32C0xx_HAL_Driver/Inc/stm32c0xx_hal_gpio.h"
 815              		.file 11 "Drivers/STM32C0xx_HAL_Driver/Inc/stm32c0xx_hal_dma.h"
 816              		.file 12 "Drivers/STM32C0xx_HAL_Driver/Inc/stm32c0xx_hal_adc.h"
 817              		.file 13 "Drivers/STM32C0xx_HAL_Driver/Inc/stm32c0xx_hal_uart.h"
 818              		.file 14 "Drivers/BSP/STM32C0xx_Nucleo/stm32c0xx_nucleo.h"
 819              		.file 15 "Drivers/STM32C0xx_HAL_Driver/Inc/stm32c0xx_hal_cortex.h"
 820              		.file 16 "Drivers/STM32C0xx_HAL_Driver/Inc/stm32c0xx_hal.h"
 821              		.file 17 "/Users/killzyy/Library/Application Support/Code/User/globalStorage/bmd.stm32-for-vscode/
 822              		.file 18 "<built-in>"
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//cc73F41E.s 			page 41


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//cc73F41E.s:19     .text.MX_GPIO_Init:00000000 $t
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//cc73F41E.s:24     .text.MX_GPIO_Init:00000000 MX_GPIO_Init
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//cc73F41E.s:124    .text.MX_GPIO_Init:00000068 $d
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//cc73F41E.s:130    .text.MX_DMA_Init:00000000 $t
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//cc73F41E.s:135    .text.MX_DMA_Init:00000000 MX_DMA_Init
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//cc73F41E.s:190    .text.MX_DMA_Init:0000003c $d
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//cc73F41E.s:195    .text.DMATransferComplete:00000000 $t
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//cc73F41E.s:201    .text.DMATransferComplete:00000000 DMATransferComplete
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//cc73F41E.s:237    .text.DMATransferComplete:0000001c $d
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//cc73F41E.s:789    .bss.huart2:00000000 huart2
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//cc73F41E.s:242    .text.HAL_ADC_ConvHalfCpltCallback:00000000 $t
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//cc73F41E.s:248    .text.HAL_ADC_ConvHalfCpltCallback:00000000 HAL_ADC_ConvHalfCpltCallback
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//cc73F41E.s:276    .text.HAL_ADC_ConvCpltCallback:00000000 $t
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//cc73F41E.s:282    .text.HAL_ADC_ConvCpltCallback:00000000 HAL_ADC_ConvCpltCallback
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//cc73F41E.s:310    .text.Error_Handler:00000000 $t
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//cc73F41E.s:316    .text.Error_Handler:00000000 Error_Handler
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//cc73F41E.s:348    .text.MX_ADC1_Init:00000000 $t
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//cc73F41E.s:353    .text.MX_ADC1_Init:00000000 MX_ADC1_Init
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//cc73F41E.s:472    .text.MX_ADC1_Init:00000070 $d
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//cc73F41E.s:803    .bss.hadc1:00000000 hadc1
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//cc73F41E.s:479    .text.MX_USART2_UART_Init:00000000 $t
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//cc73F41E.s:484    .text.MX_USART2_UART_Init:00000000 MX_USART2_UART_Init
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//cc73F41E.s:550    .text.MX_USART2_UART_Init:00000034 $d
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//cc73F41E.s:556    .text.SystemClock_Config:00000000 $t
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//cc73F41E.s:562    .text.SystemClock_Config:00000000 SystemClock_Config
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//cc73F41E.s:655    .text.SystemClock_Config:00000064 $d
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//cc73F41E.s:660    .rodata.main.str1.4:00000000 $d
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//cc73F41E.s:664    .text.main:00000000 $t
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//cc73F41E.s:670    .text.main:00000000 main
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//cc73F41E.s:763    .text.main:0000006c $d
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//cc73F41E.s:782    .bss.hdma_usart2_tx:00000000 hdma_usart2_tx
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//cc73F41E.s:775    .bss.adc_buf:00000000 adc_buf
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//cc73F41E.s:772    .bss.adc_buf:00000000 $d
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//cc73F41E.s:779    .bss.hdma_usart2_tx:00000000 $d
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//cc73F41E.s:786    .bss.huart2:00000000 $d
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//cc73F41E.s:796    .bss.hdma_adc1:00000000 hdma_adc1
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//cc73F41E.s:793    .bss.hdma_adc1:00000000 $d
/var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//cc73F41E.s:800    .bss.hadc1:00000000 $d

UNDEFINED SYMBOLS
memset
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
HAL_GPIO_TogglePin
HAL_GPIO_WritePin
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_UART_Init
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
HAL_DMA_RegisterCallback
BSP_LED_Init
BSP_PB_Init
ARM GAS  /var/folders/3q/0p8b__hx1wx8zj8b56q9glhc0000gn/T//cc73F41E.s 			page 42


strlen
HAL_DMA_Start_IT
HAL_Delay
